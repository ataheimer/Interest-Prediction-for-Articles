t explain type error polymorph languag a stronglytyp languag present programm compiletim feedback type correct program error polymorph type check take form unif failur two type find sourc type error code often difficult error may occur far spot inconsist detect function languag use complex type system difficulti interpret locat error increas locat sourc type error programm must unravel long chain deduct type instanti made type reconstruct paper describ approach maintain deduct step type infer reason type instanti approach could use interact system guid programm sourc type error explain compil assign particular type express b introduct one annoy aspect stronglytyp languag parametr polymorph sometim unclear express cannot type mani programm experienc feel incredul sometim aris express reject compil reason compil cannot forthcom typecheck analysi paper describ way type analysi explain programm may led sourc type error particular consid case type reconstruct essenti construct program languag ml program languag ml stronglytyp function languag polymorph interest type system properti type identifi deduc use made popular model type system languag focu languag object studi also implement approach languag use standard ml new jersey inspir paper concern british nation act paper author describ captur legal requir establish british citizenship prolog program requir british citizenship complex use system explain appear acm letter program languag system volum number marchdecemb page step taken reach conclus idea seem appropri deduct made type reconstruct want ask type system arriv particular type express answer question use type analysi led unexpect type express particularli use case type error case type analysi arriv two inconsist type programm may find difficult understand whi all programm assum probabl erron express construct correctli intend type place inconsist found may part program mistak made natur type system wide separ part program affect type express have part program might mistak point view programm inconsist found depend arbitrari order travers syntax tree type analysi interest inform may obtain examin contextu evid approach johnson walz usag minor candid mistak clear often minor isol sinc mani error form one correct usag one incorrect usag also way introduc error minor usag may correct type despit preponder major usag one way error program copi mani locat program use text editor anoth trickier situat would express bound variabl let statement use incorrectli type mani locat one locat caus welltyp correct usag approach take entir differ tri find wrong context instead want abil explain context right wrong two approach might use togeth futur heurist system explain deduct suggest error may found popl paper wand suggest aid programm search sourc type error present list express fragment caus bind type variabl type reconstruct approach call collect applic subexpress unif step type analysi type error detect list applic site issu one caus error improv wand work finer analysi maintain deduct made reconstruct algorithm along locat sourc fragment lead individu bind unif process form explan space travers explain individu deduct step flow inform one part program anoth addit also consid effect milner letstat greatli complic deduct process type reconstruct interest simpl function languag sake concret use mllike syntax syntax languag shown figur besid function definit function applic languag construct pair condit express let express consist practic standard ml nj replac subexpress languag charact space show top part particular express express languag consid meaning type collect describ grammar figur type variabl written a b etc type reconstruct process deduc type express context type checker languag like pascal identifi must explicitli given type check consist usag throughout program type reconstruct algorithm mere check whether declar type combin consist find consist type one identifi initi given type variabl type type variabl stand type and thu repres total unconstrain type typecheck requir constrain type express complet type variabl left unspecifi polymorph type achiev prove theorem prover complet set type rule languag call algorithm typeof modifi version origin algorithm basi explan system function typeof take express type assign substitut input hboolean valuei boolean constant applic definit figur syntax simpl function languag int type integ type boolean valu product figur syntax type produc type substitut typeof postord travers syntax tree enforc type rule construct essenti build proof tree type judgment detail algorithm found elsewher crucial insight design theorem prover lie recogn unif use insur two type same exampl type rule function applic requir domain function type actual argument algorithm find substitut if one exist make two type equal call unif substitut use special proof tree make type conclus instanc origin type thu long two type unifi appropri proof tree found result appropri type syntact ident mani way repres substitut particular one could repres substitut function one could use list pair normal issu great consequ howev purpos modifi unif function keep extra inform must substitut repres list reason effici common list repres substitut ng substitut list represent one special substitut simpli ad atom bind v need updat previou bind purpos crucial valu represent atom bind explain one particular unif otherwis possibl sever unif would contribut valu singl type variabl case one would keep list reason bind like wand would imposs explain instanti type step step approach approach take follow element annot pars tree augment substitut augment type assign explan function use inform inform add syntax tree often type subexpress captur node analyz syntact construct requir individu set inform basic construct integ truthvalu need store extra inform simpl structur condit pair need store type subexpress let statement let b end store type bodi b type e data structur repres function definit fn e store type bodi origin type variabl assign formal paramet origin type variabl start point atom bind account instanti domain function applic must keep two piec inform two type unifi type analysi inform possibl report unif took place applic construct identifi must also keep two piec inform reason case function definit identifi keep type variabl origin assign type assign identifi construct must also keep list type variabl renam renam gener type variabl type identifi gener type variabl introduc let statement implement special effect let statement polymorph type anoth part inform kept substitut data structur use substitut list atom bind type type variabl made unif process analysi function use atom bind trace evolut type origin form final form bind augment pointer annot express tree tag express referenc pointer one respons unif call bound type variabl atom bind tag add inform analysi distinguish two unif call type condit statement one unifi type test express boolean ensur branch condit type typeof call unif pass current locat syntax tree store atom bind result invoc normal run function typeof produc type express typeof recurs travers syntax tree encount type inconsist stop report error occur one call unif modifi typeof decor pars tree recurs travers syntax tree call unif system keep pointer appropri place tree inconsist detect program report problem sinc problem caus type two express fail unifi ask follow sort question twice express e type written function answer question given decor pars tree augment substitut point analysi stop program main purpos explain type rule specif use express interest exampl express fn fn bif b b els a true type ml error detect bodi outermost function plu function appli two argument point type analysi detect domain plu intint match type actual argument error report standard ml nj standard ml new jersey version novemb fn fn bif b b els a true stdin oper operand agre tycon mismatch oper domain int int operand bool int express case programm may find clear oper plu right domain argument operand wrong may clear system think type actual argument boolint henc interest question kind question function answer one anoth explain type rule construct exampl construct list tabl below function applic fn b true function definit fn b condit b b els the actual output explan system exampl shown fulli figur final turn explan type identifi b condit structur identifi alik get type environ variabl b origin assign type b complet answer question b come assign type bool question function answer function differ sort task whi explain flow inform one point program anoth case previou exampl must explain b came bound bool inform substitut know b bound bool meet requir condit test type bool jump node syntax tree point structur inform might ask whi structur explan given follow structur proof tree type judgement built typeof functionse section use type rule fortun structur proof tree correspond close pars tree express explan may requir explain flow inform around express explan break two level function first explain instanti type progress type reconstruct follow trail atom bind substitut secondli atom bind map node annot syntax tree construct node one analysi requir call unif two node languag function applic make one call unif condit express make two function explain circumst requir unif explan circumst structur question import note never leap part syntax tree annot pointer syntax tree place unif call typeof function alway annot node first call unif function recurs annot subtre alreadi complet implement print depthfirst explan everi piec deduct loop detect broken ad hoc manner output shown figur clearli fulllength explan suitabl error messag envis sort programm interact system navig explan space interact may go like thi system explain one step deduct deduct may depend zero one deduct programm may find one deduct dubiou choos investig deduct instanc prior exampl function plu programm probabl satisfi type concentr type actual argument welldesign interfac programm could quickli focu part program contrari programm understand program actual output explan system question explor mark elabor indent type error requir process explan continu structur analysi program follow bind anoth part program next exampl design illustr thi consequ explan may jump back part express alreadi explain explan end potenti infinit explan space appear major shortcom necessari justifi approach would seem explan could unravel primit piec type reconstruct process goe certain finit step reach conclus detect applic domain function unifi type argument true domain function intint argument type boolint whi function identifi part initi environ whi argument true type boolint type pair true determin type element whi first element fn b true type bool type applic rang function function fn b type boolbool whi function fn b type boolbool type function definit determin type infer formal paramet b type function bodi b b els formal paramet b type bool type formal paramet infer use variabl b initi assign type variabl b come bound type bool bind aros analysi b b els sinc express b must type bool type variabl b type type variabl b must stand bool whi express b type bool whi function bodi b b els type bool type condit determin type branch must unifi whi then branch b type bool whi els branch type bool elid whi second element type int integ constant type int figur explan space fn a fn bif b b els a true fn fn b error a if fn c boolii b error if true els b booli b i true bool bool intintint a error int a fn x boolintbool true bool a int x bool fn yx intbool y int x bool figur syntax tree fn fn b if b so keep thencurr substitut point program possibl trace back step one one piec explan would begin at time unif type substitut would use explain specif explan would depend order type analysi programm want know implement type analysi intermedi step analysi explan coher perspect final substitut and fact type error may comprehens global point view all local step perfectli consist chosen explain piec process perspect final substitut consid follow express fn fn b if true els b fn c b c b fn x fn y true a rather long express contain pair pair we tupl simpl languag best comprehend examin syntax tree figur express cannot type explan space figur given figur element pair contribut bind type formal paramet a third bind c bool one assum suspici appropri question ask line figur express introduc type bool understood analysi crucial question ask line x type bool actual system answer question point detect answer question context explain bind type variabl a part analysi omit figur lack space interest part goe like thi whi formal paramet x type bool type formal paramet infer use variabl x initi assign type variabl e how type variabl e come bound type bool bind aros analysi applic fn x true type efe at time analysi type function fn x fn x type argument true determin bool therefor function fn x appli argument true result function return boolean valu thu seen line figur b must function domain bool sinc type b line appli integ type error milner let construct let construct complic explan identifi type get instanti without let identifi initi type variabl assign analysi function definit describ instanti type variabl gather list atom bind affect it let express let b identifi initi assign type variabl type the type e type may contain gener variabl occurr bodi b get initi type renam gener variabl new unus type variabl distinct distinct occurr explain type letbound identifi necessari know type variabl gener variabl bound inform kept syntax tree everi identifi check list see gener instanti appris user name chang proce explain instanti type befor consid follow exampl detect applic a domain function unifi type argument domain function bool argument type int whi function type booli type bound identifi infer use variabl introduc function fn afn b variabl initi assign type variabl a type booli obtain a via follow bind type variabl a bound type b type variabl b bound type cd type variabl c bound type bool type variabl d bound type i how type variabl a come bound type b come bound type cd come bound type bool bind aros analysi applic b type cd at time analysi type function b type argument true determin bool domain function must equal type argument bind aros unif type cd type booli type variabl i introduc stand rang function whi function b type booli elid whi argument true type applic rang function function fn x true type intbool fn x true type intbool type applic rang function function fn xfn yx type boolintbool whi fn xfn yx type boolintbool type function definit determin type infer formal paramet x type function bodi fn yx formal paramet x type bool whi function bodi fn yx type intbool elid how type variabl d come bound type i whi argument type int integ constant type int figur explan space fn afn bif fn cb type let express type bodi whi bodi f f true type intbool type pair f f true determin type element whi first element f type applic rang function function f type intint whi function f type intint identifi f introduc letbind let analysi express fn x x determin type aa stand express initi receiv type renam gener type variabl a new variabl get type bb type intint obtain bb via follow bind type variabl b bound type int how type variabl b come bound type int bind aros analysi applic f type bb at time analysi type function f type argument determin int domain function must equal type argument bind aros unif type bb type intc type variabl c introduc stand rang function whi function f type intint whi argument type int integ constant type int whi express fn x x type aa type function definit determin type infer formal paramet x type function bodi x whi formal paramet x type a type formal paramet x remain unconstrain initi assign type variabl a whi function definit bodi x type a type bound identifi x remain unchang initi assign type variabl a function definit fn x x whi second element f true type bool type applic rang function function f type boolbool whi function f type boolbool figur explan space let ffn xx f f true end express welltyp use welltyp exampl time emphas explan produc use explain type error also use understand type express ask here express type intbool output given figur explan begin statement explain type let construct type bodi case pair f f true explan describ first element type int describ type f must describ gener natur type aa note state gener type variabl a renam b proce explain type bb unifi type intc conclus goal develop approach maintain deduct step type infer order provid programm meaning explan circumst type error approach taken explain reason type reconstruct process relat program mani case lead programm insight necessari repair program also use explain type system find welltyp express use programm unfamiliar polymorph type reconstruct even program error type system find unexpect way deduc type express describ modif tradit type analysi algorithm milner letstyl polymor phism modif store critic part analysi process keep track atom bind compris substitut permit refin explan deduct wand describ two function make use inform explain step infer type express use understand type error understand type obtain particular express chose present explan programm perspect reach point type inconsist detect seem choic made explan understand explan use bind current differ time type analysi fact consist use final bind inconsist could carri part express programm consid error insight kind error made improv explan could guid novic expert programm relev part program easili sever opportun synthes special case higherlevel explan would meaning programm experi navig explan space could improv acknowledg anonym refere aid consider improv paper one particular devot extraordinari effort analyz paper make suggest improv refere also brought attent master thesi topic r standard ml new jersey basic polymorph type check maximumflow approach anomali isol unificationbas increment type infer theori type polymorph definit standard ml element function program british nation act explan base polymorph type check standard ml find sourc type error tr british nation act logic program basic polymorph typecheck definit standard ml element function program find sourc type error maximumflow approach anomali isol unificationbas increment type infer ctr olaf chitil composit explan type algorithm debug type error acm sigplan notic v n octob bruce mcadam repair type error automat trend function program intellect book exet uk oukseh lee kwangkeun yi proof folklor letpolymorph type infer algorithm acm transact program languag system topla v n p juli benjamin s lerner matthew flower dan grossman craig chamber search typeerror messag acm sigplan notic v n june yang jung greg michaelson visualis polymorph type check journal function program v n p januari peter j stuckey martin sulzmann jeremi wazni interact type debug haskel proceed acm sigplan workshop haskel p august uppsala sweden bastiaan heeren jurriaan hage s doaits swierstra script type infer process acm sigplan notic v n p septemb christian haack j b well type error slice implicitli type higherord languag scienc comput program v n p march bonifac hick dave king patrick mcdaniel jifclips develop tool securitytyp languag proceed workshop program languag analysi secur june san diego california usa benjamin lerner dan grossman craig chamber semin search ml typeerror messag proceed workshop ml septemb portland oregon usa thoma ball mayur naik sriram k rajamani symptom caus local error counterexampl trace acm sigplan notic v n p januari yasuhiro ajiro kazunori ueda kima autom error correct system concurr logic program autom softwar engin v n p januari venkatesh choppella christoph t hayn sourcetrack unif inform comput v n p septemb matthia neubauer peter thiemann discrimin sum type locat sourc type error acm sigplan notic v n p septemb