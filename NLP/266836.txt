t resourcesensit profiledirect data flow analysi code optim a instruct schedul employ code motion mean instruct reorder enabl schedul instruct point resourc requir execut avail addit driven profil data schedul take advantag predic specul aggress code motion across condit branch optim algorithm partial dead code elimin pde partial redund elimin pre employ code sink hoist enabl optim howev unlik instruct schedul optim algorithm unawar resourc avail incap exploit profil inform specul predic paper develop data flow algorithm perform optim follow characterist i opportun pre pde enabl hoist sink exploit ii hoist sink code statement driven avail function unit resourc iii predic specul incorpor allow aggress hoist sink iv path profil inform guid predic specul enabl optim b introduct data flow analysi provid us fact program static analyz program algorithm partial dead code elimin pde copyright ieee publish proceed micro decemb research triangl park north carolina person use materi permit howev permiss reprintrepublish materi advertis promot purpos creat new collect work resal redistribut server list reus copyright compon work work must obtain ieee contact manag copyright permiss support part nsf pyi award ccr nsf grant ccr intel corpor hewlett packard partial redund elimin pre solv seri data flow problem carri sink assign hoist express evalu sink assign elimin execut assign comput valu dead ie valu never use hoist express elimin evalu express prior evalu express perform use operand exist algorithm optim suffer follow drawback limit use realist compil environ optim phase preced instruct schedul phase ffl optim algorithm insensit resourc inform thu possibl instruct requir function unit resourc execut move next other code motion benefici sinc instruct schedul separ instruct may undo optim ffl data flow analys use algorithm incap exploit profil inform drive code sink hoist instruct schedul hand use profil inform drive code hoist sink ffl data flow analys incorpor specul predic enabl code hoist sink instruct schedul modern processor architectur exploit specul predic hoist sink paper present solut problem develop data flow analysi techniqu pre pde incorpor resourc avail path profil inform fur thermor formul hoist sink gener incorpor specul base hoist predic enabl sink approach perform code motion pre pde optim code motion restrict situat result code placement point requir function unit resourc avail abl moreov abl perform code motion freeli exist pde pre algorithm specul hoist predic enabl sink final path profil inform use guid specul pred icat particular specul predic appli overal benefit form increas code optim along frequent execut program path greater cost term introduc addit instruct along infrequ execut program path a b c figur resourc sensit code sink exampl figur illustr approach code sink flow graph figur contain statement node partial dead sinc valu x comput statement use along path sink statement node shown figur b complet elimin dead statement note order enabl sink past node necessari predic statement furthermor sink perform path along dead code elimin execut frequent path along addit instruct introduc function unit multipli oper expect busi node idl node resourc sensit sink place statement node shown figur c befor predic statement requir perform sink past node howev sink past perform frequenc path along dead code elimin execut greater sum frequenc path along addit instruct introduc execut solut essenti place statement point requir resourc avail elimin much dead possibl process also perform predic enabl sink whenev use exampl figur illustr approach code hoist flow graph figur contain partial redund evalu express xy node sinc valu x alreadi avail node along path hoist express node shown figur b elimin redund note order enabl hoist node necessari perform specul motion x y furthermor hoist perform path along redund elimin execut frequent path along addit instruct introduc hxi hxi hxi hxi hxi hxi c hxi hxi xy figur resourc sensit code hoist function unit add oper expect busi node idl node resourc sensit hoist place statement node shown figur c befor specul execut statement requir perform hoist node howev hoist past perform frequenc path along redund elimin execut greater frequenc path along addit instruct introduc execut solut place express point requir resourc avail elimin much redund possibl process also perform specul code hoist whenev use remaind paper organ follow section first present extens pde solut develop knoop et al achiev resourc sensit pde pre section present extens resourc sensit pde pre algorithm incorpor path profil inform drive specul predic conclud remark given section resourcesensit code motion optim basic approach use algorithm first perform analysi determin whether resourc requir code statement involv sinkinghoist avail along path origi natingtermin point inform use algorithm pdepr inhibit sink inghoist along path requir resourc free therefor optim opportun exploit permit resourc usag characterist program algorithm present paper assum program repres use flow graph intermedi code statement appear distinct node node introduc along critic edg allow code placement along critic edg first assumpt simplifi discuss data flow equat essenti techniqu work given repr sentat next describ determin whether resourc local free exit entri node local inform propag flow graph determin global resourc avail in format subsequ section present resourc analysi applic acycl graph extens loop straightforward base upon follow observ resourc free loop avail hoistingsink instruct outsid loop sinc instruct never propag outsid loop insid loop function unit resourc fu instruct may issu everi c cycl free node n instruct issu c gamma cycl prior n follow n issu fu definit guarante instruct place n use fu issu block due unavail fu notic definit easili extend consid situat one copi resourc fu avail architectur code sink pde partial dead code elimin perform sink partial dead assign sink partial dead assign migrat program point resourc requir avail time remov path along dead is valu comput use order ensur sink perform guarante placement point sink one resourc requir execut avail first develop resourc anticipat analysi result analysi guid sink subsequ phase perform resourc sensit code sink pde resourc anticipat analysi resourc anticipat data flow analysi determin node past sink assign inhibit lack resourc function unit resourc requir execut assign statement anticipat entri node n path p ns entri termin node flow graph one follow condit true ffl valu variabl defin ns entri dead along path p is resourc need along path sinc assign remov it ffl node b along p requir resourc local free statement sinkabl b is requir resourc avail sink perform resourc anticipat analysi assign s associ follow data flow variabl node pre n given resourc requir anticipat ns exit also anticipat ns entri otherwis particular pre n statement n defin variabl referenc defin use s n variabl defin dead ns entri ie valu variabl ns entri never use variabl dead valu dead n n resourc requir free use move n sink otherwis n resourc requir anticipat ns exitentri otherwis order comput resourc anticipat perform backward data flow analysi confluenc oper shown data flow equat given below resourc use anticipat ns exit anticipat entri successor n resourc anticipat ns entri resourc free use n variabl defin dead ns entri resourc anticipat ns exit preserv n ngammar m xgammar n pressn assign sink assign sink pde framework use next extens framework develop knoop et al pde perform follow step assign sink follow assign elimin first step modifi incorpor resourc anticipat inform second step remain unchang assign sink consist delay analysi follow identif insert point statement move data flow equat delay analysi comput insert point specifi below analysi xgammadli assign delay exitentri node n block n node block sink due data depend otherwis see delay analysi allow sink entri node n requir resourc anticipat ns entri allow sink entri exit n block n assign remov origin posit insert point determin follow assign insert ns entri delay ns entri exit insert ns exit delay ns exit entri ns successor assign delet elimin insert assign fulli dead xgammadli n ngammadli n xgammadli m owis ngammadli m exampl figur illustr algorithm consid sink assign node figur control flow graph result resourc anticipat analysi shown node partial shade indic resourc anticipat node exit entri figur b show outcom delay analysi notic sink assign past node inhibit sinc resourc anticipat s suc cessor insert point comput identifi three insert point exit entri exit point assign dead s entri therefor delet dead assign along path remov along path remov notic final place node resourc local free code hoist pre partial redund elimin perform hoist express evalu hoist partial redund express e migrat e program point resourc requir e avail time remov e evalu path along e comput multipl time make later evalu e along path redund order ensur hoist e perform guarante placement point e hoist one resourc requir es execut free perform resourc avail analysi result use guid hoist subsequ phase perform resourc sensit code hoist pre resourc avail analysi resourc avail data flow analysi determin node hoist statement inhibit lack resourc function unit resourc need execut oper express e avail entri node n path p start node ns entri one follow condit true ffl node b resourc local free along path b node ns entri variabl whose valu use e rede fine condit ensur upon hoist express along path point would found resourc free ffl node b comput e comput variabl whose valu use e redefin condit essenti a c insert point select assign delet p x x a a resourc anticip analysi resourc local free resourc global anticip xab p x xab x b delay analysi p x x xab xab insert point xab delay figur exampl resourcesensit pde impli earlier evalu express exist along path addit use resourc requir hoist along path sinc express hoist elimin along path perform resourc avail analysi express e associ follow data flow variabl node n given resourc requir e avail ns entri also avail ns exit otherwis particular pre e n statement n defin variabl use e use e n statement n evalu express e evalu e avail ns exit is variabl use e redefin n es evalu n requir resourc free use e n e move n hoist otherwis n resourc requir e avail ns entryexit otherwis order comput resourc avail perform forward data flow analysi confluenc oper resourc use express e avail ns entri avail exit predecessor n resourc avail ns exit avail ns entri preserv n express comput n avail ns exit resourc local free n xgammaravl m express hoist express hoist pre framework use next modif code motion framework develop knoop et al pre perform two step downsafeti analysi determin point express evalu hoist earliest analysi locat earliest point express evalu actual place achiev pre step modifi incorpor resourc avail inform modifi equat downsafeti earliest ness analysi given below equat express hoist entryexit node n otherwis express downsaf node long anticipat along path lead node requir resourc avail along path lead node earliest analysi set n includ first downsaf point requir resourc free express evalu exist along path express evalu place earliest downsaf point point identifi boolean predic ngammadsafeearliest e xgammadsafeearliest e a resourc avail analysi resourc local free resourc global avail a b safeti analysi a ab safe earliest point pre transform c earliest analysi a figur exampl resourcesensit pde ngammaerly n usedem xgammaerly m exampl figur illustr al gorithm figur result resourc avail analysi shown sinc resourc avail node downsafeti analysi propag backward shown figur b node downsaf resourc avail node hand node downsaf resourc avail node earliest ness analysi identifi node first node downsaf either resourc express evalu exist node final placement express shown figur c tradit approach would hoist express node node profiledirect resourcesensit code motion optim section show addit opportun pre pde optim exploit enabl aggress code hoist sink ing specul code hoist perform enabl addit opportun pre predic base code sink employ enabl addit opportun pde howev specul hoist predic base sink result greater degre optim along program path result introduct addit instruct along program path word greater degre code optim achiev program path expens introduct addit instruct along program path gener code vliw superscalar architectur specul predic routin exploit gener faster schedul along frequent execut path expens slower schedul along infrequ execut path howev optim framework today unabl exploit principl section show perform pre pde optim use specul predic frequent execut path optim greater degre expens infrequ execut path path profil inform use evalu benefit cost specul predic program path subsequ section describ code hoist sink framework use path profil inform enabl specul predic base hoist sink inhibit hoist sink use resourc avail anticipata biliti inform result optim algorithm aggress tradit algorithm time appropri vliw superscalar environ resourc sensit tradeoff qualiti code frequent execut path infrequ execut path although techniqu describ base upon path profil inform also adapt edg profil sinc estim path profil comput edg profil furthermor present version algorithm appli acycl graph howev extens requir handl loop straightforward found algorithm base upon follow analysi step first resourc avail anticipatabil iti analysi perform next determin cost benefit enabl specul predic variou spilt point merg point flow graph respect benefit estim increas optim program path cost estim increas number instruct along program path select enabl hoist sink program point base upon costbenefit analysi exploit optim opportun tradit algorithm knoop et al exploit inhibit optim opportun result movement code program point resourc requir instruct execut free path profil direct pde mention earlier resourc anticipat analysi describ section remain unchang must perform first next costbenefit analysi incorpor resourc anticipat inform use path profil perform result analysi use enabl predic enabl sink select join point next phase final extens sink framework present section use perform resourcesensit profileguid pde costbenefit analysi consist three step a avail analysi identifi path lead node along statement avail sink ie sink block data depend variou program point b optimiz analysi identifi path origin node along statement optim valu comput live sink requir remov inhibit lack free resourc presenc data depend c costbenefit comput identifi path join point along addit optim achiev addit instruct introduc predic base sink enabl join point sum frequenc respect path provid path profil valu cost benefit obtain set path identifi avail optimiz analysi repres bit vector bit correspond uniqu path entri exit acycl flow graph facilit comput set path node n flow graph associ bit vector onp sn bit correspond uniqu path set node belong path otherwis set step analysi describ next avail analysi data flow equat avail analysi given n one bit variabl path n along avail sink ns entryexit otherwis valu bit vector hold set path along valu n gamma av l ns entryexit forward data flow analysi confluenc oper use comput valu entri point flow graph avail valu set chang statement encount set statement block sink encount equat pre n one bit variabl preserv a is n data anti output flow depend upon a entri node n n set path set null is otherwis path n gamma ap comput union set path along avail exit one ns predecessor ie union p p predecessor n order ensur path pass n consid result intersect onp sn valu x gamma ap n onp sn n contain n gamma ap n n block a onpsn xgammaavl m optimiz analysi n one bit variabl associ ns entryexit path n along dead sink may requir remov dead feasibl ie inhibit lack resourc presenc data depend otherwis valu backward data flow analysi confluenc oper use comput valu order ensur sink feasibl result as avail analysi resourc antici patabl analysi use exampl variabl v comput dead ns exit set true n true dead elimin sink ns exit block data depend v dead among condit also check n true sink allow resourc requir as execut along path v dead free data flow equat one bit variabl variabl v fulli dead ns entryexit is path start n along current valu v use otherwis valu n bit vector hold set path along valu opt ns entryexit entryexit node n n n gamma av l n set onp sn otherwis path x gamma op n comput union set path along partial dead remov entri one ns successor ie union gamma rp p p successor n order ensur path pass n consid result intersect onp sn let v variabl defin s ie onpsn ngammaopt m comput cost enabl predic partial dead statement allow movement merg point n determin identifi path merg point along unoptim program execut optim program predic version execut furthermor resourc anticipat analysi indic along path predic version place resourc need avail sum execut frequenc path indic path profil cost benefit enabl predic partial dead statement allow movement merg point n determin identifi path merg point along unoptim program execut optim program execut furthermor resourc anticipat analysi indic sink requir achiev benefit inhibit lack resourc sum execut frequenc path indic path profil benefit code sink framework result costbenefit analysi incorpor code sink framework predic code statement enabl respect merg point resourc avail benefit predic enabl sink determin greater cost predic enabl sink ing framework extens code sink framework present section data flow equat enabl predic present next predic enabl sink allow join node cost sink less benefit deriv sink addit sink also enabl join node enabl earlier join node ensur benefit sink comput earlier join node fulli realiz epreda m join point delay analysi section modifi incorpor result enabl predic shown below join point predic base sink enabl long assign avail along path as oppos path section allow propag join node ngammadlya n presa n owis ngammadlya n n join consid path contribut cost benefit sink assign x b node past join node flow graph figur a avail analysi determin path initi contain subpath one along statement avail sink join node optimiz analysi determin path end subpath optimiz path end unoptimiz although x b dead along subpath lack resourc inhibit sink necessari elimin dead elimin dead along path x b must sunk past node make fulli dead prevent lack free resourc base upon analysi path benefit sink past node path along cost addit instruct introduc let us assum execut frequenc path benefit greater sum frequenc two path experi addit cost case predic base sink enabl node modifi sink framework allow sink past node result code placement shown figur c path profil direct pre resourc avail analysi describ section remain unchang must perform first next costbenefit analysi incorpor resourc avail inform use path profil perform result analysi use enabl specul base hoist select split point next phase final extens hoist framework present section use perform resourcesensit profileguid pre costbenefit analysi consist three step a anticipat analysi identifi path origin node along express anticipat thu hoist ie hoist block data depend lack resourc need execut express b optimiz analysi identifi path lead node along express optim prior evalu express exist along path valu variabl use express modifi sinc comput expr sion c costbenefit comput identifi path split point along addit optim achiev addit instruct introduc specul base hoist enabl split point sum frequenc respect path provid path profil valu cost benefit obtain due space limit omit detail data flow equat first two step costbenefit analysi comput set path op e n howev principl use comput analog use section cost enabl specul partial redund express e allow movement condit split point n determin identifi path condit along e execut optim program execut unoptim program furthermor resourc avail analysi indic requir resourc avail allow placement e along path sum execut frequenc path indic path profil cost benefit enabl specul partial redund express e allow movement condit split point n determin identifi path condit along redund execut e elimin furthermor hoist requir remov redund execut e path inhibit due lack resourc sum execut frequenc path indic path profil benefit incorpor specul partial redund framework section carri follow result costbenefit analysi incorpor code hoist framework specul express enabl respect condit resourc avail benefit specul enabl hoist determin greater cost specul enabl hoist equat enabl specul quit similar enabl predic modif downsafeti analysi section follow split point specul hoist express enabl long express anticipat along path as oppos path section allow propag split point consid path contribut cost benefit hoist express xy node past split node flow graph figur a anticipatabil iti analysi determin path end subpath one along express xy anticipat hoist split node opti mizabl analysi determin path start subpath optimiz path start unop timiz although x evalu along subpath lack resourc inhibit hoist necessari take advantag evalu elimin redund elimin redund along path x must hoist node make fulli redund prevent lack free resourc base upon analysi path benefit hoist node path along cost addit instruct introduc let us assum execut frequenc path benefit greater sum frequenc two path experi addit cost case specul base hoist enabl node modifi hoist framework allow hoist node result code placement shown figur c cost profil guid optim import compon cost analysi describ preced section depend upon number path consid costbenefit analysi gener number static path program million how ever practic number path need consid costbenefit analysi quit small first path nonzero execut count need consid second path given function consid one time figur characterist path profil spec integ benchmark shown bar graph show function execut path nonzero frequenc found function path moreov function greater path nonzero execut count one approach reduc number consid analysi includ enough path nonzero frequenc path account major execut time program first tabl figur show number function contain path nonzero frequenc chang consid enough path account program execut time see number function requir path increas substanti from number function requir hundr path reduc significantli from second tabl show maximum number path consid among function maximumvalu reduc sharpli from path conisd account less program execut time illustr solut costbenefit analysi describ earlier easili adapt situat subset path nonzero frequenc consid conclud remark paper present strategi pre pde code optim result synergi code placement found optim instruct schedul consid presenc select code placement point addit optim driven code hoist sink also take advantag specul predic till perform instruct schedul final data flow algorithm drive applic specul predic base upon path profil in format allow us tradeoff qualiti code favor frequent execut path cost sacrif code qualiti along infrequ execut path techniqu describ also adapt applic optim elimin partial redund load partial dead store loop extend algorithm consid regist pressur optim number path nonzero execut frequenc number function number number function path total max exe time path figur characterist path profil spec integ benchmark r effici path profil partial dead code elimin use slice transform array dataflow analysi loadstor optim superscalar architec ture use profil inform assist classic code optimiza tion practic adapt global optim algorithm morel renvois vliw compil techniqu superscalar environ trace schedul techniqu global microcod compact code optim side effect instruct schedul path profil guid partial dead code elimin use predi cation path profil guid partial redund elimin use spec ulat region schedul approach detect redistribut paral lelism the superblock effect techniqu vliw superscalar compil highli concurr scalar process hpl playdoh architectur specif version global optim suppress partial redund partial dead code elimin lazi code motion sentinel schedul vliw superscalar pro cessor data flow frequenc analysi critic path reduct scalar processor data flow analysi model check tr highli concurr scalar process region schedul use profil inform assist classic code optim lazi code motion sentinel schedul superblock vliw compil techniqu superscalar environ partial dead code elimin practic adapt global optim algorithm morel renvois critic path reduct scalar program data flow frequenc analysi effici path profil array data flow analysi loadstor optim finegrain architectur partial dead code elimin use slice transform global optim suppress partial redund data flow analysi model check path profil guid partial dead code elimin use predic code optim side effect instruct schedul ctr j adam butt guri sohi dynam deadinstruct detect elimin acm sigop oper system review v n decemb sriraman tallam xiangyu zhang rajiv gupta extend path profil across loop backedg procedur boundari proceed intern symposium code gener optim feedbackdirect runtim optim p march palo alto california max hailperin costoptim code motion acm transact program languag system topla v n p nov youtao zhang rajiv gupta timestamp whole program path represent applic acm sigplan notic v n p may raymond lo fred chow robert kennedi shinm liu peng tu regist promot spars partial redund elimin load store acm sigplan notic v n p may vikki tang joran siu alexand vasilevskiy marcel mitran framework reduc instruct schedul overhead dynam compil proceed confer center advanc studi collabor research octob toronto ontario canada mari lou soffa complet remov redund express acm sigplan notic v n p may john whaley partial method compil use dynam profil inform acm sigplan notic v n p mari lou soffa loadreus analysi design evalu acm sigplan notic v n p may mari lou soffa complet remov redund express acm sigplan notic v n april