t infeas quantifi reliabl lifecrit realtim softwar a work affirm quantif lifecrit softwar reliabl infeas use statist method whether method appli standard softwar faulttoler softwar classic method estim reliabl shown lead exorbit amount test appli lifecrit softwar reliabl growth model examin also shown incap overcom need excess amount test key assumpt softwar fault tolerancesepar program version fail independentlyi shown problemat assumpt cannot justifi experiment ultrareli region subject argument favor suffici strong justifi axiom also implic recent multivers softwar experi support affirm b introduct potenti enhanc flexibl function led ever increas use digit comput system control applic first digit system design perform function analog counterpart howev avail enorm comput power low cost led expand use digit comput current applic introduct mani new applic thu larger complex system design result been promis increas perform minim hardwar cost howev also result softwar system contain error sometim impact softwar bug noth inconveni time softwar bug lead costli downtim impact design flaw softwar system use lifecrit applic industrialpl control aircraft control nuclearreactor control nuclear warhead arm price softwar failur digit comput appli frequent lifecrit function alreadi symptom use insuffici reliabl softwar lifecrit applic appear mani year much research focus quantif softwar reliabl research effort start reliabl growth model earli s recent year emphasi develop method enabl reliabl quantif softwar use lifecrit function emerg common approach offer combin softwar faulttoler statist model paper investig softwar reliabl problem two perspect first explor problem aris test softwar black box ie subject input check output without examin intern structur then examin problem aris softwar treat black box ie intern structur model either case argu associ problem intractablei inevit lead need test beyond practic lifecrit applic valid process must establish system reliabl extrem high histor ultrahigh reliabl requir translat probabl failur order gamma gamma hour mission unfortun probabl creat enorm problem valid conveni use follow name failur rate per hour moder reliabl gamma gamma low reliabl softwar physic fail hardwar doe physic failur as oppos hardwar design occur hardwar wear out break advers affect environment phenomena electromagnet field alpha particl softwar subject problem softwar fault present begin throughout system lifetim extent softwar reliabl meaninglesssoftwar either correct incorrect respect specif nevertheless softwar system embed stochast environ environ subject softwar program sequenc input time input program produc either correct incorrect answer thu system context softwar system produc error stochast manner sequenc error behav like stochast point process paper inher difficulti accur model softwar reliabl explor facilit discuss construct simpl model softwar failur process driver failur process extern system suppli input program function input intern state program produc output softwar perfect intern state would correct output produc would correct howev design flaw program manifest either product erron output corrupt intern state which may affect subsequ output realtim system softwar period schedul ie program repeatedli execut respons input unusu find iter rate cycl per second probabl softwar failur per input constant say p binomi process number failur n n input given binomi distribut wish comput probabl system failur n input system failur occur convert function time transform input per unit time system failur probabl time t p sy t thu cours calcul assum probabl failur per input constant time binomi process accur approxim exponenti distribut sinc p small n larg easili deriv use poisson approxim binomi discret binomi process thu accur model continu exponenti process follow discuss frequent use exponenti process rather binomi process simplifi discuss analyz softwar black box tradit method valid reliabl life test life test set test specimen oper actual oper condit predetermin amount time period failur time record subsequ use reliabl comput intern structur test specimen examin observ whether specimen fail not system design attain probabl failur order gamma gamma hour mission longer life test prohibit impract shown illustr exampl simplic assum time failur distribut exponenti use standard statist method time test estim specifi system reliabl two basic approach test replac test without replac either case one place n item test test finish r failur observ first case devic fail new devic put test place second case fail devic replac tester choos valu n r obtain desir level ff fi error ie probabl reject good system probabl accept bad system respect gener larger r n are smaller statist estim error are expect time test calcul function r n expect time test replac case is r probabl failur per input constant reliabl analysi problem even harder one would estim pt rather p timevari system would requir even test timeinvari one sinc rate must determin function mission time system would place random state correspond specif mission time subject random input would done time point interest within mission time thu reliabl analysi intract system constant p unrealist expect tractabl system nonconst pt previou section exponenti process shown accur approxim discret binomi softwar failur process no replic n expect test durat tabl expect test durat r mean failur time test specimen expect time test nonreplac case is r even without specifi ff fi error good indic test time determin clearli number observ failur r must greater total number test specimen n must greater equal r exampl suppos system probabl failur gamma hour mission mean time failur system assum exponenti distribut tabl show expect test durat system function number test replic n note valu r equal produc shortest test time possibl price extrem larg ff fi error get satisfactori statist signific larger valu r need consequ even test therefor given econom test faulttoler system which expens rare allow n greater lifetest clearli question ultrareli system techniqu statist lifetest discuss detail appendix reliabl growth model softwar design process involv repetit cycl test repair program program subject input fail caus failur determin program repair subject new sequenc input result sequenc program sequenc interfailur time usual measur number input goal construct mathemat techniqu ie model predict reliabl final program p n base observ interfailur data model enabl one estim probabl failur final correct program without subject sequenc input process form predict extrapol studi detail model call reliabl growth model one resist temptat correct program base last failur method equival blackbox test final version one correct final version estim reliabl correct version base reliabl growth model one hope increas effici test process so question would like examin much effici gain use reliabl expect time without replac almost case growth model enough get us ultrareli region unfortun answer gain effici anywher near enough get us ultrareli region point sever author keiller miller write reliabl growth scenario would start faulti softwar execut softwar bug discov softwar modifi correct design flaw repres bug gradual softwar evolv state higher reliabl least two gener reason unreason approach highlyreli safetycrit softwar time requir reliabl grow accept level tend extrem long extrem high level reliabl cannot guarante priori littlewood write clearli reliabl growth techniqu x a survey lead reliabl growth model useless face ultrahigh reliabl requir easi see that even unlik event system achiev reliabl could assur achiev accept time problem allud author seen clearli appli reliabl growth model experiment data data tabl taken experi perform nagel skrivan data tabl obtain program a one six program investig number bug remov failur probabl per input tabl nagel data program version repres success stage program bug remov loglinear growth model postul found fit program analyz report simpl regress data tabl yield slope yintercept of gamma respect line fit log raw data shown figur correl coeffici import note context reliabl growth model failur rate usual report failur rate per input wherea system requir given failur rate per hour probabl failur specifi mission durat eg hour howev equat rearrang form use convert system requir requir failur rate per input kt system requir probabl failur gamma hour mission sampl rate system ie k sec requir failur rate per input p calcul number bug remov figur loglinear fit program failur data follow kt sec secshour hour purpos reliabl growth model estim failur rate program remov last discov bug loglinear growth model plot figur use predict arriv rate next bug theta gamma key question cours long take enough bug remov reliabl growth model predict failur rate per input theta gamma less use loglinear model find place probabl drop theta gamma illustr figur base upon model th bug arriv rate theta gamma less goal thu accord loglinear growth model bug remov model yield accept failur rate long take remov bug growth model predict bug failur rate theta gamma expect number test case observ binomi event probabl theta gamma theta test time real time execut time test case would requir sec thu expect time discov bug alon would theta sec theta year tabl calcul given program refer exampl illustr use reliabl growth model allevi test problem even one assum model appli univers ultrareli region tabl assum perfect fit loglinear model ultrareli region number bug remov figur extrapol predict ultrareli reach program slope yintercept last bug test time theta year tabl test time remov last bug obtain ultrareli low sampl rate system acceler test section feasibl quantifi lowsampl rate system ie system time input long ultrareli region briefli explor also potenti acceler test discuss suppos test rate faster real time let r test time per input sinc test independ trial time appear next bug given geometr distribut thu expect number input next bug appear p expect test time given by use equat becom rkt equat seen low sampl rate system ie system small k requir less test time high sampl rate system assum r remain constant suppos system requir probabl failur gamma hour mission ie p system fast sampl rate eg time requir test input realtim execut time ie expect test time year suppos r remain constant k reduc note usual impli acceler test process execut time per input usual greater slow system fast system sinc r increas k decreas net result equival acceler test process impact decreas k hold r constant seen tabl report expect test time function k thu theoret k expect test minut theta year hour year day year month tabl expect test time function k slow system test quickli ie much faster realtim quantifi ultrareli region howev promis may look first valu k fix given system experiment control it exampl sampl rate digit flight control system order input per second faster littl done slow down thu theoret result noth allevi test problem here furthermor real time system typic develop exploit full capabl comput system consequ although slower system sampl rate less execut time per input usual higher r much greater sec use tabl fact one would expect see r grow proport k thu result tabl optimist also note test process one must also determin whether program answer correct incorrect consequ test time per input often much greater realtim execut time rather shorter conclus one fortun enough slow system exploit acceler test process one obtain ultrareli estim reliabl feasibl amount test time howev system usual classifi realtim system thu scope paper reliabl growth model acceler test let revisit reliabl growth model context slow system quickli test suppos system test slow realtim system sampl rate input per minut then failur rate per input must less gamma gamma order program failur rate gamma hour use regress result seen approxim bug must remov bug failur rate per input thu one could test bug remov remov last bug use reliabl growth model predict failur rate per input theta gamma but long would take remov bug well remov last bug alon would averag requir approxim test case even test process time faster oper time per input ie would requir year test thu see littlewood keiller miller see littl hope use reliabl growth model ultrareli softwar problem restrict program univers tabl repeat calcul rest program refer even optimist program slope yintercept last bug test time year tabl test time remov last bug obtain ultrareli improv rate obviou reliabl growth model impract ultrareli softwar softwar fault toler sinc fault toler success use protect hardwar physic failur seem natur appli strategi softwar bug easi construct reliabl model system design mask physic failur use redund hardwar vote key assumpt enabl design ultrareli system less reliabl compon estim gamma probabl failur separ redund compon fail independ nearli so independ assumpt use hardwar fault toler model mani year redund compon locat separ chassi power separ power suppli electr isol suffici shield environ unreason assum failur independ physic hardwar fault basic strategi softwar faulttoler approach design sever version program specif employ voter kind protect system bug voter accept test ie recoveri block compar ie nversion program version program separ program team sinc version develop separ program team hope redund program fail independ nearli version reliabl estim independ assumpt system reliabl estim could calcul howev unlik hardwar physic failur govern law physic program error product human reason ie actual improp reason question thu becom one reason assum independ base littl practic theoret foundat subject argument offer side question unfortun subject argument multipl version independ compel enough qualifi axiom reason experiment justif independ infeas ultrareli quantif infeas despit softwar fault toler discuss next section model softwar fault toler mani reliabl model faulttoler softwar develop base independ assumpt accept model assumpt must accept section shown independ assumpt enabl quantif ultrareli region quantif faulttoler softwar reliabl unlik without independ assumpt assumpt cannot experiment justifi ultrareli region independ enabl quantif ultrareli follow exampl show independ enabl ultrareli quantif suppos three differ version program control lifecrit system use softwar fault toler scheme let e ik event ith version fail kth execut suppos probabl version fail kth execut p ik discuss section assum failur rate constant sinc version vote system fail unless coincid error ie two version produc erron output respons input probabl two version fail kth execut caus system failur is use addit law probabl written as independ version assum rewritten as often separ program team call independ program team phrase independ program mean thing independ manifest error reason independ usual assum obviou formulaif p estim approxim gamma probabl system failur due two coincid failur approxim theta gamma equat use calcul probabl failur hour mission suppos probabl system fail mission hour calcul use equat number execut program hour small p follow approxim accur follow typic valu execut per second thu ultrareli quantif made but depend critic independ assumpt differ version fail independ equat must use comput failur probabl calcul meaningless fact probabl failur could anywher gamma ie pkt ultrareli quantif infeas without independ consid impact abl assum independ follow argument adapt miller simplifi notat last subscript drop refer kth execut onli thu use ident p rewritten as rewrit formula reveal two compon system failur probabl first line equat last line equat multipl version manifest error independ last four line ie second compon equal zero cons quentli establish independ experiment term must shown realist establish adequ independ term must shown neglig effect probabl system failur thu first compon repres noncorrel contribut p sy second compon repres correl contribut p sy note term first compon p sy product individu version probabl pkt firstord approxim probabl system fail whenev one version fail cannot assum independ back origin equat sinc p clearli p sy word order p sy ultrareli region interact term ie p must also ultrareli region establish system ultrareli valid must either demonstr term small establish p sy small mean from could indirectli deduc term small thu back origin lifetest problem again discuss tempt conclud necessari demonstr interact term small order establish p sy small howev legitim argument although interact term alway small p sy small one cannot argu way establish p sy small show interact term small howev likelihood establish p sy small without directli establish interact term small appear extrem remot follow observ without assumpt littl done equat seem inescap matter manipul term linearli unless form found term elimin altogeth appear nonlinear form becom neglig eg multipli paramet need estim directli remain furthermor inform contain term must appear somewher depend p sy formul interact cannot elimin although possibl method may discov valid softwar faulttoler remain prudent recogn opportun lie lie realm control experiment hope reformul equat discov enabl estim p sy set paramet estim use moder amount test efficaci reformul could assess analyt experiment danger extrapol ultrareli region see danger extrapol feasibl amount test differ version independ consid possibl scenario coincid failur process suppos probabl failur singl version hour interv gamma version fail independ probabl coincid error order gamma howev suppos actual arriv rate coincid error gamma hour one could test year like see coincid error experi would tempt conclud differ version independ all test system year seen even one coincid error make independ assumpt system reliabl actual system reliabl approxim failur rate singl version gamma hour arriv rate coincid error test one year would like result coincid error erron assumpt independ would allow assign theta gamma probabl failur system realiti system better gamma conclus independ cannot assum seem inescap intersect event must directli measur shown abov occur system failur formula product alon thu must less gamma per input order system probabl failur less gamma hour unfortun test level infeas extrapol feasibl amount test danger sinc ultrareli establish requir mani system great incent creat model enabl estim ultrareli region thu mani exampl softwar reliabl model oper ultrareli system given ramif independ faulttoler softwar reliabl quantif unjustifi assumpt must overlook feasibl gener model coincid error given limit impos nonindepend one possibl approach ultrareli quantif problem develop gener faulttoler softwar reliabl model account coincid error two possibl exist model includ term cannot measur within feasibl amount time model includ paramet measur within feasibl amount time possibl construct elabor probabl model fall first class unfortun sinc depend upon unmeasur paramet useless quantif ultrareli second case realist approach independ model exampl second case model belong second case must explicitli implicitli express interact term equat known function paramet measur feasibl amount time known function f independ model zero function ie interact term p zero ident irrespect measur paramet gener model must provid mechan make interact term neglig small order produc number ultrareli region known function must applic case multivers softwar model intend clearli estim base model would strongli depend upon correct knowledg function function determin littl hope deriv fundament law sinc error process occur human mind possibl deriv experiment experiment deriv function appropri low moder reliabl softwar therefor correct function ultrareli region establish experiment justifi correct known function requir far test quantifi reliabl singl ultrareli system model must shown applic specifi sampl space multivers program thu must extens sampl space multivers program must undergo lifetest year order demonstr univers applic function thu either case situat appear hopelessth develop credibl coincid error model use estim system reliabl within feasibl amount time possibl first case includ complet model propos past coincidenterror experi experi perform sever research investig coincid error process first perhap famou experi perform knight leveson experi version program produc subject input case observ averag failur rate per input major conclus experi independ model reject confid level quantiti coincid error much greater predict independ model experi produc research confirm knightleveson conclus excel discuss experiment result given debat occur credibl experi rather describ detail debat would prefer make gener observ scope limit experi first nversion system use experi must reliabl low moder reliabl region otherwis data would obtain would relev independ question suffici to get data individu version reliabl region coincid error rate must observ reliabl vote output must low moder reliabl region see consid follow suppos version system replic failur rate independ coincid error rate theta gamma hour version moder reliabl region system potenti ie independ ultrareli region order test independ coincid error must observ experi perform one year coincid error observ one confid coincid error rate and consequ system failur rate less coincid error observ coincid error rate probabl even higher coincid error rate actual gamma hour independ assumpt invalid one would test year order reason chanc observ them thu futur experi one follow result depend actual reliabl test specimen demonstr independ assumpt hold low reliabl system demonstr independ assumpt hold system low reliabl system coincid error seen test time insuffici demonstr independ potenti ultrareli system system test low reliabl system independ assumpt may contradict vindic either way result appli ultrareli system except way extrapol system test actual ultrareli third conclus would result thu experi reveal problem model independ model inaccuraci sever manifest low moder reliabl re gion howev softwar reliabl experi demonstr interact model inaccur never model accur ultrareli softwar thu neg result possibl never posit result experi perform knight leveson other use alert world formerli unnot critic assumpt howev import realiz is unless one will carri smithsonian experi ie one requir centuri complet experi cannot accomplish realli needednam establish scientif rigor particular design ultrareli particular design methodolog produc ultrareli system leav us terribl bind want use digit processor lifecrit applic feasibl way establish meet ultrareli requir must either chang reliabl requir level low moder reliabl region give notion experiment quantif neither option appeal conclus recent year comput system introduc lifecrit situat previous caution preclud use despit alarm incid disast alreadi occur increas frequenc industri unit state abroad continu expand use digit comput monitor control complex realtim physic process mechan devic potenti perform advantag use comput analog predecessor creat atmospher seriou safeti concern digit hardwar softwar adequ address although faulttoler research discov effect techniqu protect system physic compon failur practic method prevent design error found without major chang design verif method use lifecrit system major disast almost certain occur increas frequenc sinc lifetest ultrareli softwar infeas ie quantifi gamma hour failur rate requir hour test reliabl model faulttoler softwar develop ultrareliablesystem estim obtain key assumpt enabl ultrareli predict hardwar failur electr isol processor fail independ assumpt reason hardwar compon failur provabl testabl assumpt reason softwar hardwar design flaw furthermor model tri includ level nonindepend interact multipl version justifi experiment would take hour test make sure coincid error two version appear rare frequent enough degrad system reliabl signific conclus drawn observ paper sinc digit comput inevit use lifecrit applic necessari credibl method develop gener reliabl softwar nevertheless constitut credibl method must care reconsid pervas view softwar valid must accomplish probabilist statist method shortcom pitfal view expound paper base intuit merit like softwar fault toler use lifecrit applic nevertheless abil approach gener ultrareli softwar cannot demonstr research experi question whether softwar fault toler effect design methodolog formal verif vice versa answer low moder reliabl system ultrareli applic choic softwar fault toler formal verif must necessarili base either extrapol nonexperiment reason similarli experi design compar accuraci differ type softwar reliabl model accomplish low moder reliabl region littl reason believ model accur moder region accur ultrareli region possibl model inferior model moder region superior ultrareli regionagain cannot demonstr appendix section statist life test briefli review detail present found standard statist text book mannschafersingpurwalla section present statist test base maximum likelihood ratio produc use refer extens mathemat relationship number test specimen specimen reliabl expect time test explor number test specimen observ number specimen failur order failur time hypothesi test construct test reliabl system altern null hypothesi cover case system ultrareli altern cover case system fail meet reliabl requir ff error probabl reject null hypothesi true ie produc risk fi error probabl accept null hypothesi fals ie consum risk two basic experiment test replac test without replac either case one place n item test test finish r failur observ first case devic fail new devic put test place second case fail devic replac tester choos valu n r obtain desir level ff fi error gener larger r n are smaller statist test error are necessari assum distribut timetofailur test specimen simplic assum distribut exponenti test reduc test exponenti mean use transform gammalnrt expect time test calcul function r n expect time test replac case is r mean time failur test specimen expect time test nonreplac case is r order calcul ff fi error specif valu altern mean must select thu hypothesi test becom maximum likelihood ratio test test provid best critic region given ff error failur time follow weibul distribut known shape paramet data transform variabl exponenti distribut test appli reason altern hypothesi reliabl hour test statist r given r nonreplac case replac case critic valu c for null hypothesi reject determin function ff r rffwhere ff ff percentil chisquar distribut degre freedom given choic r ff valu best critic region determin formula fi error calcul rgammafineith equat solv r determin howev follow formula deriv them given desir ff fi error one choos smallest r satisfi equat exampl suppos wish test smallest r satisfi equat use chisquar tabl thu critic region experiment choos valu n greater r larger n is shorter expect time test is replac case expect time test no replic n expect test durat hour hour even test specimen expect test time year exampl suppos wish test given fi error calcul first critic region chisquar tabl fi error seen greater illustr tabl follow relationship exist ff r fi ff r fi power test drastic chang r clearli r must least reason valu beta error acknowledg author grate dr alan white mani help comment anonym review care review mani help suggest r softwar safeti what whi how a digit matter life death softwar bug matter life liabil method statist analysi reliabl life data evalu compet reliabl predict adapt softwar reliabl model stochast model faultremov comput program hardwar design on use perform softwar reliabl growth model predict softwar reliabl softwar reliabl repetit run experiment model the nversion approach faulttoler softwar faulttoler softwar reliabl model make statist infer softwar reliabl an experiment evalu assumpt independ multivers program an empir comparison softwar faulttoler fault elimin a repli critic knight leveson experi ment tr softwar safeti whi what experiment evalu assumpt independ multivers program evalu compet softwar reliabl predict faulttoler softwar reliabl model softwar bug matter life liabil empir comparison softwar fault toler fault elimin repli critic knight myampersandamp leveson experi ctr pierluigi san pietro angelo morzenti sandro morasca gener execut sequenc modular time critic system ieee transact softwar engin v n p februari sandro morasca angelo morzenti pieluigi sanpietro gener function test case inthelarg timecrit system logicbas specif acm sigsoft softwar engin note v n p may phylli g frankl yuetang deng comparison deliv reliabl branch data flow oper test case studi acm sigsoft softwar engin note v n p sept v winter d kapur g fuehrer formal specif refin safe train control function formal method embed distribut system master complex kluwer academ publish norwel ma dick hamlet subdomain test profil compon acm sigsoft softwar engin note v n p sept new type secur safeti architectur distribut system model implement proceed rd intern confer inform secur novemb shanghai china j h r may a d lunn model code share estim softwar failur demand probabl ieee transact softwar engin v n p septemb terri shepard margaret lamb dian kelli test taught commun acm v n p june john c knight aaron g cass antonio m fernndez kevin g wika test safetycrit applic proceed acm sigsoft intern symposium softwar test analysi p august seattl washington unit state phylli g frankl richard g hamlet bev littlewood lorenzo strigini evalu test method deliv reliabl ieee transact softwar engin v n p august peter amey roderick chapman static verif extrem program acm sigada ada letter vxxiv n p march john c knight comput system depend proceed th intern confer softwar engin may portland oregon elisabeth a strunk xiang yin john c knight echo practic approach formal verif proceed th intern workshop formal method industri critic system p septemb lisbon portug walter j gutjahr optim test distribut softwar failur cost estim ieee transact softwar engin v n p march dick hamlet subdomain test unit system state proceed intern symposium softwar test analysi juli portland main usa phylli frankl dick hamlet bev littlewood lorenzo strigini choos test method deliv reliabl proceed th intern confer softwar engin p may boston massachusett unit state brian mitchel steven j zeil model reliabl growth nonrepres annal softwar engin p john c knight depend embed system proceed th intern confer softwar engin may orlando florida john c knight introduct comput system depend proceed th intern confer softwar engin p may dick hamlet dave mason denis woit theori softwar reliabl base compon proceed rd intern confer softwar engin p may toronto ontario canada brian mitchel steven j zeil reliabl model combin repres direct test proceed th intern confer softwar engin p march berlin germani s morasca a morzenti p san pietro case studi appli tool autom system analysi base modular specif written trio autom softwar engin v n p may dick hamlet random test do proceed st intern workshop random test juli portland main xiang yin echo approach formal verif proceed th intern confer softwar engin may shanghai china dick hamlet continu softwar system acm sigsoft softwar engin note v n juli paul ammann dahlard l luke john c knight appli data redund differenti equat solver annal softwar engin p robyn r lutz softwar engin safeti roadmap proceed confer futur softwar engin p june limerick ireland manuel blum hal wasserman reflect pentium divis bug ieee transact comput v n p april farokh b bastani relat program architectur robust realtim safetycrit processcontrol system annal softwar engin v n p john penix willem visser seungjoon park corina pasareanu eric engstrom aaron larson nichola weining verifi time partit deo schedul kernel formal method system design v n p march jame l caldwel formal method technolog transfer view nasa formal method system design v n p march peter amey roderick chapman industri strength except freedom acm sigada ada letter vxxiii n p march alena griffith prooftest interv safeti function implement softwar proceed eleventh australian workshop safeti critic system softwar p august melbourn australia hal wasserman manuel blum softwar reliabl via runtim resultcheck journal acm jacm v n p nov terri shepard effici set softwar degre program one domain proceed rd intern confer softwar engin p may toronto ontario canada adid jazaa toward better softwar autom acm sigsoft softwar engin note v n p jan