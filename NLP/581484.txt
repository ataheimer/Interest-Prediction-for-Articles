t contract higherord function a assert play import role construct robust softwar use program languag date back s eiffel objectori program languag wholeheartedli adopt assert develop design contract philosophi inde entir objectori commun recogn valu assertionbas contract methodsin contrast languag higherord function support assertionbas contract predic function are gener undecid specifi predic appear meaningless instead function languag commun develop type system static approxim interest predicatesin paper show support higherord function contract theoret wellfound practic viabl manner specif introduc con type lambda calculu assert higherord function calculu model assert monitor system employ drscheme establish basic properti model type sound etc illustr use contract check exampl drscheme code basew believ develop assert system higherord function serv two purpos one hand system strong practic potenti exist type system simpli cannot express mani assert programm would like state hand inspect larg base invari may provid inspir direct practic futur type system research b paper show support higherord function contract theoret wellfound practic viabl man ner specif introduc lcon type lambda calculu assert higherord function calculu model assert monitor system employ drscheme establish basic properti model type sound etc illustr use contract check exampl drscheme code base believ develop assert system higherord function serv two purpos one hand system strong practic potenti exist type system simpli cannot express mani assert programm would like state hand inspect larg base invari may provid inspir direct practic futur type system research categori subject descriptor d d gener term de sign languag reliabl keyword contract higherord func tion behavior specif predic type softwar reliabilitywork partli conduct rice univers houston tx address univers chicago e th street chicago il permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee icfp octob pittsburgh pennsylvania usa dynam enforc pre postcondit contract wide use procedur objectori languag rosenblum shown exampl contract great practic valu improv robust system procedur languag eiffel even develop entir philosophi system design base contract design contract although java support contract one request extens one except higherord languag mostli ignor assertionstyl contract except bigloo scheme programm write firstord typelik constraint procedur constraint use gener effici code compil prove correct turn runtim check compil cannot prove correct firstord procedur contract simpl interpret consid contract written mllike syntax val rec state argument f must int greater f produc int enforc contract contract compil insert code check x proper rang f call fs result proper rang f return x proper rang fs caller blame contractu violat symmetr fs result proper rang blame fall f itself world detect contractu violat assign blame mere mean check appropri predic welldefin point program evalu simpl mechan check contract gener languag higherord function consid contract val rec contract domain state g accept int int function must appli int larger turn function must produc int contract rang oblig g produc int httpdeveloperjavasuncomdeveloperbugparadetoprfeshtml although g may given f whose contract match gs domain contract g also accept function stricter contract val rec gh function without explicit contract gl x function process extern data read val rec read read nth entri file gread num function whose behavior depend context val rec dual purpos l x predic global state els long context properli establish g appli argument clearli algorithm static determin whether proc match contract even possibl dynam check contract g appli even wors enough monitor applic proc occur gs bodi g may pass proc anoth function store global variabl addit higherord function complic blame assign firstord function blame assign directli link pre postcondit violat precondit violat fault caller postcondit violat fault calle higherord world howev promis oblig tangl complex manner mostli due functionvalu argument paper present contract system higherord world key observ contract checker cannot ensur gs argument meet contract g call instead must wait proc appli point ensur proc argument greater similarli proc return ensur proc result rang enforc contract manner ensur contract violat signal soon contract checker establish contract inde violat contract checker provid firstord valu wit contract violat addit wit enabl contract checker properli assign blame contract violat guilti parti next section introduc subtleti assign blame higherord contract violat seri exampl scheme section present lcon type higherord function program languag contract section speci fie mean lcon section provid implement it section contain type sound result prove implement section match calculu section show extend calculu function contract whose rang depend input function section discuss interact contract tail recurs exampl contract begin present seri scheme exampl explain contract written use check them first exampl illustr syntax basic principl contract check section discuss problem contract check higherord world section explain import contract firstclass valu section demonstr contract help callback common use higherord function state world illustr point section also includ exampl drscheme code base contract first look first exampl sqrt function number number definecontract sqrt l l follow tradit design program sqrt function proceed mllike type specif in comment like scheme defin definecontract express consist variabl express initi valu function case addit second subterm definecontract specifi contract variabl contract either simpl predic function contract function contract turn consist pair contract each either predic anoth function contract one domain function one rang function domain portion sqrt contract requir alway receiv nonneg number similarli rang portion contract guarante result nonneg exampl also illustr that gener contract check certain aspect function behavior rather complet semant function contract posit definit arbitrari express evalu contract allow us clarifi contract sqrt defin biggerthanzero predic use definit sqrt contract defin biggerthanzero l x x number number definecontract sqrt biggerthanzero biggerthanzero l contract sqrt strengthen relat sqrt result argument depend function contract constructor allow programm specifi rang contract depend valu function argument constructor similar except rang posit contract simpli contract instead function accept argument origin function return contract modul prefer schemecontract provid addpanel opendialog definecontract addpanel ani l newchild let children send send newchild getpar eq car children newchild l makepanel set makepanel con makepanel makepanel defin makepanel null defin opendialog l let d instanti dialog sp instanti singlepanel parent d children map callmakepanel sp makepanel defin callmakepanel l sp l makepanel makepanel sp figur contract specifi addpanel exampl depend contract sqrt number number definecontract sqrt biggerthanzero l x l and biggerthanzero re ab x re re l contract addit state result sqrt posit also guarante squar result within argument enforc firstord type key check higherord assert contract postpon contract enforc function receiv firstord valu argument produc firstord valu result section demonstr delay necessari discuss ramif delay contract consid toy modul modul delay schemecontract provid save use defin save l x definecontract save biggerthanzero biggerthanzero ani l f set save f use integ integ defin use modul prefer scheme provid addpanel opendialog defin addpanel l makepanel set makepanel con makepanel makepanel defin makepanel null defin opendialog l let d instanti dialog sp instanti singlepanel parent d children map callmakepanel sp makepanel defin callmakepanel l sp l makepanel let newchild makepanel sp children send send newchild getpar unless eq car children newchild contracterror makepanel newchild figur contract manual distribut biggerthanzero biggerthanzero l n save n modul declar consist name modul languag modul written provid declar seri definit modul provid save use variabl save hold function map posit number posit number sinc export modul contract getter use setter save two visibl accessor save function save store new function use invok save function natur imposs save detect valu save alway appli posit number sinc cannot determin everi argument use wors save cannot guarante time save valu appli return posit result thu contract checker delay enforc save contract save argument actual appli return accordingli violat save contract might detect use call gener higherord contract checker must abl track contract evalu point contract establish the call site save discoveri contract violat the return site use potenti much later eval uation assign blame contract checker must also abl report violat discov contract establish toy exampl clearli contriv underli phe nomenon howev common practic exampl consid drscheme prefer panel drscheme plugin add addit panel prefer dialog end plugin regist callback add new panel contain gui control button listbox popup menu etc prefer dialog bool bool defin makec op l x l y op x number number bool defin c makec defin c makec bool defin eqc makec eq defin equalc makec equal bool defin l x t figur abstract predic contract everi gui control need two valu parent callback invok control manipul gui control need addit controlspecif valu label list choic order add new prefer panel extens defin function accept parent panel creat subpanel parent panel fill subpanel control configur extens return subpanel function regist call addpanel time user open drscheme prefer dialog drscheme construct prefer dialog regist function figur show definit addpanel contract box figur contract requir addpanel argument function accept singl argument addit contract guarante result call addpanel argument panel first child parent panel togeth check ensur order panel prefer dialog match order call addpanel bodi addpanel save panel make function list later user open prefer dialog opendialog function call call makepanel function contract check dialog singlepanel class part primit gui librari instanti creat instanc them comparison figur contain check code written higherord contract check box portion figur exclud inner box contract check code code enforc contract comingl code implement prefer dialog comingl two decreas readabl contract callmakepanel sinc client programm need determin portion code concern contract check perform function work addit author prefer modul must find everi callsit higherord function find site gener imposs practic call site often collabor code whose sourc might avail blame contravari assign blame contractu violat world firstclass function complex boundari cooper compon obscur world firstord func tion addit invok compon export function one compon may invok function pass anoth compon appli firstclass function correspond flow valu compon accordingli blame correspond contract violat must lie supplier bad valu matter bad valu pass directli appli export function appli firstclass function firstord function contract check two parti involv contract function caller unlik first order function contract check gener rule appli blame assign rule base number time base contract appear left arrow higherord contract base contract appear even number time function respons establish contract appear odd number time function caller respons evenodd rule captur parti suppli valu correspond standard notion covari even posit contravari odd posit consid abstract exampl introduct again littl detail imagin bodi g call f definecontract g l f f point g invok f greaterthannin portion gs contract fail accord evenodd rule must gs fault fact g suppli bad valu g must blame imagin variat exampl g appli f instead further imagin f return violat result portion gs argument contract and follow evenodd rule fault lie gs caller accordingli contract enforc mechan must track even odd posit contract determin guilti parti contract violat problem assign blame natur appear contract drscheme implement exampl drscheme creat separ thread evalu user program typic extens drscheme need initi threadspecif hidden state user program run accessor mutat state implicitli accept current thread paramet code initi state must run user thread enabl drscheme extens run code user thread drscheme provid primit runonuserthread accept thunk queue thunk run user thread return contract promis argument thunk ap pli current thread user thread definecontract runonuserthread ani l thunk contract higherord function contract one interest aspect precondit function pass run onuserthread covari even posit function contract which accord rule blame assign mean runonuserthread respons establish contractthi state avail user program accessor mutat lexic avail user program modul prefer schemecontract provid addpanel preferencesaddpanel panel panel void definecontract addpanel ani l sp let prechildren copyspin send sp getchildren l newchild let postchildren send sp getchildren and length postchildren add length prechildren andmap eq cdr postchildren prechildren eq car postchildren newchild ani l makepanel set makepanel con makepanel makepanel defin copyspin l map l x x l figur prefer panel contract protect panel therefor runonuserthread contractu promis client function thunk suppli appli user thread thunk initi user thread state firstclass contract experi drscheme shown certain pattern contract recur frequent abstract pattern contract must valu pass function exam ple curri comparis oper common see figur interestingli pattern higherord function contract also common exampl drscheme code manipul mixin valu mixin function accept class return class deriv argument sinc extens drscheme suppli mixin drscheme import verifi mixin result truli deriv input sinc contract common defin drscheme contract librari contract defin mixincontract re arg contract depend contract state input function class result subclass input further common contract mixin guarante base class pass mixin class class implement particular interfac support contract drscheme contract librari provid function construct contract interfac class class contract defin mixincontractintf l interfac l arg l re subclass re arg mixincontractintf function accept interfac argument produc contract similar mixincontract except contract guarante input function class implement given interfac although mixin contract is principl checkabl type system type system current implement ocaml oml rich enough express mixin typecheck fail interest use mixin sinc type system allow subsumpt import class contract exampl express contract lead opportun improv exist type system hope exampl encourag type system design build richer type system support practic mixin callback state contract callback notori caus problem preserv invari ant szyperski show callback import caus problem short code invok callback must guarante certain state modifi dynam extent callback typic invari maintain examin state callback invok compar state callback return consid simpl librari regist invok callback modul callback schemecontract provid registercallback invokecallback definecontract registercallback ani l arg let oldstat save relev state l compar new state old state l c set callback c defin invokecallback l defin callback l void function registercallback accept callback function regist current callback invokecallback function call callback contract registercallback make use depend contract constructor new way contract checker appli depend contract origin function argument function appli therefor rang portion depend contract determin key aspect state save closur result predic predic call result function compar current version state origin version state thu ensur callback wellbehav techniqu use contract drscheme prefer panel whose contract alreadi consid consid revis addpanel contract figur revis morein practic lock variabl often use thi techniqu present adapt lockvari base solut callback problem core syntax n e aop e e rop e ee hde tle mte e e els e true fals str e e contract flatp prede dome rnge blame aa ab type list int bool string contract evalu context val rec x e val rec val rec e val rec e e els e dome rnge prede flatp blame valu figur lcon syntax type evalu context valu ensur new child first child addit guarante origin children prefer panel remain panel order thu prevent extens remov prefer panel contract calculu although contract guarante stronger properti type program execut guarante hold particular program execut contrast type checker weaker guarante hold program execut such contract type play synergist role program develop mainten practic program languag must support both spirit calculu contain type contract show interact figur contain syntax contract calculu program consist seri definit follow singl expr sion definit consist variabl contract express express initi variabl variabl bound val rec singl program must distinct n n l xe v ex v fix xe ex fix xe p contain val rec x true e els e e fals e els e e true true domv v v figur reduct semant lcon definit mutual recurs except contract posit may refer defin variabl appear earlier program express e includ abstract applic variabl fix point number numer primit list list primit express boolean string final express form specifi contract contract e e express construct flat function contract respect flatp express return true argument flat contract fals argument function contract pred dom rng express select field contract blame primit use assign blame definit violat contract abort program first model omit depend contract return later type lcon core ml without polymorph plu type contract express type rule contract given figur first type rule complet program program type record type written first type type definit last type type final express contract flat valu tag contract valu constructor must predic oper appropri type contract function consist two contract one domain contract g g val rec xi string contract g l x list list list list list g list g list g e e els string figur lcon type rule one rang function type rule defini tion ensur type contract match type definit rest type rule standard consid definit sqrt function val rec sqrt contractl xx l n bodi sqrt function elid contract sqrt must contract type sqrt function type further domain rang portion contract predic integ sqrt consum produc integ succinctli predic contract augment sqrt type indic domain rang must posit figur defin convent reduct semant base languag without contract contract monitor explain earlier contract monitor must perform two task first must track higherord function discov contract vio lation second must properli assign blame contract viola tion end must track higherord function program evalu covari contravari portion contract monitor contract add new form express new valu evalu context reduct rule figur contain new express form repres oblig exx e first superscript contract express base express oblig meet last two variabl variabl enabletechn sqrt consum produc number sinc lcon contain integ precis detail sqrt unimport consid restrict form sqrt oper integ contract monitor system assign blame properli first variabl name parti respons valu produc express superscript second variabl name parti respons valu consum implement would add fourth superscript repres sourc locat contract establish superscript would carri along evalu contract violat discov point would report part error messag model definit treat written differ programm thu definit consid separ entiti purpos assign blame implemen tation finegrain blame instead assign coarser construct eg modula modul ml structur functor java packag drscheme blame modul programm write oblig express instead contract extract definit turn oblig enforc thi defin judgment p ok hold oblig express p oblig place refer val recdefin vari abl first part oblig definit contract ex pression first variabl initi name referenc definit second variabl initi name defini tion refer occur or main refer occur last express function defin accompani technic report specifi precis insert oblig express introduct oblig express induc extens set evalu context shown figur specifi valu superscript oblig express determin base valu addit oblig express induc new type rule type rule guarante oblig appropri contract base express oblig express oblig type rule contract oblig evalu context oblig valu oblig reduct figur monitor contract lcon final add class label valu label function oblig see figur although grammar allow valu label function contract type sound theorem coupl type rule oblig express guarante delay valu alway function function wrap addit oblig reduct figur superscript evalu proce like origin evalu except superscript carri instruct result two addit re duction first predic contract reach flat valu predic flat valu check predic hold contract discard evalu continu predic fail execut halt definit name variabl posit posit superscript blame final reduct figur key contract check higherord function the hoc arrow stand higher order contract applic superscript procedur domain rang portion function posit superscript move argument express entir applic thu oblig maintain contract distribut argument result applic oblig move argument posit applic valu produc valu consum exchang role is valu provid function provid argument vice versa accordingli last two superscript oblig express must revers ensur blame properli assign accord evenodd rule exampl consid definit sqrt singl use main express reduct sequenc applic sqrt shown left figur breviti refer variabl defin val rec treat valu even though would actual reduc variabl current valu first reduct exampl oblig distribut applic domain portion superscript contract move argument procedur rang portion move applic second reduct second string string ct l x l p l n flatpct predct x x els errorp els l y wrap r figur contract compil wrap function last reduct exampl flat contract check case predic hold valu if howev predic fail second reduct step main would blame sinc main suppli valu sqrt predic fail second last reduct step sqrt would blame sinc sqrt produc result second exampl recal higherord program introduct translat calculu val rec val rec bet val rec l f f l x definit gt bet mere helper function defin contract and such need contract although calculu allow definit simpl extens add them contract checker would simpli ignor them accordingli variabl g bodi main express refer definit contract thu variabl compil oblig contract oblig gs contract even posit contract met g blame odd posit contract met main blame reduct sequenc if gt bet ma bet gmain els first reduct step oblig g distribut gs argument result applic addit variabl indic blame swap l x s oblig second step substitut l x bodi g result applic l x third step distribut contract l x result applic addit variabl even odd blame switch posit s contract fourth step reduc flat contract test determin contract hold final reduct step assign blame g suppli argument sinc promis suppli number greater val rec sqrt contractl xx l n bodi intent elid sqrt reduct lon contractl xx contractl xx sqrtmain els blamemain els blamesqrt reduct compil express wrap contractl xx sqrt sqrt main l y wrap contractl xx sqrt wrap contractl xx main sqrt sqrt main next step show reduct wrap argument reduct wrap clariti sqrt wrap contractl xx main sqrt sqrt main sqrt if l xx els blamemain sqrt main els blamesqrt figur reduc sqrt lcon wrap exampl show higherord function firstord function treat uniformli calculu higherord function mere requir distribut reduct firstord function fact nest arrow contract express induc distribut reduct correspond applic simplic iti focu sqrt exampl remaind paper contract implement implement lcon must compil away oblig express key compil wrapper function figur wrapper function defin calculu the let express shorthand inlin applic lexpress use clariti accept contract valu test two string string correspond variabl superscript write wrap metavari stand program text figur program variabl compil oblig mere matter replac oblig express applic wrap first argument contract referenc variabl second argument express oblig final two argument string version variabl oblig accordingli defin compil c map program program replac oblig express correspond applic wrap formal definit given accompani technic report function wrap defin casewis one case kind contract first case handl flat contract mere test valu match contract blame posit posit test fail second case wrap deal function con tract build wrapper function test origin function argument result recurs call wrap textual first recurs call wrap correspond postcondit check ing appli rang portion contract result origin applic second recurs call wrap correspond precondit check appli domain portion contract argument wrapper function call wrap posit neg blame posit revers befit domain check function righthand side figur show compil version sqrt program reduc begin one call wrap one oblig express origin program first reduct appli wrap sinc contract case function contract wrap take second case definit return l express next l express appli point function contract distribut sqrt argument result sqrt applic like distribut reduct lcon as shown left side figur next reduct step anoth call wrap argument sqrt contract flat first case definit wrap appli result test test fail els branch would assign blame main suppli bad valu sqrt test pass howev express return next reduct step ip fh l x p ip fh vv vpn ip fw l xe figur evalu function that sqrt return arriv final call wrap befor contract flat predic wrap reduc express time howev test fail sqrt would blame return bad result final reduct test succe result entir program correct definit diverg program p diverg p p p exist p p p although definit diverg refer use reduct relat follow type sound theorem lcon standard theorem type sound lcon program p accord type judgment figur exactli one follow hold x val rec defin variabl p hd tl pred dom rng diverg proof combin preserv progress lemma lcon lemma preserv lcon lemma progress lcon either remaind section formul prove theorem relat evalu program instrument semant section contract compil program section relat two semant introduc new semant show bridg gap them new semant extens semant given figur addit express contain oblig express flat evalu context reduct figur but hoc wrap new valu reduct figur reduct dl x ev vpn wrap dl y l x e yvnpvpn free e definit evalu defin fh transit closur flat hoc defin fw transit flat wrap closur evalu function shown figur defin program p p ok g shorthand notat write program valu equal valu main express program vp equal v lemma evalu partial function proof inspect evalu context prove uniqu decomposit program evalu context instruct unless valu thi follow evalu partial function theorem compil correct proof combin lemma lemma proof sketch proof straightforward examin evalu sequenc e efw reduct appli flat wrap cation wrap correspond directli either reduct otherwis evalu proceed lockstep full proof given accompani technic report lemma proof sketch proof establish simul efh efw simul preserv reduct step relat valu error themselv full proof given accompani technic report depend contract ad depend contract calculu straightforward reduct relat depend function contract natur extend reduct relat normal function contract reduct distribut contract applic dif ferenc instead place rang portion contract oblig applic rang portion function origin argument place oblig figur depend contract express depend contract type rule contract depend contract evalu context depend contract reduct figur depend function contract lcon evalu context given figur dictat oblig superscript reduc valu base express par ticular order evalu mean superscript applic result depend contract reduct figur reduc base express therefor procedur depend contract examin state of world function proper appli order evalu critic callback exampl section tail recurs sinc contract compil describ section check post condit preserv tail recurs procedur postcondit typic determin procedur call tail recurs simpl syntact test presenc higherord contract howev understand exactli call tailcal complex task exampl consid program val rec val l g g f l x x bodi f tail posit respect convent inter preter henc tailcal optim compil optim call g alloc addit stack space but due contract gs result must larger call g cannot optim accord semant contract check even wors sinc function contract function without contract comingl evalu sometim call function tailcal time call function call tailcal instanc imagin argument f local defin recurs function recurs call would tailcal sinc would associ toplevel variabl thu contract would enforc contract effect modul boundari serv programm improv opportun modular rea sone is wellwritten contract programm studi singl modul isol ad function fix defect addit programm chang contract chang contract immedi indic sourc file must changeat minimum compil tailcal becom much difficult sinc experi shown modul boundari typic involv tight loop conjectur lose tail recurs contract check problem practic particular ad contract key interfac drscheme notic effect perform remov tailcal optim entir howev would render drscheme useless present evid conjectur tail re cursion compil preserv tail recurs crossmodul procedur call contract still found problem practic section conclus higherord type program languag implement static type disciplin prevent certain abus languag primit oper exampl program might appli nonfunct add nonnumb invok method nonobject static reject yet languag go further runtim system dynam prevent addit abus languag primit exampl primit array index oper abort receiv bound index divis oper abort receiv zero divi sor togeth two techniqu dramat improv qualiti softwar built languag advent modul languag support type abstract programm empow enforc abstract type level abstract express power languag design use specifi languag primit dynam part invari en forcement howev becom secondclass citizen programm must manual insert dynam check blame assign automat check fail even wors discuss section alway possibl programm insert check manual call site may unavail modul paper present first assertionbas contract checker languag higherord function contract checker enabl programm refin typespecif abstract addit dynam enforc invari illustr complex higherord contract check seri exampl chosen drscheme codebas exampl serv two purpos first illustr subtleti contract check languag higherord function second demonstr current static check techniqu express enough support contract underli drscheme believ experi assert reveal contract biggest impact softwar qualiti hope inform turn help focu typesystem research practic direct acknowledg thank thoma herchenrod michael vanier anonym icfp review comment paper would like send special thank icfp review whose care analysi insight comment paper renew faith confer review process r att bell labratori proper tail recurs space effici design program revis report syntact theori sequenti control state contract higherord function modular objectori program unit mixin plt mzscheme languag manual want when programm reduct semant class mixin languag manual sather javatm languag ture program lan guag manifest type object caml system program specif monograph comput scienc overview anna specif languag ada languag definit standard abstract type existenti techniqu softwar modul specif commun acm extens ml principl program languag practic approach program ieee transact softwar engin bigloo practic scheme compil bee integr develop environ scheme program languag debunk mit artifici intellig laboratori introduct compon softwar ghc team syntact approach type first appear technic report tr tr abstract type existenti type ture program languag eiffel languag revis report syntact theori sequenti control state eiffel manifest type modul separ compil typetheoret approach higherord modul share syntact approach type sound practic approach program assert object ml proper tail recurs space effici modular objectori program unit mixin revisedsupscrptsupscrpt report algorithm languag scheme techniqu softwar modul specif exampl program specif java languag specif definit standard ml compos compil macro programm reduct semant class mixin drscheme debunk myampersandldquoexpens procedur callmyampersandrdquo myth or procedur call implement consid harm or lambda ctr franc perri limin jia david walker express heapshap contract linear logic proceed th intern confer gener program compon engin octob portland oregon usa dana n xu extend static check haskel proceed acm sigplan workshop haskel septemb portland oregon usa philipp meunier robert bruce findler matthia felleisen modular setbas analysi contract acm sigplan notic v n p januari matthia blume david mcallest sound and complet model contract acm sigplan notic v n septemb matthia blume david mcallest sound complet model contract journal function program v n p juli dale vaillancourt rex page matthia felleisen acl drscheme proceed sixth intern workshop acl theorem prover applic august seattl washington tobinhochstadt matthia felleisen interlanguag migrat script program companion st acm sigplan confer objectori program system languag applic octob portland oregon usa kathryn e gray robert bruce findler matthew flatt finegrain interoper mirror contract acm sigplan notic v n octob januari jacob matthew robert bruce findler oper semant multilanguag program acm sigplan notic v n januari nick benton embed interpret journal function program v n p juli