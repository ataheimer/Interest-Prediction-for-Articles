t properti reschedul size invari dynam reschedulingbas vliw crossgener compat a abstractth objectcod compat problem vliw architectur stem static schedul natur dynam reschedul dr techniqu solv compat problem vliw dr reschedul program code page firsttim page fault ie code page access first time execut treat page code unit reschedul make suscept hazard chang page size process reschedul paper show chang page size due insert andor delet nop code further present isa encod call list encod requir explicit encod nop code algorithm perform reschedul acycl code cyclic code present follow discuss properti reschedulings invari rsi satisfi list encod b introduct objectcod compat problem vliw architectur stem static schedul natur compil vliw machin schedul code specif machin model or machin gener precis cyclebycycl execut runtim machin model assumpt given code schedul uniqu semant thu code schedul one vliw guarante execut correctli differ vliw model characterist vliw often cite impedi vliw becom generalpurpos comput paradigm exampl illustr shown figur figur show exampl vliw schedul machin model two ialu one load unit one multipli unit one store unit execut latenc unit indic let machin gener known gener x figur show nextgener gener multipli load cycl latenc cycl latenc ialu ialu mul gr r r cycl latenc cycl latenc cycl latenc figur schedul code vliw gener x latenc chang cycl respect gener x schedul execut correctli machin due flow depend oper b c h e f figur show schedul gener xn machin includ addit multipli latenc fu remain shown figur code schedul new machin execut correctli older machin code move order take advantag addit multipli in particular e f move trivial way adapt schedul older machin case downward incompat gener situat differ gener machin share binari eg via file server compat requir either mechan adjust schedul differ set binari gener one way avoid compat problem would maintain binari execut custom run new vliw gener would violat copyprotect rule would also increas diskspac usag altern program execut may translat reschedul target machin model achiev compat done hardwar softwar hardwar approach add superscalarstyl runtim schedul hardwar vliw principl disadvantag approach add complex hardwar may potenti stretch cycl time machin reschedul hardwar fall critic path softwar approach perform offlin compil schedul program sourc code decor object modul o file code reschedul manner yield better rel speedup techniqu cumbersom use due offlin natur could also impli violat copi protect dynam reschedul dr third altern solv compat problem dynam reschedul program binari compil given vliw gener machin model allow run differ vliw gener firsttim page fault a pagefault occur code page access first time program r readi cycl latenc cycl latenc ialu ialu mul gr r r r readi r readi cycl latenc cycl latenc cycl latenc figur gener incompat due chang function unit latenc shown arrow old latenc shown parenthes oper produc incorrect result new latenc oper b d e r readi cycl latenc cycl latenc ialu ialu mul gr r r r readi cycl latenc cycl latenc cycl latenc mul r readi cycl latenc figur gener xn schedul downward incompat due chang vliw machin organ trivial way translat new schedul older gener execut page fault handler invok modul call reschedul reschedul page host reschedul code page cach special area file system futur use avoid repeat translat sinc dynam reschedul techniqu translat code perpag basi suscept hazard chang pages due process reschedul ing chang machin model across gener warrant addit andor delet nop tofrom page would lead page overflow underflow paper discuss techniqu call list encod isa prove properti reschedulings invari rsi guarante codes chang due dynam reschedul organ paper follow section present terminolog use paper section briefli describ dynam reschedul demonstr problem codes chang exampl section introduc concept reschedulings invari rsi present list encod prove rsi properti list encod section present conclud remark direct futur research terminolog use paper origin rau introduc discuss follow wide instructionword multiop vliw schedul consist sever oper op op multiop issu cycl vliw program latencycogniz mean schedul knowledg function unit latenc architectur run latencycogniz program term nonunit assum latenc nual architectur unit assum latenc ual architectur assum unit latenc function unit superscalar architectur ual wherea vliw nual machin model discuss paper nual two schedul model latencycogniz program equal model lessthanorequ lte model equal model schedul built oper take exactli much specifi execut latenc contrast lte model oper may take less equal specifi latenc gener equal model produc slightli shorter schedul lte model mainli due regist reus possibl equal model howev lte model simplifi implement precis interrupt provid binari compat latenc reduc schedul in backend compil dynam reschedul in pagefault handler present paper follow lte schedul model purpos paper assum program code classifi two broad categori acycl code cyclic code cyclic code consist short inner loop program typic amen softwar pipelin hand acycl code contain rel larg number condit branch typic larg loop bodi make acycl code unamen softwar pipelin instead bodi loop treat piec acycl code surround loop control op exampl cyclic code inner loop like count doloop found scientif code exampl acycl code nonnumer program interact program distinct type code made schedul reschedul algorithm cyclic acycl code differ consider dynam reschedul techniqu treat separ also assum program code structur form superblock hyperblock hyperblock construct ifconvers code use predic support predic execut op also assum superblock hyperblock singl entri point block at begin block may multipl sideexit properti use bypass problem introduc specul code motion dr discuss found elsewher see overview reschedul buffer cach resum execut firsttim page fault context switch figur dynam reschedul sequenc event techniqu dynam reschedul perform translat code page firsttim page fault store translat page subsequ use figur show sequenc event take place dynam reschedul event indic firsttim pagefault pagefault os switch context fetch request page next level memori hierarchi shown shown event respect event standard case everi page fault encount os differ case dr invoc modul call reschedul firsttim page fault reschedul oper newli fetch page reschedul execut correctli host machin shown event event show reschedul page written area file system futur use event execut resum facilit detect vliw gener mismatch firsttim page fault program binari hold generationid header machin model binari origin schedul boundari identifi piec cyclic code program also store program binari inform made avail reschedul perform reschedul page reschedul code remain main memori displac as page memori time written special area file system call text swap subsequ access page lifetim program fulfil text swap text swap may alloc perexecut basi compil time alloc os systemwid global area share activ process overhead reschedul quantit express term follow factor time spent firsttim pagefault reschedul page time spent write reschedul page text swap area and amount disk space use store translat page discuss overhead introduc dr investig tradeoff involv design textswap use reduc overhead beyond scope paper see detail insert delet nop compil schedul code vliw independ op start execut machin cycl group togeth form singl multiop op multiop bound execut specif function unit often howev compil cannot find enough op keep fu busi given cycl empti slot multiop fill nop machin cycl compil cannot schedul even singl op execut nop schedul fu cycl instruct call empti multiop logic reschedul dr thought perform follow step gener new code matter type code first break multiop individu op creat order set op second discard nop set order set op thu obtain ual schedul third step depend upon resourc constraint data depend constraint rearrang op ual schedul creat new nual schedul fourth last step new nop empti multiop insert requir preserv semant comput note number nop empti multiop newli insert may old code may lead problem size code may chang due reschedul import note time chang codes ani due nop empti multiop exampl chang codes illustr figur left portion figur old code shown assum execut latenc op a d e f g h cycl each op b cycl load op c cycl further op e f depend result op c henc begin execut op c finish execut newer gener architectur shown right one ialu remov machin increas latenc load to cycl old code execut newer gener dr invok reschedul gener new code shown account new longer latenc load unit insert term new code old code necessarili mean code input reschedul belong older machin gener similar counterpart old code use mean code input reschedul new code mean code output reschedul ialu ialu fpadd fpmul load store cmpp br nop nop nop nop nop nop nop nop g nop nop nop nop nop nop h nop load latenc increas one less ialu f depend c c take cycl byte total fpadd fpmul load store cmpp br ialu nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop f nop nop nop nop nop nop nop g nop nop nop nop nop h nop byte total extra nop figur exampl illustr insertiondelet nop empti multiop due dynam reschedul empti multiop third cycl also old multiop consist oper e f broken two consecut multiop due reduct number ialu observ new code bigger old code assum op bit each net increas size code byte correspond extra nop insert reschedul page size comput system oper usual dictat hardwar os both nontrivi os handl chang page size run time previou work done area talluri hill attempt support multipl page size pages integr multipl base pages enhanc vm hardwar the translationlookasid buffer tlb enhanc vm manag polici must avail support propos techniqu possibl help extra hardwar multipl code page size use handl variat pages due dr would lead multitud problem first problem ineffici memori usag new page creat accommod spillov gener reschedul remaind new page remain unus hand code page shrink due dr lead hole memori second problem aris due control restructur new page insert must place end code address space last multiop origin page must modifi jump new page last multiop new page must modifi jump page lie origin page now code posit optim perform old code order optim icach access process could violat order potenti lead perform degrad perhap seriou problem code movement within old page new page could alter branch target address merg point old code lead incorrect code may even possibl repair code code jump alter branch target may visibl reschedul reschedul time one solut avoid problem codes chang use special isa encod hide nop empti multiop code sinc codes chang dr due additiondelet nop encod circumv problem encod call list encod abil discuss detail section along reschedul algorithm cyclic acycl code reschedul sizeinvari empti multiop object code henc zeronop encod properti list encod use support dr section present formal definit list encod follow introduct concept reschedul sizeinvari rsi also shown listencod schedul code reschedul sizeinvari list encod rsi oper op defin tupl fh p n pred fu type opcod operandsg where h f g bit field call headerbit p n nbit field call paus st pred stage predic discuss section futyp uniqu identifi fu instanc op must execut opcod uniqu identifi task op operand set valid operand defin op op constant width o header op iff valu headerbit field definit vliw multiop vliw multiop defin unord sequenc op fo number hardwar resourc op issu concurr header op definit vliw schedul vliw schedul s defin order sequenc multiop fm discuss list encod order op scheme encod fixedwidth given vliw schedul new multiop begin header op end exactli op next header op multiop fetch hardwar use rule identifi fetch next multiop valu p n field op refer paus use fetch hardwar stop multiop fetch number machin cycl indic p n mechan devis elimin explicit encod empti multiop schedul futyp field indic function unit op execut futyp field allow elimin nop insert compil arbitrari multiop prior execut multiop member op rout appropri function unit base valu futyp field scheme encod compon vliw schedul term list encod sinc size everi op same size given list encod schedul s express term number op it j number multiop s j op j number op given multiop definit vliw gener vliw gener g defin set fr lg r set hardwar resourc g l set execut latenc op oper set g r set consist pair r resourc type n r number instanc r definit vliw gener model complex resourc usag pattern op use instead member set machin resourc r present higherlevel abstract function unit found modern processor abstract lowlevel machin resourc registerfil port operandresult buss requir execut op function unit bundl resourc itself resourc indic manner assum busi period time equal latenc execut op indic appropri member set l definit reschedul sizeinvari rsi vliw schedul said satisfi rsi properti iff sizeof gn version origin schedul prepar execut arbitrari machin gener g n gm re spectiv further schedul said reschedul sizeinvari iff satisfi rsi properti proof list encod rsi present two part first shown acycl code program rsi list encod follow proof cyclic code rsi list encod sinc code assum either acycl cyclic result list encod make rsi follow remaind section algorithm reschedul type code present follow proof themselv reschedul sizeinvari acycl code algorithm reschedul acycl code vliw gener g old gener g new shown algorithm reschedul acycl code assum old new schedul lte schedul see section regist file architectur compil regist usag convent algorithm reschedul acycl code input old old schedul assum n old cycl long old g machin model descript old vliw new g machin model descript new vliw output new new schedul var old length old new length new scoreboardnumb regist flag regist inus old ru n new resourc usag matrix where r repres resourc type g new and n r number instanc resourc type r g new useinfon new number regist mark regist usag new cycl op schedul satisfi data depend constraint cycl op schedul satisfi data depend resourc constraint function ru loopkup o t ffi return earliest cycl later cycl ffi op schedul satisfi data depend resourc constraint ru updat oe o mark resourc use op cycl oe new dest regist o return destin regist op o sourc regist o return list sourc regist op o latest use time oe return latest cycl new regist oe use in recent writer ae return id op modifi regist ae latest old begin multiop old c old c n old begin resourc constraint check op ow old complet cycl c begin new new cycl m new new cycl j ow ru updat t rcffi ow updat scoreboard op old unfinish cycl c begin scoreboarddest regist o r reserv data depend check op r old c begin r t ffi antidepend oe dest regist o r latest use time oe pure depend oe sourc regist o r r t ffi output depend oe dest regist o r r t ffi rsi properti list encod acycl code schedul prove theorem arbitrari list encod schedul acycl code rsi proof proof present use induct number op arbitrari list encod schedul let l arbitrari order sequenc op i occur piec acycl code let f denot direct depend graph op l ie op l node f data controldepend op indic direct arc f let sgn list encod schedul l gener use depend graph f design execut certain vliw gener g n also let gm denot anoth vliw gener target reschedul dr induct basi l op sequenc length case sizeof s gn depend graph singl node trivial case sgn rsi reschedul gener gm number op schedul remain or induct step l p op sequenc length p p assum sgn rsi word consid op sequenc l p length p l p obtain l p ad one op origin program fragment let addit op denot z op z thought borrow origin program correct comput compromis l p order sequenc op op z must either prefix l p suffix it also let tgn denot list encod schedul sequenc l p mean sizeof t gn order prove current theorem must prove tgn rsi sgn rsi addit op z l p may chang structur depend graph f p two way op z add one data depend arc f p op z add data depend arc f p ffl op z add depend case correspond fact op z control andor datadepend one op l p vice versa follow two subcas schedul construct includ op z construct tgn use depend graph f and reschedul tgn tgm case depend introduc op z must honor further resourc constraint must satisfi well done use wellknown list schedul algorithm in first subcas reschedul acycl code algorithm in second sub case appropri nop empti multiop insert schedul algorithm howev schedul tgn tgm list encod empti multiop made implicit use paus field header op previou multiop nop multiop made implicit via futyp field op thu sourc size increas schedul tgn tgm due newli ad op z ffl op z add depend case resourc constraint ani would warrant insert empti multiop argument similar previou case trivial see sourc size increas schedul tgn tgm newli ad op z thu case sizeof t gn equat similarli case sizeof t gm equat induct prove arbitrari list encod schedul acycl code rsi exampl transit code previous shown figur applic algorithm reschedul acycl code shown figur assum origin schedul belong acycl categori observ size origin code on left reschedul code on right nop empti multiop elimin list encod schedul reschedul algorithm mere rearrang op adjust valu h p n paus field within op ensur correct execut g new reschedul sizeinvari cyclic code program spend great deal time execut inner loop henc studi schedul strategi inner loop attract great attent literatur inner loop typic small bodi rel fewer op header bit paus optyp rest op dynam reschedul figur exampl list encod schedul acycl code rsi make hard find ilp within loopbodi softwar pipelin wellunderstood schedul strategi use expos ilp across multipl iter loop two way perform softwar pipelin first one use loop unrol loop bodi unrol fix number time schedul loop bodi schedul via unrol subject reschedul via reschedul acycl code algorithm describ section code expans introduc due unrol howev often unaccept henc second techniqu modulo schedul employ moduloschedul loop littl code expans as prologu epilogu loop make attract paper moduloschedul loop examin rsi properti unrolledandschedul loop cover acycl rsi techniqu present previous first discuss structur moduloschedul loop present follow algorithm reschedul modulo schedul code section end formal treatment show listencod moduloschedul cyclic code rsi concept rau use vehicl discuss section assumpt hardwar support execut modulo schedul loop follow loop datum gener one iter loop consum one success iter an interiter data depend also condit code loop bodi multipl datadepend path execut exist moduloschedul loop nontrivi paper assum three form hardwar support circumv problem first regist renam via rotat regist order handl interiter data depend loop assum second convert control depend within loop bodi data depend support predic see work area execut assum third support sentinel schedul ensur correct handl except specul execut assum also precondit counteddo loop presum perform modulo schedul necessari modulo schedul loopomega gn consist three part prologu gn kernel gn epilogu gn g n machin gener loop schedul prologu initi new iter everi ii cycl ii known initi interv slice ii cycl execut loop call stage last stage first iter execut kernel begin iter variou stage execut point time insid kernel loop execut steadi state so call kernel code branch back itself kernel multipl iter simultan progress differ stage execut singl iter complet end stage branch op use support modulo schedul loop special semant branch updat loop count enablesdis execut iter loop condit becom fals kernel fall epilogu allow complet stage unfinish iter figur show exampl modulo schedul loop identifi prologu kernel epilogu row schedul describ cycl execut box repres set op execut resourc eg function unit one stage height box ii loop stage belong given iter mark uniqu alphabet fa b c d e fg figur also show loop differ form kernelonli ko loop kernelonli loop prologu epilogu loop collaps kernel without chang semant execut loop achiev predic execut distinct stage modulo schedul loop distinct predic call stage predic new stage predic assert loopback branch execut stage predic newli assert predic enabl futur execut kernel loop execut begin stage increment enabl account loop prologu stage enabl loop kernel execut loop steadi state loop condit becom fals predic stage reset thu disabl stage one one account iter epilogu loop modulo schedul loop repres ko form adequ hardwar predic execut softwar a modulo schedul predic stage loop support assum discuss ko loop schedul found moduloschedul loop repres ko form ko form thu potenti encod modulo schedul class loop properti use studi dynam reschedul loop shown shortli size modulo schedul loop larger origin size loop modulo schedul explicit prologu kernel epilogu contrast ko loop schedul exactli one copi stage origin loop bodi henc size origin loop bodi provid origin loop complet ifconvert properti ko loop use perform dynam reschedul modulo schedul precondit count doloop size size loop bodi precondit p p p p p f p f f f f f resourc cycl prologu epilogu kernel cycl figur modulo schedul loop left modulo schedul loop with prologu kernel epilogu mark shown schedul shown right collaps kernelonli ko form stage predic use turn execut op given stage tabl show valu stage predic would take loop loop algorithm reschedul ko loop detail step input algorithm modulo schedul ko loop machin model old new gener g old g new briefli algorithm work follow identif predic enabl individu stage perform first order impos them allow deriv order execut stage singl iter order predic may implicit predicateid use given stage increas order predicateid altern order inform could store object file made avail time dr invok without substanti overhead order execut stage loop obtain reconstruct loop origin unschedul form perform time modulo schedul invok arriv new ko schedul new gener algorithm reschedul ko loop input omega old the ko kernelonli modulo schedul that number stage old g machin model descript old vliw new g machin model descript new vliw output schedul g new var old tabl n old bucket hold op uniqu stage rel order op bucket retain function findstagepr o return stage predic op enabl disabl put op bucket b p orderbucket b func sort tabl bucket b accord order function func stagepredord describ static impos order stage predic begin unscrambl old modulo schedul multiop omega old op begin findstagepr o order bucket orderbucket b stagepredord perform modulo schedul perform modulo schedul sort tabl bucket b use algorithm describ rau gener ko scheduleomega new rsi natur list encod modulo schedul ko loop prove theorem arbitrari list encod kernelonli modulo schedul loop rsi proof let l arbitrari order sequenc op i repres loop bodi let f denot direct depend graph op l ie op l node f data controldepend op indic direct arc f note interiter data depend also indic f letomega gn denot list encod ko modulo schedul gener g n also let gm denot vliw gener reschedul perform induct basi l loop bodi length case depend graph singl node trivial case thatomega gn rsi reschedul gener gm number op schedul remain or note loop degener case induct step l p loop bodi length p p assum thatomega gn rsi word consid anoth loop bodi l p length p let p st op denot z also let theta gn denot list encod ko modulo schedul l p mean order prove theorem hand must prove theta gn rsi ifomega gn rsi possibl due op z l p natur graph f p could differ graph f p two way op z data depend one op l p vice versa op z independ op l p case data depend resourc constraint honor modulo schedul algorithm via appropri use nop andor empti multiop within schedul schedul list encod nop empti multiop made implicit via use paus futyp field within op henc word result equat follow that similarli case sizeof theta gm equat induct prove arbitrari list encod ko modulo schedul rsi corollari list encod schedul rsi proof program code divid two categori acycl code cyclic code defin section henc follow theorem theorem list encod schedul rsi conclus paper present highlight solut crossgener compat problem vliw architectur solut call dynam reschedul perform reschedul program code page firsttim page fault assist compil isa os requir dynam reschedul process reschedul ing nop must ad todelet page ensur correct schedul additionsdelet could lead chang page size codes chang hard handl runtim would requir extra support hardwar tlb extens softwar vm manag extens isa encod call list encod encod nop program implicitli present list encod isa fixedwidth op header op first op multiop indic number empti multiop if ani follow it inform elimin need explicitli encod empti multiop schedul optyp field encod op elimin need explicitli encod nop within multiop decod hardwar use inform expand rout op appropri execut resourc properti list encod call reschedulings invari rsi prove acycl cyclic for kernelonli moduloschedul code schedul code rsi iff code size remain constant across dynam reschedul transform studi instruct fetch hardwar icach organ requir support list encod previous studi work present paper extend studi encod techniqu may reschedulings invari nonrsi encod also studi reschedul algorithm oper nonrsi encod conduct topic current investig author r dynam reschedul techniqu object code compat vliw architectur dynam schedul vliw processor hardwar support larg atom unit dynam schedul machin an architectur framework support hetereg neou instructionset architectur a fillunit approach multipl instruct issu an architectur framework migrat cisc higher perform platform the cydra department supercomput hpl playdoh architectur specif version an approach scientif array process architectur design apbfp famili the superblock effect structur vliw superscalar compil effect compil support predic execut use hyperblock convers control depend data depend on predic execut optim vliw compat system employ dynam reschedul a persist rescheduledpag cach lowoverhead objectcod compat vliw architectur tradeoff support two page size virtual memori support multipl page size surpass tlb perform superpag less oper system support a reduc multipipelin machin descript preserv schedul constraint optim machin descript effici use effici instruct schedul use finit state automata some schedul techniqu easili schedul horizont architectur high perform scientif comput effici code gener horizont architec ture compil techniqu architectur support softwar pipelin effect schedul techniqu vliw machin overlap loop support cydra realist schedul compact pipelin architec ture new global softwar pipelin algorithm code gener schema modulo schedul doloop whileloop iter modulo schedul algorithm softwar pipelin loop modulo schedul isomorph control transform softwar pipelin loop condit branch sentinel schedul model compilercontrol specul execut instruct fetch mechan vliw architectur compress encod tr ctr masahiro sowa ben a abderazek tsutomu yoshinaga parallel queue processor architectur base produc order comput model journal supercomput v n p june jun yan wei zhang hybrid multicor architectur boost singlethread perform acm sigarch comput architectur new v n p march