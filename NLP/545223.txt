t larg fast instruct window toler cach miss a instruct window size import design paramet mani modern processor larg instruct window offer potenti advantag expos larg amount instruct level parallel unfortun naiv scale convent window design significantli degrad clock cycl time undermin benefit increas parallelismthi paper present new instruct window design target achiev latenc toler larg window clock cycl time small window key observ instruct depend long latenc oper eg cach miss cannot execut sourc oper complet instruct move convent small issu queue much larger wait instruct buffer wib long latenc oper complet instruct reinsert issu queue paper focu specif load cach miss depend instruct simul reveal that way processor kentri wib entri issu queue achiev speedup convent entri issu queue subset spec cint spec cfp olden benchmark respect b introduct mani today microprocessor achiev high perform combin high clock rate abil dynam process multipl instruct per cycl unfortu nate two import compon perform often odd one anoth exampl small hardwar structur usual requir achiev short clock cycl time larger structur often necessari identifi exploit instruct level parallel ilp particularli import structur issu window examin cycl choos readi instruct execut larger window often expos larger number independ instruct execut outof order unfortun size issu window limit due strict cycl time constraint conflict cycl time dynam exploit parallel exacerb long latenc oper data cach miss even crosschip commun challeng develop microarchitectur permit short cycl time larg instruct window paper introduc new microarchitectur reconcil compet goal short cycl time larg instruct window observ instruct depend long latenc oper cannot execut long latenc oper complet allow us separ instruct execut near futur execut distant futur key design entir chain instruct depend long latenc oper remov issu window place wait instruct buffer wib reinsert long latenc oper complet fur thermor sinc instruct depend chain candid reinsert issu window need implement select logic rather full wakeup select requir convent issu window track true depend as done wakeup logic handl issu window instruct reinsert paper focu toler data cach miss howev believ techniqu could extend oper latenc difficult determin compil time specif goal explor design microarchitectur larg enough effect window toler dram access leverag exist techniqu provid larg regist file assum larg activ list possibl sinc critic path techniqu exist keep activ list activ list refer hardwar unit maintain state inflight instruct often call reorder buffer larg use rel small hardwar structur explor sever aspect wib design includ detect instruct depend long latenc oper insert instruct wib bank vs nonbank organ polici select among elig instruct reinsert issu window total capac way processor compar commit instruct per cycl ipc wibbas design entri issu window entri bank wib twolevel regist file l l convent entri issu window singlelevel regist file regist simul show wib speedup convent design spec cint spec cfp olden speedup signific fraction achiev entri convent issu window even ignor clock cycl time effect remaind paper organ follow section provid background motiv work design present section evalut perform section section discuss relat work section summar work present futur direct background motiv background superscalar processor maxim serial program perform issu multipl instruct per cycl one import aspect system identifi independ instruct execut parallel identifi exploit instruct level parallel ilp today processor employ dynam schedul branch predict specul execut dynam schedul hardwar techniqu identifi issu multipl independ instruct singl cycl hardwar look ahead fetch instruct buffercal windowfrom select instruct issu function unit instruct issu operand avail independ instruct execut outoford result instruct execut outoford commit architectur state program order word although instruct within window execut outoford window entri manag fifo instruct enter depart program order simplifi design assum instruct window examin select execut note possibl separ fifo manag activ list reorder buffer independ instruct identif issu queue describ below re gardless conflict increas window issu queue size expos ilp keep clock cycl time low use small structur histor ical smaller window domin design result higher clock rate unfortun small window quickli fill long latenc oper particular consid long latenc cach miss servic main memori latenc larg time load reach head window data still arriv memori unfortun significantli degrad perform sinc window contain execut instruct instruct load depend chain stall instruct independ load finish wait commit program order way make progress bring new instruct window accomplish use larger window limit studi remaind section evalu effect window size program perform ignor clock cycl time effect goal determin potenti perform improv could achiev larg instruct window begin descript processor model follow short discuss perform variou instruct window size methodolog studi use modifi version simplescalar version b spec cpu olden benchmark suit spec cpu benchmark precompil binari obtain simplescalar develop gener compil flag suggest wwwspecorg olden binari gener alpha compil cc use optim flag o spec benchmark oper refer data set subset olden benchmark use input are emd node ariti mst node perimet kxk imag treeadd level omit sever benchmark either data cach miss ratio ipc unreason low health ammp less base configur processor design loos base alpha microarchitectur use seven stage pipelin includ specul load execut loadstor wait predict model cluster design instead assum singl integ issu queue issu instruct per cycl singl float point issu queue issu instruct per cycl tabl list variou paramet base machin note integ float activ list int reg fp reg loadstor queue load store issu queue float point issu width float point decod width commit width instruct fetch queue function unit integ alu cycl multipli cycl fp adder cycl multipli cycl divid nonpipelin nonpipelin cycl branch predict bimod twolevel adapt combin specul up date cycl penalti direct jump miss btb cycl other storewait tabl entri bit clear everi cycl l data cach inst cach unifi cach kb way memori latenc cycl tlb entri way associ kb page size cycl penalti tabl base configur point regist file larg activ list remaind paper state singl valu activ listregist file size valu appli integ float point regist file simul modifi support specul updat branch histori historybas fixup return addressstack repair pointeranddata fixup mechan also modifi simul warm instruct data cach initi fast forward phase spec benchmark skip first four hundr million instruct execut next one hundr million instruct detail perform sim ulat olden benchmark execut instruct complet approach use throughout paper note result qualit similar use differ instruct execut window vari window size perform simul vari issu queue size the base power issu queue size keep activ list fix entri remain configur activ list regist file issu queue equal size load store queue alway set one half activ list size limit number outstand request unless otherwis state figur show commit instruct per cycl ipc variou window size normal base entri configur new ipc old spec integ float point olden benchmark absolut ipc valu base machin provid section goal examin rel effect larger instruct window simul show initi boost ipc window size increas k three set benchmark except mst effect plateau beyond k entri ipc increas slightli match intuit sinc cycl memori latenc instruct fetch way proce sor larger instruct window beyond k provid minim benefit mani float point benchmark achiev speedup art achiev speedup k window speedup larger window unrol loop mani time allow overlap mani cach miss similar phenomenon occur mst result motiv desir creat larg instruct window challeng architect accomplish without signific impact clock cycl time next section present propos solut larg window design section present techniqu provid larg instruct window maintain advantag small structur critic path begin overview convey intuit behind design follow detail descript particular de sign conclud section discuss variou design issu altern implement overview base microarchitectur instruct issu queue examin potenti execut activ list larger number entri issu queue vs allow complet yet commit instruct releas issu queue entri sinc activ list critic path assum increas size without affect clock cycl time nonetheless face long latenc oper issu queue could fill instruct wait operand stall execut make observ instruct depend long latenc oper cannot execut long latenc oper complet thu need exambzip gcc gzip parser perlbmk vortex vpr averag a spec integerapplu art facerec galgel mgrid swim wupwis averag b spec float pointemd mst perimet treeadd averag c olden figur larg window perform ine wakeupselect logic critic path note observ exploit palacharla et al techniqu examin head issu queue howev goal design remov wait instruct issu queue place wait instruct buffer wib long latenc oper complet instruct move back issu queue execut design instruct remain issu queue short time either execut properli remov due depend long latenc oper paper focu specif instruct depend chain load cach miss howev believ techniqu could extend type long latenc oper figur show pipelin wibbas microarchitectur base twolevel regist file describ later fetch stage includ icach branch predict instruct fetch queue slot stage direct instruct integ float point pipelin base type instruct go regist renam enter issu queue instruct select issu queue either proceed regist read execut memorywriteback stage move wib regist read stage wib instruct wait specif cach miss depend complet occur instruct reinsert issu queue repeat wakeupselect process possibl move back wib depend anoth cach miss remaind section provid detail wib oper organ detect depend instruct import compon design abil identifi instruct depend chain load cach miss achiev leverag exist issu queue wakeupselect logic normal execut wakeupselect logic determin instruct readi execut ie operand avail select subset readi instruct accord issu constraint eg structur hazard age instruct leverag logic add addit signal call wait bitthat indic particular sourc operand ie input regist valu pretend readi signal similar readi bit use synchron true depend differ use indic particular sourc operand avail extend period time instruct consid pretend readi one operand pretend readi operand truli readi pretend readi instruct particip normal issu request truli readi issu instead sent function unit pretend readi instruct place wib issu queue entri subsequ freed issu logic though actual execut note potenti optim scheme would consid instruct pretend readi soon one operand pretend readi would allow instruct move wib earlier thu reduc pressur issu queue resourc implement wait bit physic regist initi set load cach miss depend instruct observ wait bit remov issu queue set wait bit destin regist caus depend instruct remov issu queue set correspond wait bit result queue issu point queue issu integ exec integ exec kb way cach data slot memori reg file reg file integ regist renam instruct wait instruct buffer fetch renam issu regist read execut float cach kb way float renam regist point reg file reg file figur wibbas microarchitectur regist therefor instruct directli indirectli depend load identifi remov issu queue load miss signal alreadi gener alpha sinc load instruct specul assum hit cach allow load depend instruct execut consecut cycl case cach miss alpha depend instruct retain issu queue load complet case instruct move wib instruct might enter issu queue instruct produc operand exit issu queue produc instruct could either execut properli sourc operand avail could wib instruct eventu move wib therefor wait bit must avail wherev convent readi bit avail case regist renam note may possibl steer instruct wib renam stage issu stage plan investig futur work current design implement thi instead instruct enter issu queue move wib necessari wait instruct buffer wib contain instruct directli indirectli depend load cach miss wib must design satisfi sever import criteria first must contain differenti depend instruct individu outstand load second must allow individu instruct depend multipl outstand load final must permit fast squash branch mispredict except occur satisfi requir design wib oper conjunct activ list everi instruct activ list alloc entri wib although may alloc entri wib never depend load miss simplifi squash mispr dict whenev activ list entri ad remov correspond oper perform wib mean wib entri alloc program order link wib entri load miss use bitvector indic wib locat depend specif load instruct move wib appropri bit set bitvector arrang two dimension array column bitvector load cach miss bitvector alloc load miss detect therefor outstand load miss store pointer correspond bitvector note number bitvector bound number outstand load miss howev possibl fewer bitvector outstand miss link instruct specif load augment operand wait bit index bitvector tabl correspond load cach miss instruct depend on case instruct depend multipl outstand load use simpl fix order polici examin sourc operand wait bit store instruct wib first outstand load encount requir propag bitvector index wait bit describ abov possibl store bitvector index physic regist sinc space avail howev requir instruct move wib consum regist port reduc regist pressur assum bitvector index store separ structur wait bit instruct wib reinsert issu queue correspond load miss resolv reinsert share bandwidth in case instruct per cycl newli arriv instruct decod dispatch issu queue dispatch logic modifi give prioriti instruct reinsert wib ensur forward progress note instruct reinsert issu queue complet one load may depend anoth outstand load issu queue logic detect one instruct remain operand unavail abl due load miss way detect first load depend instruct set appropri bit new load bitvector remov issu queue fundament differ wib simpli scale issu queue larger en tri larger queue issu instruct onc operand avail contrast techniqu could move instruct issu queue wib mani time worst case activ instruct depend singl outstand load requir bitvector cover entir activ list number entri wib determin size activ list analysi section indic entri good window size achiev signific speedup therefor initi assum kentri activ list kentri load store queue assum wib entri byte total wib capac kb bitvector also consum great deal storag limit number outstand request support section explor impact limit number bitvector load queue size wib organ assum bank wib organ one instruct extract bank everi two cy cle two cycl includ determin appropri instruct read appropri wib entri fix instruct width wib issu queue set number bank equal twice width therefor sustain reinsert full bandwidth read instruct wib even bank one cycl odd bank next cycl enough instruct elig set bank recal wib entri alloc program order conjunct activ list entri perform alloc use roundrobin across bank interleav individu instruct granular therefor entri bank also alloc releas program or der partit load bitvector accord bank bit map to case k entri wib dispatch width issu queue would bank entri each bank also store local head tail pointer reflect program order instruct within bank figur show intern organ wib read access bank set even odd oper independ select instruct reinsert issu queue examin appropri bit complet load bank creat singl bitvector logic bitvector complet load result bitvector examin select oldest activ instruct program order mani possibl polici select instruct examin simpl polici later paper leav investig sophist polici eg data flow graph order critic path futur work regardless select polici result one bit set directli enabl output correspond wib entri without need encod decod wib index process repeat updat bitvector clear wib entri access complet may includ new elig instruct anoth load miss complet access polici similar select polici implement issu queue logic highlight import differ wib convent issu queue convent issu queue requir wakeup logic broadcast regist specifi entri wib elimin broadcast use complet load bitvector establish candid instruct select issu queue requir regist specifi broadcast maintain true depend contrast wibbas architectur leverag much smaller issu queue task wib select instruct reinsert order possibl enough issu queue entri avail consum instruct extract wib case one bank stall access wait next access two cycl later attempt reinsert instruct avoid potenti livelock access chang start bank alloc avail issu queue slot furthermor bank remain highest prioriti instruct reinsert abl to bank assign lowest prioriti insert instruct instruct rein sert livelock could occur fix prioriti scheme sinc instruct highest prioriti bank could depend instruct lower prioriti bank could produc continu stream instruct move wib issu queue back wib sinc produc instruct yet complet produc instruct never complet sinc lower prioriti bank although scenario seem unlik occur benchmark thu use bit vector wib bank issu queue prioriti even bank head tail bit vector wib bank issu queue queue prioriti odd bank head tail figur wib organ roundrobin prioriti squash wib entri squash instruct requir clear appropri bit bitvector reset bank local tail pointer twodimension bitvector organ simplifi bitvector clear oper sinc appli bit everi bitvector recal column correspond outstand load miss thu clear bit row associ squash instruct regist file consider support mani inflight instruct number renam regist must scale proport sever altern design larg regist file includ multicycl access multilevel multipl bank queuebas design paper use twolevel regist file oper principl similar cach hierarchi simul multibank regist file show similar result detail regist file design perform avail elsewher altern wib design wib organ one sever alterna tive one altern consid larg nonbank multicycl wib although may possibl pipelin wib access would produc fulli pipelin access simul see section indic pipelin may necessari anoth altern consid poolofblock structur implement wib organzi load miss cach obtain free block buffer depend instruct pointer block store load load queue lq use deposit depend instruct wib load complet instruct block reinsert issu queue block contain fix number instruct slot slot hold inform equival issu queue entri import differ approach compar techniqu use instruct store depend chain order block may need link togeth handl load long depend chain complic squash sinc program order associ wib entri although could maintain inform program order list manag load depend chain becom complex time consum squash although bitvector approach requir space simplifi manag poolofblock approach potenti deadlock enough wib entri continu investig techniqu reduc list manag overhead handl deadlock summari wib architectur effect enlarg instruct window remov instruct depend load cach miss issu queue retain wib miss servic achiev thi leverag exist processor issu logic without affect processor cycl time circuit complex wib archi tectur instruct stay issu queue short period time therefor new instruct brought instruct window much rapidli convent architectur fundament differ wib design design simpli scale issu queue scale issu queue significantli complic wakeup logic turn affect processor cycl time howev wib requir simpl form wakeup logic instruct depend chain load miss awaken miss resolv need broadcast instruct monitor result buse evalu section evalu wib architectur begin present overal perform wib design compar convent architectur next explor impact variou design choic wib per formanc includ limit number avail bitvector limit wib capac polici select instruct reinsert issu queue multicycl nonbank wib simul reveal wibbas architectur increas perform term ipc set benchmark averag spec int spec fp olden respect also find limit number outstand load produc similar improv spec int olden bench mark reduc averag improv spec fp wib capac low entri maximum outstand load still produc averag speedup respect benchmark set overal perform begin present overal perform improv ipc rel processor entri issu queue singl cycl access regist henc entri activ list iq figur show speedup ipc new ipc old variou microarchitec ture although present result issu processor overal result qualit similar issu pro cessor wib bar correspond entri issu queue bank wib organ kentri activ list k regist use twolevel regist file regist first level read port write port pipelin second level cycl latenc assum entri issu queue level one regist set clock cycl time wibbas design approxim clock cycl equival base architectur experi number outstand load thu bitvector limit explor paramet below tabl show absolut ipc valu base configur bank wib design along branch direct predict rate l data cach miss rate l unifi cach local miss rate base configur comparison also includ two scale version convent microarchitectur configur use kentri activ list singl cycl access k regi ter one retain entri issu queue iqk benchmark base branch dl ul local wib ipc dir miss miss ipc pred ratio ratio gzip parser perlbmk vortex applu art galgel mgrid wupwis emd mst perimet treeadd tabl benchmark perform statist scale issu queue k entri kiqk configur help isol issu queue activ list provid approxim upper bound expect perform result shown figur make follow observ first wib design produc speedup benchmark averag speedup spec int spec fp olden respect harmon mean ipc shown tabl increas spec int spec fp olden program larg speedup larg issu queue wib design abl captur signific fraction avail speedup howev program k issu queue produc larg speedup wib not mgrid strike exampl wib produc speedup k issu queue yield speedup two phenomenon result wib recycl instruct issu queue consum issu bandwidth k issu queue use instruct readi execut evid track number time instruct insert wib bank implement averag number time instruct insert bzip gcc gzip parser perlbmk vortex vpr averag a spec integ applu art facerec galgel mgrid swim wupwis averag b spec float point emd mst perimet treeadd averag c olden figur wib perform wib four maximum investig insert polici see below reduc valu averag insert count one maximum produc speedup also note sever benchmark increas activ list produc notic speedup case even outperform wib indic issu queue bottleneck benchmark howev overal wib significantli outperform increas activ list due size wib larger regist file also evalu altern use space doubl data cach size base configur kb simul result reveal less improv perform benchmark except vortex show improv kb data cach indicatinginteg fp olden figur perform limit bitvector wib may better use space explor tradeoff later section also perform two sensit studi reduc memori latenc cycl cycl increas unifi l cach mb result match expect shorter memori latenc reduc wib speedup averag spec int spec fp olden benchmark respec tive larger l cach smaller impact speedup achiev wib averag speedup spec int spec fp olden benchmark respect larger cach impact integ benchmark show dramat reduc local l miss ratio from averag cach exploit local program refer stream sometim suffici larg captur program entir work set contrast wib expos parallel toler latenc program larg work set lack local remaind paper present averag result benchmark suit detail result benchmark avail elsewher limit bitvector number bitvector import sinc bitvector must map entir wib area requir becom excess explor effect limit bitvector outstand load simul kentri wib bitvector figur show averag speedup base machin includ bitvector configur abov result show even bitvector wib achiev averag speedup spec int spec fp olden benchmark spec fp program particularli art affect limit bitvector sinc benefit memori level parallel bitvector kb wib achiev speedup three set benchmark respect integ fp olden figur wib capac effect limit wib capac reduc wib area limit number bitvector certainli use optim howev decreas requir area achiev use smaller capac wib section explor perform impact reduc capac wib activ list regist file figur show averag speedup wib size rang bitvector limit result show entri wib achiev averag speedup spec int spec fp olden configur requir kb extra space kb wib entri kb bitvector kb entri regist file roughli area equival doubl cach size kb state abov kb l data cach produc notic speedup benchmark wib better use area wib issu queue instruct select wib design implement specif polici select elig instruct reinsert issu queue current polici choos instruct bank program order sinc bank oper independ altern cycl extract instruct true program order evalu impact instruct select polici use ideal wib singl cycl access time entir structur within design evalu follow instruct select poli cie current bank scheme full program order among elig instruct round robin across complet load load instruct program order instruct oldest complet load program show littl chang perform across select polici mgrid one show signific improv mention abov mgrid show speedup bank wib andinteg fp olden bank cycl cycl figur nonbank wib perform three new polici respect speedup due better schedul actual depend graph howev case schedul wors three program show slowdown compar bank wib oldest load polici bzip parser facerec nonbank multicycl wib access explor benefit bank organ versu multicycl nonbank wib organ figur show averag speedup bank nonbank organ base architectur except differ wib access latenc cycl cycl bar assum nonbank wib instruct extract full program order result show longer wib access delay produc slight reduct perform compar bank scheme indic may abl implement sophist select polici pipelin wib access necessari relat work limit studi similar perform skadron et al result show branch mispredict limit benefit larger instruct window better branch predict better instruct cach behavior synergist effect benefit larger instruct window larger data cach trade overlap effect simul assum larg mb l cach model regist updat unit ruu unifi activ list issu queue renam regist file studi instruct window size examin extens research architectur design support larg instruct window multiscalar trace processor one larg central instruct window distribut smaller window among multipl parallel process element dynam multithread processor deal complex larg window employ hierarchi instruct win dow cluster provid anoth approach collect small window associ function unit use approxim wider deeper instruct window recent research investig issu logic design attemp support larg instruct window without imped improv clock rate michaud exploit observ instruct depend long latenc oper unnecessarili occupi issu queue space long time address problem preschedul instruct base data depend dependencebas issu queue design studi zill et al balasubramonian et al attack problem caus long latenc oper util futur thread use portion issu queue slot physic regist conduct precomputa tion power consumpt becom import consider processor design research also studi low power instruct window design conclus two import compon overal execut time clock cycl time number instruct commit per cycl ipc high clock rate achiev use small instruct window limit ipc reduc abil identifi independ instruct tension larg instruct window short clock cycl time import aspect modern processor design paper present new techniqu achiev latenc toler larg window maintain high clock rate small window design accomplish remov instruct convent issu queue directli indirectli depend long latenc oper instruct place wait instruct buffer wib reinsert issu queue execut long latenc oper com plete move instruct critic path previous occupi issu queue entri util processor look deep program ilp import differ wib scaledup convent issu queue wib implement simplifi form wakeupselect achiev allow instruct depend chain consid reinsert issu window compar full wakeupselect convent issu queue wib requir select logic instruct reinsert simul way processor entri issu queue reveal ad kentri wib produc speedup subset spec cint spec cfp olden benchmark re spectiv also explor sever wib design paramet show alloc chip area wib produc signifcantli higher speedup use area increas level one data cach capac kb kb futur work includ investig potenti execut instruct wib separ execut core either convent core perhap grid processor polici space select instruct area current research final regist file design manag eg virtualphys multibank multicycl prefetch twolevel organ requir investig acknowledg work support part nsf career award mip ccr nsf grant cda eia duke univers donat intel ibm compaq microsoft eric son thank anonym review comment suggest work r clock rate versu ipc end road convent microarchitectur dynam multithread processor power energi reduct via pipelin balanc dynam alloc processor resourc nearbi distant ilp reduc complex regist file dynam superscalar processor scalabl regist renam via quack regist file evalu futur microprocessorsth simplescalar tool set reduc complex issu logic earli experi olden compaq comput corpor issu logic mhz outoford execut microprocessor focus processor polici via criticalpath predict spec cpu measur cpu perform new millennium circuit widewindow superscalar processor alpha microprocessor larg trace processor memori behavior spec benchmark suit character remov branch mi predict improv predict procedur return return addressstack repair mechan branch predict instruct issu logic highperform multiscalar processor power system microarchitectur effici algorithm exploit multipl arithmet unit understand backward slice perform degrad instruct tr instruct issu logic highperform interrupt multipl function unit pipelin comput multiscalar processor complexityeffect superscalar processor trace processor dynam multithread processor improv predict procedur return returnaddressstack repair mechan branch predict instructionwindow size cach size lowcomplex issu logic understand backward slice perform degrad instruct circuit widewindow superscalar processor clock rate versu ipc multiplebank regist file architectur twolevel hierarch regist file organ vliw processor reduc complex issu logic dynam alloc processor resourc nearbi distant ilp focus processor polici via criticalpath predict power energi reduct via pipelin balanc energyeffect issu logic design space evalu grid processor architectur instruct schedul logic reduc complex regist file dynam superscalar processor alpha microprocessor earli experi olden dataflow preschedul larg instruct window outoford processor character remov branch mispredict ctr rama sangireddi regist port complex reduct wideissu processor select instruct execut microprocessor microsystem v n p februari simha sethumadhavan rajagopalan desikan doug burger charl r moor stephen w keckler scalabl hardwar memori disambigu highilp processor ieee micro v n p novemb il park chong liang ooi t n vijaykumar reduc design complex loadstor queue proceed th annual ieeeacm intern symposium microarchitectur p decemb srikanth t srinivasan ravi rajwar haitham akkari amit gandhi michael upton continu flow pipelin achiev resourceeffici latenc toler ieee micro v n p novemb yongxiang liu anahita shayesteh gokhan memik glenn reinman scale issu window lookahead latenc predict proceed th annual intern confer supercomput june juli malo franc edward brekelbaum jeff rupley chri wilkerson bryan black hierarch schedul window proceed th annual acmiee intern symposium microarchitectur novemb istanbul turkey hiroshi sasaki masaaki kondo hiroshi nakamura energyeffici dynam instruct schedul logic instruct group proceed intern symposium low power electron design octob tegernse bavaria germani yongxiang liu anahita shayesteh gokhan memik glenn reinman tornado warn peril select replay multithread processor proceed th annual intern confer supercomput june cambridg massachusett dan ernst andrew hamel todd austin cyclon broadcastfre dynam instruct schedul select replay acm sigarch comput architectur new v n may adrin cristal jo f martnez josep llosa mateo valero case resourceconsci outoford processor toward kiloinstruct inflight processor acm sigarch comput architectur new v n p june ilhyun kim mikko h lipasti macroop schedul relax schedul loop constraint proceed th annual ieeeacm intern symposium microarchitectur p decemb haitham akkari ravi rajwar srikanth t srinivasan checkpoint process recoveri toward scalabl larg instruct window processor proceed th annual ieeeacm intern symposium microarchitectur p decemb e f torr p ibanez v vinal j m llaberia store buffer design firstlevel multibank data cach acm sigarch comput architectur new v n p may jo f martnez jose renau michael c huang milo prvulov josep torrella cherri checkpoint earli resourc recycl outoford microprocessor proceed th annual acmiee intern symposium microarchitectur novemb istanbul turkey adrian cristal oliverio j santana francisco cazorla marco galluzzi tanausu ramirez miquel perica mateo valero kiloinstruct processor overcom memori wall ieee micro v n p may tali moreshet r iri bahar powerawar issu queue design specul instruct proceed th confer design autom june anaheim ca usa tali moreshet r iri bahar effect specul perform issu queue design ieee transact larg scale integr vlsi system v n p octob mikko h lipasti brian r mestan erika gunadi physic regist inlin acm sigarch comput architectur new v n p march amit gandhi haitham akkari ravi rajwar srikanth t srinivasan konrad lai scalabl load store process latenc toler processor acm sigarch comput architectur new v n p may ilhyun kim mikko h lipasti halfpric architectur acm sigarch comput architectur new v n may han vandierendonck philipp manet thibault delavalle igor loisel jeandidi legat bypass outoford execut pipelin increas energyeffici proceed th intern confer comput frontier may ischia itali srikanth t srinivasan ravi rajwar haitham akkari amit gandhi mike upton continu flow pipelin acm sigop oper system review v n decemb huiyang zhou thoma m cont enhanc memori level parallel via recoveryfre valu predict proceed th annual intern confer supercomput june san francisco ca usa yu bai r iri bahar lowpow inorderoutoford issu queue acm transact architectur code optim taco v n p june tanau ramrez alex pajuelo oliverio j santana mateo valero kiloinstruct processor runahead prefetch proceed rd confer comput frontier may ischia itali alex pajuelo antonio gonzlez mateo valero specul execut hide memori latenc acm sigarch comput architectur new v n june lui ceze karin strauss jame tuck josep torrella jose renau cava use checkpointassist valu predict hide l miss acm transact architectur code optim taco v n p june haitham akkari ravi rajwar srikanth t srinivasan analysi resourc effici checkpoint architectur acm transact architectur code optim taco v n p decemb madhavi g valluri lizi k john kathryn s mckinley lowpow lowcomplex instruct issu use compil assist proceed th annual intern confer supercomput june cambridg massachusett huiyang zhou thoma m cont enhanc memorylevel parallel via recoveryfre valu predict ieee transact comput v n p juli ahm s alzawawi vimal k reddi eric rotenberg haitham h akkari transpar control independ tci acm sigarch comput architectur new v n may andrew d hilton amir roth ginger control independ use tag rewrit acm sigarch comput architectur new v n may peter g sasson jeff rupley ii edward brekelbaum gabriel h loh bryan black matrix schedul reload acm sigarch comput architectur new v n may francisco j mesamartnez michael c huang jose renau seed scalabl effici enforc depend proceed th intern confer parallel architectur compil techniqu septemb seattl washington usa simha sethumadhavan rajagopalan desikan doug burger charl r moor stephen w keckler scalabl hardwar memori disambigu high ilp processor proceed th annual ieeeacm intern symposium microarchitectur p decemb albert meixner daniel j sorin unifi microprocessor core storag proceed th intern confer comput frontier may ischia itali monreal victor vinal jose gonzalez antonio gonzalez mateo valero late alloc earli releas physic regist ieee transact comput v n p octob adrin cristal oliverio j santana mateo valero jo f martnez toward kiloinstruct processor acm transact architectur code optim taco v n p decemb joseph j sharkey dmitri v ponomarev kanad ghose oguz ergin instruct pack reduc power delay dynam schedul logic proceed intern symposium low power electron design august san diego ca usa joseph j sharkey dmitri v ponomarev kanad ghose oguz ergin instruct pack toward fast energyeffici instruct schedul acm transact architectur code optim taco v n p june