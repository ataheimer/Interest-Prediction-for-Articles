t replic process alloc load distribut faulttoler multicomput a abstractin paper consid loadbalanc process alloc method faulttoler multicomput system balanc load well fault start degrad perform system order abl toler singl fault process primari process duplic ie backup process backup process execut differ processor primari checkpoint primari process recov process primari process fail paper formal problem loadbalanc process alloc propos new process alloc method analyz perform propos method simul use compar propos method process alloc method take account differ load characterist primari backup process method perform well occurr fault propos method maintain balanc load occurr fault b introduct process alloc faulttoler multicomput system studi sever research nieuwenhui studi transform rule transform alloc nondupl process alloc duplic process transform alloc proven optim term reliabil iti shatz wang propos process alloc algorithm maxim reliabl nonhomogen system bannist trivedi propos process alloc algorithm evenli distribut load system node common assumpt research work duplic process complet replica origin process also execut load origin kind faulttoler process call activ process replica faulttoler comput process model consid paper primarybackup process model commonli use distribut experiment commerci system delta tandem model backup copi process system howev one process pair run activ one time activ process call primari process nonact process call backup or secondari process activ process regularli checkpoint run state backup process normal oper nonact backup process either wait checkpoint messag save receiv checkpoint me sage node primari process run becom faulti backup process take role primari process thu order abl toler fault primari backup process execut node kind faulttoler process call passiv process replica differ comput model consid model consid research role backup process previou research assum backup process exact copi primari process henc load backup process exactli primari process wherea load backup process model much less primari process ie percent load primari process paper studi problem static loadbalanc process alloc faulttoler multicomput system process alloc call static process alloc begin system dynam process alloc assum process alloc soon arriv gener comput environ occurr load durat process cannot predict advanc dynam process alloc suitabl static process alloc sinc dynam process alloc alloc process arriv take consider current load processor static process alloc hand use effect system comput requir process known beforehand exampl system includ onlin transact process realtim system process run continu repeat period manner work stress dynam process alloc problem passiv replica comput environ load bal anc distribut system paralex support faulttoler passiv replic load balanc dynam late bind primari process kind dynam alloc conveni system previou inform arriv process load inform previou static process alloc algorithm propos activ replica comput environ exhibit poor perform passiv replica comput environ sinc design either maximum reliabl run assumpt load backup process exactli primari achiev loadbalanc given comput model consid distribut primari backup process load increment ad nonfaulti node event fault paper organ follow next section present mathemat formul alloc problem show nphard section basic primit alloc process address heurist process alloc algorithm given solv problem defin section section analyz expect perform propos alloc algorithm compar perform algorithm anoth alloc method final section summar discuss signific result system model faulttoler multicomput system consid paper consist n node processor toler fault process replic execut pair refer primarybackup process pair paper shall consid possibl singl node failur onli howev use backup proc ess model extend allow one fault primari process alloc node howev one restrict placement backup process is primari backup process cannot alloc node assum primari process run j kim h lee depart comput scienc engin ing pohang univers scienc technolog san hyoja dong pohang korea email jkimheejopostechackr s lee depart electr engin pohang univers scienc technolog san hyoja dong pohang korea manuscript receiv aug revis inform obtain reprint articl pleas send email to transcomcomputerorg refer ieeec log number c system cpu load primari backup process known advanc assumpt load requir unrealist sinc mani onlin transact system run process continu fig show faulttoler multicomput system process run system fig primarybackup process run faulttoler multicomput system primarybackup process model consid paper actual use experiment commerci system tandem nonstop system nonstop system everi process ident backup process alloc differ node backup process execut concurr primari process inact mode prepar assum function primari process event primari process failur guarante backup process inform necessari execut requir function primari process send period checkpoint messag backup process faultfre situat cpu load backup process much less respect primari actual load backup process determin interv number checkpoint messag sent primari process backup process differ percentag primari processs cpu load fault occur backup process primari process run faulti node take role primari proc ess backup process execut continu start last point receiv valid checkpoint messag primari process therefor cpu load backup process becom primari loadbalanc requir util system resourc evenli therebi enhanc perform system report approxim algorithm propos bannist trivedi nearoptim loadbalanc result backup process cpu load primari howev situat cpu load backup process differ occurr fault system maintain balanc load fault cpu load newli activ backup process increas loadbalanc process alloc problem consid find static process alloc algorithm balanc cpu load everi node faultfre situat also balanc cpu load fault system algorithm consid cpu load increment node event fault gener imposs node exactli cpu load thu qualiti loadbalanc measur either deviat averag proce sor load load differ node highest load node lightest load paramet approach zero system approach balanc load consid process alloc optim with respect loadbalanc chang placement process lead higher loadbalanc measur notat follow notat use formul alloc problem n number node m number primari process m backup process also exist load primari process i load backup process i primari process alloc node j otherwis process alloc node j otherwis node j fail otherwis load increment ad node j fault occur kth group backup process primari process assign node j sum load differ backup group b jk total load node j set processor load node j fail set processor load faulti node set processor load one faulti node standard deviat load set p differ maximum minimum load load set p y object cost function use formal problem descript loadbalanc process alloc problem repres constrain optim problem let us assum n node process system primari process backup process total number primari backup process m one promin constraint alloc primarybackup process pair abl toler singl fault node primari process backup alloc node thu point let us defin set n element n processor statu vector form a n oe allon vector all node faultfre k vector onli node k faulti load increment ad node j event fault node k repres hthu total load increment node j load node j denot pj sum load fault occurr load increment t incur upon occurr fault t commonli use metric evalu loadbal node standard deviat processor load standard deviat s load node k faulti repres follow f repres number faulti node second term bracket repres averag pj number backup process becom less occur therefor first second express longer valid fault occur averag load live node comput divid total load number live node n f sinc consid possibl singl fault f either anoth metric use loadbalanc process alloc problem load differ node heaviest load node lightest load load differ denot f given set process load p repres follow set process load failur repres p non set process load node failur repres p faulti paper load differ use object cost function two reason first load differ reflect goal loadbalanc close standard devia tion illustr follow two scenario first scenario one node except larg load other slightli less load averag node second scenario node somewhat load averag node somewhat less load averag suppos standard deviat scenario same load differ differ case latter scenario prefer former sinc exist one heavili overload node former scenario measur f indic latter scenario better second reason standard deviat requir comput load differ loadbalanc process alloc problem problem find valu x ij ij possibl j minim multipl cost function fp non fp faulti constraint given two main approach solv optim problem involv multipl object function one approach solv problem number time object turn solv problem use one object function object function consid constraint approach build suitabl linear combin object function optim combin function case necessari attach weight object function depend rel import pa per second approach use formul loadbalanc process alloc problem defin new object function rel weight import fault occurr respect assum weight valu ie w object function optim alloc assign process minim object cost function y complex optim alloc let us consid follow two set assign problem defin kgroup problem restrict group problem kgroup problem given set k posit weight element set exist assign element k group two element set assign group group weight sum restrict group problem rgp given n set ii assign group g exist assign element n group g ng n n two element set assign group group weight sum theorem kgp npcomplet theorem rgp npcomplet paper proof theorem lemma omit due lack space interest reader obtain proof kgp problem reduc faulttoler loadbalanc process alloc problem set contain one primari process k backup process weight element load process let us chang kgp problem ad n set chang group requir n group form recal n number node new n set weight first element equal averag k set the sum previou mk element weight divid k weight remain assign then solut modifi kgp problem solut origin kgp problem thu sinc modifi kgp problem shown np modifi kgp problem npcomplet modifi kgp problem equival load balanc problem process thu follow problem minim fp non also nphardwhich turn impli problem miniz nphard henc propos heurist approxim algorithm costeffect result well balanc processor load occurr fault section first present basic primit process alloc form core algorithm heurist algorithm present exampl complex propos algorithm analyz basic primit process alloc section assum process alloc one one and alloc process realloc node alloc process one one three question consid first better assign process lightli load node rather heavili load node minim f second better assign process less load prior process load minim f third two order set n element two set combin one set ad one element set two set combin minim f follow lemma address question one one lemma n lemma impli process alloc node minimum load first minim f function allocp x repres alloc x lightli load node p p order set n ele ment ie allocp lemma given order set p n element x impli process load alloc prior process less load minim f lemma given two order set n element p p f maxim reduc two set merg ad element largest weight one set element smallest weight set ie merg unord set p lemma impli merg two order set propos lemma increas f two order set twostag alloc propos heurist algorithm satisfi alloc primit discuss abov work two stage first stage primari process alloc use standard load balanc algorithm use greedi method alloc process highest load node lowest load shown lemma method minim f second stage backup process alloc consid load increment ad node event fault let us assum algorithm current work node j backup process whose primari process assign node j divid approxim equal increment load event fault node j n group backup process final alloc n node exclud node j base actual backup load occurr fault alloc balanc total actual load node faultfre situat group backup process accord load increment case fault balanc load fault occur algorithm formal describ below twostag algorithm stagel alloc primari process primari process descend order cpu load alloc primari process node minimum load highest load lowest alloc backup process follow step node comput load differ primari process backup process primari process assign node sort descend order backup process use load differ divid backup process n group approxim equal increment load assign backup process group smallest load order sort list previou step comput actual backup process load group follow nn backup group gener step group use actual load descend order sort n node use current load ascend order alloc backup group node minimum load howev backup group correspond primari process node one backup group alreadi alloc node come node backup group alloc choos node nexttotheminimum load alloc backup process import part algorithm node backup process first divid n group use load differ primari process backup load differ amount load increment incur upon occurr fault next algorithm comput actual load group use actual load backup process total number backup group nn group assign node depend actual load alloc backup group check whether prealloc backup group come node tobe alloc backup group case select node nexttotheminimum load purpos divid backup process n group node guarante node approxim equal amount load increment henc system balanc load fault occur purpos comput actual load group assign group base actual load guarante processor load balanc occurr fault therefor balanc processor load well occurr fault alloc nn backup process group loadbalanc shown fig figur b jk denot one group backup process primari process assign node j henc alloc node except node j toler fault node j problem alloc group backup process rgp problem discuss section detail exampl run twostag algorithm found fig backup group alloc problem algorithm complex time complex stage algorithm analyz follow primari alloc use gener sort algorithm whose run time om log m sort primari process alloc primari process n node requir om log n time thi process updat highest valu time prioriti queue backup alloc let us consid alloc worst execut time primari process assign one node sort backup process take om log m time divid backup process n group equal increment load comput actual load take om log n m time group repeat n time requir onm log sort nn backup group requir on log n time sort n node find proper node alloc one nn group requir on log n time thu alloc nn group requir onn n log n time time complex stage thu henc total time complex two stage alloc algorithm onm log nm assum number process much larger number node m n execut time bound onm log nm reason execut time process alloc time complex obtain base worst case scenario primari process alloc one node assum primari process evenli distribut time complex becom om log m section perform twostag algorithm estim analysi compar relat work use simul expect perform propos alloc algorithm consist three part load balanc first primari process alloc node second backup process node group basi primarybackup load differ third backup process group alloc node use actual load follow lemma theorem estim perform propos algorithm lemma given primari process decreas load load differ node heaviest load node lightest load alloc primari process propos algorithm load nth smallest primari process p mn lemma load differ node heaviest load node lightest load alloc backup process bound r f r maximum ratio backup process load primari theorem expect perform propos algorithm occurr fault non f f r r theorem object cost function propos algorithm f f c h r r next subsect show comparison simul bound serv quick approxim actual valu perform comparison subsect analyz perform twostag algorithm use simul note previou research loadbalanc passiv replica closest research kind bannist trivedi work loadbalanc activ replica thu algorithm compar bannist trivedi process alloc bt algorithm bt algorithm activ replica model work follow alloc n process r replic sort n process descend order alloc r replica task r least load node process alloc bt algorithm proven nearoptim assumpt backup process exactli load primari bt algorithm appli problem loadbalanc passiv replica follow first primari backup process sort descend order cpu load start highest load process process alloc node minimum load node minimum load alloc backup process node primari process alreadi alloc backup process alloc node next smallest load environ paramet use simul fol low keep total load node load primari process chosen randomli rang time n m base uniform distribut load backup process also chosen randomli load primari also base uniform distribut fig show node load process alloc use bt algorithm assum number node n eight horizont dot line figur repres averag load faulti system solid line repres averag load faultfre system figur also show load differ maximum minimum load number primari process vari fig show simul result use twostag alloc algorithm paramet number primari process load differ maximum minimum load approxim fig contrast fig show load differ maximum minimum load almost total load bt algorithm use reason bt algorithm show poor perform alloc backup process done without consid load variat occurr fault load differ f minimum maximum load occurr fault shown fig algorithm result obtain node upper two line show fp faulti two algorithm fault occur one node system lower two line show occurr fault seen occurr fault fp non use twostag alloc algorithm similar bt algorithm howev occurr fault fp faulti use twostag alloc algorithm significantli less use bt algorithm next experi effect number node system simul conduct vari number node keep number process fix simul result shown fig follow figur simul result fault occurr combin repres y shown upper two line show simul result number process lower two line show simul result number process increas number node increas result expect sinc number process alloc node decreas number node increas number process fix figur show twostag alloc algorithm significantli better bt algorithm fig show simul result number process vari number node fix eight upper line show bt algorithm use simul middl line upper bound algorithm base theorem lower line show simul result twostag algorithm number process increas decreas sinc number process per node increas figur confirm easier balanc load system mani process small load rather process larg load previou figur assum backup process load primari process next compar perform two algorithm vari load backup process primari backup process load ratio r fig load backup process chosen randomli r r primari process load order provid varianc backup process load test process eight node process node twostag alloc algorithm show better perform fig howev load backup process approach primari process load algorithm similar perform simul mean backup process primari process fig minimum maximum load use bt algorithm fig minimum maximum load use algorithm fig f fault occurr fig affect number node fig affect number process fig affect vari load ratio r backup process result impli bt algorithm better perform backup process load primari process conclus loadbalanc static process alloc algorithm faulttoler multicomput system propos analyz faulttoler process model consid paper passiv process replica model passiv replica process inact normal oper becom activ main activ process becom faulti node activ process run becom faulti load passiv replica vari occurr fault loadbalanc problem passiv replica formal constrain optim problem sinc optim process alloc nphard problem heurist approxim algorithm propos propos algorithm compar loadbalanc algorithm activ replica propos bannist trivedi use simul simul result show propos algorithm significantli better perform passiv replica model also shown system better load balanc divid big load process mani small load process main contribut paper present analysi new static loadbalanc algorithm passiv replica faulttoler process model propos static process alloc algorithm applic onlin transact process realtim system current work extend algorithm handl dynam situat also plan studi problem find alloc algorithm guarante optim perform reliabl time acknowledg research support part kosef grant etri contract preliminari version paper present th ftc r static alloc process replica faulttoler comput system task alloc maxim reliabl distribut comput system task alloc faulttoler distribut system activ replic delta reliabl system design theori practic use passiv replic delta provid depend distribut comput transactionbas faulttoler comput distribut system parallel comput network workstat paralex faulttoler process alloc load balanc model build mathemat program load balanc process alloc faulttoler multicomput process alloc load distribut faulttoler multicomput tr ctr j ray optim distribut objectori system addendum proceed confer objectori program system languag applic addendum p januari minneapoli minnesota unit state j ray luqi valdi berzin optim system work schedul a stochast approach proceed rd intern workshop softwar perform juli rome itali sunggu lee realtim wormhol channel journal parallel distribut comput v n p march