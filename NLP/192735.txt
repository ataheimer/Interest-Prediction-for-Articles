t reduc memori traffic creg a array pointer refer often ambigu compil time analysi cannot alway determin distinct refer object ambigu alias object alloc regist convent compil due cost load store requir keep regist copi consist memori other sever hardwar softwar strategi use solv ambigu alia problem implement one scheme call creg compil instruct level simul present modif brigg optimist color algorithm allow us alloc local paramet array creg creg regist file oper instruct set modif requir implement scheme discuss underli hardwar issu pipelin impact chip area briefli discuss sever benchmark compar term dynam instruct execut two creg set size measur reduct memori oper signific averag benchmark shown b introduct program memori refer signific fraction total number instruct execut total run time recent studi spec benchmark suit show averag onethird dynam instruct execut load store byp paper show simpl hardwar scheme combin small chang current compil technolog improv perform reduc memori traffic show techniqu cleanli integr current instruct set architectur implement retain objectcod compat provid regist file alias object effici alloc ambigu alia occur two name may may refer memori locat exampl shown figur relationship j known compil time vari denot j refer may depend load line requir relationship j determin load load rai load rai load rai store ajr store ajr store ajr load rai use r use r figur ambigu alia exampl elimin ai alloc regist gener ambigu alias object alloc regist file load store requir maintain correct creg hardwar scheme perform run time consist check effect address manner alias detect valu propag ambigu alias object creg dic creg hardwar maintain address regist file compil alloc pointer valu array creg safe without fear use stale data reap benefit fast local memori object perform gain expect due associ reduct memori bandwidth creg regist addit address field use perform associ match creg capabl updat creg certain circumst datum address name figur creg scope associ limit creg set size underli hardwar must capabl write valu field match creg set simultan valu differ set updat even address match alia set use group live rang alloc creg set alia set compos live rang ambigu alias point live rang asu assum virtual address use virtual memori support name alway alias appropri renam object never alias place differ alia set formal paramet analyz alias place alia set use algorithm develop cooper coo mani solut ambigu alia problem hss dg chi cck he nic chd focu creg hardwar compil techniqu paper remaind paper cover creg instruct set modif hardwar design section creg compil techniqu section experiment result analysi section summari section section explain basic creg oper propos modif typic loadstor instruct set architectur support creg addit show integr exist superscalar microprocessor design creg address match valu updat occur load store instruct primari mean maintain map memori regist nonmemori instruct clear address field destin creg address bound valu valu load store creg load store rang address match limit creg set set respons propag valu creg whose address match give color algorithm freedom allow effici alloc set larg possibl ideal size regist file call maxim creg set instruct set architectur section detail chang instruct set architectur necessari support creg focu loadstor instruct set typic current risc microprocessor origin instruct set origin load store instruct remain unchang except clear address field creg load store henc compil unawar creg safe use exist load store effect treat creg regist compil use instruct address match valu updat requir eg save restor regist subroutin boundari creg match instruct load match address instruct ad instruct set load alias object creg calcul effect address normal load doe perform associ search creg address within set match found memori oper squash ie perform copi match creg made load still take time processor pipelin memori oper initi store match address instruct complement creg load calcul effect address associ search creg address find some copi valu store creg unlik load store alway perform memori oper keep object memori updat current valu multipl write occur within regist file potenti creg set may need written practic rare two creg updat within set live rang defin creat new valu regist object spill ambigu alias store match follow updat memori new valu store requir keep memori consist valu current creg case ambigu alias object fit creg set two variant store match address instruct first updat match creg write address creg store compil use left hand side assign statement alias spill therefor store address written sourc regist second form store updat address creg store well valu match creg overwrit address there effect alloc object creg compil use def start live rang alias object alloc creg address clear instruct care must taken live rang live across subroutin boundari identifi two case first case creg contain valu one subroutin stack frame could caus inadvert squash load follow subroutin stack frame occupi memori space at differ time second case involv object may involv subroutin call creg alloc or anoth set use subroutin forc break live rang object clear address field isol caller calle make ambigu alias object reload first use follow subroutin call altern address valu field could save restor subroutin boundari context switch aggress regist isol requir context switch except interrupt creg regist file must contain content event befor accomplish special store load move valu address field creg memori context switch repres data present paper howev oper system overhead system call includ code size effect static code size creg often smaller gener convent regist file creg object alloc result reduct spill load howev load store requir provid isol subroutin boundari simpli creg util experi small routin larg number array refer increas amount subroutin isol code signific product compil routin could candid inlin exampl figur illustr creg oper valu creg memori refer name r ai address refer prefix r ai address field creg f written f load store involv creg updat memori oper depict figur simpl code exampl copi r creg match ai store store r ai no load ai alloc r els load r ak load copi r creg match aj creg store r aj store figur underli oper box surround oper perform exampl j known compil time array refer ambigu alias assum live rang ai ak alloc live rang aj spill furthermor assum live rang ak start use line line exampl show def array element store follow def alloc ai r write address ai address field r also copi valu r creg set match address write valu memori load requir ai line note code line chang valu ai r would updat via creg address match load ak line necessari start live rang ak may may result memori oper effect address ak match address field creg set valu copi creg instead load memori exampl k equal r r creg set valu r would copi r address match found memori read occur final store aj write new valu r memori creg address updat address field r address field r remain null it set null add instruct line aj spill creg implement section illustr creg may integr pipelin superscalar processor implement earlier studi show creg could integr simpl risc processor pipelin use cachelik circuitri small chip area increas clock cycl time impact noo sketch implement dec alpha deeplypipelin superscalar processor pipelin stage alpha shown figur unlik risc micro processor integ pipelin divid two pipelin one dedic loadsstor integ alu oper oper pipelin stage respect fetch swap decod issu b write figur alpha pipelin stage creg oper follow note fetch swap decod issu stage unchang fetch instruct cach access two instruct fetch swap two instruct inspect see requir integ floatingpoint pipelin branch predict decod instruct decod issu instruct issu operand read stage one integ comput effect address load store instruct load address written destin creg address field store address written sourc creg address field object store alloc creg stage two integ read data cach tag cach data load store hardwar check address match effect address creg set match instruct load match creg read memori read perform valu sent write stage store sourc valu sent stage write write result regist file load write valu match creg load squash memori read load squash store write sourc valu match creg write buffer pipelin oper unchang creg match occur dual issu possibl creg one addit dual issu restrict necessari integ creg store cannot dualissu follow integ alu oper sinc store may write sourc regist integ alu instruct latter instruct must wait issu store instruct clock tick howev sourc regist resid creg set differ store sourc regist instruct may dualissu dual issu condit unaffect consist floatingpoint integ instruct pair regist file split addit forward logic need pipelin stage b a exampl load follow store creg need load valu write memori without stall recoveri scheme reorder histori buffer smp modifi without undu overhead allow creg implement decis made compil choos store instruct use read first level cach hit otherwis second level cach main memori creg implement requir addit hazard detect regist file read port addit creg requir address field mask field approxim doubl size regist file given increas chip size small area requir regist rel cach function unit rest data path increas chip area may problem alloc object creg graph color regist alloc use node repres live rang valu arc node specifi two live rang cannot alloc regist node interfer graph color repres alloc live rang specif regist section describ live rang construct alia analysi compil perform build interfer graph describ chang brigg optimist color algorithm allow ambigu alias object alloc creg live rang construct varieti object elig alloc creg follow simpl rule describ live rang strategi first organ local formal paramet array refer accord name array index calcul involv variabl index calcul encod valu number annot refer uniqu live rang built array element manner scalar treat uniqu index given array differ element live rang combin alia analysi describ next live rang allow color algorithm correctli alloc ambigu alias object creg global alloc prespil mean usedef spill code respons loadingstor valu live rang scalar local formal paramet creat describ brigg bri alia analysi section describ group object alia set prepar alloc creg set ambigu alias object group alia set might alloc across multipl creg set stale data could occur creg alia analysi use local variabl minim simpl asu object ambigu alias object b point program put b alia set anoth object c alias b later point also place alia set set impli c alias may may true conserv assum true obvious room improv construct set note howev a b c must alloc creg set enhanc alia analysi may improv alloc process alia set repres interfer graph circularli link list live rang node local array alia set consist live rang element array formal paramet array interprocedur alia analysi use group live rang alia set coo scalar null pointer alia set conserv two local array live rang conflict place differ alia set two basic oper alia set find rang creg allow color select alia set member color creg set remain alia set member limit color within creg set member alia set color creg set chosen roundrobin manner first oper find color member alia set given uncolor member set find alia colornod member set color yet color creg set chosen roundrobin manner node member alia set illeg color return second basic oper use result color find first last creg correspond creg set find first lastcolor color given valid color return first last creg entir regist file target architectur support maxim creg set find first lastcolor alway return entir regist file rang modif brigg optimist color algorithm section illustr chang brigg optimist color algorithm bck enabl color interfer graph augment alia set maxim creg set find routin describ caus alloc revert brigg origin algorithm brigg optimist algorithm delay spill decis know color avail color select phase control select color node alia set limit creg one creg set color select stage scan rang color check color node neighbor loop origin limit avail color limit base creg set node color scalar object limit remain entir regist file node cannot color within rang color specifi spill code insert algorithm iter color select origin found sever alia set frequent one member alloc singl creg set remain member alia set often alloc creg set full find alia colornod return color creg set roundrobin manner alia set fix creg set yet allow alia set better chanc complet alloc creg set multipl alia set still alloc one creg set fit augment brigg optimist color independ cost function make compat improv bgg chaitinstyl alloc includ brigg heurist limit insert spill code exampl use live rang close def live rang spill code insert overrid case def ambigu alias object store alway follow keep memori updat small regist file regist pressur high spill code may gener case creg differ spill decis made interfer graph node edg due array live rang heurist color algorithm may make differ decis base interfer graph topolog weight depend pointer analysi creg hardwar complementari compil time techniqu reduc ambigu alias depend pointer analysi techniqu power cannot alway succeed two mention live rang close live rang goe dead cha disambigu relev refer static techniqu fail creg hardwar provid mechan detect alias run time retain advantag regist storag alias object studi depend pointer analysi implement maxim creg set pointer valu alloc without analysi creg divid set analysi requir group refer alia set experiment result test test suit consist sever float point spec benchmark livermor loop hydrodynam code benchmark shown figur use compar dynam maxim creg set set size benchmark subr line load store instr load store instr tomcatv doduc debico doduc debico doduc dcoera doduc dyeh doduc yeh livermor loop ppm figur percent reduct summari regist file size instruct count alloc object convent regist file alloc object creg regist file compil gener code convent creg regist file simul simul convent regist file creg regist file optim compil known ccc develop univers minnesota simul support convent creg regist file alpha architectur dec dec instruct level simul capabl give dynam instruct count simul processor pipelin cach cannot give actual cycl count calcul number load reduc creg two compil simul perform set criteria test first compil target toward convent regist file simul convent architectur certain number instruct execut count categori loadsstoresal instruct baselin comparison second compil alloc object creg simul creg regist file dynam instruct count compar get reduct percentag xaxi plot number regist avail color algorithm user variabl regist file floatingpoint integ number regist simul machin integ multipl creg set size last creg set fewer ppm code obtain dr paul woodward univers minnesota reduct regist dynam instruct reduct load store instr figur vpenta maxim creg set reduct regist dynam instruct reduct load store instr figur vpenta set size reduct regist dynam instruct reduct load store instr figur tomcatv maxim creg set reduct regist dynam instruct reduct load store instr figur tomcatv set size reduct regist dynam instruct reduct load store instr figur l loop maxim creg set reduct regist dynam instruct reduct load store instr figur l loop set size reduct regist dynam instruct reduct load store instr figur ppm maxim creg set reduct regist dynam instruct reduct load store instr figur ppm set size member two plot shown benchmark one maxim creg set one creg set size four analysi observ follow benchmark shown ffl dynam load reduct rang ffl averag reduct memori oper creg ffl small creg set caus slight increas memori oper compar maxim creg set ffl dynam instruct count reduct vari increas regist pressur present fewer opportun reduc load dynam load reduct due squash load direct remov spill load squash load memori oper occur ie count load instruct still count total instruct execut fewer load occur creg code object alloc data show maxim creg set give slightli better reduct load reduct total instruct execut slightli posit mean reduct load object alloc creg offset increas subroutin isol code data creg set size eight sixteen similar size four shown similar due low number simultan live ambigu alias object ste maximum number write match measur simul test case never exceed two benchmark shown theoret could larg set size regist pressur artifici increas compilersimul system reduc number regist avail effect regist pressur shown graph gener creg allow larger percentag load remov obvious effect level scalar alias object alloc figur exampl program path creg perform result affect input data ran debico two differ data set result figur show subroutin frequent reus array valu creg account larg load reduct data set perform improv due creg depend cach hit miss penalti cach miss rate whether memori oper remov hit miss cach squash remov load data avail earlier pipelin reduc effect access latenc creg implement execut time reduc follow reason ffl gener fewer instruct execut ffl fewer memori oper execut ffl overal data access latenc reduc sinc refer directli regist summari futur work regist file compos creg one solut ambigu alia problem shown instruct level implement explain oper memori oper involv creg compil work conjunct creg hardwar produc code contain fewer load instruct squash memori refer dynam live rang construct local formal paramet array element similar scalar live rang group alia set use interprocedur alia analysi local alia inform simpl modif brigg optimist color algorithm allow interfer graph augment alia inform alloc creg chang involv limit color avail node color select phase algorithm roundrobin scheme help distribut alia set among creg set avert deadlock situat spill alia set member combin hardwar compil strategi significantli reduc dynam instruct count memori traffic becom increasingli import gap processor memori speed increas processor clock speed increas memori access complet later pipelin creg provid mechan reduc data access latenc current explor creg hardwar integr implement featur regist renam wide instruct issu vliw superscalar intend add pipelin cach behavior simul effect creg execut time may measur directli futur implement better alia analysi aggress algorithm keep alia set size small pointer valu alloc without caus signific increas spill code complex pointer analysi may limit solut architectur maxim creg set one way would add alia edg interfer graph alia edg present two node node must alloc creg creg set experi criteria brigg algorithm use choos trivial color node name degre k k number color avail creg set size c may make sens add term degre c criteria degre number neighbor node alia set zero scalar also intend improv spill code heurist remov store certain circumst member alia set alloc acknowledg would like thank john mejia help alpha simul terenc parr assist pcct compil construct tool peter bergner help graph color algorithm live rang analysi jame smith cray research feedback earli draft paper r color heurist regist allo cation spill code minim techniqu optim compil regist alloc via graph color singl instruct stream parallel greater two improv regist alloc subscript vari abl regist alloc spill via graph color unifi manag regist cach use live cach bypass integr memori manag scheme dynam alia resolut analyz alias refer formal paramet practic data flow framework array refer analysi use optim creg new kind memori referenc array pointer architectur support regist alloc presenc alias specul disambigu compil techniqu dynam memori disambigu creg implement studi base mipsx risc microprocessor implement precis interrupt pipelin processor refin c compil statu report tr compil principl techniqu tool creg new kind memori referenc array pointer spill code minim techniqu optim complier color heurist regist alloc unifi manag regist cach use live cach bypass architectur support regist alloc presenc alias integr memori manag scheme dynam alia resolut regist alloc via graph color analyz alias refer formal paramet creg implement studi base mipsx risc processor regist alloc myampersandamp spill via graph color ctr gari s tyson todd m austin improv accuraci perform memori commun renam proceed th annual acmiee intern symposium microarchitectur p decemb research triangl park north carolina unit state gari s tyson todd m austin memori renam fast earli accur process memori commun intern journal parallel program v n p oct jin lin tong chen weichung hsu penchung yew specul regist promot use advanc load address tabl alat proceed intern symposium code gener optim feedbackdirect runtim optim march san francisco california matthew postiff david green trevor mudg storeload address tabl specul regist promot proceed rd annual acmiee intern symposium microarchitectur p decemb monterey california unit state