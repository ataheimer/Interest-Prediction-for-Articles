t practic approach dynam load balanc a abstractthi paper present cohes practic load balanc framework improv upon exist strategi techniqu portabl broad rang preval architectur includ massiv parallel machin cray tde intel paragon share memori system silicon graphic powerchalleng network workstat part work adapt heat diffus scheme present well task select mechan preserv improv commun local unlik mani previou effort arena techniqu appli two largescal industri applic varieti multicomput process work expos seriou defici current load balanc strategi motiv work area b introduct number trend comput scienc engin increas need effect dynam load balanc techniqu particular particleplasma simul recent becom common gener less favor load distribut characterist continuum calcul navierstok flow solver even continuum problem use dynam adapt grid move boundari solut resolut necessit runtim load balanc maintain effici past ten year research propos research sponsor advanc research project agenc contract number dabt c number strategi dynam load balanc goal work build upon best method develop new algorithm remedi shortcom previou effort techniqu design scalabl portabl easytous improv exist algorithm includ deriv faster diffus scheme transfer less work achiev balanc state algorithm mechan select transfer task also introduc techniqu attempt maintain improv commun local underli applic parametr studi illustr benefit offer faster diffus algorithm well efficaci local preserv techniqu final framework appli two largescal applic run hundr processor success method one case demonstr util techniqu failur second applic motiv research area reveal limit current approach abstract goal load balanc state follow given collect task compris comput set comput task may execut find map task comput result comput approxim equal amount work map balanc workload processor typic increas overal effici comput increas overal effici typic reduc run time comput consid load balanc problem import distinguish problem decomposit task map problem decomposit involv exploit concurr control data access algorithm result decomposit set commun task solv problem parallel task map comput way best fit problem one concern task map comput roughli equal workload load balanc problem state abov case comput time associ given task determin priori circumst one perform task map begin comput call static load balanc import increasingli common class applic workload particular task may chang cours comput cannot estim beforehand applic map task comput must chang dynam comput practic approach dynam load balanc divid problem follow five phase estim comput load must provid first determin load imbal exist estim workload associ individu task must also maintain determin task transfer best balanc comput profit determin load comput calcul presenc load imbal detect cost imbal exce cost load balanc load balanc initi calcul base measur taken first phase ideal work transfer necessari balanc comput calcul task select transfer exchang best fulfil vector provid previou step task select typic constrain commun local task size consider select task transfer one comput anoth state commun integr must maintain ensur algorithm correct decompos load balanc process distinct phase one experi plug andplay fashion differ strategi step allow space techniqu fulli readili explor also possibl custom load balanc algorithm particular applic replac gener method specif design certain class comput assumpt notat follow assumpt made regard scenario techniqu herein appli first comput assum homogen process capac iti sourc extern load underli softwar system must provid basic messagepass librari simpl pointtopoint commun send receiv op erat basic global oper global sum exampl final access accur milli microsecond level system clock must provid follow variabl notat use denot variou quantiti system ffl p comput system ffl network connect comput ddimension mesh toru size dimens q ffl diamet network denot length longest path two comput network accord rout algorithm use eg ddimension mesh would assum messag rout fulli dimens proceed next ffl map function task respect comput call thu mi comput task map set task map comput i ffl set neighbor either comput task denot n appropri context use neighbor comput adjac physic network neighbor task task commun algorithm implement section present design choic implement methodolog outlin section choic among algorithm techniqu motiv necessari load evalu use load balanc scheme directli depend qualiti load measur predict accur load evalu necessari determin load imbal exist calcul much work transfer allevi imbal ultim determin task best fit work transfer vector load evalu perform either complet applic complet load balanc system mixtur applic system facil primari advantag applicationbas approach predict power applic develop direct knowledg algorithm input best chanc determin futur workload task finiteel solver exampl load may function number grid cell number cell chang due grid adap tation news chang immedi propag load balanc system complex applic disadvantag approach determin abstract workload task translat actual cpu cycl system depend factor cach size virtual memori page easili skew execut time task larg factor one way overcom perform peculiar particular architectur measur load task directli time it one use time facil profil task provid accur measur categori execut time commun overhead time easili provid librari runtim system system label execut time commun oper runtim execut time actual send receiv data commun time systemonli approach may fall short come load predict howev past behavior may poor predictor futur perform applic load evolv rel smooth fashion data model techniqu data model statist robust curv fit use robust techniqu toler nois exampl discard spuriou valu rigor way howev load evolv highli unpredict manner given system knowledg quantiti affect load addit inform may requir robust flexibl approach perhap hybrid applic system method combin applicationspecif inform system time facil much practic predict perform complex applic particl simul exampl time requir one iter partit problem may function number grid cell well number particl contain grid cell use time routin applic determin weight predict execut time next iter given limit applicationonli systemonli approach gener purpos load balanc framework must allow use applicationspecif load predict model provid profil routin necessari make model accur system provid set gener model adequ broad class applic experi simpl techniqu keep enough load histori predict load linear quadrat function often suffici case system provid feedback qualiti load predict model use load predict inaccur rel actual run time system gener appropri warn whatev load predict model use output load evalu follow given task j workload task determin l j load comput therefor l j load balanc initi load balanc use one must first determin load balanc compris two phase detect load imbal exist determin cost load balanc exce possibl benefit load balanc or effici comput ratio averag comput load maximum comput load load balanc framework might therefor consid initi load balanc whenev effici comput userspecifi threshold eff min applic total load expect remain fairli con stant load balanc would undertaken case load comput exce lavg eff min l avg calcul initi provid applic similar approach describ load balanc initi whenev com puter load fall outsid specifi upper lower limit method poorli suit situat total load chang exampl system initi balanc load everi comput doubl system still balanc method would load caus load balanc initi eff min less percent anoth method suggest load balanc differ comput load local load averag ie averag load comput neighbor exce threshold problem techniqu may fail guarante global load balanc consid exampl case linear array comput load il const local load averag nonextrem comput would igammaii const load balanc would initi even small threshold despit fact global effici percent ie l const const load balanc would initi extrem comput rel threshold would unreason small even moder valu eff min larg array analysi appli case comput would initi load balanc whenev rel differ load one neighbor exceed threshold again guarante effici eff min rel differ must gener less problem tight bound that mani case violat load balanc may actual unnecessari reason adhoc method suggest inexpens complet local also introduc synchron point otherwis asynchron ap plicat certainli qualiti strive given increas avail thread asynchron commun facil global load imbal detect may less costli previous perceiv use separ load balanc thread comput load imbal detect phase overlap applic load balanc thread synchron would affect applic thu simplest way determin load balanc may calcul maximum averag comput load use global maximum sum oper complet olog p step architec ture use quantiti one calcul effici directli even load imbal exist may better load balanc simpli cost load balanc would exceed benefit better work distribut time requir load balanc measur directli use avail facil expect reduct run time due load balanc estim loos assum effici increas eff min precis maintain histori improv past load balanc step expect improv exce cost load balanc next stage load balanc process begin work transfer vector calcul determin advantag load balanc one must calcul much work ideal transfer one comput anoth interest preserv commun local transfer undertaken neighbor comput transfer vector algorithm present literatur three particular stand out hierarch balanc method gener dimension exchang diffus techniqu hierarch balanc hb method global recurs approach load balanc problem algorithm set comput divid roughli half total load calcul partit work transfer vector partit requir make load per comput equal ie one partit p comput total workload l anoth partit p comput aggreg workload transfer first partit second given deltal transfer vector calcul partit divid balanc recur sive take account transfer calcul higher level hb algorithm calcul transfer vector requir achiev perfect load balanc olog p step one disadvantag hb method data transfer two partit occur singl point may accept linear array tree network fail fulli util bandwidth highli connect network simpl gener hb method mesh tori perform algorithm separ dimens exampl d mesh comput column could perform hb method re sult row total load row result comput total load gener ddimension mesh tori algorithm requir step note that case hypercub dimension hierarch balanc dhb method reduc dimension exchang de method present de method comput hypercub pair neighbor dimens exchang half differ respect workload result balanc log step author present gener techniqu arbitrari connect graph call gener dimension exchang gde network maximum degre jn max j link neighbor comput minim color comput two link color edg color comput exchang neighbor across link time load differ process repeat balanc state reach deltal k deltal particular case gde algorithm call averag gde method agd the agd method also present judg inferior hb method latter lower time complex author also present method determin valu algorithm converg rapidli call gde method use paramet optim gde method ogd method diffusionlik describ diffus literatur base diffus author rightli point out diffus method base solut diffus equat l first present method load balanc diffus also explor found superior load balanc strategi term perfor manc robust scalabl gener diffus strategi given unlik previou work method use fulli implicit differenc scheme solv heat equat multidimension toru specifi accuraci advantag implicit scheme timestep size diffus iter limit dimens network explicit scheme timestep size limit gammad ddimension mesh toru algorithm quickli decim larg load imbal converg slowli smooth lowfrequ state reach one way overcom difficulti increas timestep size load imbal becom less sever rigor techniqu borrow work integr ordinari differenti equat ode particular view problem system ode l appli two method calcul ffil particular ffit recogn although matrix result spatial discret curvatur oper partial differenti equat pde load balanc problem actual spatial discret begin thu system ode instead pde analog diffus pde guid construct a first method calcul ffil firstord accur implicit techniqu describ method produc local error offit ffit timestep size secondord accur method produc local error offit thu take timestep method differ valu produc give us estim error ffit take maximum differ comput denot err max take rel error err rel errmax use error estim proport ffit adjust ffit larg possibl achiev desir error ff err rel desir accuraci the safeti factor avoid readjust timestep size previou adjust larg result adapt timestep diffus algorithm given figur task select work transfer vector comput calcul necessari determin task move meet vector qualiti task select directli impact ultim qualiti load balanc two option satisfi transfer vector two comput one attempt move task unidirect one comput anoth one exchang task two comput result net transfer work task averag workload high rel magnitud transfer vector may difficult find task fit vector hand exchang task one potenti satisfi small transfer vector swap two set task roughli total load case enough task oneway transfer adequ cost metric describ use elimin unnecessari exchang problem select task move satisfi particular transfer vector weakli npcomplet sinc simpli subset sum problem fortun approxim algorithm exist allow subset sum problem solv specifi nonzero accuraci polynomi time consid algorithm import note concern may constrain task transfer option particular one would like avoid costli tran diffus deltal ij neighbor j n send l neighbor j n receiv l j neighbor j n lavg neighbor k send hl kgamma neighbor j n receiv hl kgamma j neighbor j n end err errmax errmax send l neighbor j n receiv l j neighbor j n deltal ij deltal ij neighbor j n errmax diffus figur adapt timestep diffus algorithm execut comput i fer either larg number task larg quantiti data unless absolut necessari one would also like guid task select preserv best possibl exist commun local applic gener one would like associ cost transfer given set task find lowest cost set particular desir transfer problem attack consid problem relat subset sum problem name knapsack problem latter problem one knapsack maximum weight capac w set n item weight w valu v respect one seek find maximumvalu subset item whose total weight exceed w context task select one set task load l transfer cost c it import note l neg task transfer onto given comput c also neg actual advantag transfer task comput given transfer deltal one wish find minimumcost set task whose exchang achiev transfer one specifi cost function cl i minimum cost subset task achiev net transfer l let c zero cl l one find valu cl i comput order increas i follow end lowest cost transfer l given cl n problem algorithm runtim on l max l max largest absolut valu l algorithm therefor pseudopolynomi one overcom difficulti approxim valu l truncat lower b bit l l log ffll max rel deviat optim load transfer l proof follow manner proof given knapsack approxim algorithm sake space produc here run time therebi reduc o n l max so posit nonzero ffl find lowestcost transfer polynomi time function cl n calcul question becom transfer use valu cl n finit l closest deltal without exceed it lowest cost transfer within ffl transfer actual closest deltal ie transfer would found exact search one might tempt take subset yield valu howev use subset somewhat away deltal one potenti achiev much lower cost rigor approach follow given target accuraci ffl defin ffl ffl perform approxim algorithm accuraci ffl lowest cost transfer closest within accuraci ffl deltal take subset lowest cost within ffl closest transfer lowest cost subset within ffl transfer actual nearest deltal next question determin target accuraci ffl gener may unnecessari comput fulli satisfi transfer vector work transfer vector given algorithm previou section eager algorithm is specifi transfer work instanc may unnecessari case larg point disturb ex ampl failur two comput far disturb satisfi transfer vector may littl effect global load balanc one way determin extent comput must satisfi transfer vector follow gener comput set outgo posit transfer vector set incom neg transfer vector particular comput i denot sum former deltal sum latter deltal gamma order achiev desir effici comput must guarante new load less lavg eff min assum incom transfer vector satisfi either necess chanc new load least l thu order guarante new load less lavg eff min comput must leav fraction ffl outgo transfer vector unsatisfi accord eff min solv maximum ffl give eff min practic ffl max lower limit gamma gamma sinc valu zero possibl especi case comput maximum load also note use ffl max approxim algorithm guarante satisfactori exchang task found accuraci guarante that sinc exchang may imposs given set task instead mere provid guidanc hard approxim algorithm tri find best solut degre tradeoff cheaper exchang accept sinc select algorithm cannot gener satisfi transfer vector singl attempt necessari make multipl attempt exampl worstcas scenario task one comput comput neighbor overload comput hope incom transfer vector satisfi first round exchang case one would expect least od exchang round would necessari algorithm propos task select thu follow transfer vector color manner describ gde algorithm color everi comput attempt satisfi transfer vector color adjust ffl max account degre transfer vector thu far fulfil algorithm repeat color exhaust termin occur progress made reduc transfer vector termin occur earlier comput satisfi minimum requir outgo transfer vector ie ffl max one everi comput first termin condit guarante met given configur task minimum nonzero exchang total outstand transfer vector reduc least amount step sinc transfer vector finit size algorithm termin admittedli weak bound typic situat never seen task select requir iterationsat requir od step case sever load imbal safe approach would bound number step multipl d select algorithm suggest task may move multipl hop process satisfi transfer vector movement may discourag appropri cost function sinc data structur task may larg storeandforward style remap may prove costli better method instead transfer token contain inform task load current locat data structur task select complet token arriv final destin comput send task state directli final locat note cost function use encourag local token may move back comput correspond task actual resid elimin need data transfer task migrat addit select task move load balanc framework must also provid mechan actual move task fromon comput anoth task movement must preserv integr task state pend commun transport task state typic requir assist applic especi complex data structur link list hash tabl involv exampl user may requir write routin pack unpack free state task parametr experi section present result variou parametr experi expos tradeoff differ load balanc mechan particular comparison drawn variou transfer vector algorithm influenc cost metric task migrat applic local demonstr comparison transfer vector algorithm transfer vector algorithm present section previous compar term execut time poorli studi except experi amount work transfer algorithm requir achiev load balanc algorithm section implement use messag pass interfac run processor cray td hb algorithm map threedimension toru architectur td partit network along largest dimens stage transfer work processor center plane divis gde diffus algorithm took advantag wraparound connect figur compar total work transfer execut time transfer vector algorithm vari number processor case randomli chosen comput contain work system transfer vector algorithm improv effici least percent scenario intend illustr worstcas behavior algorithm case much analysi algorithm done figur quantiti compar except load continu random variabl distribut uniformli goal illustr algorithm perform characterist realist situationin particular balanc mainten figur show except hb method algorithm transfer fairli judici amount work diffus agd algorithm transfer least work dhb ogd algorithm transfer percent work respec total work transfer number processor ogd diff diff time sec number processor ogd diff diff figur worstcas total work transfer left execut time right variou transfer vector algorithm vari number processor tive diff denot diffus algorithm present diff diffus algorithm present here case agd algorithm seem best bet transfer amount work diffus algorithm least ten time faster basi gde algorithm consid superior diffus howev typic case figur tell somewhat differ stori case see diffus algorithm transfer least work specif algorithm transfer percent work case hb method percent dhb techniqu percent agd percent ogd number processor grew howev speed advantag nondiffus algorithm much less appar point disturb scenario given transfer task quit costli applic involv gigabyt data small perform advantag at millisecond case offer nondiffus algorithm question valu import point note these although ogd algorithm somewhat faster agd algorithm propon shown transfer around percent work test case also despit speed hb algorithm primari consider algorithm transfer extraordinari amount work order achiev load balanc also illustr thu appear littl recommend it except perhap case tree linear array network total work transfer number processor ogd diff diff time sec number processor ogd diff diff figur averagecas total work transfer left execut time right variou transfer vector algorithm vari number processor task movement reduct local preserv cost use constrain task movement prodigi number task often tran fer transfer task neg impact commun local follow experi demonstr that provid appropri cost function task move ment one drastic reduc impact load balanc applic task movement deem free larg number task often transfer order achiev load balanc exampl trial artifici comput node intel paragon task per node mean effici percent averag task transfer achiev effici least percent certainli one would expect percent task need transfer improv set transfer cost task one instead zero averag number task transfer reduc factor four approxim six percent task system reduc size task transfer may prove import reduc number task transfer exampl may less expens transfer two small task singl much larger one experi size task data structur uniformli distribut interv kilobyt take task transfer cost size data structur reduc averag time migrat task second similar result obtain simul silicon wafer manufactur reactor run network workstat applic briefli describ section case use unit task transfer cost reduc transfer time percent zero cost use task size transfer cost reduc transfer time percent anoth concern transfer task transfer disrupt commun local applic commun cost applic significantli increas reloc task far task commun may better load balanc random load condit sever localitypreserv cost metric compar first case task transfer cost taken chang distanc actual locat data structur propos new locat ie transfer task old i dist function give network distanc two comput old cur new origin task map current propos task remap new propos task remap respect short cost transfer posit increas distanc propos new locat task old locat cost neg distanc decreas cost take noth account regard locat task communic so task move away neighbor encourag move back thu one would expect metric retard local degrad prevent it anoth metric consid cost chang task distanc origin locat comput first start case task encourag move back began local good begin with one would expect metric preserv local one would expect improv local poor initi final cost metric use base idea center commun word task ideal comput reloc determin find center minim old j v ij cost commun task j twodimension mesh exampl one would calcul weight averag rowcolumn locat task neighbor cost move task chang distanc ideal locat center i cours task neighbor move time ideal locat chang somewhat select process case howev one would expect ideal locat task chang greatli even neighbor move somewhat one would expect metric would improv poor local well maintain exist local three metric describ compar zerocost metric synthet comput similar describ abov again comput begun mesh paragon node task each task connect threedimension grid task averag two neighbor local comput one neighbor four adjac comput thu initi local high load balanc brought effici percent task load chang effici reduc around percent task would calcul averag distanc neighbor figur show averag distanc function number load balanc step one see local decay rapidli attempt made maintain it first cost metric slow decay prevent it second third metric limit increas averag distanc metric factor respect case also present figur local poor initiallytask assign random comput third metric use improv local ultim reduc averag distanc commun task percent within percent local obtain problem start high local figur show cost metric tremend impact local applic metric use fairli simpl complex metric might yield even better result applic experi load balanc algorithm present section appli two largescal applic run scalabl concurr program librari formerli call averag distanc number load balanc step zerocost distcur distorig averag distanc number load balanc step distcent figur averag distanc commun task function load balanc step variou local metric left improv initi poor local right concurr graph librari chapter give brief overview program librari well applic includ algorithm specif problem appli also provid perform number load balanc demonstr practic efficaci load balanc framework one applic expos interest problem second case scalabl concurr program librari scalabl concurr program librari scplib provid basic program technolog support irregular applic scalabl concurr hardwar scplib task commun one anoth unidirect channel map task comput control librari hidden user commun channel sinc map work comput explicit possibl dynam chang map long user provid mechan send receiv context task ie task state scplib use gener abstract user reus exist checkpoint routin readwrit data fromto commun port instead file port figur show exampl comput graph map set comput well schemat represent softwar structur individu task function layer top systemspecif messagepass io thread synchron routin result small implement interfac port li routin routin physic state user comm figur comput graph nine task repres shade disc map onto four user portion compris task state routin act upon it librari portion compris commun list auxiliari routin load balanc granular control visual function brari new architectur typic requir day fact librari use wide rang distributedmemori multicomput cray td te intel paragon avalon a sharedmemori system silicon graphic powerchalleng origin network workstat pc latter run window nt plasma reactor simul direct simul mont carlo dsmc techniqu simul collision plasma rarefi gase dsmc method solv boltzmann equat simul individu particl sinc imposs simul actual number particl realist system small number macroparticl use repres larg number real particl simul million macroparticl made practic decoupl interact first space particl move divid grid collis consid particl within grid cell furthermor collis detect path intersect rather approxim stochast model paramet rel veloc particl question statist method use recov macroscop quantiti temperatur pressur limit simplifi dsmc comput move particl send away particl exit current partit receiv particl neighbor partit collid particl gatherscatt obtain global statist calcul termin condit base global statist converg figur concurr dsmc algorithm interact fashion order comput drastic reduc hawk threedimension concurr dsmc applic use model neutral flow plasma reactor use vlsi manufactur dsmc algorithm execut partit problem given figur task concurr graph repres partit physic space execut algorithm state task collect grid cell particl contain region physic routin incorpor associ collis chemistri surfac model commun list use implement interpartit transfer result particl motion gaseou electron confer gec reactor standard reactor design studi extens earli version hawk use regular hexahedr grid simul gec reactor conduct cell grid cell cell repres region reactor particl may move remain dead particleless cell compris region outsid reactor simul million particl conduct use grid descript detail percent grid cell actual contain particl even cell contain particl densiti vari order magnitud consequ one would expect standard spatial decomposit map grid would result ineffici comput inde case gec grid divid partit map onto processor intel paragon wide varianc particl densiti partit overal effici comput quit low approxim percent effici improv percent load balanc includ cost load balanc result percent reduct run time figur show correspond improv workload distribut recent version hawk code use irregular tetrahedr grid simul conduct cell grid gec reactor problem run processor intel paragon processor approxim five partit map it although load chang rapidli earli timestep number particl increas zero million load balanc abl maintain effici percent reduc runtim factor load balanc problem requir averag second per attempt hawk also use simul proprietari reactor design intel cor porat simul conduct network ibm rs workstat without load balanc effici comput typic percent load balanc abl maintain effici percent increas throughput much factor two mani load balanc techniqu describ paper also incorpor anoth dsmc code develop research russian institut theoret appli mechan case howev work transfer vector satisfi transfer entir partit fromon comput anoth rather exchang small group cell along partit interfac adjac comput featur approach local natur maintain sinc one do effect adjust partit bound ari problem space capsul reentri run processor intel paragon percent linear speedup obtain dynam load balanc versu percent ideal speedup random static map percent ideal speedup load bal anc interest note random static map actual achiev fairli good load balanc commun wide distribut cell costli reduc scalabl ion thruster simul particleincel pic comput techniqu use simul highli rarefi particl flow presenc electromagnet field fundament featur pic order number processor percent util figur util distribut time step dsmc code load balanc reduc method calcul interact particl field grid superimpos comput domain electromagnet effect particl respect vertic grid cell contain calcul then govern field equat solv grid point typic use iter solver field solver converg effect new field propag back particl adjust trajectori ac cordingli reciproc interact calcul repeatedli throughout comput termin criteria such particl concentr reach scalabl concurr program laboratori collabor space power propuls laboratori mit depart aeronaut astronaut develop d concurr simul capabl call plumep pic algorithm partit problem present figur state associ task compris portion grid particl contain within correspond physic space commun list associ task graph describ possibl destin particl move outsid partit data depend requir implement field solver physic routin use figur describ dynam particl movement solut field phenomenon ion thruster backflow studi simul esexargo satellit configur use paramet hugh thruster grid use contain million axial align hexahedra partit block map onto pic comput time exhaust move particl send away particl exit current partit receiv particl neighbor partit updat charg densiti base new particl posit gatherscatt obtain global norm calcul termin condit base global norm global norm termin condit send boundari potenti neighbor receiv boundari potenti neighbor comput singl iter field solver gatherscatt obtain new global norm pic comput figur concurr pic algorithm processor cray td cours simul million particl move domain distribut particl highli irregular moreov distribut chang dramat time result static map grid partit comput would result larg ineffici point comput fact illustr figur show comput spend larg percentag time idl even load balanc idl time comput often better still high certainli load balanc algorithm improv work distribut extent dsmc code closer examin reveal shortcom due twophas natur pic code dsmc applic singlephas com putat load balanc fairli straightforward pic code two phase particl transport field solut differ load distribut characterist result balanc total load two phase given comput balanc individu phase comput fact graphic illustr figur one see load distribut total load comput improv dramat at least sens varianc greatli reduc load distribut two compon phase remain poor consequ overal effici low see effect smaller scale consid case two comput shown figur one unit number time sec idl commun particl push field solv figur run time breakdown time step pic code start sever differ time step pair adjac bar show averag time compon comput load balanc respect the decreas field solv time last time step due fact field reach steadi state henc iter solver converg quickli number processor percent util total field solv particl push number processor percent util total field solv particl push figur preload balanc left postload balanc right util distribut comput base total work field solver work particl push work phase one work unit phase two work comput phase one phase two unit obvious comput total amount work howev synchron complet phase one comput phase two begin comput ineffici first comput must wait second start phase two second comput must wait first comput complet exampl suggest one need load balanc strategi jointli balanc phase comput impract altern two distribut exampl phase may fine interleav make cost frequent redistribut work prohibit one way consid load vector instead scalar vector compon load phase compu tation compon balanc separ problem encount would circumv comput would roughli equal amount work phase impli total amount work also equal henc littl idl time would occur synchron point phase notic characterist pic code also impli that gener one must assign multipl partit comput region grid high particletocel ratio partit region must pair partit low particletocel ratio achiev effect load balanc phase similar situat illustr figur show simpl domain cannot divid two contigu piec balanc load two comput map relat work present summari work relat methodolog techniqu use paper gradient load balanc method explor extens literatur point basic gradient model may result over undertransf work lightli load processor author present workaround comput check underload processor still underload commit transfer conduct directli overload underload processor method scalabl diffus gde strategi shown inferior per comput comput phase phase phase comput comput phase add synchron figur demonstr low effici balanc system exampl comput total amount work ie load balanc sens how ever synchron interpos unbalanc phase idl time introduc formanc recurs bisect method oper partit problem domain achiev load balanc reduc commun cost present techniqu appear context static load balanc although formul appropri dynam domain repartit exist mani method exist repartit comput includ variou geometr base techniqu interest method util spectral properti matrix encapsul adjac comput unfortun method fairli high comput cost also blur distinct phase load balanc present section combin limit make techniqu unsuit use gener purpos load balanc framework heurist load balanc particl simul relev two applic target section present interest note author observ phenomenon appli method pic applic seen section name method work well particl push phase substanti domin field solv phase due fact imbal field phase complet neglect inher scalar approach author suggest remedi situat howev taskbas approach load balanc includ scalabl task pool heurist phase imbalanc balanc phase comput comput phase phase figur bar repres onedimension space phase one domin one end phase two domin other domain cannot divid evenli two comput singl cut cut middl would balanc total load neither compon phase would balanc cut anywher els might either balanc first second phase both way achiev balanc assign multipl partit comput transfer task comput base probabl vector scalabl iter bid model techniqu make assumpt complet task independ task load uniform applic context work conclus futur work paper describ practic comprehens approach load balanc appli nontrivi applic incorpor approach new diffus algorithm offer good tradeoff total work transfer run time task select mechan allow task size commun cost guid task movement work remain done howev follow three area improv could dramat increas effect util strategi present here consid load vector rather scalar quantiti experi pic code section clearli demonstr limit scalar view load load balanc algorithm clearli achiev good balanc total load comput fail balanc compon load result overal effici low jointli balanc phase compris comput one hope achiev good overal load balanc view load vector one way accomplish load balanc heterogen case case comput heterogen process capac rel capabl comput must taken account work movement decis load diffus algorithm situat analog heat diffus heterogen media task select must also modifi account chang task runtim migrat one comput anoth use dynam granular control taskbas load balanc strategi fail whenev load singl task exce averag load comput matter task move comput map overload divid task smaller subtask one allevi problem provid viabl work movement option gener task divis conglomer use dynam manag granular comput maintain best number task increas decreas avail option necessari incorpor chang load balanc framework could appli greater varieti situat meantim method describ use fine medium grain singlephas applic run homogen comput resourc acknowledg access intel paragon provid california institut technolog center advanc comput research access cray td provid nation aeronat ic space administr jet propuls laboratori facilit california institut technolog r a fast multilevel implement recurs spectral bisect partit unstructur problem dynam load balanc distribut memori multiprocessor dynam load balanc use tasktransf probabl dynam load balanc concurr plasma pic code a parabol load balanc algorithm a distribut implement task pool a multilevel diffus method dynam load balanc parallel dsmc strategi com putat dynam load balanc parallel particl simul mimd com puter the gradient model load balanc method parallel loadbalanc extens gradient model comput complex numer recip c concurr simul plasma reac tor threedimension plasma paricleincel calcul ion thruster backflow contamin mpi complet ref erenc a partial asynchron iter algorithm distribut load balanc the concurr an improv spectral bisect algorithm applic dynam load balanc dynam loadbalanc pde solver adapt unstructur mesh a load balanc techniqu multiphas computa tion strategi dynam load balanc highli parallel comput perform dynam load balanc algorithm unstructur mesh calcul load balanc parallel comput tr ctr j ray optim distribut objectori system addendum proceed confer objectori program system languag applic addendum p januari minneapoli minnesota unit state javier roca j carlo ortega j antonio lvarez julia mateo data neighbor local load balanc oper proceed th wsea intern confer comput p juli athen greec k here j lser j markwardt dibsim parallel function logic simul allow dynam load balanc proceed confer design autom test europ p march munich germani bin fu zahir tari dynam load distribut strategi system high task variat heavi traffic proceed acm symposium appli comput march melbourn florida a cort a ripol f ced m a senar e luqu asynchron iter load balanc algorithm discret load model journal parallel distribut comput v n p decemb marco conti enrico gregori fabio panzieri qosbas architectur geograph replic web server cluster comput v n p april k antoni j garofalaki i mourto p spiraki hierarch adapt distribut algorithm load balanc journal parallel distribut comput v n p januari g georg yin chengzhong xu le yi wang optim remap dynam bulk synchron comput via stochast control approach ieee transact parallel distribut system v n p januari fong chengzhong xu le yi wang optim period remap dynam bulk synchron comput journal parallel distribut comput v n p novemb hansheinrich ngeli dynam load balanc diffus heterogen system journal parallel distribut comput v n p april lapsun cheung yukwok kwok load balanc approach distribut object comput system journal supercomput v n p februari alexand e kostin isik aybay gurcu oz random contentionbas loadbalanc protocol distribut multiserv queu system ieee transact parallel distribut system v n p decemb yukwong kwok lapsun cheung new fuzzydecis base load balanc system distribut object comput journal parallel distribut comput v n p februari saeed iqbal graham f carey perform analysi dynam load balanc algorithm variabl number processor journal parallel distribut comput v n p august arnaud legrand hlne renard yve robert frdric vivien map loadbalanc iter comput ieee transact parallel distribut system v n p june changxun wu randal burn handl heterogen shareddisk file system proceed acmiee confer supercomput p novemb faouzi kamoun toward best mainten practic commun network manag intern journal network manag v n p septemb kirk schloegel georg karypi vipin kumar wavefront diffus lmsr algorithm dynam repartit adapt mesh ieee transact parallel distribut system v n p may changxun wu randal burn tunabl random load manag shareddisk cluster acm transact storag to v n p februari jack dongarra ian foster geoffrey fox william gropp ken kennedi linda torczon andi white refer sourcebook parallel comput morgan kaufmann publish inc san francisco ca