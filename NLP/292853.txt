t hector distribut runtim environ a abstracthar comput capabl network workstat promis offload work overload supercomput onto larg idl resourc overnight sever capabl need thi includ support architectureindepend parallel program environ task migrat automat resourc alloc fault toler hector distribut runtim environ design present capabl transpar programm mpi program run environ homogen cluster modif sourc code need design hector intern structur sever benchmark test present b introduct previou work a network workstat network workstat avail mani year sinc modern network workstat repres total comput capabl order supercomput strong motiv use network workstat now type lowcost supercomput note typic institut access varieti comput resourc networkint connect rang workstat sharedmemori multiprocessor highend parallel supercomput context paper network workstat now consid network heterogen comput resourc may actual worksta tion runtim system parallel program must sever import properti first scientif programm need way run supercomputerclass program system littl sourcecod modif common way use architectureindepend parallel program standard code applic permit program sourc code run now sharedmemori multiprocessor latest gener parallel supercomput exampl two major messagepass standard emerg thi pvm mpi well numer distribut share memori dsm system second abil run larg job network resourc prove attract workstat user individu workstat still use mundan task word proce work fund part nsf grant no eec amend onr grant no n r sing task migrat need offload work user workstat return station owner abil also permit dynam load balanc fault toler note that paper task piec parallel program program job complet parallel pro gram messagepass model use here program alway decompos multipl commun task platform host comput run job idl rang workstat smp third runtim environ now need abil track avail rel perform resourc program run need inform conduct ongo perform optim true sever reason rel speed node network workstat even homogen workstat vari wide workstat avail function individu user user creat extern load must work around program may run effici redistribut certain way fourth fault toler extrem import system involv dozen hundr workstat exampl chanc singl workstat go overnight chanc network station stay overnight complet runtim system comput must therefor includ architectureindepend code interfac task migrat automat resourc alloc faulttoler also desir system support featur sourcecod modif individu compon alreadi exist variou form review order goal work combin individu compon singl system b parallel program standard wide varieti parallel distribut architectur exist today run parallel program vari degre interconnect interconnect topolog bandwidth latenc scale geograph distribut offer wide rang perform cost tradeoff applic solv differ class problem gener character basi support physic share memori two major class parallel program paradigm emerg two major class parallel architectur sharedmemori model origin program tightli coupl processor offer rel conveni messagepass model well suit loos coupl architectur coarsegrain applic program model implement paradigm classifi manifestationeith extens exist program languag custom languag system intend network workstat felt messagepass ingbas parallel program paradigm close reflect underli physic structur also felt paradigm express exist scientif program languag order draw exist base scientif programm pvm mpi standard support goal mpi parallel program environ select abl call c fortran program provid robust set extens send receiv messag task work parallel discuss rel merit pvm mpi outsid scope paper decis partial driven ongo work mpi implement alreadi conduct mississippi state argonn nation laboratori detail discuss taxonomi parallel paradigm system rational decis found one desir properti runtim system servic offer transpar applic programm program written common program standard modifi access advanc runtimesystem featur level transpar permit program maintain conform program standard simplifi code develop r c comput system system har aggreg perform network resourc develop quit time exampl one good review cluster comput system conduct prepar syracus univers list commerci research system result survey along comparison hector environ discuss paper summar found hector environ mani featur fullfeatur system such platform comput lsf florida state dq ibm load level genia codin univers wisconsinmadison condor support simultan combin programmertranspar task migrat loadbal anc fulli automat dynam loadbalanc support mpi job suspens uniqu addit commit programm transpar led develop extens runtim informationgath program run breadth depth inform gather uniqu also ad support typic commerci featur gui configur manag tool notic lack hector research project also mention point at least two research project use name hector work distribut comput multiprocess first wellknown hector multiprocessor project univers toronto second system support distribut object python crc distribut system technolog univers queensland hector environ describ paper unrel either three research system alloc task across now degre support task migrat figur summar system condor carmi prospero mist dq fulli dynam processor alloc realloc stop task migrat usertranspar load balanc usertranspar fault toler work mpi modif exist mpipvm program use exist oper system figur comparison exist task alloc one system special version condor name carmi carmi alloc pvm task across idl workstat migrat pvm task workstat fail becom nonidl two limit first cannot claim newli avail resourc exampl attempt move work onto workstat becom idl second checkpoint task one task need migrat stop task one task need migrat slow program execut sinc migrat task must stop anoth autom alloc environ prospero resourc manag prm parallel program run prm job manag customwritten program job manag act like purchas agent negoti acquisit system resourc addit resourc need prm schedul use element condor support task migrat checkpoint use inform gather job node manag realloc r resourc notic use prm requir custom alloc program parallel applica tion futur version may requir modifi oper system kernel mist system intend integr sever develop effort develop autom task alloc use prm alloc task user must custombuild alloc scheme program mist built top pvm pvm support indirect commu nicat potenti lead administr overhead messag forward task migrat implement mpi hector use global avail list task host incur overhead note mpi indirect commun hector overhead support it everi task send messag directli receiv task overhead requir task migrat notifi everi task new locat shown below process littl overhead even larg parallel applic distribut queu system dq design manag job across multipl comput simultan support one queue master process user request resourc firstcom firstserv basi user prepar small batch file describ type machin need particular applic for exampl applic may requir certain amount memori thu resourc alloc perform job start current builtin support task migrat fault toler issu command applic migrat andor checkpoint themselv support pvm mpi applic differ system hector highlight two key differ among cluster comput system first tradeoff task migrat mechan programmerwritten versu support automat environ second tradeoff central decentr decisionmak informationgath d task migrat context network resourc two strategi emerg creat program checkpoint task migrat imag first checkpoint routin written applic programm presum suffici familiar program know checkpoint creat effici for ex ampl place run state rel small free local variabl know variabl need creat complet checkpoint second checkpoint routin transfer entir program state automat onto anoth machin entir address space regist copi care restor way comparison userwritten checkpoint routin inher space advan tage state size inher minim may crossplatform compat advantag state written architectureindepend format userwritten routin two disadvantag first add code burden onto programm must write also maintain checkpoint routin second checkpoint avail certain predetermin place program thu program cannot checkpoint immedi demand would appear syracus survey system commerci system support userwritten checkpoint checkpoint migrat one guess userwritten checkpoint much easier resourc manag system developersr sponsibl correct checkpoint transfer applic programm note earlier discuss research system prm dq also userwritten checkpoint least one system not discuss syracus report use capabl perform crossarchitectur task migrat condor hector use completestatetransf method form state transfer inher work across homogen platform involv actual replac program r state also complet transpar programm requir modif addit sourc code altern approach modifi compil order retain necessari type inform pointer inform two piec inform which data structur contain pointer pointer point to need migrat accomplish across heterogen platform least one system the msrm librari louisiana state univers implement msrm approach may make automat crossplatform migrat possibl expens requir custom compil increas migrat time system correct consist task migrat capabl simpl add check point task transfer state disk instead anoth task becom possibl creat checkpoint program use fault recoveri job suspens thu hector condor provid checkpointandrollback capabl howev task migrat accomplish two technic issu deal with first program state must transfer complet correctli second case parallel pro gram commun progress must continu consist is task must agre statu commun among themselv hector solut issu discuss section iib e automat resourc alloc tradeoff central alloc mechan task program schedul central polici central design administ competit distribut model program compet andor bid need resourc bid agent written part individu program besid classic tradeoff central distribut process such overhead scalabl impli tradeoff degre support requir applic programm intellig program acquir resourc need customwritten alloc approach place larger burden applic programm permit wellinform acquisit need resourc sinc overal goal hector minim programm burden use priori inform customwritten alloc polici discuss section iic degre priori applic inform boost runtim perform explor time exampl nguyen et al shown extract runtim inform minim intrus substanti improv perform parallel job schedul approach use combin softwar specialpurpos hardwar parallel comput measur program speedup effici use inform improv program perform howev nguyen work relev applic vari number task respons optim mani parallel applic launch specif number task vari program run addit alli requir use ksr specialpurpos time hardwar gibbon propos simpler system correl runtim differ job queue even rel coars measur shown improv schedul permit schedul model close approach wellknown shortest job first sjf algorithm system develop reason accur estim job complet time base histor trace program submit queue sinc inform coars gather histor cannot use improv perform singl applic runtim it can howev improv effici schedul manag sever job onc recent result feitelson weil shown surpris result user estim runtim make perform job schedul wors perform estim author conced addit work need area highlight r usersuppli inform unreli addit reason hector use it approach shown abil detail perform inform improv job schedul howev summar approach sever shortcom first requir specialpurpos hardwar second system requir user modif applic program order keep track relev runtim perform inform third inform gather rel coars fourth system requir applic dynam alter number task use fifth usersuppli inform inaccur also mislead goal hector resourc alloc infrastructur overcom shortcom anoth tradeoff degre support dynam chang workload comput resourc avail ideal distribut runtim system automat alloc job avail resourc move around program run order maxim perform order releas workstat back user current cluster system support goal vari degre exampl system launch program enough resourc such enough processor becom avail approach taken ibm loadlevel exampl system migrat job workstat becom busi condor appear that time syracus survey hector attempt move job onto newli idl resourc well f goal object hector desir design system support fulli transpar task migrat fulli automat dynam resourc alloc transpar fault toler hector distribut runtim environ develop test mississippi state univers requir necessit develop taskmigr method modifi mpi implement would continu correct commun task migrat runtim infrastructur could gather process runtim perform inform simultan creat primari aim paper discuss step detail well step need add support fault toler hector design use central decis maker call master alloc perform optim make alloc decis use small task run candid processor detect idl resourc monitor perform program execut task call slave alloc sa amount overhead associ sa import design consider individu sa current updat statist everi second thi time interv compromis timeli overhead process take ms sun sparcstat correspond extra cpu load process read task cpu usag add s per task everi time sa updat statist everi s ad read detail usag inform therefor add cpu load per task exampl sa supervis mpi task add cpu load mpi program launch individu piec task alloc avail machin migrat need sa commun maintain awar state run program structur diagram figur r slave alloc master alloc perform inform system info command command perform inform slave alloc figur structur hector run mpi program key design featur design process describ section ii benchmark test measur hector perform describ section iii paper conclud discuss futur plan ii goal obstacl accomplish a eas use system must easi use gain widespread accept context eas use support two differ way first adher exist wide accept standard allow programm use environ minim amount extra train second complex task alloc migrat fault toler hidden unsophist scientif programm is scientif programm abl write program submit resourc manag system without provid addit inform program use exist standard hector run exist workstat smp use exist oper system current sun system run suno solari sgi system run irix sever part system task migrat correct socket commun would simpler support modif made oper system howev would dramat limit use system use exist resourc decis made modifi oper system mpi pvm standard provid architectureindepend parallel code capabl c fortran mpi pvm support wide grow bodi parallel architectur rang network workstat highend smp parallel mainfram repres system gain gain widespread accept alreadi exist sizabl bodi programm use it hector support mpi code standard total transpar task alloc fault toler experi mississippi state nsf engin research center indic scientif programm unwil or unabl provid inform program size estim rruntim commun topolog situat exist two reason first programm solv physic problem program mean end second may enough detail knowledg intern work comput provid inform use comput engin scientist hector therefor design oper priori knowledg program execut consider complic task alloc process almostnecessari step order promot transpar task alloc programm and result eas use scientif programm current support futur version hector may abl benefit usersuppli priori inform new implement mpi name mpitm creat support task migrat fault toler mpitm base mpich implement mpi order run featur programm mere relink applic hectormodifi version mpi modifi mpi implement hector central decisionmak handl alloc migrat automat programm simpli write normal mpi program submit hector execut hector exist mpitm librari collect execut librari link applic provid selfmigr facil complet mpi implement interfac runtim system execut includ sa ma textbas commandlin interfac ma rudimentari motifbas gui instal roughli complic instal new mpi implement complet applic packag support multipl platform hector support sun comput run suno solari sgi comput run irix greatest obstacl solari dynam linker which due abil link runtim creat incompat version execut file creat undesir situat migrat imposs nearli complet ident machin consequ divid sun comput mani smaller cluster situat exist combin two factor first hector perform automat ic programmertranspar task migrat without compil modif thu cannot move pointer must treat program state unalter binari imag second dynam link program may map system librari associ data segment differ virtual address run one program differ machin solut adopt condor rewrit linker more accur replac solari dynam linker customwritten one make migrat system librari data segment possibl option consider hector current support b task migrat correct state transfer state run program unix environ consid six part first actual program text may dynam link refer data may static dynam locat second program static data divid initi uniniti section third use dynam alloc data store the heap fourth program stack grow subroutin function call use local visibl data dynam data storag fifth cpu contain intern regist usual use hold result intermedi calcul sixth unix kernel maintain systemlevel inform program file descriptor summar figur r cpu user memori kernel memori visibl user visibl user text static data heap regist stack kernel struct wrapper function keep track kernel inform place visibl user figur state program execut first five part state can principl transfer two commun userlevel program one except occur program dynam link part program text data may resid virtual address two differ instanti program discuss abov matter investig sixth part program state kernelrel inform difficult transfer invis userlevel program inform may includ file descriptor pointer signal handler memorymap file without kernel sourc code almost imposs read structur directli oper system unmodifi solut creat wrapper function let program keep track kernelrel structur user code modifi kernel structur must pass trap interfac trap way userlevel code execut supervisorlevel function unix syscallh file document system call use trap system call built top them one creat function name argument system call open argument function pass assemblylanguag routin call system trap proper ly remaind function keep track file descriptor path name permiss inform lseek function keep track locat file pointer call chang file pointer such read write also call instrument lseek file pointer inform updat automat permit migrat task resum read write file proper place discov mpi environ task migrat ad also use signal memori map the latter due fact gethostbynam make call mmap system call affect signal handl memori map replac wrapper function well task migrat system requir knowledg run program imag particular oper system develop small amount assembl languag relianc certain properti pertain signalhandl affect portabl task migrat sy tem assembl languag need way save restor regist call trap sinc task migrat routin insid signal handler also necessari restart program abl exit signal handler coher system perform similar style systemsupport task migrat mist condor also port linux alpha hp environ seem indic style task migrat reason portabl among unixbas oper sy tem probabl differ oper system strong structur similar r interest note systemlevel migrat support windowsntbas system report exact sequenc step involv actual state transfer describ detail two test confirm method speed stabil describ section iii keep mpi intact task migrat protocol state restor process describ guarante preserv commun socket point execut program fragment messag may resid kernel buffer either send receiv side solut notifi task singl task migrat task commun task migrat send endofchannel messag migrat task close socket connect them task mark migrat task under migrat tabl task attempt initi commun block migrat complet task migrat receiv endofchannel messag assur messag trap buffer is know messag resid data segment migrat safe state transfer anoth global updat need task know new locat know commun resum it task migrat remain abl initi connect commun one anoth mpi standard the origin mpi standard permit static task tabl is number task use parallel program fix program launch it import note static number task program mpi limit limit hector also one import differ pvm mpi thu updat tabl requir synchron mpi confus mpi program mpi standard a newer standard current develop permit dynam chang task tabl but proper use critic section task migrat interfer program written mpi standard seri step need updat task tabl global atom hector sa use provid synchron machinetomachin commun migrat task termin exact sequenc step requir synchron task updat commun statu consist describ detail note crash middl migrat program deadlock use global synchron guarante intertask consist task termin protocol task termin present anoth complic task migrat anoth task termin task migrat never receiv endofchannel messag termin task two measur taken provid correct program behavior first limit mpi program one migrat one termin time handshak need migrat termin second protocol involv sa ma develop govern task termin describ below task prepar termin notifi sa task receiv process tabl updat request endofchannel eoc messag block request migrat cannot allow migrat send termin signal sa notifi task readi termin pend migrat termin finish notifi sa task ha permiss termin block and enqueu termin migrat request termin end sa notifi task task send sa final messag exit sa notifi task exit permit migrat termin r notic improperli written program may attempt commun task task end world messagepassingbas parallel program programm mistak behavior program undefin point program deadlock hector the program deadlock hector minim migrat time oper system alreadi one mechan store program state core dump creat file program regist data segment stack first version state transfer use capabl move program around two advantag approach first built oper system second symbol debugg tool extract use inform core file disadvantag approach first multipl network transfer need disk space share network mean state actual copi multipl time second speed transfer limit speed disk other unrel program share disk one way around shortcom transfer state directli network origin implement mist team network state transfer overcom disadvantag inform written network slightli modifi corefil format the modif unus stack space transmit penalti use suno core file format inform written network socket connect applic itself instead written file oper system notic retain advantag corefil tool compat experi show three time faster shown below c automat resourc alloc sourc inform hector overal goal attempt minim programm overhead context awar program behavior incur expens access potenti benefici programspecif inform approach use base experi scientif programm within author research center unwil invest time effort use new system perceiv burden sourcecod modif approach dictat hector abl oper priori applic knowledg which turn increas requir depth breadth inform gather runtim lack priori inform make hector alloc decisionmak difficult howev experi confirm inform abl extract runtim improv perform abil exploit newli idl resourc especi help structur rang way resourc alloc structur complet central locat complet distribut hector resourc alloc use featur both decisionmak portion and global synchron resid therefor complet central ize advantag singl central alloc decisionmak easier modifi test differ alloc strategi sinc unix oper system permit signal sent host necessari execut process run candid host sinc necessari pro cess use gather perform inform well thu informationgath informationexecut portion fulli distribut carri sa collect inform two type inform master alloc need order make decis first need know resourc potenti avail host consid rand power are second need know effici extent resourc use much extern nonhector load much load variou mpi program control impos rel perform candid host determin slave alloc start it run livermor loop actual measur float point per formanc also possibl slave alloc measur disk avail physic memori size exampl inform transmit master alloc maintain central databas inform current resourc usag monitor analyz inform kernel candid processor alloc algorithm draw idl time inform cpu time inform percentag cpu time devot nonhectorrel task percentag cpu time use detect extern workload interact user log in criterion automat migrat hector mpi librari contain addit detail selfinstrument log amount comput commun time task expend data gather sa use sharedmemori forward ma detail discuss agentbas approach informationgath well test result may found make decis one primari advantag performancemonitoringbas approach abil claim idl resourc rapidli shown below test busi workstat day show migrat newli avail resourc reduc run time promot effect use workstat implement test sophist alloc polici also way d fault toler abil migrat task midexecut use suspend task fact fault toler histor one major motiv task migrat effect task transfer state file checkpoint program node failur detect file use roll back program state last checkpoint calcul checkpoint node failur lost calcul checkpoint not may repres substanti time save also known unrel failur andor routin mainten may occur need middl larg program run abil suspend task help shown order guarante program correct task must checkpoint consist is task must consist point execut messag exchang statu exampl messag transit must fulli receiv transmiss new messag must suspend case migrat termin seri step need checkpoint roll back parallel program checkpoint protocol follow step taken checkpoint program decid checkpoint program whatev reason thi current support manual user command may eventu done period basi wait pend migrat termin finish notifi task program via sa prepar checkpoint task send endofchannel eoc messag connect task receiv eoc connect task again guarante messag transit eoc exchang task notifi sa readi checkpoint inform sa size state inform inform pass ma receiv confirm everi task readi begin actual checkpoint process notifi task task begin checkpoint task finish transmit state or write file notifi ma note possibl one task checkpoint time experi order checkpoint describ below task checkpoint write small bookkeep file contain state inform pertin sa for exampl contain execut time point checkpoint total execut time accur job roll back checkpoint broadcast either resum suspend command task task either resum execut stop respect former use creat backup copi task event futur node failur latter use necessari remov job temporarili system rollback protocol follow step taken roll back checkpoint program given name checkpoint file provid necessari inform restart program alloc task avail workstat program launch base alloc notifi sa first machin sa restart task state file name found checkpoint file sent sa task notifi sa restart properli wait tabl updat receiv confirm one task success restart notifi sa next task continu task restart task rollback sequenti primarili perform reason file server read checkpoint send socket newli launch task perform effici one checkpoint sent time confirm arriv ma build tabl similar use mpi task themselv list hostnam unix pid task parallel program task restart tabl broadcast task note broadcast occur via hector runtim infrastructur invis mpi program use mpi broadcast mpi inact rollback task resum normal execut receiv tabl updat entir program restart checkpoint server case task migrat two way save program state one way program write directli checkpoint file way launch checkpoint server machin larg amount physic mount disk space the latter concept first implement condor group task transmit state via network directli server server write state directli local disk reason task cannot write state local disk obviousif machin crash backup copi state would lost well checkpoint server method expect faster use direct socket connect local disk write effici write file network note mani local disk cach strategi use system like nf work well checkpoint checkpoint file typic written read back differ novel schedul strategi checkpoint servic describ test below issu faulttoler is repres singl point failur sa modifi termin themselv task run them lose contact r ma thi featur intent ad total termin program distribut across dozen workstat quit tediou unless autom featur disabl sa task could continu work without ma although task migrat job launch would ceas job termin would deadlock checkpoint collect system enabl job restart sa restart check pointandrollbackbas fault toler toler fault runtim infrastructur anoth approach solv problem support rapid fault toler would incorpor exist group commun librari such isi horu use me sagedupl facil one possibl design describ mean rapid fault detect also ad futur version hector sa send perform inform period the current period second may grow larger test perform sa send perform updat suitabl timeout assum node run properli job node roll back strategi detect heavili overload node well catastroph fail node iii benchmark test a eas use exampl exist comput fluid dynam simul obtain larg complex total data size around gbyte line fortran sourc code simul alreadi parallel code mpi test parallel comput correct modif sourc code program relink run complet correctli hector highlight abil run real exist mpi program b task migrat two differ task migrat mechan propos implement test first use core dump write program state transfer differ machin second transfer inform directli socket connect order compar rel speed task differ size migrat time two sparcstat s connect ethernet test run normal daili oper engin research center result show figur program size kbyte time tomigr sec core file transfer network transfer figur time migrat task differ size r consid exampl program size mbyte core dump version migrat second inform transfer rate roughli mbitsec net work state transfer version migrat second inform rate mbitsec latter close practic limit ordinari mbit ethernet typic condit show task transfer limit network bandwidth overal network state transfer time faster test program run minim size network state transfer task migrat time without error stop file server went due unrel fault the file server crash effect lock local machin hector becam lock well forkandexec need launch new task could execut overhead associ broadcast tabl updat measur migrat task insid increasingli larg parallel program test run sparcstat ether netconnect sparcstat separ subnet run normal daili oper condit engin research center program follow first one task establish commun number task second task migrat explain abov entail send notif receiv endofchannel messag transfer state program third newli migrat task reestablish commun task time order task migrat reestablish connect measur test repeat time total number task program rang result shown figur cross actual data point line linear regress bestfit data linear regress chosen time migrat linear function number task size migrat imag number task time tomigr sec figur time migrat task number task increas slope bestfit line correspond increment amount time requir notifi one task impend migrat wait eoc messag notifi task migrat complet sinc program size chang neglig number task increas time migrat effect constant result show figur slope correspond ms per task per migrat is process notifi receiv endofchannel reestablish commun take averag ms mbit ethernet yintercept roughli time took task migrat ms transfer took place mbit correspond migrat imag size kbyte c automat resourc alloc one earli test mpi program run two differ scenario determin perform benefit optim schedul first come first serv schedul threeprocess matrix multipli program use x matrix suppli test case machin use test rang mhz sparcbas system processor mhz hypersparcbas system free extern load except note below the matrix multipli commonli use test program data size quit scalabl program structur simpl easili modifi first test run valid advantag use processor load criterion task migrat third workstat load extern workload runtim drop second second third task migrat onto idl workstat second test run show advantag migrat task event faster workstat come avail faster machin becam avail two minut comput runtim drop second second algorithm use task alloc system would migrat slow task program launch extens test run master alloc complet develop matrix multipli program use alloc polici switch two varia tion first variat migrat task workstat becam busi usual exter nal interact load second variat consid migrat whenev workstat becam idl test system written switch two alloc polici altern program run total run made sever day research center fairli wellus sparcstat s onlymigratewhenbusi polici use run time vari second alsomigratewhenidl polici use run time vari second latter case program averag task migrat per run idl worksta tion migrat idl workstat littl effect minimum run time dramat reduc maximum run time averag run time drop second second due reduct maximum run time distribut run time shown figur run time st polici number trial run time nd polici figur distribut run time two task migrat polici improv run time notic case rel small program migrat program increas size penalti migrat increas exampl run fairli larg electromagnet simul show notic increas run time number migrat increas r one point interest interact sometim unawar machin also use run job hector includ paper primari author user accustom small wait applic word processor page virtual memori sinc time migrat task machin order time requir page pro gram addit interact delay notic note case small test program truli rapid migrat practic program state fit within physic memori shown test larger program program size exce physic memori process migrat caus thrash extens test show run varieti applic sun sgi workstat cluster run alongsid actual student use found d fault toler seri test run evalu rel perform differ mean creat schedul checkpoint matrix multipli program use test differ combin strategi matric x x x matric small medium larg checkpoint size respect total checkpoint size mbyte mbyte mbyte respect follow test also run day normal network usag condit first two strategi test involv write directli checkpoint file use nf task command checkpoint simultan allatonc task command checkpoint oneatatim second three serverbas strategi evalu overal effect first server notifi singl task checkpoint task checkpoint one time second server notifi task size one task time permit checkpoint thi label combin figur below third server notifi task task order checkpoint simultan individu task instrument report amount time requir send data either file over nf checkpoint server size program state time checkpoint state use calcul bandwidth usag shown case without figur figur checkpoint server strategi small medium larg allatonc oneatatim figur bandwidth usag differ strategi server mbitsec strategi small medium larg allatonc combin oneatatim figur bandwidth usag differ strategi server mbitsec result easi understand first use nf instead server involv bandwidth penalti use server permit data transfer without addit protocol overhead se cond allatonc strategi clog ethernet substanti reduc perform combin oneatatim strategi essenti ident perform point view parallel program task send data server without interfer task r server work fork separ process task checkpoint process malloc space entir state read state socket write state disk it know size program state task notifi sa size indic readi checkpoint step checkpoint protocol inform pass via ma checkpoint server data captur checkpoint server itself result shown figur individu point actual data point line linear regress curv fit actual data polici test time rang size shown graph total size program checkpoint kbyte time checkppoint program sec oneatatim allatonc combin figur time checkpoint task differ checkpoint server polici reciproc slope line correspond bandwidth obtain strategi summar figur bandwidth mbitsec oneatatim combin allatonc figur impact differ server strategi combin strategi make best use avail bandwidth allatonc strategi worst perform typic ethernetbas commun fact penalti shown less expect author conclus traffic network rat time program run alreadi signific impact use allatonc strategi compound problem note time checkpoint measur server shown figur includ time fork process malloc space time read data network time write disk bandwidth actual function time reason combin strategi show improv performanceth process fork new process make space memori state imag done parallel also notic time requir write disk fork task ad bandwidth combin strategi drop slightli indic overhead forkandmalloc process small iv futur work conclus a test dynam loadbalanc initi concept dynam load balanc implement undergo test probabl modifi test proce sinc one function need optim task simpl provid altern optim strategi test b job prioriti current job run prioriti level concept prioriti need ad futur version permit job schedul like found industri combin prioritybas decis make builtin fault toler explor basi faulttol ant highli reliabl comput system c conclus run parallel program effici network comput resourc requir architectureindepend code standard task migrat resourc awar alloc fault toler anc modifi mpi implement develop task migrat technolog develop complet runtim infrastructur gather perform inform make optimiza tion becam possibl offer servic transpar unmodifi mpi program result system featur automat fulli dynam loadbalanc task migrat abil releas reclaim resourc demand checkpointandrollbackbas fault toler demonstr work larg complex applic sun sgi workstat smp test confirm abil reclaim idl resourc rapidli benefici effect program perform novel checkpoint server protocol also develop test make fault toler effici sinc combin support vari degre featur need parallel comput form basi addit work distribut comput v r visual debug heterogen environ pvm parallel virtual machin cambridg mass mit press monitor messag cluster p parallel program system hector autom task alloc mpi cluster comput review use hector run mpi program network workstat experi hector multiprocessor experi hector multiprocessor hector distribut object python the condor distribut process system provid resourc manag servic parallel applica tion consist checkpoint pvm applic the prospero resourc manag scalabl framework processor alloc distribut system mist pvm transpar migrat checkpoint mpvm migrat transpar version pvm dq user manual dq version portabl checkpoint recoveri memori space represent heterogen network process migrat theori practic parallel job schedul use runtim measur workload characterist parallel process schedul a histor applic profil use parallel schedul util predict schedul ibm sp backfil usertranspar runtim perform optim a task migrat implement messagepass interfac checkpoint migrat unix process condor distribut process system page httpwww livermor fortran kernel comput test numer perform rang an agentbas architectur dynam resourc manag manag checkpoint parallel program softwarebas replic fault toler an architectur rapid distribut fault toler tr ctr samuel h russ katina reec jonathan robinson brad meyer rajesh rajan laxman rajagopalan chunheong tan hector agentbas architectur dynam resourc manag ieee concurr v n p april angela c sodan lin han atopspac time adapt parallel grid applic via flexibl data partit proceed rd workshop adapt reflect middlewar p octob toronto ontario canada hyungsoo jung dongin shin hyuck han jai w kim heon y yeom jongsuk lee design implement multipl faulttoler mpi myrinet m proceed acmiee confer supercomput p novemb kyung dong ryu jeffrey k hollingsworth exploit finegrain idl period network workstat ieee transact parallel distribut system v n p juli