t domainspecif languag regular set string tree a abstractw propos new highlevel program notat call fido design concis express regular set string tree particular view domainspecif languag express finitest automata larg alphabet of sometim astronom size fido base combin mathemat logic program languag concept combin share similar usual logic program languag fido compil finitest string tree automata concept runtimeit alreadi appli varieti problem consider complex practic interest present paper motiv need languag like fido discuss design implement also briefli discuss design criteria domainspecif languag learn work fido show recurs data type unif implicit coercion subtyp merg variat predic logic call monad secondord logic ml tree fido translat first pure ml via suitabl encod final finitest automata mona tool b introduct finitest problem everywher embed mani layer softwar system often difficult extract solv comput basic observ motiv work present paper recent research us colleagu exploit monad secondord logic ml finit string tree solv interest challeng problem case result obtain identifi inher regular problem domain thu reduc problem question regular string tree languag success applic today includ verif concurr system hardwar verif softwar engin pointer verif work progress involv graphic user interfac regular express extend ml document logic www role ml approach provid extraordinarili succinct notat complic regular set applic demonstr notat essenc use describ properti finit state automata regular ex pression grammar would tend cum bersom volumin remov user intuit hardli surpris sinc ml variat predic logic thu natur use also known nonelementarili succinct notat mention abov thu formula ml describ regular set size correspond dfa compar size formula bound finit stack exponenti flip side impress succinct ml correspondingli nonelementari lower bound decis procedur surprisingli mona implement ml handl nontrivi formula larg charac ter due part applic bdd techniqu special algorithm finitest automata care tune implement also turn intermedi automata gener even result subset construct usual big compar automata repres properti reason about success applic ml mona resid common product nich requir specif regular set complic describ mean complic infeas tool basic ml formal simpl quit intuit earli experi quickli indic formal practic suffer primit domain discours bitlabel string tree fact ml specif uncomfort similar assembl code program focu explicit manipul bit pattern ml interpret tree situat even wors sinc theori two successor far less familiar intuit linear sublog similarli earli experi machin lan guag found ml programm spent time debug cumbersom encod contribut paper propos domainspecif program formal fido combin mathemat logic recurs data type believ new way suggest follow four kind valu finit domain recurs data valu label finit domain posit recurs data valu subset posit show mani common program languag concept like sub type coercion unif make sens underli semant base assign automaton and store transform express semant properti allow us view compil process calcul valu determinist finitest automata express evalu calcul number arriv result is automata primit object subject oper reflect semant languag view quit differ method behind statemachin formal use verif such promela languag languag resembl gener purpos languag express singl finitest machin whose state space transit system construct piecem calcul explor state space view howev similar use regular express text match except implement algorithm avoid construct determinist automata fido implement provid along support tool optim compil ml for mula use sever reallif applic also sourc biggest formula yet handl mona articl motiv explain fido particular discuss type system compil techniqu also give sever exampl some taken articl alreadi publish use fido without explain origin design technic consider concern relationship data structur tree automaton represent compil process explain elsewher ml mona basic ml simpl syntax seman tic formula interpret binari tree or string label bit pattern determin valu free variabl firstord term t denot posit tree includ firstord variabl p successor t t secondord term t denot set posit ie monad predi cate includ secondord variabl p empti set union t basic predic set membership set inclus logic permit usual connect first secondord quantifi convent leaf posit p p sublog string use successor mona tool accept formula suitabl ascii syntax produc minimum dfa accept tree satisfi given formula thu satisfi formula equival non empty deriv automaton valid equival total valu free variabl formula encod alphabet automaton thu formula yield alphabet sigma size intern represent automata transit function share multitermin sigmabdd bdd techniqu mona tool process formula hundr thousand charact minut motiv small exampl motiv need highlevel notat assum wish use mona prove follow not hard theorem everi string ab c eventu follow c state theorem ml must first choos encod label a b c purpos introduc two free secondord variabl label encod accord follow arbitrari schema posit p label is correspond bit pattern similarli assign b bit pattern c pattern properti a eventu follow c becom formula regular express ab c similar way encod formula theorem formal state implic oe mona tool readili verifi formula ml tautolog thu prove theorem reason ml specif much volumin promis appar signific overhead encod more over automat check consist use bit pattern support encod usual suppli type system ml string regular set immedi suggest notion type quit common ml formula implic form oe oe formula restrict string coars regular set provid intric restrict thu highlevel version formula could look like string x ab c keyword string po intend declar free variabl two kind formula read as for posit p string x p label a exist posit q also x p q q label c main formula almost mona version proper use label support compil verifi type checker ml interpret tree howev intuit analogu regular express program languag know intuit success formal specifi coars regular set tree recurs data type thu adopt wellknown trust program concept highlevel notat use idea may prove theorem follow string x t arbitrari recurs data type may cours express directli formula translat volumin best perform automat translat also solv problem mona decis procedur work formula whose domain discours binari tree wherea valu recurs data type tree vari number branch the solut rather technic sinc involv bend recurs data type valu shape binari branch tree note regular tree set captur recurs data type consid binari tree node color red green blue subset tree one node color blue recurs data type howev easili captur follow fido specif tree x rgb certainli advanc complic notion data type could similarli adopt how ever fido philosophi reli heavili standard program languag concept describ complex structur oper ambit idiom merg seamlessli logic concept describ complex properti structur gener allow finit domain from name fido deriv valu node finit domain construct conjunct disjunct enumer scalar type thu alphabet tree automata read recurs data type easili becom larg design paper intend proper languag report explain interest unusu concept fido notat provid domain data type finit domain construct simpl scalar list freeli combin product oper union oper j union two finit domain form requir disjoint thu defin domain valu domain state may written stateab complic definit obtain valu as eaabab for mula finit domain valu may unifi use syntax statepcar ps r unif variabl recurs data type quit ordinari except constructor gener singl name finit domain finit domain could cours encod nonrecurs data type chosen separ concept sever reason first distinct tree label seem intuit mani applic second allow oper finit domain tree exampl introduct unif concaten tree would yield undecid formal ism third translat automata finit domain encod bdd wherea tree encod state space often necessari programm control choic exampl is linear data type sequenc state valu termin node label done nonlinear exampl is denot binari tree notat abbrevi correspond scalar variabl four kind variabl fido introduc exampl domain variabl rang state may declar dom s state tree variabl recurs data type variabl x may declar as tree xy tree variabl defin space posit thu posit x cannot use denot node y declar posit variabl may denot posit either x y write po p x valu variabl point node either x y case node point either red black similarli set variabl contain posit union xs ys posit space may declar as set s x quantif variabl quantifi over exampl formula there comput contain loop may involv quantif string tree finit domain posit string x comp dom s state po pq xpq ps qs type type may one four differ kind po set dom tree po kind correspond firstord term ie posit tree set kind similarli encompass secondord term dom kind new compar ml describ valu finit domain final tree kind extens captur entir tree valu within kind type refin set tree name set data type name exampl type posfxygfrstg denot posit node either tree x root subtre one data type r s t refin type prove conveni restrict free variabl model express relativ quantif furthermor type structur prove crucial optim implement type rule impos restrict oper languag gener rule boil trivial statement finit set exampl term type setx type setx also term type posxd term pn type tn data type reach along nsuccessor formula decid pure basi type system exampl p type type setx d static decis exploit fido compil notat conveni formal notat tendenc becom quagmir detail design fido attack problem three differ way first often conveni implicitli coerc valu differ kind express simpl subtyp structur two type relat subtyp follow finit order tree set dom po posset root read order relat decor coercion function posset comput set posit tree root find root posit tree read comput label posit subtyp structur exploit automat insert coer cion note subtyp structur clearli semant coher coercion uniqu ad coercion singleton po set semant coher would fail second allow implicit cast finit do main exampl definit allow valu domain fruit root use directli valu domain veg etabl even though strictli speak express eg castfruitappleveget third allow sensibl default whenev possibl thu name unambigu determin specif mean formal qualifi may dismiss exampl name orang use scalar domain fruit constant fruitorang may written simpli orang specif exampl techniqu consid previou theorem alreadi use number syntact conveni here specif compil insert necessari coercion reconstruct explicit code po qxtpq readqtc somewhat harder read reallif page formula pedant correct automat perform decompil compil writer must also consid need decompil case fido mona specif translat primit logic fine want decid valid iti howev mona also abil gener counterexampl invalid formula mona counterexampl make littl sens fido programm sinc complet differ structur riddl bit pattern consequ fido system provid decompil lift counterexampl highlevel syntax anoth use mona illustr follow section gener specif automata applic fido provid differ decompil express automaton particular kind attribut grammar level recurs data type exampl provid exampl illustr benefit fido notat includ applic aim synthes automata well aim verifi properti case present toy exampl detail sketch larg previous publish applic similar natur synthesi follow exampl consid a fragment of html syntax syntact correct html specif allow exampl document never contain anchor within anoth anchor to confus reader constraint could incorpor contextfre syntax would essenti doubl number nontermin howev easili captur html pars tree valu recurs data type tree express logic formula restrict wish impos anchoru url a html j paragraph j rule j listl list follow transit html j anchor mean node anchor two subtre synthes attribut valu synthes attribut valu simpl idea exploit collabor ericsson telecommun compani formal constraint design architectur verif two specif say distribut system compar mean implic bi implic connect consid simplemind mutual exclus protocol two process share memori turn integ rang task bodi proc begin loop b loop exit d turn task bodi proc begin loop b loop exit c criticalsect d turn loop fido specif model valid interleav comput simpli ask whether safeti properti hold string ff comput let dom pc pc dom r turn apcr bpcr j validstr x comput formula po p x pnextdon let dom st state ps pnextt transst mutexstr x comput formula po p xpcc formula transst end denot binari relat state domain valu hold pair valu simultan match one list case correspond raw mona formula look like p q g q notin posp s sp c posp s posp s posp s sr po s spc posp s posp s sr po osp s spc posp s spc posp po s spc st spc po s posp s posp s po s po s po s posp s posp po s po s sr po p s posp s posp s spc posp s spc posp s sr posp s ss posp s spc po po s po s spc po po s po s spc po s po s po s spc po sinc simplist mutual exclus protocol clearli correct formula tautolog how ever mistakenli tri verifi proc could never enter critic region mutexstr x comput formula po p xpc fido would gener counterexampl computationba computationbb computationcb computationdb computationab computationac computationdon exactli describ comput realist exampl intern event project away mean existenti quanti fier detail account given applic fido languag verif problem pose broy lamport distribut system describ interv logic easili defin fido evolut system finit segment time model recurs linear data type constructor defin current event thu posit variabl instant thousand event possibl distribut system compar describ type type properti verifi requir page fido specif translat ml formula size charact entir differ use fido allow us verifi mani properti pascal program use pointer encod store string use fido formula describ effect program statement automat verifi desir properti exampl follow pro gram perform insitu revers link list color element program case tag color var xyp list begin xnil pxnext xp end system automat verifi result structur still link list conform type list also verifi pointer error occur dangl refer unclaim memori cell howev cannot verifi result list contain color revers order still partial verif clearli serv fine mask filter mani common program error pascal tool add anoth level compila tion simpl pascal program fido specif ml formula final finitest automata accept encod initi store counterexampl program page fido specif expand charact ml formula result automaton cours tini sinc counterexampl largest intermedi result state bddnode direct translat mona would essenti add complex fido compil implement pascal tool implement implement pars symbol analysi type check entir standard way nonstandard everi subterm compil tree automaton intermedi represent ml formula thu resourc alloc becom question manag bit pattern encod domain valu express ml formula strive achiev parsimoni strategi sinc everi bit squander may potenti doubl mona execut time concret exampl consid type encod mona requir seven bit all two type bit use distinguish type tree enum special null node tree singl group bit g use distinguish redblack leaf variant four scalar bit s s s use distinguish valu final domain largest exampl formula macro typetreevar p t p notin t express type tree encod bit pattern null node requir encod arbitrari fanout binari tree exampl tree i i i i i i repres as i i i i i i i i i null node doubl line wellform valu type tree describ mona predic tree tree impos proper relationship type valu node descend technic problem predic natur describ recurs avail ml solv phrase requir univers quantif impos suffici local wellformed properti macro treetreevar all q pq null wf predic describ relationship singl node immedi descend macro nullvar p notin t p notin t p notin g p notin p notin s p notin s macro typeenumvar p notin t p t macro grouptreeredblackvar p notin g macro grouptreeleafvar p g macro grouptreevar macro scalarenumvar p notin macro scalartreeredblackvar macro scalartreevar macro succenumvar macro succtreeredblackvar macro succtreeleafvar macro wfenumvar macro wftreevar p notin s succtreeleafp encod simpl induct man ner illustr consid tini formula ps argument gener term term p kind po gener tupl p firstord variabl constrain formula oe similarli term kind set gener tupl s secondord variabl term ps gener formula existenti quantif correspond discharg regist fairli straightforward task provid similar templat fido construct therebi provid composit semant recip systemat translat concret exampl consid formula tree x tree xleftrightleftr describ regular set tree specif node exist color red encod follow mona formula macro dotrightvar pvar macro dotleftvar pvar assum ex p rootp treetreep ex ttg ex ttg tpo t tpo t gpo g spo s analog runtim comput mona finitest automaton gener formula alway guarante ter minat may prohibit expens thu fido compil extens optim mani level case reli heavili type structur fido formula symbol reduc detect simpl tautolog elimin unnecessari variabl quantifi care strategi employ alloc short bit pattern finit domain includ global analysi concret use also discov fido type structur contain wealth inform current exploit mona implemen tation ongo develop effort enrich notion tree automata accommod posit inform deriv fido specif may case yield exponenti speedup mona level fido dsl opinion fido compel exampl domainspecif languag focus clearli defin narrow domain formula monad secondord logic or equival automata larg alphabet offer solut classic softwar problem drown swamp lowlevel en code advoc simpl design principl go analog standard program languag con cept use wellknown trust technol ogi phase standard compil includ optim level provid uniqu benefit cannot match librari standard program languag notat con venienc type check global optim develop discov new insight domain new notion tree automata algorithm r specif languag base wss hardwar verif use monad secondord logic algorithm guid tree automata monad secondord logic practic model checker spin automat verif pointer program use monad secondord logic case studi autom verif base trace abstract autom logic verif base trace ab straction formal design constraint bdd algorithm cach miss three approach type struc ture tr ctr ander mller michael i schwartzbach pointer assert logic engin acm sigplan notic v n p may marjan mernik jan heer anthoni m sloan develop domainspecif languag acm comput survey csur v n p decemb