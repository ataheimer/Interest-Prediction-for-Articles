t specifi verifi broadcast multicast snoop cach coher protocol a paper develop specif methodolog document specifi cach coher protocol eight tabl state event action transit cach memori control use methodolog specifi detail modern threestat broadcast snoop protocol unord data network order address network allow arbitrari skew also present detail specif new protocol call multicast snoop and so better illustr util tablebas specif methodolog final demonstr techniqu verif multicast snoop protocol sketch manual proof specif satisfi sequenti consist memori model b highlevel specif cach control sinc high level cach coher protocol simpli finit state machin would appear first glanc would easi specifi verifi common three state msi broadcast snoop protocol unfortun level detail requir actual implement even seemingli straightforward protocol numer transient state possibl race condit complic task specifica tion verif exampl singl cach control simpl msi protocol specifi section state transient possibl event action may perform system compon similarli complic interact compon difficult specifi verifi verif import rigor verif import sinc complex lowlevel implement protocol make difficult design without error mani protocol error uncov simul simul random test shown effect find certain class bug lost protocol messag deadlock condit howev simul tend effect uncov subtl bug especi relat consist model subtl consist bug often occur unusu combin circumst unlik undirect or random simul drive protocol situat thu systemat perhap formal verif techniqu need expos subtl bug verif requir detail lowlevel specif systemat verif implement cach coher protocol requir lowlevel detail specif entir protocol exist numer verif techniqu techniqu seek show implement specif meet certain invari verifi abstract specif show abstract protocol correct exampl verif highlevel specif omit transient state may show invari hold abstract protocol show implement version protocol obey invari current specif suffici specif publish literatur suffici detail implement purpos thu suitabl verif pur pose academia protocol specif tend highlevel complet lowlevel specif may necessari goal publish research moreov complet lowlevel specifica tion without concis format lend public academia industri lowlevel detail specif necessari exist but best knowledg none publish lit eratur specif often match hardwar close complic verif limit altern implement elimin problem verifi implement satisfi specif new tablebas specif techniqu suffici verif address need concis lowlevel specif develop tablebas specif methodolog system compon particip coher protocol tabl specifi compon behavior respect given cach block illustr exampl tabl show specif sim plifi atom cach control row tabl correspond state compon enter column correspond event occur entri action taken result state occur combin state event action code letter defin tabl exampl entri as denot load event cach control block state caus cach control perform get share enter state s simpl exampl howev show power specif methodolog includ mani transient state possess realist coher protocol simpl atom proto col tradit specif approach draw state transit diagram tractabl howev nonatom transact caus explos state space sinc event occur simplifi atom cach control transit event state load store get getx as cm di a perform getshar d send data requestor c perform getexclus m send data memori request issu complet numer transient state use captur behavior section illustr methodolog realist broadcast snoop protocol multicast snoop protocol methodolog prove tablebas specif correct use tablebas specifica tion methodolog present methodolog prove specif sequenti consist show methodolog use prove multicast protocol satisfi sc method use extens lamport logic clock timestamp load store oper perform protocol timestamp determin oper reorder wit sc intend design protocol thu associ execut augment protocol sequenc timestamp oper wit sequenti consist execut logic clock associ timestamp action are effect conceptu augment protocol specifi use tablebas transit tabl protocol itself note set possibl oper trace protocol equal augment protocol logic clock pure conceptu devic introduc verif purpos never implement hardwar consid process specifi logic clock action intuit design protocol inde process valuabl debug tool right straightforward invari augment protocol guarante protocol sequenti consist name execut augment protocol associ timestamp sequenc ld st consist program order oper processor valu ld equal recent st prove invari numer support invari ad need shown execut protocol satisfi invari induct length execut involv tediou casebycas analysi possibl transit protocol invari summar strength methodolog process augment protocol timestamp use design correct protocol easilyst invari augment protocol guarante sequenti consist howev methodolog also involv tediou casebycas proof transit respect invari knowledg autom approach known avoid type case analysi problem verifi sc undecid autom approach prove work limit class protocol such finit state observ reorder oper order find wit sequenti consist includ protocol paper discuss verif techniqu compar section contribut paper make four contribut first develop new tablebas specif methodolog allow us concis describ protocol second provid detail lowlevel specif threestat broadcast snoop protocol unord data network address network allow arbitrari skew third present detail lowlevel specif multicast snoop and so better illustr util tablebas specif methodol ogi specif complic protocol thorough enough warrant verif fourth demonstr techniqu verif multicast snoop protocol sketch manual proof specif satisfi sequenti consist memori model specifi broadcast multicast snoop protocol section demonstr protocol specif methodolog develop two protocol broadcast snoop protocol multicast snoop protocol protocol msi modifi share invalid use eight tabl document specifi state event action transit cach control state event action transit memori control control state machin commun via queue event correspond messag process incom queue action taken control servic incom queue includ enqueu messag outgo queue consid atom specifi broadcast snoop protocol section shall specifi behavior msi broadcast snoop protocol system model assumpt broadcast snoop system collect processor node memori node possibl colloc connect two logic network possibl share physic network shown figur processor node contain cpu cach cach control includ logic implement coher protocol also contain queue cpu cach control mandatori queue contain load ld store st request cpu order program order ld st entri address st data option queue contain readonli readwrit prefetch request cpu entri address loadstor data queue contain ldst mandatori queue associ data in case ld diagram processor node also shown figur processor node address network fifo mandatori queue fifo cach control option queue fifo tbe loadstoredata cpu data network broadcast address network point point data network broadcast snoop system memori space partit among one memori node respons respond coher request data current owner ie processor node block modifi also receiv writeback processor store data memori two logic network total order broadcast network address messag unord unicast network data messag address network support three type coher request get getshar getx getexclus putx dirtywriteback protocol transact address messag contain data block address coher request type getx get putx id request processor data messag contain data data block address compon system make transit base current state current event eg incom request specifi state event transit compon rest section mani compon make transit mani block memori transit happen concurr assum howev system appear behav transit occur atom network specif network consist two logic network address network total order broadcast network total order not howev impli messag deliv time exampl asynchron implement path one node may take longer path anoth node address network carri coher request transit address network model atom transfer address messag output queue node input queue node thu insert messag total order address messag data network unord pointtopoint network deliv respons coher request transit data network model atom transfer data messag output queue node input queue destin node node connect network via queue assum queue address queue network node serv fifo order data queue address queue node network serv without restrict exampl allow processor node getx pass putx victim block cpu specif transit cpu occur place ld st mandatori queue place prefetch option queue remov data ldst data queue perform transit time cach control specif transit cach control may inspect head incom queue inject new messag queue make appropri state chang assum serv incom queue queue starv address mandatori option queue serv strict fifo order action taken queue serv consid atom done anoth queue includ queue serv action taken howev cach control check ensur resourc space outgo queue alloc tbe avail action sum resourc requir action avail cach control abort transit perform none action wait resourc becom avail where defin cach block avail ldst either referenc block alreadi exist cach exist empti slot accommod referenc block receiv extern sourc except rule avail block cach situat handl treat ld st prefetch cach block avail replac event victim block request head mandatori option queue cannot servic becaus block present correct permiss transact block outstand request queue servic option request discard without affect correct cach control keep count outstand coher transact issu node and transact one transact buffer entri tbe reserv transact issu space outgo address queue alreadi outstand transact block tbe contain address block request current state transact data receiv data field tbe may requir implement may abl use cach data array buffer data block modif reduc size tbe avoid specif action transfer data tbe cach data array broadcast snoop cach control state stabl state transient state state cach state descript invalid share modifi isad busi invalid issu get seen get data yet isa busi invalid issu get seen get seen data isd busi invalid issu get seen get seen data yet imad busi invalid issu getx seen getx data yet ima busi invalid issu getx seen getx seen data imd busi invalid issu getx seen getx seen data yet mia modifi issu putx seen putx yet iia modifi issu putx seen putx saw get getx reachabl mia possibl block state descript state list tabl note two type state cach block stabl state transient state stabl state one modi fie share invalid record cach indic state block latest outstand transact block if ani start transient state shown tabl record tbe indic current state outstand transact block if ani futur tabl refer state block understood state obtain return transient state tbe if outstand transact block els if outstand access cach obtain stabl state block present cach assum stabl state i transient state associ cach state shown tabl assum tag match cach cach state busi impli tbe entri block state transient state mia iia repres transient state symbol develop encod transient state consist sequenc two stabl state initi intend zero pend state second state superscript denot part transact address a andor data d still outstand exampl processor block b state i send get addressout queue see data respons yet seen get would b state isa get arriv state becom s event cach control depend incom messag event list describ tabl note that case replac block b refer address victim block allow cach control action list tabl cach control behavior detail tabl entri contain list action next state tupl current state block correspond row broadcast snoop cach control event event descript block b load readonli prefetch store readwrit prefetch mandatori replac option replac get getx putx get getx putx data ld head mandatori queue readonli prefetch head option queue st head mandatori queue readwrit prefetch head option queue ldst head mandatori queue cach block avail readwrit prefetch head option queue cach block avail occur observ get request global order occur observ getx request global order occur observ putx request global order occur observ get request anoth processor occur observ getx request anoth processor occur observ putx request anoth processor data block data network address ld head mandatori queue address readonli prefetch head option queue address st head mandatori queue address readwrit prefetch head option queue address victim block ldst head mandatori queue address victim block prefetch head option queue address transact head incom address queue address data messag head incom data queue entri next event correspond column entri specifi action perform state block chang specifi new state next state list action requir shade case imposs memori node specif one advantag broadcast snoop protocol memori node quit simpl memori node system like synaps maintain state block memori node home order make decis send data requestor state includ state block current owner block memori state list tabl event tabl action tabl transit tabl specifi multicast snoop protocol section specifi msi multicast snoop protocol methodolog use describ broadcast snoop protocol multicast snoop requir less snoop bandwidth provid broadcast snoop cach control action action descript alloc tbe addressb c set cach tag equal tag block b dealloc tbe f issu get insert messag outgo address queue typeget addressb sendern issu getxinsert messag outgo address queue typegetx addressb sendern h servic ldst a cach hit cach if ld enqueu data ldst data queue incom address queue incom data queue l pop option queue send data tbe memori send data cach memori issu putx insert messag outgo address queue typeputx addressb sendern q copi data cach tbe r send data cach requestor save data data field tbe servic ld tbe pop mandatori queue enqueu data ldst data queue ld head mandatori queue block servic ldst tbe pop mandatori queue if ld enqueu data ldst data queue ldst head mandatori queue block w write data data field tbe cach send data tbe requestor z cannot handl right now higher throughput address transact thu enabl larger system possibl broadcast snoop system model assumpt multicast snoop describ bilir et al incorpor featur broadcast snoop directori protocol differ broadcast snoop coher request use total order multicast address network instead broadcast network multicast mask predict processor must alway includ processor directori block but directori yet broadcast snoop cach control transit cafi cafi cagi cagi sad ad mad mad hk l agim agim ad ad hk l hk l aqpm aqpm ia ia isad imad z z z z z z z z z z z z iisd sjisa sjima iimd isa ima z z z z z z z z z z z z uwdi vwdi mia iia z z z z z z z z z z z z isd imd z z z z z z z z z z z z suwdj svwdj state load rperaedfeotcnhli store rmeoepparplndaetdfciewoaetnmtcoraheirltnyet gpguetx pguetx getx data z z chang cach state tag match allow incorrect get mask incorrect omit current owner getx mask incorrect omit current owner current sharer scenario resolv simpl directori detect mask mispredict retri request with improv mask behalf requestor multicast snoop protocol describ differ specifi bilir et al coupl signific way first specifi msi protocol instead mosi protocol second specifi protocol lower detail level third directori protocol retri request incorrect mask behalf origin request multicast system shown figur processor node structur like broadcast snoop protocol instead memori node though multicast snoop protocol directori node memori node extra protocol logic handl retri also shown figur next two subsect specifi behavior processor directori compon msi multicast snoop protocol broadcast snoop memori control state state descript msa msd share invalid modifi modifi seen getsputx seen data modifi seen get putx seen data broadcast snoop memori control event event descript block b home get putx requestor putx requestor owner data request arriv block whose home memori get head incom address queue getx head incom address queue putx owner head incom address queue putx nonown head incom address queue data head incom data queue address transact head incom address queue address messag head incom data queue broadcast snoop memori control action action descript c z owner equal directori send data messag requestor address queue data queue owner equal requestor write data memori delay transact block broadcast snoop memori control transit state wkmsa home get pipsrueoqtwuxneesrtor requestor owner data directori node multicast address network point point data network address network fifo directori block state memori data network multicast snoop system network specif data network behav ident broadcast snoop protocol address network behav slightli differ name impli address network use multicast instead broadcast and thu transit address network consist take messag outgo address queue node place incom address queue node specifi multicast mask well request node memori node home block request if node alreadi part mask address messag contain coher request type get getx putx request node id multicast mask block address retri count data messag contain block address send node id destin node id data messag type data nack data block retri count request trigger data messag cpu specif cpu behav ident cpu broadcast snoop protocol cach control specif cach control behav much like broadcast snoop protocol except must deal retri nack request aggress process incom request ad complex lead addit state tbe field protocol action protocol transit addit state multicast protocol specifi due aggress process incom request instead buffer incom request with z action transient state cach control protocol ingest request therebi move new transient state exampl state imdi occur processor state imd ingest incom getx request anoth processor instead buffer it notat signifi processor start i wait data go m go immedi except case forward progress issu requir processor perform ld st relinquish data discuss below also three addit state necessari describ situat processor see nack request seen yet four addit field tbe forwardprogress forwardid retrycount forwardidr trycount forwardprogress bit set processor see request satisfi head mandatori queue flag use determin processor must perform singl load store cach line relinquish block exampl data arriv state imdi processor servic ld st block forward block forwardprogress set forwar field record node processor must send block case thi exampl forwardid equal id node whose getx caus processor go imd imdi retri count record retri number recent messag forwardidretrycount record retri count associ block forward node specifi forwardid use tabledriven methodolog use describ broadcast snoop protocol tabl specifi state event action transit respect processor node directori node specif unlik broadcast snoop multicast snoop protocol requir simplifi directori handl incorrect mask directori node addit incom outgo queue maintain state inform block memori control state inform includ block state id current owner if state m bit vector encod superset sharer if state s possibl block state directori list tabl befor refer m stabl state other transient state initi block state set i owner set memori bitvector set encod empti set sharer state notat processor node although state mxa refer situat directori receiv data seen correspond coher request yet therefor know or care whether putx data data processor downgrad respons anoth processor get directori node inspect incom queue address data network remov messag head queue if ani depend incom messag current block state directori may inject new messag outgo queue may chang state block simplic directori current delay request block putx downgrad outstand anoth viabl scheme would set bit processor observ address request request correspond address head mandatori queue also legal set forwardprogress ldst get head mandatori queue outstand transact yet seen address request howev sequenti consist preserv scheme forwardprogress set data return request address request match address head mandatori queue multicast snoop cach control state state cach state descript invalid share modifi isad busi invalid issu get seen get data yet imad busi invalid issu getx seen getx data yet smad busi share issu getx seen getx data yet isa busi invalid issu get seen get seen data ima busi invalid issu getx seen getx seen data sma busi share issu getx seen getx seen data isa busi invalid issu get seen get seen nack ima busi invalid issu getx seen getx seen nack sma busi share issu getx seen getx seen nack mia modifi issu putx seen putx yet iia modifi issu putx seen putx saw get getx isd busi invalid issu get seen get seen data yet isdi busi invalid issu get seen get seen data saw getx imd busi invalid issu getx seen getx seen data yet imd busi invalid issu getx seen getx seen data yet saw get imdi busi invalid issu getx seen getx seen data yet saw getx imdsi busi invalid issu getx seen getx seen data yet saw get saw getx smd busi share issu getx seen getx seen data yet smd busi share issu getx seen getx seen data yet saw get directori event action transit list tabl tabl respect action z delay transact block reli fact directori delay address messag given block arbitrarili wait data messag conceptu one directori per block sinc one block per directori implement would abl delay transact specif block note consecut get transact block could coalesc restrict maintain invari one data messag per block directori receiv thu elimin need buffer preserv saniti protocol develop multicast snoop cach control event event descript block b load readonli prefetch store readwrit prefetch mandatori replac option replac get getx get getx putx get getx putx data data ld head mandatori queue readonli prefetch head option queue st head mandatori queue readwrit prefetch head option queue ldst head mandatori queue cach block avail readwrit prefetch head option queue cach block avail occur observ get request global order occur observ getx request global order occur observ get request global order retri count get match retri count tbe occur observ getx request global order retri count get match retri count tbe occur observ putx request global order occur observ get request anoth processor occur observ getx request anoth processor occur observ putx request anoth processor data block arriv data block arriv retri count data messag match retrycount tbe address ld head mandatori queue address readonli prefetch head option queue address st head mandatori queue address readwrit prefetch head option queue address victim block ldst head mandatori queue address victim block prefetch head option queue address transact head incom address queue address messag head incom data queue address messag head incom data queue verif snoop protocol section present methodolog prove specif sequenti consist show methodolog use prove multicast protocol satisfi sc method use extens lamport logic clock timestamp load store oper perform protocol timestamp determin oper reorder wit sc intend multicast snoop cach control action action descript alloc tbe addressb forwardidnul retrycountzero forwardidretrycountzero for wardprogress bitunset b set forwardprogress bit request head address queue satisfi request head mandatori queue c set cach tag equal tag block b dealloc tbe e record id requestor forwardid record retri number transact forwardidretrycount f issu get insert messag outgo address queue typeget addressb sendern retri countzero issu getx insert messag outgo address queue typegetx addressb sendern retrycountzero h servic loadstor a cach hit cach if ld enqueu data ldst data queue incom address queue incom data queue l pop option queue send data tbe memori send data cach memori data forwardidretrycount tbe processor indic forwardid issu putx insert messag outgo address queue typeputx addressb sendern q copi data cach tbe r send data cach requestor save data data field tbe copi retri field messag head incom data queue retri field tbe set null set forwardidretrycountzero servic ld tbe pop mandatori queue enqueu data ldst data queue ld head mandatori queue block v treat either h z option cach hit cach hit pop mandatori queue w write data tbe cach x and if forwardprogress bit set servic ld tbe pop mandatori queueand enqueu data ldst data queue send data tbe requestor z cannot handl right now either wait discard request can discard request option queue copi retri field messag head incom address queue retri field tbe set null set forwardidretrycountzero servic ldst tbe pop mandatori queue if ld enqueu data ldst data queue ldst head mandatori queue block if st store data tbe l option servic ldst tbe and if forwardprogress bit set servic ldst tbe pop mandatori queueand if ld enqueu data ldst data queue multicast snoop cach control transit caf caf cag cag isad isad imad imad hk l ag ag hk l hk l aqp aqp mia mia isad imad z l z z z z z l z l z z l z l z z bi isd imad sj stj tj tj isa isa isa isa sj stj tj tj ima ima ima ima sj stj tj tj sma sma sma sma isa ima z l z z z z z l z l z z l z l z z isa ima z l z z z z z l z l z z l z l z z uwdi mia iia l z l z z z z z z z z z isd isdi imd imd imdi imdsi z l z z z z z z z z z z z l z l z z z l z z z z z z z z z z z z z z z z z l z l z z z l z z z z imd imdi si smd imdi imdsi suwdj stjisa dji tj sxdji stjisa dji tj sgwdj stj dji tj sdom stj dji tj wdj ima sdodj stj dji tj ima sdomd stj dji tj ji ima sgwdj stj dj tj sgom stj dj tj wdj sma state load readwonrliyteprreefefetctch store mandatori replac option replac get getx get mismatch getx mismatch putx gpuetx getx data nack bi imd bi dii di gwdi gwdi mdii dii aiisd aiimd aiimd aiimd aismd chang state tag match multicast snoop memori control state state descript invalid processor invalid share least one processor share modifi one processor modifi rest invalid mxa modifi seen getsputx seen data msd modifi seen get seen data mid modifi seen putx seen data multicast snoop memori control event event descript block b get getsretri getsnack getxretri getxnack putx requestor requestor data get success mask head incom address queue getx success mask head incom address queue get unsuccess mask head incom queue room outgo address queue retri get unsuccess mask head incom queue room outgo address queue retri getx unsuccess mask head incom queue room outgo address queue retri getx unsuccess mask head incom queue room outgo address queue retri putx owner head incom address queue putx nonown head incom address queue data messag head incom data queue address transact head incom address queue address messag head incom data queue design protocol logic clock associ timestamp action conceptu augment protocol specifi use tablebas transit tabl protocol itself note set possibl oper trace protocol equal augment protocol process develop timestamp scheme valuabl debug tool right exam ple earli implement multicast protocol includ forwardprogress bit tbe and upon receiv data getx request state imdi alway satisfi op head mandatori queue forward data attempt timestamp op reveal need forward multicast snoop memori control action action descript c clear set sharer send data messag requestor retrycount equal retrycount request address queue data queue owner equal requestor send nack requestor retrycount equal retrycount request q add owner set sharer r retri reissu request reissu directori improv multicast mask increment retri field transact reach maximum number retri multicast mask set broadcast mask add requestor set sharer w write data memori x set owner equal directori z delay transact block multicast snoop memori control transit dsj dmjm dsj cdmjm qsxjmsd mj wkmxa mxa qsxj mj rj nj rj nj xji j msd mid z z z z wk wki state get unsuccess mask unsuccess mask requestor owner requestor owner data progress bit roughli ensur op inde timestamp appear occur time getx op logic timestamp also respect program order brief methodolog prove sequenti consist consist follow step augment system logic clock associ action assign timestamp ld st oper logic clock pure conceptu devic introduc verif purpos never implement hardwar associ global histori execut augment protocol roughli histori includ configur node system state tbe cach content logic clock queue total order sequenc transact deliv network memori oper servic far program order along logic timestamp use invari defin notion legal global histori invari quit intuit express use logic timestamp follow immedi definit legal global histori correspond execut sequenti consist final prove initi histori system legal transit protocol map legal global histori legal global histori entri label imposs protocol speci ficat tabl inde imposs follow induct protocol sequenti consist first step abov augment system logic clock done hand hand develop protocol thu is own valuabl debug tool second step straightforward also straightforward select core set invari third step strong enough guarante execut correspond legal global histori sequenti consist final step proof methodolog requir proof everi transit protocol everi invari may necessit addit invari definit legal step proof diffi cult certainli tediou rest section describ first three step process detail name multicast protocol augment logic clock global histori legal global histori includ exampl case cover final proof step appendix a augment system logic clock section shall describ augment system specifi earlier logic clock action increment clock timestamp oper data timestamp make futur defini tion of global state legal global state simpler intuit augment chang behavior system origin specifi augment system system augment follow counter initi zero one counter global puls number associ multicast address network two counter global local clock associ processor node system one counter puls number ad data field forwardid field tbe one counter puls number field ad data messag one counter global clock associ directori node system processor clock action action descript set global clock equal puls transact handl set local clock zero increment local clock timestamp ldst set equal associ global local clock valu puls equal transact puls option treat h data messag puls equal tbe forwardid puls data puls equal puls incom data messag first op mandatori queue ld block increment local clock timestamp ldst set equal associ global local clock valu first op mandatori queue ldst block increment local clock timestamp ldst set equal associ global local clock valu x forwardprogress bit set ie head mandatori queue ld block clock updat set global timestamp ld equal puls incom data messag set local clock valu equal set data messag puls equal transact puls z x allow ld st block behavior augment system augment system clock get updat timestamp or puls assign oper data upon transit protocol accord follow rule network new address transact append total order address transact network caus global puls number increment new valu puls number associ new transact processor tabl describ global local clock updat tbe counter use record timestamp request cannot satisfi data arriv data arriv owner send data timestamp save tbe directori briefli upon handl transact directori updat clock equal global puls transact puls attach data messag set valu directori clock global histori global histori associ execut protocol tupl transseqconfigop tran record inform sequenc transact request date type transact request address mask retrynumb puls possibl undefin statu success unsuccess nack und termin config record configur node state per block cach content queue content tbe logic clock valu op record properti oper gener cpu date oper along address timestamp possibl undefin valu rank program order processor clock updat processorcach request see see see retri match retri mismatch gy gy isad imad isa ima isa ima mia iia gy gy gy gy isd isdi imd imd imdi imdsi zot zot zot zot current state ld mreadndowanrtloiytreyprrreefefpetlctachch option replac getsx getsx getsx rmreattrcyh mismatch rmreattrcyh mismatch global histori defin induct sequenc transit execut initi global histori transseq op empti config processor state block empti queue tbe clock initi zero block directori state i owner set directori list sharer empti incom queue empti upon transit tran seq op config updat manner consist accord action transit legal global configur legal global histori sever requir global histori transseqconfigop legal briefli follow first requir suffici impli sequenti consist remain four requir suppli addit invari use build proof first requir hold op legal respect program order is follow hold op respect program order is two oper o smaller timestamp op must also appear program order everi ld return valu recent st address timestamp order transseq legal describ type constraint transseq must satisfi introduc notion astat vector astat vector correspond transseq given block b record processor n whether transseq confer share s modifi m i access block b processor n exampl system three processor transseq consist success get block b processor follow unsuccess getx block b processor follow success get block b processor correspond astat block b si constraint transseq requir exampl getx block b success mask includ processor that upon complet transact prior getx may share modifi access b is transseq consist transseq follow getx block b astat block b correspond transseq mask getx contain processor whose entri equal i precis definit legal transact sequenc includ appendix a op legal respect transseq intuit oper op op op perform processor n global timestamp t astat processor n logic time either op st config legal respect transseq involv sever constraint sinc mani compon config exampl processor n state isad block b get block b request n timestamp greater n or undefin transseq config legal respect op is block b node n follow hold n processor state block b one s m mia smad sma valu block b ns cach equal recent st op rel ns clock recent st rel ns clock mean st whose timestamp less equal ns clock n processor block b one ns tbe valu equal recent st op rel p p puls data field tbe data block b ns incom data queue valu equal recent st op rel data timestamp ns current time n directori block b block b n owner valu equal recent st op rel ns clock properti legal global histori hard show global histori system initi legal main task proof show follow theorem protocol transit take system legal global histori legal global histori illustr theorem prove includ appendix proof transit entri tabl cach control transit map legal global histori transseqopsconfig new global histori transseqopsconfig transseq legal classif relat work manual semiautom autom complet method lazi cach dash memori model lamport clock lamport clock thi paper term rewrit incomplet method rmo test origin coher flash coher alpha hp runway test relat work focu paper specifi prove complet protocol correct rather effort focu describ mani altern protocol consist model larg bodi literatur subject formal protocol verif classifi taxonomi along two independ axe autom complet distinguish verif method base level autom support manual semiautom autom manual method involv human read specif construct proof semiautom method involv comput program a model checker theorem prover guid human understand specif provid program invari lemma prove autom method take human loop involv comput program read specif produc correct proof complet automat also distinguish techniqu complet proof system implement particular consist model incomplet proof coher select invari tabl provid summari taxonomi discuss column tabl separ below formal method involv construct rigor mathemat proof correct inform method includ techniqu simul random test guarante correct consid formal method review manual techniqu lazi cach one earliest exampl formal specif verifica tion protocol lazi cach implement sequenti consist author use io automata formal system model provid manual proof lazi cach system implement sc use histori variabl proof similar manner use lamport clock timestamp proof gibbon et al provid framework verifi share memori system implement relax memori model method involv specifi system verifi well oper definit memori model io automata prove system automaton implement model automaton exampl provid specif stanford dash memori system manual prove implement releas consist memori model tablebas specif methodolog complementari could also use describ io automata previou paper specifi variou share memori system directori bu protocol high level employ manual proof use lamport clock techniqu show system implement variou memori model sc tso alpha paper latest effort demonstr techniqu appli detail tablebas specif snoop protocol shen arvind propos use term rewrit system trss specifi verifi memori system protocol verif techniqu involv show system consider oper definit memori model express trss simul other proof techniqu similar io automata approach use gibbon et al trss tablebas specif method use modular flexibl fashion drawback trss lack visual clariti tablebas specif although current proof manual mention possibl use model checker autom tediou part proof semiautom techniqu park dill provid execut specif sun rmo memori model written languag murj model checker languag similar typic imper program languag unambigu necessarili compact use specif check correct small synchron routin eiriksson mcmillan describ methodolog integr design verif common state machin tabl drive model checker gener simul document protocol specif tabl describ design consum autom gener rather human describ format text specif gener tabl use smv model checker which accept specifica tion tempor logic prove coher protocol use sgi origin howev system verifi one cach block which suffici prove coher consist pong et al verifi memori system sun smp multiprocessor use murj ssm symbol state model model checker verifi system one cach block thu cannot verifi whether system satisfi memori model park dill express definit memori model system verifi specif languag use aggreg map system specif model specif similar use trss shen arvind io automata gibbon et al exampl specifi stanford flash protocol languag pv theorem prover the languag type highord logic use aggreg techniqu prove delay mode flash memori system sequenti consist akhiani et al summar experi use tla a form tempor logic combin manual proof tla model checker tlc specifi verifi compaq alpha memori system protocol although find bug would caught simul model check manual proof quit larg small portion could finish even peopl personmonth effort tla specif complet formal nearli two thousand line long nalumasu et al propos extens collier archtest suit provid collect program test certain properti memori model extens creat effect infinit long test program and thu check possibl interleav test program abstract test program nondeterminist finit automata drive formal specif system verifi automata implement specifi verilog vi symbol model checker use verifi variou invari satisfi system driven automata techniqu use practic appli commerci system hp pa runway bu protocol howev incomplet invari test impli sc they necessari suffici autom techniqu henzing et al provid complet autom proof lazi certain snoopi cach coher protocol use mocha model checker protocol specif with system express languag similar typic imper program languag proof requir express tempor logic augment specif finit observ reorder protocol transact order produc wit order satisfi definit memori model provid observ two protocol specifi paper howev gener problem verifi sequenti consist undecid finit observ exist protocol specifi paper protocol use modern highperform sharedmemori multiprocessor best knowledg publish exampl complet autom proof correct system specifi low level abstract conclus paper develop specif methodolog document specifi cach coher protocol eight tabl state event action transit cach memori control use methodolog specifi detail lowlevel threestat broadcast snoop protocol unord data network order address network allow arbitrari skew also present detail lowlevel specif multicast snoop protocol and so shown util tablebas specif methodolog lastli demonstr techniqu verif multicast snoop protocol sketch manual proof specif satisfi sequenti consist memori model acknowledg work support part nation scienc foundat grant eia mip mip ccr cda wisconsin romn fellowship donat sun microsystem intel corpor member wisconsin multifacet project contribut significantli improv protocol protocol specif model present paper especi anastassia ailamaki ross dickson charl fischer carl mauer r design memori consist model sharedmemori multiprocessor parallel comput architectur hardwaresoftwar approach memori consist model sharedmemori multiprocessor comput architectur quantit approach tr cach coher protocol evalu use multiprocessor simul model class compat cach consist protocol support ieee futurebu prove sequenti consist highperform share memori extend abstract lazi cach design memori consist model sharedmemori multiprocessor execut specif analyz verifi rmo relax memori order verif flash cach coher protocol aggreg distribut transact memori consist model sharedmemori multiprocessor verif techniqu cach coher protocol lamport clock use myampersandldquotest modelcheckingmyampersandrdquo verifi runwaypa memori model design verif smp cachecoher sharedmemori system comput architectur nd ed multicast snoop systemlevel specif framework io architectur formal automat verif cach coher multiprocessor relax memori model time clock order event distribut system introduct automata theori languag comput verifi multiprocessor cach control use random test gener cach coher verif tla test modelcheck approach verif formal memori model multiprocessor verifi sequenti consist sharedmemori multiprocessor system use formal verificationanalysi method critic path system design origin system design methodolog experi use lamport clock reason relax memori model ctr collin mccurdi charl fischer use pin memori refer gener multiprocessor simul acm sigarch comput architectur new v n decemb collin mccurdi charl fischer local directori coher protocol proceed rd workshop memori perform issu conjunct st intern symposium comput architectur p june munich germani ahm louri avinash karanth kodi optic interconnect network modifi snoop protocol design largescal symmetr multiprocessor smp ieee transact parallel distribut system v n p decemb milo m k martin daniel j sorin bradford m beckmann michael r marti min xu alaa r alameldeen kevin e moor mark d hill david a wood multifacet gener executiondriven multiprocessor simul gem toolset acm sigarch comput architectur new v n novemb felix garciacarballeira jesu carretero alejandro calderon jose m perez jose d garcia adapt cach coher protocol specif parallel inputoutput system ieee transact parallel distribut system v n p june milo m k martin pacia j harper daniel j sorin mark d hill david a wood use destinationset predict improv latencybandwidth tradeoff sharedmemori multiprocessor acm sigarch comput architectur new v n may michael r marti mark d hill coher order ringbas chip multiprocessor proceed th annual ieeeacm intern symposium microarchitectur p decemb