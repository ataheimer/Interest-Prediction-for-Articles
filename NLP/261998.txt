t practic algorithm select coarsegrain parallel comput a abstractin paper consid problem select coarsegrain distribut memori parallel comput discuss sever determinist random algorithm parallel select also consid sever algorithm load balanc need keep balanc distribut data across processor execut select algorithm carri detail implement algorithm discuss cm report experiment result result clearli demonstr role random reduc commun overhead b better practic determinist counterpart due low constant associ algorithm parallel select algorithm use practic applic dynam distribut multidimension data set parallel graph partit parallel construct multidimension binari search tree mani parallel algorithm select design pram model variou network model includ tree mesh hypercub reconfigur architectur recent bader etal implement parallel determinist select algorithm sever distribut memori machin includ cm ibm sp intel paragon paper consid evalu parallel select algorithm coarsegrain distribut memori parallel comput coarsegrain parallel comput consist sever rel power processor connect interconnect network commerci avail parallel comput belong categori exampl machin includ cm ibm sp sp ncube intel paragon cray td rest paper organ follow section describ model parallel comput outlin primit use algorithm section present two determinist two random algorithm parallel select select algorithm iter work reduc number element consid iter iter sinc guarante number element remov everi processor lead load imbal section present sever algorithm perform load balanc load balanc algorithm use select algorithm requir load balanc section report analyz result obtain cm detail implement select load balanc algorithm present section analyz select algorithm mesh hypercub section discuss parallel weight select conclud paper section preliminari model parallel comput model coarsegrain parallel machin follow coarsegrain machin consist sever rel power processor connect interconnect network rather make specif assumpt underli network assum twolevel model comput twolevel model assum fix cost offprocessor access independ distanc commun processor commun processor startup overhead data transfer rate complex analysi assum constant independ link congest distanc two processor new techniqu wormhol rout random rout distanc commun processor seem less determin factor amount time need complet communica tion furthermor effect link content eas due presenc virtual channel fact link bandwidth much higher bandwidth node interfac permit us use twolevel model view underli interconnect network virtual crossbar network connect processor assumpt close model behavior cm experiment result present discuss architectur present section parallel primit follow describ import parallel primit repeatedli use algorithm implement state run time requir primit model parallel comput analysi run time primit describ fairli simpl omit interest breviti interest reader refer follow p refer number processor broadcast broadcast oper one processor element data broadcast processor oper perform o log p time combin given element data processor binari associ commut op erat combin oper comput result combin element store processor use oper store result everi processor oper also perform o log p time parallel prefix suppos x p data element processor p contain x letomega binari associ oper parallel prefix oper store valu x processor p oper perform o log p time gather given element data processor gather oper collect data store one processor accomplish o log global concaten gather except collect data store processor oper also perform o log transport primit transport primit perform manytomani person commun possibl high varianc messag size total length messag sent receiv processor bound t time taken commun t lower order term op p outgo incom traffic bound r c instead commun take time c lower order term either parallel algorithm select parallel algorithm select also iter work reduc number element consid iter iter element distribut across processor iter perform parallel processor let n number element p number processor begin with processor given n otherwis easili achiev use one load balanc techniqu describ section let n j number element processor p begin iter j algorithm median median select algorithm total number element total number processor label list element processor p jl desir rank among total element processor p step use sequenti select find median list l l r step p find median say mom broadcast processor step partit l mom mom give index split index step count combineindex add calcul number element step rank count els step loadbalancel step step p perform sequenti select find element q rank l figur median median select algorithm let k j rank element need identifi among n j element use notat describ select algorithm present paper median median algorithm median median algorithm straightforward parallel determinist sequenti algorithm recent suggest implement bader et al algorithm figur load balanc begin iter begin iter j processor find median n j element use sequenti determinist algorithm median gather one pro cessor find median median median median estim median n j element estim median broadcast processor processor scan set point split two subset contain element less equal greater estim median respect combin oper comparison k j determin two subset discard valu k j need next iter select median median estim median ensur estim median least guarante fraction number element least guarante fraction element it sequenti algorithm ensur worst case number iter requir algorithm olog n let n j thu find local median split set point two subset base estim median requir on j j th iter remain work one gather one broadcast one combin oper therefor worstcas run time algorithm log p run time o n log n log p log n p log n algorithm requir use load balanc iter load balanc assum load balanc ignor cost load balanc itself run time algorithm reduc p log bucketbas algorithm bucketbas algorithm attempt reduc worstcas run time algorithm without requir load balanc algorithm shown figur first order keep algorithm determinist without balanc number element processor median median replac weight median median befor local median comput processor howev estim median taken weight median local median median weight number element correspond processor guarante fix fraction element drop consider everi iter number iter algorithm remain olog n domin comput work median median algorithm comput local median scan local element split two set base estim median order reduc work repeat everi iter bucketbas approach preprocess local data olog p bucket everi element bucket smaller element bucket j accomplish find median local element split two bucket base median recurs split bucket log pbucket use procedur thu preprocess local data olog p bucket requir o n log log p time bucket data simplifi task find local median task split local data two set base estim median find local median identifi bucket contain median find rank median bucket contain median algorithm bucketbas select algorithm total number element total number processor label list element processor p jl desir rank among total element processor p step partit l p log p bucket equal size r bucket j bucketk r whilen c a constant step find bucket bktk contain median element use binari search remain bucket follow find appropri rank bktk find median let n number remain key p step p find weight median say wm broadcast it step partit l wm wm use bucket give index split index step count combineindex add calcul number element less wm step rank count els step step p perform sequenti select find element q rank l figur bucketbas select algorithm olog log p time use binari search local median locat bucket sequenti select algorithm o n time cost find local median reduc o n log p split local data two set base estim median first identifi bucket contain estim median element bucket need split thu oper also requir olog log log p time preprocess worstcas run time select olog log p log log p log log p log n p log n o n log p log log log p therefor worstcas run time bucketbas approach o n log without load balanc algorithm random select algorithm total number element total number processor label list element processor p jl desir rank among total element processor p whilen c a constant step step step gener random number nr same processor step pk nr step partit l mguess mguess give index split index step count combineindex add calcul number element less mguess step rank count els step step p perform sequenti select find element q rank l figur random select algorithm random select algorithm random median find algorithm figur straightforward parallel random sequenti algorithm describ processor use random number gener seed produc ident random number consid behavior algorithm iter j first parallel prefix oper perform s processor gener random number n j pick element random taken estim median parallel prefix oper processor determin estim median broadcast it processor scan set point split two subset contain element less equal greater estim median respect combin oper comparison k j determin two subset discard valu k j need next iter sinc iter approxim half remain point discard expect number iter olog n let n j thu split set point two subset base median requir on j j th iter remain work one parallel prefix one broadcast one combin oper therefor total expect run time algorithm p log p expect run time o n log n practic one expect n j max reduc iter iter perhap half especi true data randomli distribut processor elimin order present input fact load balanc oper end everi iter ensur everi iter j n j load balanc ignor cost it run time algorithm reduc p log log n even without load balanc assum initi data randomli distribut run time expect o n log n fast random select algorithm expect number iter requir random median find algorithm olog n section discuss approach due rajasekharan et al requir olog log n iter converg high probabl figur suppos want find k th smallest element among given set n element sampl set on key random sort s element rank e expect rank k set point identifi two key l l rank ffi small integ high probabl rank l k rank l k given set point thi element either l l elimin recurs find element rank remain element number element suffici small directli sort find requir element rank l l k k iter repeat differ sampl set make follow modif may help improv run time algorithm practic suppos rank l l k instead repeat iter find element rank k among n element discard element less l find element rank remain element rank l l k element greater l discard rajasekharan et al show expect number iter median find algorithm olog log n expect number point decreas geometr iter n j number point start j th iter sampl on j key sort thu cost sort on j log n j domin on j work involv scan point algorithm fast random select algorithm total number element total number processor label list element processor p jl desir rank among total element processor p whilen c a constant step step collect sampl l l r pick n n ffl n element random p l r step p step pick k k rank ijsj jsjlogn ijsj jsjlogn step broadcast k kthe rank found k k high probabl step partit l l r k k k k give count less middl high splitter step step cless combineless add step rank cless cmid els els step step p perform sequenti select find element q rank l figur fast random select algorithm iter j processor p j randomli select n j n j n j element select element sort use parallel sort algorithm sort processor contain element l jand l jbroadcast them processor find number element less l jand greater l j contain it use combin oper rank l j l j comput appropri action discard element undertaken processor larg valu ffl increas overhead due sort small valu ffl increas probabl select element l j l j lie one side element rank k j thu caus unsuccess iter experiment found valu appropri random median find algorithm one iter median find algorithm take on j log log n iter requir median find requir o n log log n log p log log n time befor load balanc ensur n j reduc half everi iter assum ignor cost load balanc run time median find reduc log log log log n even without load balanc run time expect o n log log n algorithm load balanc order ensur comput load processor approxim everi iter select algorithm need dynam redistribut data everi processor nearli equal number element present three algorithm perform load balanc algorithm also use problem requir dynam redistribut data restrict assign data processor use follow notat describ algorithm load balanc initi processor total number element processor ie order maintain load balanc suppos processor set element store array view n element global sort base processor array indic j element processor p appear earlier sort order element processor p j order maintain load balanc algorithm parallel prefix base algorithm preserv global order data load balanc algorithm first perform parallel prefix oper find posit element contain global order object redistribut data processor p contain algorithm modifi order maintain load balanc number total element total number processor label list element processor p size n processor p step increment navg step step diff step diff j posit p j label sourc diff j neg p j label sink step p sourc calcul prefix sum posit diff array p src els calcul prefix sum sink use neg diff p snk step l step calcul rang destin processor p l pr use binari search p snk step whilel r element p l increment l step l step calcul rang sourc processor p l pr use binari search src step while l r receiv element p l increment l figur modifi order maintain load balanc element posit n avg global order use parallel prefix oper processor figur processor send data amount data send processor similarli processor figur amount data receiv ani processor commun gener accord data redistribut model comput run time algorithm depend maximum commun generatedreceiv processor maximum number messag sent processor nmax navg e maximum number element sent n max maximum number element receiv processor n avg therefor run time o nmax order maintain load balanc algorithm may gener much commun necessari exampl consid case processor n avg element except p one element less p pgamma one element n avg optim strategi transfer one extra element p p p howev algorithm transfer one element p messag sinc preserv order data import select algorithm follow modif done algorithm everi processor retain minfn origin element processor n excess label sourc otherwis processor need n avg gamma n element label sink excess element sourc processor number element need sink processor rank separ use two parallel prefix oper data transfer sourc sink use strategi similar order maintain load balanc algorithm algorithm figur call modifi order maintain load balanc algorithm modifi omlb implement maximum number messag sent processor modifi omlb op maximum number element sent n maximum number element receiv processor n avg worstcas run time op dimens exchang method dimens exchang method figur load balanc techniqu origin propos hypercub iter method processor pair balanc load local among eventu lead global load balanc algorithm run log p iter iter processor differ th least signific bit posit id exchang balanc load iter i processor number element iter ppair processor commun parallel processor commun nmaxel iter therefor run time o log howev sinc j processor hold maximum number element iter j like either n max small far fewer element nmaxar commun therefor run time practic expect much better predic worstcas global exchang algorithm similar modifi order maintain load balanc algorithm except processor larg amount data directli pair processor small amount data minim number messag figur modifi order maintain load balanc algorithm everi processor retain minfn origin element processor n excess la algorithm dimens exchang method number total element total number processor label list element processor p size n processor p step p step exchang count element p step step send element l navg processor p l step n els step receiv n l gamma navg element processor p l step increment n n l gamma navg figur exchang method load balanc bele sourc otherwis processor need n avg gamma n element label sink sourc processor sort nonincreas order number excess element processor hold similarli sink processor sort nonincreas order number element processor need inform number excess element sourc processor collect use global concaten oper processor local rank excess element use prefix oper accord order processor obtain sort anoth global concaten oper collect number element need sink processor element rank local processor use prefix oper perform use order sink processor obtain sort use result prefix oper sourc processor find sink processor excess element sent number element sent processor sink processor similarli comput inform number element receiv sourc processor data transfer sourc sink sinc sourc contain larg number excess element send data sink requir larg number element may reduc total number messag sent worstcas may one processor contain excess element thu total number messag sent algorithm op processor send data maximum number element receiv processor n avg worstcas run time op algorithm global exchang load balanc number total element total number processor label list element processor p size n processor p step increment navg step j step diff step diff j posit p j label sourc diff j neg p j label sink step k sourc descend order maintain appropri processor indic also sort diff k sink ascend order step p sourc calcul prefix sum posit diff array p src els calcul prefix sum sink use neg diff p snk step p sourc calcul prefix sum posit diff array p src els calcul prefix sum sink use neg diff p snk step l r step calcul rang destin processor p l pr use binari search p snk step whilel r element p l increment l step l r step calcul rang sourc processor p l pr use binari search src step while l r receiv element p l increment l figur global exchang method load balanc select algorithm runtim median median o n random o n log n fast random o n log log n tabl run time variou select algorithm assum includ cost load balanc select algorithm runtim median median o n bucketbas o n log random o n log log n fast random o n log log n log p log log n tabl worstcas run time variou select algorithm implement result estim run time variou select algorithm summar tabl tabl tabl show estim run time assum processor contain approxim number element end iter select algorithm expect hold random data even without perform load balanc also observ experiment tabl show worstcas run time absenc load balanc implement select algorithm load balanc techniqu cm experiment evalu algorithm chosen problem find median given set number ran select algorithm without load balanc load balanc algorithm describ except bucketbas approach use load balanc run result algorithm k k k k k k k number use processor algorithm run total number element fall p point element gather one processor problem solv sequenti select found appropri experiment avoid overhead commun processor contain small number element valu total number element run algorithm two type input random sort random case n p element randomli gener processor elimin peculiar case use random data ran experi five differ random set data use averag run time random data set constitut close best case input select algorithm sort case n number chosen number contain number n sort input close worstcas input select algorithm exampl first iter select algorithm use input approxim half processor lose data half retain data without load balanc number activ processor cut half everi iter true even modifi order maintain load balanc global exchang load balanc algorithm use everi iter half processor contain zero element lead sever load imbal load balanc algorithm rectifi data collect illustr order save space execut time four differ select algorithm without use load balanc random data except median median algorithm requir load balanc global exchang use k k k number shown figur graph clearli demonstr four select algorithm scale well number processor immedi observ random algorithm superior determinist algorithm order magnitud exampl median median algorithm ran least time slower bucketbas select algorithm ran least time slower either random algorithm order magnitud differ uniformli observ even use load balanc techniqu also case sort data surpris sinc constant involv determinist algorithm higher due recurs find estim median among determinist algorithm bucketbas approach consist perform better median median approach factor two random data sort data bucketbas approach use load balanc ran slower median median approach load balanc iter parallel select algorithm processor also perform local select algorithm thu algorithm split parallel part processor combin result local select sequenti part involv execut sequenti select local processor order convinc random algorithm superior either part ran follow hybrid experi ran determinist parallel select algorithm replac sequenti select part random sequenti select run time hybrid algorithm determinist random parallel select algorithm made follow observ factor improv random parallel select algorithm determinist parallel select due improv sequenti parallel part larg n much improv due sequenti part larg p improv due parallel part conclud random algorithm faster practic drop determinist algorithm consider time in second number processor median median bucket base random fast random time in second number processor random fast random time in second number processor median median bucket base random fast random time in second number processor random fast random time in second number processor median median bucket base random fast random time in second number processor random fast random figur perform differ select algorithm without load balanc except median median select algorithm global exchang use random data set time in second number processor random data nk balanc mod order maintain load balanc dimens exchang global exchang time in second number processor random data nm balanc mod order maintain load balanc dimens exchang global exchang time in second number processor sort data nk balanc mod order maintain load balanc dimens exchang global exchang time in second number processor sort data nm balanc mod order maintain load balanc dimens exchang global exchang figur perform random select algorithm differ load balanc strategi random sort data set facilit easier comparison two random algorithm show perform separ figur fast random select asymptot superior random select worstcas data random data expect run time random fast random algorithm o n log n o n log log n respect consid effect increas n fix p initi differ log n log log n signific enough offset overhead due sort fast random select random select perform better n increas fast random select begin outperform random select larg n algorithm converg execut time sinc o n domin revers point view find fix n increas p random select eventu perform better readili observ graph effect variou load balanc techniqu random algorithm random data shown figur figur execut time consist better without use load balanc use three load balanc techniqu load balanc time in second number processor random data nk balanc mod order maintain load balanc dimens exchang global exchang time in second number processor random data nm balanc mod order maintain load balanc dimens exchang global time in second number processor sort data nk balanc mod order maintain load balanc dimens exchang global time in second number processor sort data nm balanc mod order maintain load balanc dimens exchang global exchang figur perform fast random select algorithm differ load balanc strategi random sort data set random data almost alway neg effect total execut time effect pronounc random select fast random select explain fact fast random select fewer iter olog log n vs olog n less data iter observ load balanc neg effect run time random data easili explain load balanc processor element send element anoth processor time taken send data justifi time taken process data futur iter time send it suppos processor send element anoth processor process data involv scan iter base estim median discard part data random data expect half data discard everi iter thu estim total time process data om time send data m also om observ constant involv load balanc take time reduct run time caus it time in second number processor compar two random select algorithm use sort data nk random fast random time in second number processor compar two random select algorithm use sort data nm random fast random figur perform two random select algorithm sort data set use best load balanc strategi algorithm gamma load balanc random select modifi order maintain load balanc fast random select consid effect variou load balanc techniqu random algorithm sort data see figur figur even case cost load balanc offset benefit random select howev load balanc significantli improv perform fast random select figur see comparison two random algorithm sort data best load balanc strategi algorithm gamma load balanc random select modifi order maintain load balanc fast random algorithm which perform slightli better strategi see that larg n fast random select superior also observ see figur figur fast random select better compar advantag random select sort data final consid time spent load balanc random algorithm random sort data see figur figur type data input fast random select spend much less time random select balanc load reflect number time load balanc algorithm util olog log n vs olog n clearli cost load balanc increas amount imbal number processor random data overhead due load balanc quit toler rang n p use experi sort data signific fraction execut time random select spent load balanc load balanc never improv run time random select fast random select benefit load balanc sort data choic load balanc algorithm make signific differ run time consid varianc run time random sort data number processorstim in second random select random data load balanc time number processor time in second random select sort data load balanc time figur perform random select algorithm differ load balanc strategi balanc n order maintain load balanc o dimens exchang method d global exchang g number processorstim in second fast random select random data load balanc time number processorstim in second fast random select sort data load balanc time od g figur perform fast random select algorithm differ load balanc strategi balanc n order maintain load balanc o dimens exchang method d global exchang g primit twolevel model hypercub mesh broadcast o log p o log p o log combin o log p o log p o log parallel prefix o log p o log p o log gather o log global concaten o log transport op tabl run time basic commun primit mesh hypercub use cutthrough rout transport primit refer maximum total size messag sent receiv processor random algorithm random select algorithm ran time faster random data sort data see figur use load balanc strategi littl varianc run time fast random select figur algorithm perform equal well best worstcas data case processor stop criterion result execut one iter run thu load balanc detriment effect overal cost decid choos stop criterion provid fair comparison differ algorithm howev appropri fine tune stop criterion correspond increas number iter provid time improv load balanc data size processor select mesh hypercub consid analysi algorithm present cutthrough rout hypercub squar mesh p processor run time variou algorithm mesh hypercub easili obtain substitut correspond run time basic parallel commun primit use algorithm tabl show time requir parallel primit twolevel model comput hypercub p processor p p theta mesh analysi omit save space similar analysi found load balanc achiev use commun pattern transport primit involv two alltoal person commun processor o n element sent out worstcas time order maintain load balanc op hypercub mesh respect n op exchang load balanc algorithm hypercub worstcas run time o log p n log p mesh o log global exchang load balanc algorithmm time complex modifi order maintain load balanc algorithm hypercub mesh cost must ad select algorithm analysi algorithm load balanc desir tabl run time primit remain hypercub henc analysi experiment result obtain twolevel model valid hypercub thu time complex select algorithm hypercub twolevel model discuss paper ratio unit comput cost unit commun cost larg ie processor much faster underli commun network cost load balanc offset advantag fast random algorithm without load balanc superior perform practic scenario load balanc mesh result asymptot wors time requir would expect load balanc use small number processor larg number processor even one step load balanc would domin overal time henc would effect follow present result perform best case worst case data mesh determinist algorithm commun primit use determinist select algorithm gather broadcast combin even though broadcast combin requir time twolevel model cost absorb time requir gather oper ident mesh twolevel model henc complex determinist algorithm mesh remain twolevel model total time requir median median algorithm o n log n best case o n log n worst case bucketbas determinist algorithm run o n log time worst case without load balanc random algorithm commun random algorithm includ one prefixsum one broadcast one combin commun time mesh one iter random algorithm o log p p p make overal time complex o n log n best case o n log log n worst case data fast random algorithm involv parallel sort sampl use biton sort sampl n ffl chosen n element sort mesh sort sampl n ffl element use biton sort take o log accept small keep sort phase domin everi iter runtim fast random select mesh o n best case data worst case data time requir would o n log log p weight select correspond weight w attach it problem weight select find element x x l exampl weight median element divid data set sum weight w two set approxim equal sum weight simpl modif made determinist algorithm adapt weight select iter j select algorithm set j element split two subset j j count element use choos subset desir element found weight select perform follow first element j divid two subset j j select algorithm sum weight element subset j comput let k j weight metric iter j k j greater sum weight j problem reduc perform weight select k j otherwis need perform weight select k method retain properti guarante fraction element discard iter keep worst case number iter olog n therefor median median select algorithm bucketbas select algorithm use weight select without chang run time complex random select algorithm also modifi way howev modif fast random select work algorithm work sort sampl data set pick two element high probabl lie either side element rank k sort order weight select weight determin posit desir element sort order thu one may tempt select sampl weight howev work sinc weight element consid order sort data list element sort accord weight make sens henc random select without load balanc best choic parallel weight select conclus paper tri identifi select algorithm suit fast execut coarsegrain distribut memori parallel comput survey variou algorithm identifi four algorithm describ analyz detail also consid three load balanc strategi use balanc data execut select algorithm base analysi experiment result conclud random algorithm faster order magnitud determin desir bucketbas approach superior median median algorithm two random algorithm fast random select load balanc deliv good perform type input distribut littl variat run time overhead use load balanc wellbehav data insignific load balanc techniqu describ use without signific variat run time random select perform well wellbehav data larg variat run time best worstcas data load balanc improv perform random select irrespect input data distribut acknowledg grate northeast parallel architectur center minnesota supercomput center allow us use cm would like thank david bader provid us copi paper correspond code r determinist select olog log n parallel time design analysi parallel algorithm parallel select olog log n time use on optim algorithm parallel select practic parallel algorithm dynam data redistribut technic report cmuc time bound select parallel median algorithm introduct algorithm dynam load balanc distribut memori multiprocessor expect time bound select select reconfigur mesh introduct parallel algorithm introduct parallel comput design analysi algorithm effici comput spars interconnect network unifi theme parallel select deriv random sort select algorithm random parallel select program hypercub multicomput effici parallel algorithm select search sort matric find median random data access coarsegrain parallel machin ii load balanc hypercub tr ctr ibraheem alfuraih sriniva aluru sanjay goil sanjay ranka parallel construct multidimension binari search tree ieee transact parallel distribut system v n p februari david a bader improv random algorithm parallel select experiment studi journal parallel distribut comput v n p septemb marc dauma paraskeva evripid parallel implement select problem case studi intern journal parallel program v n p februari