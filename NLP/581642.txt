t bit section instruct set extens arm embed applic a program manipul data subword level ie bit section within word common place embed domain exampl applic includ media process well network process code applic spend signific amount time pack unpack narrow width data memori word execut time memori overhead pack unpack oper greatli reduc provid direct instruct set support manipul bit sectionsin paper present bit section extens bsx arm instruct set select arm processor research one popular embed processor also use basi build mani commerci network process architectur present design bsx instruct encod arm instruct set incorpor implement bsx simplescalar arm simul michigan result experi program variou benchmark suit show use bsx instruct total number instruct execut runtim mani transform function reduc code size reduc b introduct program embed applic frequent manipul data repres bit section within singl word need oper upon bit section aris applic often involv data smaller word even byte moreov also characterist mani applic point data maintain pack form is multipl data item must pack togeth singl word memori fact case input output applic consist pack data input consist pack data applic typic unpack process output requir pack form applic comput result explicitli pack gener output sinc pack unpack data characterist applic domain reflect sourc program itself work assum program written c languag wide use languag embed domain c program pack unpack data involv perform mani bitwis logic oper shift oper import applic manipul subword data includ media process applic manipul pack narrow width media data network process applic manipul packet typic embed applic receiv media data data packet transmiss medium therefor order make best use commun bandwidth desir individu subword data item express natur size expand bit entiti conveni howev data deposit memori either upon arriv input prior transmiss output clearli exist pack form process pack data typic involv unpack data gener pack data typic involv pack data requir execut addit instruct carri shift logic bitwis oper instruct cost cycl also increas code size exampl given taken adpcm audio gsm speech applic respect first exampl illustr unpack oper extract bit entiti inputbuff second exampl illustr pack bit entiti taken larc bit entiti taken larc unpack pack addit gener extra instruct pack unpack data consequ pack unpack addit memori locat regist requir hold valu pack unpack form increas regist pressur result increas memori requir cach activ final factor influenc total energi comsumpt vital concern paper present bit section extens bsx arm processor instruct set bit section subword entiti manipul program select arm processor research one popular embed processor also use mani commerci network process architectur built today present design bsx instruct encod arm instruct set newli design instruct allow us specifi regist operand bit section bit valu contain within regist result data store pack form directli access manipul thu need perform explicit unpack oper elimin similarli comput result store directli pack form elimin need explicit pack oper incorpor implement bsx simplescalar arm simul michigan result experi program variou benchmark suit show use bsx instruct number instruct execut program significantli reduc function bsx instruct use observ reduct dynam instruct count rang code size function reduc remaind paper organ follow section describ design bit section specif method incorpor variou type instruct also show new instruct encod use unus encod space arm instruct set section describ approach gener code make use bsx instruct section describ experiment setup result experi relat work instruct set design compil techniqu take advantag instruct discuss section conclud remark given section bit section extens bsx bit section descriptor subword level data entiti call bit section bit section sequenc consecut bit within word bit section vari bit long bit long specifi bit section use bit section descriptor bsd specifi bit section within word two option one way specifi start bit posit end bit posit within word anoth way specifi start bit posit bit section length either way take bit specifi singl bit section bit start posit bit length end posit use form specifi length bit section analyz mediabench commbench program found mani oper involv multipl bit section operand size therefor one instruct involv multipl bit section operand share bit section length specif length multipl bit section use instruct often specifi onc end bit posit bit section often differ thu unlik length end posit specif cannot share bit section address mode two differ address mode bit section descriptor specifi posit mani bit section within word boundari determin compil time posit bit section determin run time therefor need two address mode specifi bit section bit section operand specifi immedi valu encod within instruct bit section specifi regist cannot express immedi constant number bit section operand use variou instruct vari one three immedi bit section descriptor immedi bit section descriptor encod part in struction let us assum r regist operand instruct specifi use bit arm contain regist rr operand bit section within r whose posit within r known fix immedi bit section descriptor associ regist follow rstart len refer to bit startstart len r constant start bit start posit bit section may vari bit bit len also bit number bit bit section includ bit regist note valid bit section descriptor start len never greater immedi bit section descriptor use either instruct one bit section operand two bit section operand two bit section descriptor need specifi len specif henc share two descriptor shown below rstart rstart len refer to bit startstart len r bit startstart len r regist bit section descriptor operand instruct well result bit section three bit section descriptor need specifi even though three bit section share length possibl specifi three bit section immedi enough bit avail instruct carri task therefor case specif bit section descriptor store regist rather immedi valu instruct itself anoth reason specifi bit section descriptor regist situat posit length bit section within regist fix rather determin runtim program case bit section descriptor immedi valu specifi part instruct rather descriptor comput regist specifi part instruct regist specifi bit section descriptor may specifi one two three bit section one two three possibl differ regist shown below regist r contain bit section descriptor appropri operand regist r r content r organ shown figur len figur bit section descriptor bit section len start figur bit section descriptor bit section len start start figur bit section descriptor bit section bit section instruct encod next describ arm instruct allow use bit section operand principl possibl allow exist arm instruct regist operand access bit section within regist operand cannot allow instruct flexibl would mani new variat instruct enough space encod arm instruct accommod new instruct therefor choos select subset instruct like involv bit section oper develop variat them benchmark studi possibl oper relat data process therefor eight data process instruct chosen version arm instruct set includ six alu instruct add sub and eor orr rsb well compar move cmp mov instruct select instruct base studi number multimedia benchmark determin type instruct commonli need figur show percantag total execut instruct fall categori instruct type select support bit section operand see select instruct account signific percentag dynam instruct count adpcmdecod adpcmencod jpegcjpeg gdecod gencod castdecod castencod frag thre bilint histogram convolv softfloat dh percentag select instruct count figur dynam frequenc select instruct instruct immedi bsd instruct provid three variat immedi bit section operand use version arm instruct set encod space prefix undefin use remain bit space undefin instruct deploy new instruct bit three bit use distinguish eight oper involv let us discuss three variat alu instruc tion first variat fv alu instruct correspond instruct two bit section operand therefor one operand act sourc operand destin variant cmp mov instruct slightli differ requir two operand unlik alu instruct requir three operand cmp two bit section operand sourc operand mov one operand sourc destin cannot allow three operand bit section operand time three bit section operand need least bit specifi encod instruct shown below prefix bit indic presenc bsx instruct three bit encod eight oper bit bit indic first variat instruc tion remain bit encod two bit section descriptor rdrd len rmrm lenopcod rd rd rm len rm figur first variat alu instruct second variat sv instruct three operand one destin regist not bit section one sourc regist not bit secion third operand bit section operand variat oper done bit section zero extend specifi variat bit must bit must instruct format encod shown below rm figur instruct cmp mov slightli differ need two operand bit flag indic whether bit section treat unsign sign entiti unsign zero extend oper bit section sign therefor first bit bit section extend oper rm figur cmp mov instruct rm figur third variat alu instruct third variat tv one bit immedi valu one operand one bit section descriptor repres second operand latter bit section also serv destin operand specifi variat bit must bit must instruct format encod shown abov instruct regist bsd instruct three variat regist bit section operand use variat differ number bit section operand found anoth undefin instruct space prefix encod instruct version arm instruct set encod instruct follow bit contain opcod bit stand number bit section operand instructon therefor correspond presenc bit section operand bit specifi whether bit section contain unsign sign integ format encod instruct given below rn figur alu instruct regist bsd figur cmp mov instruct regist bsd rm rn figur figur setup specifi instruct cmp mov littl bit differ two bit section operand therefor bit bit specifi bit section descriptor contain sever bit section therefor setup cost bit section descriptor regist high therefor introduc new instruct opcod setup set bit section descriptor effici instruct set multipl valu bit section descriptor simultan format encod instruct given figur instruct setup rd rn rm len set valu rn rm len field bit section descriptor held rd simultan bit setup specif describ field set up setup specifi bit bit repres immedi valu field setup copi immedi valu bit bit bit use specifi regist field setup copi last five digit regist rn specifi bit bit rn valid bit section specifi must ignor gener sinc three valu rn rm len regist need read regist implement instruct one cycl howev practic never encount situat need read three regist bsx implement implement bsx instruct two approach possi ble one approach involv redesign regist file bit section directli suppli regist file read write oper logic insid regist file ensur appropri bit regist read written altern approach requir modif regist file read write entir regist read entir regist read logic provid relev bit section select gener bit section operand instruct similarli write updat bit regist cycl immedi cycl write back oper occur content regist partial overwritten read valu read made avail instruct write back stage relev bit section first updat written regist file extra dedic read port provid perform extra read associ write oper advantag first approach energi effi cient even though requir redesign regist file also quit simpl second approach energi effici requir greater number regist read also somewhat complex implement gener bsx arm code approach gener code use bsx instruct take exist arm code gener program use unmodifi compil then postpass select replac use arm instruct bsx instruct gener optim code optim aim pack unpack oper context bit section compil time fix dynam vari posit fix unpack unpack oper involv mere extract bit section regist contain pack data place bit section lower order bit anoth regist exampl illustr unpack extract bit section inputbuff place lower order bit delta the higher order bit delta shown below arm code requir two instruct shift instruct howev singl bsx instruct take bit zero extend them place regist suffici perform unpack arm code mov r r asr r r xf bsx arm code mov r r gener transform optim unpack oper take follow form arm code instruct extract bit regist ri place regist rj extract bit section place rj use possibl multipl time transform code instruct elimin use rj replac direct use bit section ri transform also elimin temporari use regist rj therefor transform legal compil must ensur regist rj inde temporarili use is valu regist rj referenc follow code fragment transform rj ri masksl inst use rj instn use rj precondit bit section ri remain unchang instn rj dead instn transform inst use risl instn use risl fix pack arm code bit section extract data word must perform shift oper oper elimin bsx instruct use directli refer bit section situat illustr exampl given below c code take bit larc concaten bit larc first two instruct arm code extract relev bit larc third instruct extract relev bit larc last instruct concaten bit larc larc see bsx arm code two instruct first instruct extract bit larc zero extend them store regist r second instruct move relev bit larc regist r place proper posit regist r arm code mov r r lsr r r r r orr r r r asl bsx arm code mov r r mov r r gener transform elimin pack oper character follow instruct defin bit section place temporari regist ri need place bit section temporari regist ri aris bit section possibl use multipl time eventu bit section pack anoth regist rj use orr instruct optim code bit section defin directli comput posit place pack oper is rj use bit section directli refer bit section rj therefor need temporari regist ri elimin pack orr instruct elimin transform legal compil must ensur regist ri inde temporarili use is valu ri referenc code fragment transform ri bit section definit whole regist inst use ri use regist instn use ri use regist orr rj rj ri pack bit section precondit bit section ri rj remain unchang orr ri dead orr transform defin pack inst use rj use bit section instn use rj use bit section dynam unpack situat which extract bit section carri out posit bit section determin run time exampl below number lower order bit number equal valu variabl size extract put buffer zero extend place back put buffer sinc valu size known compil time immedi valu cannot use specifi bit section descriptor instead first three arm instruct shown use dynam construct mask use instruct extract requir valu put buffer optim code bit section descriptor setup regist r use mov instruct extract requir bit place r arm code mov r mov r r lsl r sub r r r r r bsx arm code setup r r mov r rr gener form transform shown below arm instruct construct mask replac singl setup instruct instruct replac mov bit section whose descriptor found regist set setup instruct arm code mov ri mov ri ri lsl rj sub ri ri rd rn ri precondit valu ri dead instruct bsx arm code setup ri rj rj mov rd rnri dynam pack pack bit section togeth whose size known till runtim cost sever instruct c code given extract lower order p bit higher order bit n pack togeth o arm code oper involv mani instruct first requir mask n gener next relev bit extract use mask final pack togeth use orr instruc tion contrast bsx arm code use far fewer instruct sinc ps valu known compil time must use regist bit section descriptor n arm code mov r r r r lsl r n p r r r m p bsx arm code setup r r descriptor ms bit section rsb r r setup r r r descriptor ns bit section relev bit r relev bit r gener transform optim dynam pack oper describ follow two bit section whose posit length unknown compil time extract regist current resid put separ regist respect mask construct instruct use perform extract final pack togeht one regist use orr instruct optim code bit section setup regist bit section descriptor first move bit section final regist bit section descriptor directli result orr instruct remov use setup instruct simultan setup sever field bit section descriptor reduc number instruct comparison instruct sequenc use creat mask origin code differ type instruct sequenc use creat mask thu alway possibl identifi sequenc current implement handl commonli encount sequenc arm code instruct sequenc creat mask ra rb mask instruct sequenc creat mask rc rd mask orr rm ra rc bsx arm code setup regist bit section descriptor move bit section rm use bit section descriptor setup regist bit section descriptor move bit section rm use bit section descriptor experiment evalu experiment setup present result experi describ experiment setup includ simul arm optim compil set relev benchmark processor simul start port cycl level simul simplescalar arm avail univers michigan version simul five stage pipelin describ preced section intel sa strongarm pipelin found exampl sa icach configur processor are kb cach size b line size way asso ciativ miss penalti cycl a miss requir go off chip time model valid rebel netwind develop workstat develop system michigan extend simul number import way research first modifi simplescalar use system call convent follow newlib c librari instead glibc current use made modif newlib develop use embed system second incorpor implement bsx instruct purpos evalu addit also incorpor thumb instruct set simplescalar howev featur relev paper optim compil compil use work gcc compil built creat version support gener arm thumb well mix arm thumb code specif use xscaleelfgcc compil version xscale program compil o level optim use o level optim function inlin loop unrol enabl clearli sinc code size import concern embed system want enabl function inlin loop unrol translat arm code optim bsx arm code carri optim postpass frequent execut function program involv pack unpack ing use bit section data translat bsx arm code remaind program modifi seen transform preced section temporari regist freed optim may possibl improv code qualiti make use regist time due limit implement repres benchmark benchmark use taken mediabench commbench netbench bitwis suit repres class applic import embed domain also ad imag process applic thre follow program use adpcm encod encod jpeg cjpeg frag cast decod encod imag process thre bitwis bilint histogram convolv softfloat dh result next present result experi measur improv code qualiti due use bsx instruct measur reduct instruct count cycl count bsx arm code comparison pure arm code result given tabl result provid percentag improv function modifi well improv total count entir program reduct instruct count modifi function vari net instruct count reduct entir program lower rang expect subset function program make signific use bsx in struction reduct cycl count modifi function vari net cycl count reduct entir program rang tabl reduct code size function transform make use bsx instruct given code size reduct rang final also studi usag bsx instruct transform use benchmark tabl show type bsx instruct use benchmark particular indic whether fix bsd use instruct dynam bsd use fix bsd also indic three variat bit section referenc instruct use benchmark dynam bsd also indic use setup instruct see fix bsd commonli use situat involv three variat bit section operand aris tabl show kind transform found applic benchmark pack unpack involv fix dynam bsd see optim everi bsx instruct use program result tabl indic fix bsd instruct includ bsx appropri use result regist bsd neg found instanc posit bsd vari runtim abl develop appropri compil transform effect take advantag situat use instruct one benefit use bsx instruct often number regist requir reduc multipl subword data item simultan resid singl regist longer separ hold differ regist perform data present base upon bsx arm code take advantag addit regist may becom avail regist use one expect addit perform gain problem global regist alloc subword data beyond scope paper relat paper shown regist requir reduc function take advantag bsx instruct relat work wide varieti instruct set support develop support multimedia network process applic extens exploit subword super word parallel instruct set extens propos yang lee focu permut subword data pack togeth regist network processor describ also support bit section referenc paper care design extens consist small subset flexibl bitsect referenc instruct show easili incorpor popular embed arm processor compil research subword data divid two cat egori first work done automat identifi narrow width data second techniqu automat pack narrow width data perform regist alloc instruct select gener simd parallel instruct carri out sever complementari techniqu identifi subword data stephenson et al propos bitwidth analysi discov narrow width data perform valu rang analysi budiu et al propos analysi infer individu bit valu use narrow width data tallam gupta propos new type dead bit analysi narrow width data analysi zhang et al aim automat discoveri multipl data item pack program variabl work pack narrow width data discoveri includ follow davidson jinturkar first propos compil optim exploit narrow width data propos memori coalesc improv cach perform program zhang gupta propos techniqu compress narrow width pointer data improv cach perform techniqu explor context gener purpos processor chang data layout memori pack aggress pack scalar variabl regist studi mention earlier regist alloc techniqu combin work paper improv perform anoth work regist alloc presenc bit section referenc wagner leuper tabl reduct dynam instruct count benchmark instruct count save function arm bsx arm adpcmdecod adpcm decod total adpcmencod adpcm encod total jpegcjpeg emit bit total gdecod fmult predictor zero step size reconstruct total gencod fmult predictor zero step size reconstruct total castdecod cast encrypt total castencod cast encrypt total frag cksum total threshold coalesc memo block memo total bilint main total histogram main total convolv main total softfloat float signal nan addfloatsig subfloatsig float mul float div rem total dh nn digitmult total tabl reduct dynam cycl count benchmark instruct count save function arm bsx arm adpcmdecod adpcm decod total adpcmencod adpcm encod total jpegcjpeg emit bit total gdecod fmult predictor zero step size reconstruct total gencod fmult predictor zero step size reconstruct total castdecod cast encrypt total castencod cast encrypt total frag cksum total threshold coalesc memo block memo total bilint main total histogram main total convolv main total softfloat float signal nan addfloatsig subfloatsig float mul float div rem total dh nn digitmult total tabl bsx instruct usag benchmark fix bsd dynam setup adpcmdecod ye ye adpcmencod ye ye jpegcjpeg ye ye ye gdecod ye ye gencod ye ye castdecod ye ye castencod ye ye frag ye thre ye bilint ye histogram ye ye convolv ye softfloat ye ye ye dh ye ye tabl transform appli benchmark fix bsd dynam bsd pack unpack pack unpack adpcmdecod ye adpcmencod ye ye jpegcjpeg ye gdecod ye gencod ye castdecod ye ye castencod ye ye frag ye thre ye bilint ye histogram ye convolv ye softfloat ye ye dh ye tabl reduct code size benchmark code size reduct function arm bsx arm adpcmdecod adpcm decod adpcmencod adpcm encod jpegcjpeg emit bit gdecod gencod fmult predictor zero step size reconstruct castdecod castencod cast encrypt frag cksum threshold coalesc memo block memo bilint main histogram main convolv main softfloat addfloatsig subfloatsig float mul float div rem float sqrt dh nn digitmult work exploit bit section referenc context variabl alreadi contain pack data carri addit variabl pack compil techniqu carri simd oper narrow width data pack regist found conclus present design bit section extens bsx arm processor easili encod free encod space arm instruct set found bit section frequent manipul multimedia network data process code therefor bsx instruct use quit effect improv perform benchmark addit reduct code size regist requir also result bsx instruct use incorpor implement bsx simplescalar arm simul michigan result experi program variou benchmark suit show use bsx instruct number instruct execut program significantli re duce futur work focu integr use bsx instruct regist alloc techniqu aggress pack subword variabl singl regist acknowledg work support darpa award f nation scienc foundat grant ccr ccr ccr eia univers arizona r the simplescalar tool set version bitvalu infer detect exploit narrow width comput memori access coalesc techniqu elimin redund memori access compil simd within regist data align subword parallel dsp arm system architectur a represent bit section base analysi optim sa microprocessor technic refer manual the intel xscale microarchitectur technic summari exploit superword level parallel multimedia instruct set tool evalu synthes multimedia commun system a mhz b w cmo risc microprocessor benchmark suit network processor a new network processor architectur high speed commun httpwww arm architectur refer manual bitwidth analysi applic silicon compil bitwidth awar global regist alloc c compil design industri network processor commbench telecommun benchmark network processor fast subword permut instruct use omega flip network stage data compress transform dynam alloc data structur tr memori access coalesc mediabench simplescalar tool set version bidwidth analysi applic silicon compil exploit superword level parallel multimedia instruct set compil design industri network processor arm architectur refer manual arm system architectur netbench compil simd within regist bitvalu infer represent bit section base analysi optim data compress transform dynam alloc data structur fast subword permut instruct use omega flip network stage ctr sriraman tallam rajiv gupta bitwidth awar global regist alloc acm sigplan notic v n p januari bengu li rajiv gupta simpl offset assign presenc subword data proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa ranjit jhala rupak majumdar bit level type high level reason proceed th acm sigsoft intern symposium foundat softwar engin novemb portland oregon usa