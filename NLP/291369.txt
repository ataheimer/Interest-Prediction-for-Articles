t diskless checkpoint a abstractdiskless checkpoint techniqu checkpoint state longrun comput distribut system without reli stabl storag such elimin perform bottleneck tradit checkpoint distribut system paper motiv diskless checkpoint present basic diskless checkpoint scheme along sever variant improv perform perform basic scheme variant evalu highperform network workstat compar tradit diskbas checkpoint conclud diskless checkpoint desir altern diskbas checkpoint improv perform distribut applic face failur b introduct checkpoint import topic faulttoler comput basi rollback recoveri suppos user execut longrun comput reason hardwar softwar machin run comput fail absenc checkpoint machin becom function user must start program over thu wast previou comput user store period checkpoint program state stabl storag could instead restart program recent checkpoint call roll back store checkpoint longrun comput checkpoint allow user limit amount lost comput event failur or failur mani program environ intend user longrun comput reli checkpoint faulttoler exampl condor libckpt other provid plankcsutkedu materi base upon work support nation scienc foundat grant ccr mip cda orau junior faculti enhanc award darpa grant n contract dabtc transpar checkpoint uniprocessor program checkpoint mist cocheck other provid checkpoint parallel comput environ system store checkpoint stabl storag ie disk sinc stabl storag typic surviv processor failur howev sinc checkpoint larg up hundr megabyt per processor act store disk becom main compon contribut overhead perform degrad due checkpoint mark parallel distribut system number processor often vastli outnumb number disk sever techniqu devis implement minim sourc overhead includ increment checkpoint checkpoint buffer copyonwrit compress memori exclus howev techniqu perform stabl storag medium still underli caus overhead paper present diskless checkpoint goal diskless checkpoint remov stabl storag checkpoint parallel distribut system replac memori processor redund elimin stabl storag diskless checkpoint remov main sourc overhead checkpoint howev come free failur coverag diskless checkpoint less checkpoint stabl storag sinc none compon diskless checkpoint system surviv wholesal failur moreov memori processor network overhead introduc diskless checkpoint absent standard diskbas scheme purpos paper twofold first present basic scheme diskless checkpoint perform optim basic scheme second assess perform diskless checkpoint network sparc workstat compar standard diskbas checkpoint anticip diskless checkpoint induc less overhead applic diskbas checkpoint enabl user checkpoint frequent without perform penalti lower applic expect run time presenc failur diskless checkpoint toler singl processor failur case multipl processor failur how ever toler wholesal failur such power outag knock machin thu optim faulttoler scheme would twolevel scheme advoc vaidya diskless checkpoint taken frequent standard diskbas checkpoint taken much larger interv way frequent case one two processor fail handl swiftli low overhead rarer case wholesal failur handl well albeit higher overhead longer rollback penalti overview diskless checkpoint diskless checkpoint base coordin checkpoint coordin checkpoint collect processor disjoint memori coordin take checkpoint global system state call coordin checkpoint coordin checkpoint consist checkpoint processor system plu log messag transit time checkpoint coordin checkpoint wellstudi topic faulttoler thorough discuss coordin checkpoint reader direct survey paper elnozahi johnson wang diskless checkpoint assum messag log store for exampl syncand stop algorithm coordin checkpoint ensur messag log messag log contain within checkpoint individu processor reduc problem take coordin checkpoint save individu checkpoint processor system diskless checkpoint compos two part checkpoint state applic processor memori encod inmemori checkpoint store encod checkpoint processor failur occur system recov follow manner first nonfail applic processor roll back store checkpoint memori next replac processor chosen take place fail processor final replac processor use checkpoint state nonfail applic processor plu encod checkpoint processor calcul checkpoint fail processor checkpoint calcul replac processor roll back applic continu checkpoint note either spare processor checkpoint processor may use replac processor checkpoint processor use system continu fewer or no checkpoint processor thu reduc faulttoler howev processor becom avail may employ addit checkpoint processor exact problem specif user execut longrun applic parallel distribut comput environ compos processor disjoint memori commun messagepass applic execut exactli n processor diskless checkpoint extra processor ad system nm processor cooper take diskless checkpoint long number processor system least n long failur occur within certain constraint applic may proceed effici state abov diskless checkpoint may broken two part applic processor checkpoint themselv checkpoint processor encod applic processor checkpoint explain below follow issu involv glu two part togeth applic processor checkpoint goal applic processor checkpoint state way rollback call for due failur anoth processor processor roll back recent checkpoint standard diskbas system processor checkpoint save content address space disk typic involv save valu stack heap global variabl regist figur a processor must roll back overwrit current content address space store checkpoint last step restor regist restart comput checkpoint therebi complet rollback detail gener process checkpoint recoveri see paper condor libckpt memori disk regist applic processor address space unus memori regist applic processor address space diskless checkpoint memori regist applic processor address space page fault memori clone regist applic processor address space checkpoint unus a b c d figur a checkpoint disk b simpl diskless checkpoint c increment diskless checkpoint d fork diskless checkpoint diskless checkpoint processor save state memori rather disk simplest form diskless checkpoint requir inmemori copi address space regist figur b rollback requir content address space regist restor inmemori checkpoint note checkpoint toler failur applic processor itself simpli enabl processor roll back recent checkpoint anoth processor fail one drawback simpl diskless checkpoint memori usag complet copi applic must retain memori applic processor solut problem use increment checkpoint figur c take checkpoint applic processor set virtual memori protect bit page address space readonli applic attempt write page access violat page fault occur checkpoint system make copi fault page reset page protect readwrit thu processor checkpoint consist readonli page address space plu store copi readwrit page roll back checkpoint processor simpli copi or map checkpoint copi readwrit page back applic address space long applic overwrit page checkpoint increment checkpoint improv perform memori util checkpoint last use checkpoint method fork or copyonwrit checkpoint checkpoint applic clone with exampl fork system call unix depict figur d clone diskless checkpoint roll back applic overwrit state clone possibl clone mere assum role applic fork checkpoint similar increment checkpoint oper system implement process clone copyonwrit mean process clone share page one process alter page thu work manner increment checkpoint except identif modifi page page copi perform oper system result less cpu activ switch back forth system user mode moreov fork checkpoint requir user access virtual memori protect facil avail oper system encod checkpoint goal part extra checkpoint processor store enough inform checkpoint fail processor may reconstruct specif checkpoint processor processor encod checkpoint applic processor way applic processor fail checkpoint may recalcul checkpoint nonfail processor plu encod checkpoint processor pariti raid level simplest checkpoint encod pariti figur a one checkpoint processor ie encod bitwis pariti applic checkpoint word let byte b j repres jth byte applic processor i jth byte checkpoint processor be applic processor fail state system may recov follow first replac processor select take place fail applic processor could checkpoint processor spare processor previous unus fail processor failur transient replac processor calcul checkpoint fail processor take pariti checkpoint nonfail processor encod checkpoint processor word suppos processor fail processor checkpoint may reconstruct as ckp note recoveri scheme raid level disk array technolog replac processor calcul checkpoint fail processor applic processor roll back previou checkpoint comput proce point besid pariti sever scheme use encod checkpoint vari number checkpoint processor effici encod amount failur coverag detail below a b c figur encod checkpoint a raid level b mirror c onedimension pariti mirror checkpoint mirror figur b anoth simpl encod scheme mirror checkpoint processor ith checkpoint processor simpli store checkpoint ith applic processor thu n processor failur may toler although failur applic processor checkpoint processor cannot toler checkpoint mirror low checkpoint overhead encod calcul such pariti need made dimension pariti onedimension pariti figur c checkpoint processor applic processor partit group roughli equal size checkpoint processor calcul pariti checkpoint group i increas failur coverag one processor failur per group may toler moreov calcul checkpoint encod effici longer singl bottleneck the checkpoint processor note dimension pariti reduc raid level mirror dimension pariti twodimension pariti figur d extens onedimension pariti twodimension pariti applic processor arrang logic twodimension grid checkpoint processor row column grid checkpoint processor calcul pariti applic processor row column twodimension pariti requir checkpoint processor toler failur one processor row column mean twoprocessor failur may toler d e figur encod checkpoint d twodimension pariti e ham code f evenodd code g reedsolomon code paritybas code wellknown ham code figur e may use toler twoprocessor failur addit roughli log n processor checkpoint processor calcul pariti subset applic processor evenodd code figur f techniqu checkpoint processor employ twoprocessor failur may toler encod base pariti calcul littl complex scheme reedsolomon code gener purpos encod techniqu reedsolomon code figur g checkpoint processor use galoi field arithmet encod checkpoint way failur may toler sinc encod complex pariti cpu overhead reedsolomon code greater method achiev maxim failur coverag per checkpoint processor glu two part togeth section discuss applic processor store checkpoint intern checkpoint processor encod inform final compon diskless checkpoint coordin applic checkpoint processor effici correct way section discuss relev detail coordin two set processor focu primarili raid level encod discuss differ encod entail toler failur checkpoint checkpoint system diskless checkpoint system must take care remain faulttoler even failur checkpoint recoveri underway done make sure coordin checkpoint remain valid next coordin checkpoint complet checkpoint processor control process checkpoint processor complet calcul encod current checkpoint may discard previou encod notifi applic processor may discard previou checkpoint upon recoveri checkpoint processor valid encod recent checkpoint use recoveri along recent checkpoint nonfail applic processor checkpoint processor valid encod recent checkpoint previou encod must use along previou checkpoint nonfail applic processor protocol ensur alway valid coordin checkpoint system memori checkpoint processor encod coordin checkpoint i applic processor checkpoint coordin checkpoint i checkpoint processor incomplet encod checkpoint i checkpoint processor still contain encod coordin checkpoint moreov applic processor checkpoint coordin checkpoint gamma thu whole system may recov coordin checkpoint failur detect recoveri remain processor simpli initi recoveri procedur anew space demand ramif preced protocol moment checkpoint processor finish store encod processor contain two checkpoint memori current checkpoint previou checkpoint thu memori usag diskless checkpoint seriou issu suppos size applic processor address space byte simpl diskless checkpoint consum extra byte memori hold checkpoint ensur byte extra memori consum time applic must frozen checkpoint applic address a b figur calcul encod a direct b fanin space may use without copi calcul checkpoint encod encod calcul applic address space may copi previou checkpoint expend applic unfrozen increment checkpoint checkpoint copi page made page fault caught checkpoint time processor calcul encod discard checkpoint copi page set protect applic page readonli thu increment checkpoint size i extra byte memori necessari worst case page modifi checkpoint equal fork checkpoint checkpoint separ process checkpoint processor complet encod three process contain applic processor applic itself recent checkpoint previou checkpoint sinc process clone use copyonwrit optim checkpoint process consum extra byte memori therefor fork checkpoint requir extra byte memori checkpoint byte time worst case checkpoint time final diskbas checkpoint use fork optim requir byte memori consist page modifi checkpoint take place less i though latenc checkpoint larg compar checkpoint interv may close i send calcul encod raid level encod one checkpoint processor c n applic processor store bitwis pariti checkpoint applic processor simplest way calcul pariti employ direct method applic processor simpli send checkpoint c initi clear portion memori call e store checkpoint encod upon receiv ckp shown figur a figur phi sign shown directli processor perform bitwis exclus or arrow one processor anoth repres one processor send checkpoint anoth two problem direct method first c becom messagereceiv bottleneck sinc destin checkpoint messag second c pariti calcul problem may allevi fanin algorithm here applic processor perform pariti calcul log n step send final result c store result memori shown figur b encod besid raid level two method may extend direct method processor send checkpoint multicast messag proper checkpoint processor necessari eg reedsolomon code checkpoint processor modifi checkpoint exclusiveor checkpoint fanin method one fanin perform checkpoint processor may entail cooper applic processor eg reedsolomon code subset applic processor eg onedimension pariti checkpoint must modifi encod done applic processor p fanin start network fanin algorithm prefer direct elimin bottleneck distribut pariti calcul howev network support multicast encod involv multipl checkpoint processor may profit direct method break checkpoint chunk preced descript impli whole checkpoint sent processor processor sinc checkpoint may larg often make effici use memori break checkpoint chunk fix size exampl fanin algorithm two extra chunk memori need receiv incom chunk anoth processor make pariti calcul send result chunk small enough consum much memori larg enough overhead send chunk domin messagesend startup send diff applic processor use increment checkpoint avoid overhead send page modifi sinc previou checkpoint howev caus problem creat checkpoint encod specif encod creat anew checkpoint need checkpoint data processor solut use diff assum direct encod method employ checkpoint processor first copi previou checkpoint current checkpoint applic processor follow modifi page page k address space calcul diff k bitwis exclusiveor current copi page copi page previou checkpoint which cours avail applic processor send diff k checkpoint processor xor checkpoint effect subtract old copi page ad new copi way unmodifi page need sent checkpoint processor one may use diff fanin algorithm well stipul processor modifi page checkpoint interv need send page xor page perform fanin compress diff send diff rather actual byte checkpoint interest opportun compress aris suppos applic modifi byte page diff page previous checkpoint copi compos mostli zero easili compress use either runlength encod algorithm send tag byte rather whole page compress trade use cpu reduc load network compress combin natur increment checkpoint modifi page compress sent may also use simpl fork checkpoint convert entir checkpoint diff compress send along effect emul increment checkpoint region memori modifi get compress noth implement experi order assess perform diskless checkpoint compar standard diskbas checkpoint network workstat implement small transpar checkpoint system network sun sparc workstat univers tennesse workstat mbyte physic memori run suno version workstat connect fast switch ethernet isol perform test measur peak bandwidth two processor roughli megabyt per second workstat littl access local disk storag megabyt per machin howev machin connect via regular ethernet depart file server use sun nf disk bandwidth megabyt per second perform nf ethernet far wors nf remot file write achiev bandwidth megabyt per second page size machin byte access page tabl control mprotect system call checkpoint run top pvm work like mani pvm checkpoint applic need recompil object modul must relink checkpointingmodifi pvm librari applic start checkpoint code get control read startup inform control file inform includ checkpoint interv checkpoint optim use plu checkpoint store to disk checkpoint processor applic start one applic processor interrupt checkpoint interv expir processor coordin applic processor use syncandstop synchron algorithm consist determin processor checkpoint abbrevi descript checkpoint diskfork checkpoint disk use fork simp simpl diskless checkpoint inc increment diskless checkpoint fork diskless checkpoint incfork increment fork diskless checkpoint csimp simpl diskless checkpoint compress cinc increment diskless checkpoint compress fork diskless checkpoint compress cincfork increment fork diskless checkpoint compress tabl checkpoint variant implement experi pvm includ basic form failur detect specif processor current pvm session fail rest processor eventu notic failur remov fail processor pvm session pvm allow user notifi event checkpoint use facil recogn processor failur failur occur spare processor pvm session select replac fail processor spare processor diskless checkpoint employ checkpoint processor chosen replac processor recoveri proce automat either diskbas diskless checkpoint import note checkpoint requir programm modifi code enabl checkpoint simpl relink necessari gamut checkpoint variant enumer tabl includ standard diskbas checkpoint use fork optim test increment diskbas checkpoint improv perform checkpoint test diskless checkpoint implement raid level encod use fanin algorithm checkpoint encod creat chunk byte conveni also page size choic algorithm ramif certain optim work exampl perform increment checkpoint encod creat chunkbychunk processor modifi correspond page empti messag sent part fanin instead page use diffbas compress page compress use bitmapbas compress algorithm compress perform send processor send uncompress receiv say increment diskbas checkpoint often use optim simpli help test applic run time checkpoint size per node sec hmmss mbyte nbodi cell pcg tabl basic paramet test applic processor merg page own compress result send along final compress chunk reach checkpoint processor uncompress chunk merg previou checkpoint encod store next encod applic use five applic test perform checkpoint applic cpuintens parallel program sort often requir hour sometim day execut execut instanc program took hour run sixteen processor absenc checkpoint case clear program scale size scale affect perform checkpoint basic paramet applic present tabl briefli describ applic order checkpoint size below nbodi nbodi comput nbodi interact among particl system program written c use parallel multipol tree algorithm instanc use test particl ten iter basic structur program follow particl repres data structur sever field particl partit among slave processor sixteen test way processor close other by metric resid slave limit interslav commun reason slave processor differ number particl hold therefor size exampl test slave processor averag megabyt size largest six megabyt iter locat field among other particl updat reflect nbodi inter action sinc size particl data structur less machin page size mean almost page slave processor modifi iter lead poor increment checkpoint behavior checkpoint interv span multipl iter howev sinc much particl data left unmodifi iter iter byte per page chang result good diffbas compress two paramet affect run time memori usag nbodi number particl affect time space number iter affect run time nbodi applic checkpoint small enough allow number checkpoint diskless diskbas checkpoint mat mat c program comput float point matrix product two squar matric use cannon algorithm matrix size test theta lead megabyt checkpoint per processor uniprocessor matrix multipl typic show excel increment checkpoint behavior sinc two input matric readonli product matrix calcul sequenti fill whole page time way product element calcul never subsequ modifi howev highperform parallel algorithm cannon algorithm differ respect cannon algorithm three matric partit squar block among n processor and assum n perfect squar algorithm proce p step step processor add product two input submatric product submatrix processor send input submatric neighbor processor receiv new one place repeat product submatric calcul ramif data movement cours iter matric modifi therefor checkpoint span iter as case diskbas checkpoint increment checkpoint benefici effect multipl checkpoint taken iter as case diskless checkpoint increment checkpoint success uniprocessor case page updat mat updat entireti lead poor diffbas compress mat time space demand determin size matrix n theta n matrix memori usag proport n run time proport n commun pattern mat depend number processor matrix size mat nbodi applic possibl take one diskbas checkpoint program execut three diskbas checkpoint as oppos seven diskless checkpoint taken mat pstswm pstswm fortran program solv nonlinear shallow water equat rotat sphere use spectral transform method instanc use simul state d system durat hour like nbodi pstswm modifi major page iter modifi byte per page therefor increment checkpoint show limit improv diffbas compress work well pstswm checkpoint larg approxim megabyt per processor howev sinc machin megabyt physic memori two checkpoint may store stress limit physic memori pstswm scale size simul denser particl grid size set iter perform roughli action therefor simul longer time frame increas run time linear fashion without alter gener behavior eg memori access pattern significantli cell cell parallel cellular automaton simul program written c program distribut two grid cellular automata evenli across applic processor one grid denot current one denot next valu current grid use calcul valu next grid two grid ident swap instanc use test simul cellular automaton grid gener iter cell updat everi automaton next grid therefor checkpoint span two iter memori locat updat render increment checkpoint useless compress depend data itself spars grid where mani automata take zero valu may see littl chang automata valu time lead good compress denser grid lead less compress test use spars grid program size directli proport grid size run time proport grid size time number iter pair iter perform oper thu memori access commun pattern pcg fortran program solv larg spars matrix use precondit conjug gradient iter method matrix convert small dens format approxim x calcul refin iter reach userspecifi toler correct valu test element spars matrix program take iter exact mechan memori usag pcg detail salient point follow main data structur program may view mani vector length n in instanc vector distribut among applic processor roughli three quarter vector never modifi program start calcul rest updat entireti iter therefor increment checkpoint one quarter size nonincrement checkpoint data get updat everi iter store dens contigu page offer littl opportun diffbas compress program size directli proport n like cell pstswm run time proport size time number iter applic processor hold megabyt worth data pcg therefor one simpl diskless checkpoint fit memori howev increment copyonwrit checkpoint employ applic one two checkpoint consum megabyt memori avail size checkpoint combin speed sun nf result inabl take diskbas checkpoint pcg time store one checkpoint longer run time applic reiter instanc test chosen run period time long enough measur impact checkpoint recoveri applic natur input paramet result longer execut time larger checkpoint goal test assess perform checkpoint user longerrun applic may abl project expect run time applic presenc failur employ variou checkpoint variant raw data experi appendix paper graph section deriv directli raw data case test execut triplic number time test execut plu standard deviat execut time display tabl appendix tabl graph display averag data concentr two perform measur latenc overhead latenc time checkpoint initi may use recoveri overhead defin previous overhead direct measur perform penalti induc applic due checkpoint impact latenc subtl discuss detail section checkpoint disk figur plot checkpoint latenc overhead checkpoint disk the diskfork test plot function applic perprocessor checkpoint size display leftmost graph latenc diskfork test directli proport checkpoint size achiev bandwidth mbytessec bandwidth calcul perprocessor checkpoint size time number processor divid checkpoint latenc use inform checkpoint latenc pcg test project roughli second rightmost graph display overhead function checkpoint size graph appear roughli linear note overhead checkpoint simpl function checkpoint size bulk checkpoint size mbyte processor latenc per checkpoint sec mat pcg project checkpoint size mbyte processor per checkpoint sec mat figur checkpoint latenc overhead checkpoint disk diskfork checkpoint size mbyte processorlat per checkpoint sec checkpoint size mbyte processoroverhead per checkpoint sec figur checkpoint latenc overhead simp fork work perform checkpoint involv dma processor memori network interfac card cpu affect significantli one follow occur ffl dma transact need initi repeat ffl copyonwrit page fault occur applic ffl content memori bu also effect cach result checkpoint therefor although checkpoint size rough measur stick comput overhead diskfork checkpoint whole stori shown research copyonwrit optim excel job reduc overhead test overhead percent checkpoint latenc diskless checkpoint simp fork figur plot checkpoint latenc overhead simp fork test plot function checkpoint size diskfork case simp fork latenc directli proport checkpoint size except simp test pcg applic here combin size applic checkpoint exce size physic memori result page swap back store degrad perform checkpoint fork test checkpoint requir addit mbyte memori sinc unmodifi page memori share applic checkpoint therefor checkpoint latenc follow linear pattern applic except simp test pcg applic bandwidth checkpoint simp fork roughli mbytessec factor faster diskfork bandwidth overhead simp test ident latenc sinc applic halt checkpoint fork test overhead reduc in mat in pcg percent although improv degre improv diskfork test reason cpu involv diskless checkpoint diskbas checkpoint diskless checkpoint pariti processor checkpoint must calcul take cpu plu memori away applic time diskbas checkpoint make use cpu diskless checkpoint longer latenc checkpoint caus copyonwrit page fault occur rest test diskless checkpoint result display figur top row graph show checkpoint latenc test applic middl row show checkpoint overhead bottom row show averag checkpoint size bit misnom case inmemori pariti processor checkpoint size howev increment checkpoint compress fewer byte sent per processor checkpoint size graph and checkpoint size column appendix display averag number byte processor send checkpoint salient featur figur follow first increment checkpoint significantli reduc averag checkpoint size mat pcg applic three applic checkpoint size simp inc roughli same mat pcg applic signific reduct checkpoint latenc overhead result increment checkpoint case mixtur increment fork checkpoint result lowest overhead diskless checkpoint test increment checkpoint fail decreas size checkpoint nbodi cell ap plicat overhead checkpoint greater simpl checkpoint applic incfork test yield highest checkpoint latenc result diffbas compress interest three applic nbodi pstswm cell checkpoint latenc sec mat incfork csimp cfork cinc cincforkcheckpoint overhead sec mat checkpoint size mat figur diskless checkpoint latenc overhead size per applic increment checkpoint fail program page updat everi iter howev diff base compress succe reduc checkpoint size page either spars modifi nbodi pstswm updat valu cell three applic cfork test yield lowest checkpoint overhead note sinc compress add extra demand cpu reduct overhead drastic increment checkpoint also interest note lowest overhead achiev cfork rather cinc cincfork test almost page modifi checkpoint therefor increment checkpoint mere add overhead process page fault two test mat pcg diffbas compress bring checkpoint size fork simp test roughli size increment checkpoint howev improv upon increment applic recoveri time sec pstswm cell pcg tabl recoveri time simp test checkpoint term size overhead modifi page show littl compress recoveri time tabl show time take system recov singl failur continu execut recent checkpoint simp test here processor failur simul termin one applic processor pvm written processor recogn failur modif take advantag autom process recoveri test checkpoint processor take place fail applic processor recoveri time roughli equal checkpoint latenc simp applic note diskfork test recoveri time equal sinc entir diskless checkpoint fail processor must calcul diskfork test recoveri time equal checkpoint latenc thu like latenc extrem larg discuss diskless vs diskbas checkpoint two basic result may draw test concern diskless vs diskbas checkpoint ffl checkpoint latenc recoveri time diskless checkpoint vastli lower diskbas checkpoint state section latenc and recoveri time diskbas checkpoint factor slower diskless checkpoint result poor perform sun nf combin fact processor use disk ffl overhead diskless checkpoint compar diskbas checkpoint figur plot overhead diskbas checkpoint overhead best diskless variant applic checkpoint overhead sec figur checkpoint overhead diskbas checkpoint compar best diskless variant case nbodi pstswm diskless checkpoint outperform diskbas other diskbas outperform diskless question mark plot pcg unabl complet diskbas checkpoint lifetim applic two reason diskless checkpoint may view prefer diskbas checkpoint first lower expect run time applic presenc failur second less effect comput environ special concern environ share consid turn expect run time suppos failur rate govern poisson process vaidya deriv equat assess perform applic presenc checkpoint rollback recoveri equat take input averag overhead latenc recoveri time per checkpoint plu rate failur defin follow where rate failur mtbf optim checkpoint interv averag overhead per checkpoint averag latenc per checkpoint recoveri time checkpoint run time applic absenc checkpoint recoveri failur ie base test overhead ratio measur perform penalti due checkpoint recoveri failur expect run time optim checkpoint interv presenc failur checkpoint recoveri optim expect run time applic presenc failur checkpoint recoveri expect run time applic presenc failur checkpoint recoveri ie applic restart scratch follow failur equat repair time assum zero approxim case spare processor readi continu comput immedi follow failur repair time signific eq becom equat may use compar checkpoint algorithm follow first algorithm opt may calcul use eq next gamma r may determin eq desir expect run time applic t ckp algorithm may determin eq checkpoint algorithm lowest valu r one smallest expect run time thu r suffic metric compar checkpoint algorithm ckp greater nockp applic cannot benefit checkpoint occur applic run time t base significantli greater opt howev base grow nockp increas rapidli ckp point checkpoint improv program expect run time presenc failur tabl use data section deriv valu opt gamma r ckp nockp test present figur calcul follow manner studi host reliabl internet long et determin averag mtbf day assum independ processor failur mean mtbf collect processor day mtbf collect processor day give valu gamma failur per second gamma failur per second processor use former valu failur rate diskbas checkpoint checkpoint latter valu diskless checkpoint tabl show applic diskless checkpoint perform better diskbas checkpoint seen lower expect run time t ckp lower overhead ratio r therefor even though two similar checkpoint overhead extrem larg latenc recoveri time diskbas checkpoint make unattract comparison diskless checkpoint anoth signific result tabl two applic nbodi mat expect run time presenc failur minim diskless checkpoint three applic checkpoint applic test tbase topt gamma r tckp tnockp sec sec sec sec sec tabl calcul valu int gamma r ckp nockp give smallest expect run time checkpoint improv perform somewhat surpris given rel small execut time experi respect mtbf case diskbas checkpoint give smaller expect run time execut time applic grow checkpoint becom much attract exampl suppos user desir simul hour pstswm instead program take roughli second day execut would alter size checkpoint therefor may use overhead latenc recoveri time present section lead expect execut time day diskless checkpoint day diskbas checkpoint day checkpoint effect share resourc larg checkpoint latenc detriment way exampl diskbas checkpoint entir latenc period spent write checkpoint data stabl storag program user share stabl storag larg checkpoint latenc undesir perform stabl storag seen other degrad long period time effect diskfork checkpoint perform stabl storag assess checkpoint store central disk processor involv applic time bandwidth disk write test perform stabl storag degrad percent signific mean extrem long checkpoint latenc measur test potenti degrad perform system sever manner long time diskless checkpoint hand exhibit much smaller checkpoint latenc calcul checkpoint encod involv network cpu impact share resourc in case network far less recommend given result experi make follow recommend checkpoint variant test paper three stand use diskfork cfork incfork system similar perform our use certain case ffl checkpoint small likelihood wholesal system failur high diskfork checkpoint employ ffl program modifi byte per page checkpoint machin provid access virtual memori facil cfork diskless checkpoint employ ffl program modifi signific number page checkpoint incfork diskless checkpoint employ although test applic may time fork simp use checkpoint method page modifi dens manner checkpoint fork lowest overhead enough memori store two checkpoint simp lower overhead otherwis none applic would benefit increment checkpoint disk howev multipl checkpoint taken program modifi fraction page checkpoint increment fork checkpoint outperform diskfork final interpret result import note speed stabl storag experi quit slow faster network faster file system file system multipl disk improv perform diskbas checkpoint rel diskless checkpoint hand system processor degrad perform diskbas checkpoint rel diskless checkpoint possibl use equat section extrapol result experi system differ perform paramet relat work much research perform checkpoint rollback recoveri import algorithm perform optim diskbas checkpoint parallel distribut system present research directli relat diskless checkpoint cite below first paper diskless checkpoint present plank li paper may view complet origin paper silva et al implement checkpoint mirror transput network perform experi determin outperform diskbas checkpoint chiueh deng implement checkpoint mirror raid level checkpoint massiv parallel processor simd machin found mirror improv perform factor implement involv modifi applic perform checkpoint rather simpli relink checkpoint librari scale lam implement distribut program system built special primit sharedmemori semant use redund built system plu checkpoint mirror necessari toler singl processor failur low overhead similar manner costa et al took advantag natur redund distribut share memori system make resili singl processor failur system export sharedmemori interfac programm emb faulttoler implement relianc stabl storag plank et al embed diskless checkpoint with raid level encod sever matrix oper scalapack distribut linear algebra packag thu make resili singl processor failur low overhead kim et al extend work employ onedimension pariti encod lower overhead increas failur coverag diskless checkpoint idea extend diskbas checkpoint system dispar perform local remot disk storag environ diskless checkpoint may extend inmemori checkpoint store local disk which fast surviv processor failur checkpoint encod store remot disk which slow avail follow failur perform mirror raid level reedsolomon code assess compar favor standard checkpoint remot disk impact checkpoint remot disk network also assess final vaidya make case twolevel recoveri scheme fast checkpoint method toler singl processor failur combin slower method toler wholesal system failur exampl checkpoint mirror employ fast method diskfork checkpoint employ slow method analysi appli method present paper well diskless checkpoint techniqu processor redund memori redund failur coverag trade checkpoint system oper absenc stabl storag process perform checkpoint well impact share resourc improv paper describ basic diskless checkpoint plu sever perform optim implement test five longrun applic program network workstat compar standard diskbas checkpoint implement diskless checkpoint algorithm show fold improv checkpoint latenc combin compar checkpoint overhead result lower expect run time presenc singl processor failur sever checkpoint system includ variant diskless checkpoint improv perform checkpoint design checkpoint system consid variant diskless checkpoint present paper optim perform minim impact checkpoint share resourc r virtual memori primit user program applic level fault toler heterogen network workstat evenodd optim scheme toler doubl disk failur raid architectur mist pvm transpar migrat checkpoint effici checkpoint mechan massiv parallel machin lightweight log lazi releas consist distribut share memori survey rollbackrecoveri protocol messagepass system perform consist checkpoint manetho transpar rollbackrecoveri low overhead system program debug via revers execut redund disk array reliabl solut shallow water test set use spectral transform method fault toler matrix oper network workstat use multipl checkpoint job process recoveri unixbas oper system introduct parallel comput checkpoint mechan keyko lowlat concurr checkpoint parallel program longitudin survey internet host reliabl improv perform coordin checkpoint network workstat use raid techniqu tutori reedsolomon code faulttoler raidlik system libckpt transpar checkpoint unix fault toler matrix oper network workstat use diskless checkpoint faster checkpoint n compress differ algorithm fast increment check point transpar fault toler parallel applic network workstat checkpoint spmd applic transput network consist checkpoint pvm applic condor distribut process system case twolevel distribut recoveri scheme impact checkpoint latenc overhead ratio checkpoint scheme th intern symposium faulttoler comput demon memori process histori tr ctr sangho yi junyoung heo yookun cho jiman hong adapt pagelevel increment checkpoint base expect recoveri time proceed acm symposium appli comput april dijon franc kai hwang hai jin edward chow choli wang zhiwei xu design ssi cluster hierarch checkpoint singl io space ieee concurr v n p januari junyoung heo sangho yi yookun cho jiman hong sung y shin spaceeffici pagelevel increment checkpoint proceed acm symposium appli comput march santa fe new mexico xiaojuan ren rudolf eigenmann saurabh bagchi failureawar checkpoint finegrain cycl share system proceed th intern symposium high perform distribut comput june monterey california usa saurabh agarw rahul garg meeta s gupta jose e moreira adapt increment checkpoint massiv parallel system proceed th annual intern confer supercomput june juli malo franc raphael y de camargo renato cerqueira fabio kon strategi storag checkpoint data use nonded repositori grid system proceed rd intern workshop middlewar grid comput p novemb decemb grenobl franc ling jie mi xiaola lin variat calculu approach optim checkpoint placement ieee transact comput v n p juli adnan agbaria hagit attiya roy friedman roman vitenberg quantifi rollback propag distribut checkpoint journal parallel distribut comput v n p march daniel a reed charngda lu celso l mend reliabl challeng larg system futur gener comput system v n p februari zizhong chen graham e fagg edgar gabriel julien langou thara angskun georg bosilca jack dongarra fault toler high perform comput code approach proceed tenth acm sigplan symposium principl practic parallel program june chicago il usa milo prvulov zheng zhang josep torrella reviv costeffect architectur support rollback recoveri sharedmemori multiprocessor acm sigarch comput architectur new v n may daniel j sorin milo m k martin mark d hill david a wood safetynet improv avail share memori multiprocessor global checkpointrecoveri acm sigarch comput architectur new v n may feng qin joseph tucek jagadeesan sundaresan yuanyuan zhou rx treat bug allergiesa safe method surviv softwar failur acm sigop oper system review v n decemb sudarshan m srinivasan srikanth kandula christoph r andrew yuanyuan zhou flashback lightweight extens rollback determinist replay softwar debug proceed usenix annual technic confer usenix annual technic confer p june juli boston