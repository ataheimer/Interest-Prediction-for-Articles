t recogn design decis program a author present character design decis base analysi program construct character underli framework document manipul design inform facilit mainten reus activ identifi describ follow categori design decis composit decomposit encapsul interleav gener special represent data procedur function relat author discuss recogn repres design decis b express solut problem concern target machin characterist intrud middl ground specif code nebul webster survey varieti notat graphic represent use design process whole describ repeatedli take descript intend behavior whether specif intermedi represent code refin it refin reflect explicit design decis limit solut class implement within univers possibl design involv make choic among altern often howev altern consid rational final choic lost one reason design inform lost design represent current use express enough adequ describ cumul result set decis particularli regard structur compon interact attempt repres increment chang come individu design decis also fail describ process decis reach includ relev problem requir rel merit altern choic well known tendenc system structur deterior time acceler origin structur intent design retain code design decis made isol often solut idea best express sever interrel decis unless interdepend explicitli document unwari mainten programm fail notic implic propos chang design idea express via interrel decis call deloc inform balzer deloc plan soloway design decis rational captur initi program develop suitabl notat mechan exist describ interdepend sever aspect softwar engin would profit first initi develop would benefit increas disciplin facilit commun provid notat opportun softwar reus would multipli avail design inform could reus transform meet new requir final softwar mainten would vastli improv explicit recognit depend avail rational studi variou area comput scienc reveal sever categori design decis abstract mechan program languag provid evid need express design idea code semant relationship data base theori support model inform structur varieti field final examin tool use revers engin softwar mainten indic decis found use understand exist program composit decomposit probabl common design decis made develop program split piec done exampl break comput step defin data structur term field introduc construct later decompos support abstract allow decis defer detail hidden complex manag use appropri name stand collect lower level detail topdown approach taken design program decompos piec bottomup approach use program compos avail subcompon regardless approach result relationship establish abstract element sever detail compon data control structur program languag featur support decis exam ple loop mechan break complex oper seri simpler step likewis array record structur way collect relat data element singl item cours build express variabl constant oper exampl composit build system librari compon encapsul interleav structur program involv draw boundari around relat construct welldefin boundari interfac serv limit access implement detail provid control access function client term encapsul abstract data type inform hide relat concept encapsul decis gather select part program compon various call packag cluster modul compon behavior restrict protocol interfac part system interact compon limit way parna introduc term inform hide describ approach structur system encapsul use aid program comprehens mainten decis encapsul implement program compon reflect belief encapsul construct thought whole behavior describ specif much smaller total amount code contain within compon compon hide detail major design decis decis alter later mainten sideeffect chang limit altern encapsul interleav sometim use usual reason effici intertwin two comput exampl often use comput maximum element vector well posit vector could comput separ natur save effort singl loop interleav way make result code harder understand modifi number use interleav transform collect feather gener special one power featur program languag abil describ whole class comput use subprogram parameter argument although procedur function usual thought abstract express abil pass argument realli exampl gener decis concern aspect comput parameter one architectur decis made softwar design gener design decis program specif satisfi relax constraint exampl program might requir comput logarithm limit set number requir could satisfi provid access gener purpos librari function comput logarithm librari function would capabl comput logarithm set requir number well mani other decis use librari function gener decis abstract numer comput may also parameter ada program languag provid gener facil allow data type function parameter packag subprogram mani languag provid macro capabl parameter textual substitut variant record pascal ada type union c exampl use singl gener construct express set special case depend valu discrimin field anoth exampl gener concern interpret virtual machin often use design introduc layer function control welldefin protocol protocol thought program languag virtual machin implement layer decis introduc protocol reflect desir provid gener set dispar procedur would offer special design decis relat gener special involv replac program specif restrict one often algorithm optim base restrict problem domain facil program languag although optim dramat improv perform cost lengthen program text make harder understand anoth manifest seen earli stage design process often specif express term ideal object infinit set real number actual program space precis limit thu program necessarili special case gener comput entiti objectori program languag smalltalk c design provid collect exist class definit class provid implement object belong it knowledg develop quickli implement new class special exist class new class said inherit common function gener predecessor gener special decis longterm implic program develop easier reus adapt gener compon restrict one gener cost howev gener compon may less effici special tune version moreov often effort requir test compon intend wide applic specif counterpart represent represent power comprehens design decis represent use one abstract concept better abl express problem solut anoth may aris target abstract abli captur sens solut effici implement target machin exampl programm may choos link list implement pushdown stack bit vector use repres finit set represent decis use one construct place anoth function equival one represent must care distinguish special possibl infinit pushdown stack implement fix length array two decis made first decis purpos program bound length stack serv special decis bound stack readili implement fix length array index variabl represent choic distinct special represent kept mind represent seen flexibl symmetr decis one context may appropri repres one construct anoth differ situat invers represent might use exampl oper vector usual implement loop presenc vector process hardwar howev compil system may invert represent reconstruct vector oper anoth exampl represent come earli stage design formal program specif often couch term univers existenti quantif eg all employe make per year program languag typic use loop recurs repres specif data procedur variabl necessari order write program valu alway explicitli recomput program variabl cost term amount effort requir comprehend modifi program hand serv improv effici program and judici choic name serv clarifi intent programm must awar invari relat program variabl insert statement program exampl suppos mainten programm investig loop read record file keep count number record read programm ask make loop disregard invalid record counter use satisfi design depend loop part program programm must modifi semant counter programm must choos among three altern count total number record count number valid record both make correct choic programm must determin counter use later program case programm replac refer variabl comput produc recent valu result statement rearrang order reconstruct highlevel oper appli file done thi programm confront semant problem rais distinct valid invalid record semant problem solv compon deloc assign statement reintroduc introduct variabl constrain sequenc comput may made increas possibl error modif made mainten accid violat implicit order constraint variabl comput wrong order altern introduc variabl recomput valu need sometim use make program readabl reader search program declar assign variabl directli use local inform optim compil often reduc cost associ recomput particularli constant express involv decis repeat comput save result comput variabl reflect deeper concept dualiti data procedur implement finit state machin exampl dataprocedur decis appar dataori approach possibl machin next state record two dimension array often call nextstat tabl altern nextstat inform comput directli code state although may seem unusu exactli techniqu use speed lexic analyz token class first repres regular express state state machin state compil directli caseswitch statement target program languag reason effici procedur version cost index array avoid function relat logic program languag allow program express relat set data exampl sort describ relationship two set contain member one order prolog might describ follow rule given input sort version produc if instead order version provid unord permut produc s decis variabl input output left user runtim instead develop design time formal function specif often nondeterminist regard prefer di rection design may use function instead relat express it may reflect implement bia rather requir cours tradit program languag support nondeterminist relationship even prolog may imposs given problem write set rule work equal well direct thu design usual respons select prefer direct causal is variabl input output altern approach provid separ function support direct exampl student grade system may use provid function that given numer grade indic percentag student make grade higher may also valu provid invers function that given percentag return numer grade would separ proport student softwar mainten reus activ requir detect design decis exist code part revers engin revers engin process construct higher level descript program lower level one typic mean construct represent design program sourc code process bottomup increment low level construct detect replac highlevel counterpart process repeat gradual overal architectur program emerg program languagedepend detail program taken paper basili mill use flow analysi techniqu program prove guid comprehens process document result use realist exampl product softwar design decis recogn program shown figur c absxm le tol go abs lt tol go p ge abseq go figur zeroin find root function f success shrink interv must oc cur use one sever approach bisect linear interpol invers quadrat interpol interleav approach complic program interleav program fragment casual examin program indic contain two write statement provid diagnost inform program run fact statement display progress program make narrow interv contain root execut write statement control variabl ip ip one program input paramet examin program indic alter program use purpos lead conclus overal program decompos two piec root finder debug printout make analysi rest program simpler diagnost portion remov text consid involv remov statement number modifi line remov refer ip line remov analyz fact job produc debug printout decompos two task first produc header line second print descript interv upon everi iter loop represent structur control flow fortran basili mill begin analysi examin control flow program fact version fortran use program limit set control structur forc programm use goto statement simul full rang structur program construct zeroin exampl line implement repeatuntil loop line serv ifthen statement line ifthenels line result represent decis origin develop detect straightforward analysi typic perform flow analysi phase compil anoth techniqu express control flow illustr program sever case line elabor branch condit broken two consecut statement branch place pair could easili replac singl multipl condit thu simplifi control flow structur program expens complic condit test interleav code share analysi control flow program indic line compris els part ifthenels statement moreov line branch into line two assign statement realli share two part program is two execut stream interleav share common code although make program somewhat shorter assur part updat either is make understand program structur difficult order express control flow cleanli necessari construct structur version requir share code duplic share segment version common statement elabor subroutin could introduc call site is simpl matter duplic two line produc two properli form condit construct data interleav reus variabl name unfortun common practic program use variabl name two unrel purpos natur lead confus tri understand program thought kind interleav where instead two separ segment code intertwin one locat program two aspect program state share use identifi occur twice zeroin identifi tol in line remaind program q on line right hand side line remaind program includ left hand side line instanc practic detect data flow analysi gener interpol scheme zeroin exhibit situat two section code use altern approach comput valu set variabl line respons comput valu variabl p q determin approach use base test made line exampl special comput test replac conceptu gener express respons comput p q base current valu variabl a b c fa fb fc xm benefit local use variabl r insid new express realli sever design issu involv here first code segment result decomposit problem piec express seri assign statement then realiz segment special gener one allow detail individu case hidden away thi turn make code shorter easier understand variabl introduct common program practic save result comput order avoid recomput valu later time comput involv practic result signific save run time modest cost zeroin practic use extens particular concert effort save result call usersuppli function f variabl fa fb fc f may arbitrarili complex practic may import determin ultim effici zeroin examin program reveal fa fb fc alway contain result appli f point a b c respect point view understand algorithm three addit variabl provid signific abstract contrari requir nontrivi effort understand manipul replac definit make result program easier understand readabl goal two factor weigh decid whether write program use variabl name replac valu one hand new variabl place burden person tri understand program variabl must read purpos understood confirm posit side variabl serv valuabl abbrevi comput replac easier understand variabl care chosen mnemon name complex express repres case zeroin variabl fa fb fc provid littl way abstract p q hand abbrevi signific comput albeit without benefit mnemon name xm lie somewher middl gener interv comput recognit intermedi decis clarifi structur program sort observ made line function assign valu variabl e base valu variabl a b c d e f tol xm fact list variabl long indic segment highli interleav rest program nevertheless valu indic explicit effect line code set two variabl also note that section sever instanc special line select base test line likewis line line special case select basi test line program architectur analysi describ perform possibl appreci overal structur program base test made line program seen use variabl b hold approxim root function b modifi line either xm d section line line act adjust made special situat anoth conclus appar get valu b c get valu a thu a c b serv success better approxim root fact except special circumst c ident valu likewis e normal valu d result architectur program shown figur initi loop condit adjust close enough final answer comput new valu b condit adjust figur suffici simpli recogn design decis code recogn decis must organ way effect use mainten programm reus engin organ chosen serv represent design inform numer method design softwar numer represent intermedi result typic sever use design program architectur stage other lowlevel design still other may use mainten stage origin develop given way separ mainten staff may consequ difficult recreat reus origin represent usabl represent design inform must easi construct develop easi reconstruct revers engin construct must facilit queri report gener order support softwar mainten activ must provid mechan attach avail document also must support autom particular represent must formal enough compon automat manipul exampl desir abl determin previous develop partial descript softwar compon reusabl new situat represent design inform must allow type design inform attach includ highlevel specif architectur overview detail interfac result sourc code also desir represent support requir trace inform annot version inform sever approach organ design inform propos biggerstaff concern relat code fragment inform problem domain softwar reus facilit new problem requir easili match descript exist softwar build desir system explor approach blackburn also concern reus propos network design inform fragment connect one two relationship either isdecompos into decomposit isa special coleman gallimor report fpd framework program develop arc network model correspond refin step taken design refin engend proof oblig guarante correct step taken conclus softwar mainten reus requir practition deep understand softwar manipul understand facilit presenc design document effect document includ descript structur softwar togeth detail decis lead structur design decis occur abstract model theori applic domain confront realiti limit machin imperfect program languag design decis recon struct greater hope abl maintain reus mountain undocu softwar confront us r map design represent terrain survey a year perspect automat program design document compens deloc plan on criteria use decompos system modul a survey classif program transform approach techniqu understand document program design recoveri mainten reus toward theori softwar reus base formal method a framework program develop tr survey classif program transform approach techniqu design document compens deloc plan design recoveri mainten reus comput method mathemat comput ctr jorg l diazherrera import static structur softwar construct ieee softwar v n p may erich buss john henshaw softwar revers engin experi proceed confer centr advanc studi collabor research octob toronto ontario canada erich buss john henshaw experi program understand proceed confer centr advanc studi collabor research novemb toronto ontario canada kamalakar karlapalem qing li chungdak shum hodfa architectur framework homogen heterogen legaci databas acm sigmod record v n p march stephen b ornburn richard j leblanc jr build modifi use compon gener proceed th intern confer softwar engin p may baltimor maryland unit state joel troster john henshaw erich buss filter qualiti proceed confer centr advanc studi collabor research softwar engin octob toronto ontario canada julio cesar sampaio prado leit work result softwar reengin acm sigsoft softwar engin note v n p march nenad marovac guidelin embed softwar document acm sigsoft softwar engin note v n p april spencer rugab catalog design abstract proceed intern workshop role abstract softwar engin may shanghai china forrest shull filippo lanubil victor r basili investig read techniqu objectori framework learn ieee transact softwar engin v n p novemb carmen zannier frank maurer qualit empir evalu design decis acm sigsoft softwar engin note v n juli carmen zannier mike chiasson frank maurer model design decis make base empir result interview softwar design inform softwar technolog v n p june spencer rugab use domain knowledg program understand annal softwar engin v n p hausi a mller jen h jahnk denni b smith margaretann storey scott r tilley kenni wong revers engin roadmap proceed confer futur softwar engin p june limerick ireland m g j van den brand p klint c verhoef revers engin system renovationan annot bibliographi acm sigsoft softwar engin note v n p jan