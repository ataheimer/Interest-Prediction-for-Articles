t machineadapt dynam binari translat a dynam binari translat process translat optim execut code one machin anoth runtim program execut target machin dynam translat techniqu normal limit two particular machin competitor machin hardwar manufactur machin research provid gener framework dynam translat provid framework base specif machin reus adapt new hardwar architectur way develop techniqu isol design issu machin descript reus mani compon analys describ dynam translat framework provid initi result obtain use system b introduct binari translat migrat techniqu allow softwar run machin achiev near nativ code perform binari translat grew emul techniqu late order provid migrat path legaci cisc machin newer risc machin techniqu develop hardwar manufactur interest market new risc platform mid binari translat techniqu use translat competitor applic desir hardwar platform near futur expect see techniqu use optim program within famili comput exampl optim sparc architectur binari ultrasparc architectur binari uqbt univers queensland binari translat develop techniqu specif languag complet framework perform static translat code static binari translat code translat offlin program run creat new program use machin instruct target machin howev static translat limit due natur von neumann machin code data repres way alway possibl discov code program static exampl target indirect transfer control jump regist sometim hard analys static therefor fallback mechan commonli use static translat program form interpret interpret process untransl code runtim return translat code suitabl path found limit static binari translat overcom dynam translat expens perform dynam binari translat code get translat on fli runtim user perceiv ordinari execut program target machin opposs emul dynam translat gener nativ code perform ondemand optim code hot spot code optim runtim increas perform execut code further optim possibl static possibl dynam paper describ design machineadapt dynam binari translat base static uqbt framework uqdbt tool said machineadapt configur handl differ sourc andor target machin way machineadapt dynam binari translat capabl configur differ sourc target machin specif properti machin instruct set word translat bound two particular machin as per exist translat capabl support varieti sourc target machin uqdbt differ dynam translat provid clean separ concern allow machinedepend inform specifi well perform machineindepend analys support machineadapt way uqdbt support varieti cisc risc machin low cost support new machin specif machin need written uqdbt framework reus new machinespecif modul may need ad particular featur machin support uqdbt framework featur gener across differ architectur paper structur follow way section discuss static dynam framework binari translat section outlin research problem machin adapt binari translat address uqdbt section provid case studi translat framework exampl program section show preliminari result use framework section discuss effect chang granular translat conclus given section work report herein work progress relat work attempt improv exist emul techniqu compani late began use binari translat achiev nativ code perform perhap well known binari translat digit vest mx translat vax mip machin instruct bit alpha instruct translat other like appl mae digit freeport express runtim environ reproduc old machin oper environ runtim environ offer fallback interpret process old machin code discov translat time exampl due indirect transfer control recent year seen transit hybrid translat prove extrem success process mix translat emul runtim profil brought lead perform hybrid translat scene digit fx executor ardi sun wabi fx emul program initi static translat background use inform gather profil embra machin simul built use dynam translat techniqu develop shade fast instructionset simul execut profil le investig outoford execut techniqu dynam binari translat though result base interpreterbas implement mani optim techniqu use dynam translat deriv dynam compil self tcc runtim optim compil provid x x perform static compil program techniqu also use justintim jit compil java jit sun other dynam gener nativ machin code runtim date none current binari translat gener code one sourc target machin pair machinedepend aspect translat hard code translat make hard reus translat code anoth set machin research differ previou research machinedepend issu separ machineindepend translat concern henc provid way specifi differ machin sourc target machin support specif reusabl compon implement machineindepend analys paper show process feasibl therefor enhanc reus code creation dynam binari translat howev machineadapt translat come cost perform discuss section binari translat framework binari translat process lowlevel reengin is decod higher level abstract follow encod lower level abstract figur give block view uqbt static translat framework reengin process divid initi revers engin phase lefthand side forward engin phase righthand side revers engin step recov semant mean machin instruct threestep process decod binari file decod machin instruct code segment map instruct semant mean form regist transfer list rtl highlevel analysi process lift level represent code machineindepend form perform binari translat specif optim code bring level abstract rtl target machin follow forward engin process optim code encod instruct machin code store code data program binari file forward engin process standard optim compil code gener technolog rtl simpl lowlevel registertransf represent effect machin instruct singl instruct correspond registertransf list uqbt sequenti composit effect effect assign express locat side effect explicit top level express evalu without side effect use pure function rtl oper rtl languag collect locat oper machin m sublanguag mrtl defin rtl repres instruct machin singl rtl previous mention problem static binari translat inabl find code belong program limit optim static one without take advantag dynam optim techniqu one hardest problem solv decod em tic apper p tim izer truc io n truc io n enc oder anali bin ari f ile bin ari f ile enc oder em b ly tr uc tio n ar tr uc tio n tr eam ari tr uc tio n tr eam em b ly tr uc tio n f rw ar e ng ne e r ng revers e ng ne e r ng ari f ile b ar f ile figur static binari translat framework machin instruct separ code data binarymanipul tool face problem unfortun problem solvabl gener code data repres way von neumann machin make static translat incomplet henc runtim support environ need form interpret exampl dynam binari translat framework dynam binari translat actual translat process take place as need basi wherea static binari translat attempt translat entir program onc figur illustr typic framework dynam translat use basic block unit translat ie granular lefthand side similar static translat process code done differ level granular typic one basic block time righthand side littl differ static translat first time basic block translat assembl code target machin emit encod binari form binari form run directli target machin memori well kept cach map sourc target address entir program basic block store map basic block execut sever time number execut reach threshold optim code perform dynam gener better code hot spot differ level optim possibl depend number time code execut optim code replac cach version basic block code process basic block driven switch manag switch manag determin whether new translat need perform determin whether entri correspond sourc machin address map entri exist correspond target machin address retriev translat fetch cach match found switch manag direct decod anoth basic block requir sourc address machineadapt dynam binari translat framework figur extend figur enabl dynam translat easili adapt differ sourc target machin effort achiev clean separ concern machinedepend inform machineindepend analys use specif develop abl concentr write descript properti machin instead rewrit tool itself use specif support machinedepend inform also gener part system automat provid skeleton user work on seen figur decod binari file sourc ba ic b loc k sem tic mapper imp le op tim izat ba ic b loc k in tr uc tion dec oder ba ic b loc k in tr uc tion enc oder ms tr an lato r ba ic b loc k binaryf ile dec oder op tim ize inari in truc tion tream ms b inari in truc tion tream ms b inari file ms ran lation cac add r es mapp ing r ms assemb ly in truc tion semb ly enc oder ly in truc tion r sw ch manag figur machineadapt dynam binari translat framework ba ic b lo ck sem tic mapper impl izat ba ic b lo ck in truc tion dec oder ba ic b lo ck in truc tion encod ba ic b lo ck an lato ba ic b lo ck binari file dec oder emb ly truc tio ns ef fic ient ass em bli truc tio ns ari truc tio ns tream ms binari truc tio ns tream ms assemb ly truc tio ns ms binari file msrtl an lation cach add r es map manag figur dynam binari translat framework machin rtl msrtl requir descript binari file format program syntax semant machin instruct particular processor experi three differ languag reus sled languag develop bff ssl languag bff binaryfil format languag support descript binaryfil structur current format support do exe solari elf certain extent window pe srl simpl resourc loader support automat gener code decod file specifi use bff languag sled specif languag encod decod support descript syntax machin instruct ie binari assembl mnemon represent sled support new jersey machinecod toolkit toolkit provid partial support automat gener instruct decod particular sled specif current machin specifi form includ pentium sparc mip alpha ssl semant specif languag allow descript semant machin instruct ssl support srd srd semant mapper compon support pars ssl file store inform form dictionari instanti dynam output stage msrtl msrtl convert machineindepend rtl irtl analys remov machin depend concept sourc machin process identifi sourc machin control transfer map gener form irtl exampl follow sparc msrtl call instruct associ highlevel call instruct irtl form transfer control exist irtl jump return condit uncondit branch irtl support regist transfer stack push pop highlevel control transfer condit code function higherlevel instruct allow abstract underli machin irtl convert mtassembl instruct map function regist transfer instruct avail target machin assist ssl specif instruct encod process support sled specif languag map assembl instruct binari form code store translat cach later refer exampl figur show variou instruct transform translat pentium machin instruct sparc machin instruct reverseengin stage decod pentium binari code produc pentium assembl code lift pentiumrtl final abstract irtl replac machinedepend regist virtual regist forwardengin phase encod irtl sparc rtl sparc assembl instruct final sparc binari code specif requir dynam binari translat dynam translat cannot afford timeconsum analys lift level represent stage resembl highlevel languag per uqbt uqbt static analys recov procedur call signatur includ paramet return valu therebi allow gener code use nativ call paramet convent target machin analys use dynam translat high perform degrad would experienc translat altern costli analys remov properti underli sourc machin go halfway highlevel represent support inexpens analys recov basic form highlevel instruct such condit branch call without paramet emul rather abstract away from convent use hardwar oper system sourc machin ie without use nativ convent target machin step possibl specif featur underli hardwar exampl emul sparc architectur regist window mechan pentium machin specifi mechan work sparc machin emul pentium stack paramet pass convent howev emul sparc processor delay transfer control support higher level branch instruct clearli compromis perform impact translat code provid fast way translat code optim runtim becom hotspot program order support translat msrtl irtl ssl languag extend machin instruct level semant includ hardwar semant well exampl sparc architectur effect chang regist window regist current window access specifi pentium architectur properti stack movement specifi inform current use uqbt uqdbt uqbt reli costli analysi abstract higherlevel inform without depend lowlevel detail underli hardwar addl ebx eax add o o o figur pentium sparc exampl research problem unlik dynam binari translat written fix set sourc destin machin mind uqdbt design handl wide rang cisc risc machin architectur translat directli map sourc machinespecif idiom target machin translat bound work sourcetarget pair extend translat support differ machin extens rewrit code need direct idiom map machin differ goal uqdbt provid framework modifi extend eas support addit sourc target machin without need rewrit new translat scratch process find gener exist and futur machin nontrivi cannot fulli predict uqdbt use uqbt approach specifi properti machin instruct set wide avail today machin allow user extend specif languag support new featur futur machin reus rest translat framework uqbt use multiplatform oper system concentr fundament issu instruct translat uqdbt goal address follow type research problem dynam machineadapt binari translat best way support machinedepend machineindepend rtl translat main criteria translat effici henc expens analys option further translat need support underli specif languag order gener msrtl contain enough inform underli ms machin much state sourc machin need dynam translat effect specif properti machin best way autom transform i rtl mtassembl code code selector automat gener target machin specif possibl effici use specif contain inform oper system convent call paramet convent use os commun program exampl order use pentium stack paramet convent code translat sparc architectur binari which pass paramet regist analysi determin paramet need first perform implement uqdbt experi right level descript requir order support dynam translat base specif experi lowlevel highlevel descript underli machin unsuit view uqbt semant specif machin highlevel descript describ machin instruct semant specifi underli hardwar support control transfer instruct eg regist window delay instruct sparc architectur uqbt detail level inform need specif use call convent control transfer instruct further semant descript languag use describ lowlevel detail underli machin languag suitabl emul purpos contain much inform dynam translat first problem address specifi hardwar work relat control transfer instruct provid fast translat msassembl instruct informationrich msrtl the extend one avoid need recov inform runtim follow type inform describ sparc pentium processor effect sparc regist window mechan stack properti memori align paramet return locat sparc machin alloc new set work regist time save instruct call word effect provid infinit number regist program use effect sparc regist window captur extend ssl specifi regist access regist window chang save restor instruct henc provid differ set work regist provid accur simul target machin limit amount usabl regist effect stack pointer differ differ type machin pentium machin stack pointer chang indefinit within given procedur risc machin stack pointer normal constrain prealloc stack frame fix size includ enough space regist spill procedur specifi stack chang origin machin suggest way code gener gener stack manipul instruct target machin exampl simul stack push pop sparc machin memori align place constraint machin state particular point program be sparc frame pointer stack pointer need doubl word align thu code gener need enforc condit entri exit call differ machin call convent name paramet pass return valu store play crucial part code gener construct right setup call nativ librari function sparc gener pass paramet regist pentium push stack inform need sourc target machin identifi transform paramet return valu differ endian sourc target machin requir byte swap perform load store data byte swap expens process although pentium byte swap quit easili take sparc v instruct bit swap expens process avoid possibl particular run pentium binari sparc everi push pop instruct which appear quit often pentium program requir byte swap heurist use uqdbt avoid byte swap push pop stack second problem relat first one amount sourc machin state carri across depend effect translat first problem area easili specifi unspecifi carri across appar within machineindepend rtl uqdbt control transfer instruct contain tag indic process delay slot instruct in architectur support delay slot third problem current work progress goal automat construct code gener also determin best perform heurist select target machin instruct encount similar pattern pattern may never match may nearli imposs match exampl tri pattern match sparc save instruct pentiumrtl experi fourth problem suggest perform gain use nativ os convent uqdbt current simul call convent pentium program sparc machin ie paramet pass stack instead regist remov simul effect convert use nativ convent one need know much improv offer direct machin simul level convers occur worth analysi dynam binari translat environ case studi section show exampl small pentium program convert uqdbtp the ps postfix indic translat pentium sparc architectur run sparc machin program solari oper system main differ two test machin are sparc risc architectur wherea pentium cisc sparc bigendian pentium littleendian sparc pass paramet regist and sometim stack well pentium normal pass stack basic block translat address map figur disassembl hello world binari program compil pentium machin run solari first column sourc address seen pentium processor second third column actual pentium binari correspond assembl represent basic block xc save sp sp xcc add sp sp xd add i l xd st l xd mov sp l xdc subcc l l xe mov l sp xe mov fp l xe st l xf mov l fp xf mov sp l xf subcc l l xfc mov l sp x add l xf l xf x st l ld x mov sp l x sethi hixfffffc l x sp l sp x fp l fp x sethi hixef g x nop x mov l sp x mov l fp x add g x g x sethi hixbfc g x call g xc nop figur gener sparc assembl st bb figur b ec movl espebp e b fe ff ff call xfffffeb a eb jmp x c c leav d c ret figur hello world x disassembl push r b push rtmp r a jump xc figur bb program first bb instruct x x second bb instruct x xa third bb instruct xc xd figur show intermedi represent irtl bb note translat done increment ie bb decod separ runtim uqdbtp work sourc machin address space translat basic block time data text sourc pentium program map actual machin sourc address space even though actual run sparc machin exampl pentium program data text section locat x x map exactli address even though typic sparc program expect text data address x x uqdbtp also simul pentium machin environ sparc gener code ie push pop temporari paramet pentium machin preserv gener code uqdbtp tri gener code quickli possibl littl optim pentium stack simul figur sparc code gener first bb figur first four instruct simul pentium main prologu set stack store return address obtain valu i byte stack space reserv initi save sp sp space use sparc processor store paramet return structur local variabl regist spill henc actual simul pentium stack pointer esp start spx see figur pentium ebp map sparc regist fp push handl subtract size valu push sp store result spx pop remov spx increment sp appropri size function call stack align pentium actual paramet function call pass stack sparc paramet pass regist printf format string hello world address xf push instruct b see figur success call nativ sparc printf function address must store regist o instruct xc figur equival printf sparc xefb call function made instruct xc call librari function printf assum uqdbtp exist sourc well target machin assumpt restrict long map sourc librari function equival function target machin ie librari reproduc target machin translat rewrit produc map translat fx make assumpt sparc machin expect sp fp align doubl word bit boundari therefor call nativ librari function sp fp need byte align current valu restor function call return instruct x x end basic block control pass back uqdbtp switch manag indic next basic block address process g x case role switch manag decid whether start translat indic g fetch alreadi translat bb translat cach case where next bb start x address translat map henc translat start new address figur show gener sparc assembl next bb pentium program r e e r r e e r c k p figur sparc stack frame xff sethi hixc l xff st l l xff mov sp l xffc addcc l l xff mov l sp xff sethi hixb l xff add l xd l xbd xffc rd ccr l xff st l l xff sethi hix l xff add l x l x ld l l xff sethi hix l ld l l xffa xorcc l l l xffa st l l xffb rd ccr l xffb st l l xffc sethi hixbfc g xffc call g xffcc nop figur gener sparc assembl nd bb figur regist map condit code translat pentium regist map virtual regist ie memori locat access virtual regist sparc machin sethi add instruct use exampl instruct xff xff figur use access virtual regist repres x regist eax instruct sparc affect condit code flag unless explicitli indic instruct almost pentium instruct affect flag pentium instruct affect statu flag simul use equival condit code version instruct sparc machin instruct xffc xffa condit code read instruct xffc save virtual flag regist instruct xff instruct preserv current valu retriev later requir closer look exampl show gener code effici simpl optim forward substitut dead code elimin greatli reduc size gener code optim yield better code take longer gener trade code qualiti speed code gener backend uqdbtp fast despit poor qualiti gener code current implement ondemand optim hotspot program well perform regist alloc preliminari result uqdbt base uqbt framework such frontend reus uqbt chang granular decod procedur level basic block level frontend use extend ssl specif gener msrtl machin instruct encod routin backend automat gener sled specif use toolkit section show preliminari result obtain two dynam translat instanti uqdbt framework uqdbtp pentium sparc uqdbtss sparc sparc look type optim need introduc order improv perform frequent execut code give reader idea effort gone develop framework amount reus expect perform microbenchmark result obtain use pentium mmx machin ultrasparc ii mhz machin run solari oper system result report herein translat overhead current make use dynam optim regist cach within basic block clearli perform gener binari uqdbt without optim inferior direct nativ compil typic ratio ie sourc machin instruct target machin instruct expect typic emulatorinterpret without cach uqdbtp give figur close ratio exampl pentium instruct figur sparc instruct gener ratio similar emul speed gain uqdbt come reus alreadi translat bb translat cach piec code execut again present form uqdbt still earli develop henc provid preliminari result uqdbtp pentium sparc translat uqdbtss sparc sparc translat undoubtedli true littl practic use sparc sparc translat unless runtim optim significantli speed translat program inclus translat show effect machineadapt uqdbt further translat sparc binari irtl remov machin depend thu irtl sparc code gener uqdbtss unawar fact sourc machin sparc also true uqdbtp sinc littl analysi done decod instruct process concentr decod code gener request switch manag better reflect perform impact use ondemand techniqu prior introduc optim test program show tabl are siev print first prime number fibonacci mbanner print banner elf string time siev mainli contain regist regist manipul fibonacci lot recurs call mbanner lot stack oper access array data tabl show time translat execut program use uqdbtp uqdbtss compar nativ gcc compil program sourc program also compil column show preprocess time need actual translat take place note uqdbtp take longer start uqdbtss pentium larger instruct set henc larger ssl specif file take longer process also caus differ page align size pentium sparc result extra step taken ensur text data section load correctli sparc machin column show total time spent decod sourc instruct transform irtl gener final sparc code column show execut time gener sparc code without use regist cach ie everi regist access done virtual regist column show execut time gener sparc code regist cach yield percent perform gain column nativ compil gcc version program sparc compar column give rel perform translat figur suggest time slowdown run program use uqdbtp uqdbtss slow perform translat fibonacci program uqdbtss caus effect regist window mechan sparc carri forth irtl sinc irtl unawar fact sourc target machin same caus entir regist window system simul gener code given ondemand optim perform yet qualiti gener code compar optim level tradit compil tabl show effici translat rel size origin program column size program text area note byte necessarili repres instruct code necessarili reachabl execut runtim column show actual byte decod translat runtim number vari column sinc valid path runtim translat sometim retransl need jump middl bb made column show number byte code gener translat withoutwith regist cach regist cach done basic block level cach regist copi back memori locat end basic block compar column column give rel ratio byte gener versu byte decod figur suggest averag byte sourc machin translat around byte target sparc code last column ratio machin cycl byte sourc code give rough indic perform translat ultrasparc ii mhz translat requir machin cycl per byte input sourc time cycl use tradit compil optim futur work program spend time small section code hotspot worthwhil dynam binari translat spend time optim uqdbt current perform optim next revis uqdbt contain optim trigger counter counter insert basic block indic number time particular basic block execut runtim certain threshold reach indic program spend signific time piec code optim invok attempt produc effici code four level optim provid uqdbt progress certain threshold reach regist live analysi forward substitut constant propag improv qualiti gener code reduc number instruct execut regist alloc rigor process remov access virtual regist replac alloc hardwar regist target machin assist live inform rather cach regist basic block level code movement move join frequent execut bb closer togeth thu reduc transit cost call jump custom creat special version bb found fix rang runtim valu within bb eg repeat entri bb regist variabl contain valu time effort order give reader idea effort gone develop uqdbt effort reus system quantifi effort follow uqdbt effort person period year experi amount specif requir semant level differ machin effort perform person alreadi familiar uqbt work ssl past uqdbt current implement size line sourc code c line partiallygener code line sparc pentium test program pre process translat time execut time without reg cach execut time simpl reg cach nativ gcc compil test program pre process translat time execut time without reg cach execut time simpl reg cach nativ gcc compil fibonacci fibonacci mbanner mbanner test program origin program size sourc byte decod target byte gener wo reg cach target byte gener w reg cach cycl sourc byte test program origin program size sourc byte decod target byte gener wo reg cach target byte gener w reg cach cycl sourc byte fibonacci fibonacci mbanner mbanner tabl uqdbtss sparc sparc translat tabl uqdbtp pentium sparc translat second tabl uqdbtss sparc sparc translat second tabl uqdbtp pentium sparc translat specif file user uqdbt framework would abl reus sourc code would need write syntax semant specif file new machin or reus exist one figur final stage dynam optim implement yet nevertheless give indic amount reus code system discuss preliminari result uqdbt point tradeoff machineadapt return write less code support two particular machin perform penalti gener code seen stage binari translat writer would expect write specif new machin order thousand line code reus good part line code reap benefit reus time effici howev stage uqdbt gener code perform speed emul code therefor user see x perform degrad translat program introduct regist cach gener code brought factor expect introduct ondemand optim hotspot program improv perform gener code bring perform factor xx one main question dealt throughout experi area much specifi much support hand level detail specif make translat faster slower full detail machin specifi specif suitabl gener emul support machin howev provid mean elimin part emul process differ type specif need tri achiev semant specif use two intermedi languag rtl languag describ lowlevel machin specif aspect machin uqdbt find support specif perform simpl analys lift level represent irtl aim perform simpl transform code expens time gener enough suitabl intermedi represent irtl differ hrtl highlevel intermedi represent use static uqbt framework hrtl expens analys recov paramet procedur return valu henc allow code gener use nativ call convent target machin i rtl code gener make use specif stack exampl order pass paramet stack without ever determin locat paramet procedur call howev notion paramet need order interfac correctli nativ librari function pass paramet right locat also experi modul may better written hand without specifi complet semant featur machin uniqu exampl one could consid implement sparcspecif modul support regist window semant better regist alloc perform case present specifi regist window mechan gener code put regist virtual memori locat use regist cach memori locat mirror hardwar regist target machin improv somewhat perform program howev still larg overhead copi regist virtual locat call return reduc dead code elimin perhap hand written code would achiev better code anoth aspect take consider granular translat uqdbt granular unit process basic block bb time code gener link made switch manag exit bb flush cach regist virtual regist perform need keep data accur store consist across transit one bb anoth transit one bb next go via switch manag next bb translat yet use bb unit translat restrict effect regist alloc sinc bb rel small difficult determin regist live inform data collect across bb boundari unit granular chang could yield better code case wors code other exampl translat unit might chang bb procedur time would allow code gener reduc amount flush cach regist henc reduc number instruct need execut runtim would improv effect alloc regist code gener sinc live inform could collect use larger unit translat procedur may involv decod path may ever taken runtim thu gener code execut obviou granular unit sinc type program benefit use particular granular unit other may suffer program lot small procedur benefit unit translat procedur suffer program lot condit branch conclus uqdbt machineadapt dynam binari translat framework capabl configur differ sourc target machin specif properti machin uqdbt framework modifi extend eas support addit sourc target machin architectur without need write new translat scratch case studi show translat process two differ architectur complex challeng use machineadapt dynam translat techniqu nevertheless preliminari result suggest perform implement ondemand process dynam system done effici despit that research problem remain build fulli machineadapt dynam translat framework uqdbt appear promis model provid gener dynam binari translat framework acknowledg author wish thank mike van emmerik help discuss implement test strategi member kanban group sun microsystem inc whose system motiv work work part univers queensland binari translat uqbt project inform obtain project visit follow url httpwwwcseeuqeduaucsmuqbthtml r binari translat macintosh applic environ httpwww digit fx effici run mac program pc embra fast flexibl machin simul self power simplic kaashoek tcc system fast michalstrok new jersey machinecod toolkit design resourc retarget binari translat specifi semant machin instruct fast instructionset simul execut profil specifi represent machin instruct preliminari experi use uqbt binari translat framework tr self power simplic binari translat shade fast instructionset simul execut profil embra specifi represent machin instruct fast effect code gener justintim java compil outoford execut techniqu runtim binari translat srl a simpl retarget loader design resourc retarget binari translat specifi semant machin instruct ctr naveen kumar bruce r childer daniel william jack w davidson mari lou soffa compiletim plan overhead reduct softwar dynam translat intern journal parallel program v n p june lian li jingl xue tracebas leakag energi optimis link time journal system architectur euromicro journal v n p januari david ung cristina cifuent dynam binari translat use runtim feedback scienc comput program v n p april lian li jingl xue tracebas binari compil framework energyawar comput acm sigplan notic v n juli giusepp desoli nikolay mateev evelyn duesterwald paolo faraboschi joseph a fisher deli new runtim control point proceed th annual acmiee intern symposium microarchitectur novemb istanbul turkey jason d hiser daniel william wei hu jack w davidson jason mar bruce r childer evalu indirect branch handl mechan softwar dynam translat system proceed intern symposium code gener optim p march gregori t sullivan derek l bruen iri baron timothi garnett saman amarasingh dynam nativ optim interpret proceed workshop interpret virtual machin emul p june san diego california bruen timothi garnett saman amarasingh infrastructur adapt dynam optim proceed intern symposium code gener optim feedbackdirect runtim optim march san francisco california john aycock brief histori justintim acm comput survey csur v n p june