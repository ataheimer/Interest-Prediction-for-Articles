t parametr search made practic a paper show sortingbas applic parametr search quicksort replac parallel sort algorithm usual advoc simplic quicksort may lead applic parametr search effici theori practic well also argu cole optim certain parametricsearch algorithm may unnecessari realist assumpt input furthermor present gener flexibl easytous framework greatli simplifi implement algorithm base parametr search use framework implement algorithm solv frchetdist problem implement base parametr search faster binarysearch approach often suggest practic replac parametricsearch techniqu b introduct sinc late s parametr search optim techniqu develop megiddo late earli becom import tool solv mani geometr optim queri effici main principl parametr search comput valu l optim object function f use algorithm solv correspond decis problem decis problem state follow given valu l decid whether l l l l l l idea run gener version unknown valu l gener algorithm use concret version determin outcom decis problem set concret valu one valu l report l l explain techniqu detail section usual appli concret version expens term run time megiddo show use parallel version p gener algorithm may reduc number time call consider techniqu rather complic requir design effici parallel algorithm fortu nate gener algorithm necessarili solv problem concret decis sever case sort use instead howev exist parallel sort algorithm good worstcas time bound easili implement case hidden constant asymptot run time enorm cole show sortingbas parametr search optim even further optim come expens make techniqu even complic alreadi is paper show quicksort use gener algorithm sortingbas parametr search instead parallel sort algorithmse section cole optim cannot appli case section demonstr certain assumpt seem reason practic cole optim need attain effici algorithm two observ consider simplifi practic applic sortingbas parametr search nevertheless implement algorithm base parametr search remain challeng task one complet scratch therefor implement objectori framework parametr search c take care difficult part techniqu use framework implement algorithm use parametr search becom substanti easier applic even becom nearli trivial framework smallit consist eight class four research support dutch technolog foundat stw project uif shame shape match environ ment directli visibl user four class small number member function interfac easi use framework describ section base parametricsearch framework implement quicksort biton sort way use gener algorithm sortingbas applic parametr search two sort algorithm appli two problem first one problem find intersect median function set monoton increas linear function xaxi problem use megiddo explain techniqu use preliminari exampl mani paper parametr search second one frechetdist problem give detail applic section experiment result present section indic applic parametr search inde result algorithm effici practic fact simpl binarysearch approach often advoc practic replac parametr search outperform quicksortbas algorithm frechet distanc problem preliminari megiddo parametricsearch techniqu work follow assum decis problem p l monoton l ie p l true p l true l l task find l maximum valu l p l true suppos algorithm solv decis problem p determin input valu l whether l l l l l l also suppos flow control depend comparison depend sign polynomi l megiddo idea run gener unknown input l may seem strang run algorithm unknown input outcom name verif input equal l alreadi known howev get know actual valu l byproduct run l gener execut maintain open interv l known lie initi whenev comparison resolv need determin sign polynomi p valu l done without know valu l run concret version root p determin locat l among root ie either give us two consecut root r r i r l r i find one root l latter case done abort execut gener algorithm otherwis sinc sign polynomi chang two consecut root determin sign pl evalu polynomi p valu x r determin outcom comparison and updat r resum gener execut execut get progress smaller either run complet end final interv i find l prematur abort execut mani applic parametr search l one root associ comparison never run complet case case medianoflin exampl megiddo use explain techniqu structur problem restrict final interv simpl valu l easili comput given i denot run time number comparison made c cost run parametr search describ oc improv comput r realli to recal p l monoton p l true p l true l l symmetr p l fals p l fals l l mean somehow batch k comparison resolv associ root follow find median lm root use lineartim medianfind algorithm comput l determin outcom decis problem half root recurs deal remain root follow number root associ comparison bound constant resolv k batch comparison binarysearch fashion ologk call note abl batch comparison independ outcom one comparison batch depend outcom anoth comparison batch megiddo therefor suggest replac gener algorithm parallel version p sinc oper one parallel step usual independ p use p processor run p parallel step use binarysearch approach resolv comparison parallel step total cost parametr search opt p t p logp usual run time domin second term note actual run p parallel architectur parallel simul irrelev itself import point abil collect prefer larg batch comparison order reduc number call concret decis algorithm therefor weak model parallel parallel comparison model valiant suffic model complex algorithm determin comparison made thing like commun synchron process ignor cole show applic parametr search number call decis process reduc logfactor thu improv run time opt p t p t logp explain idea comment section one drawback parametr search mention agarw sharir requir design effici parallel algorithm gener version decis problem alway easi howev instruct point gener algorithm necessarili solv problem concret version requir output gener algorithm chang combinatori l quit case sort play role gener algorithm see instanc span tree schedul problem studi megiddo slopeselect problem frechetdist problem bottleneckdist problem problem find minimum hausdorff distanc rotat rotat two set point line polygon sever case gener algorithm consist sever step sort one sortingbas parametr search sever parallel sort algorithm dispos first sort algorithm sort ologn parallel step use on processor sort network ajtai et al usual refer aksnetwork use parametr search lead run time onlogn t log n onlogn t logn cole optim appli howev mani research comment algorithm rather complex constant hidden onot larg practic use often suggest use suboptim parallel sort algorithm instead valiant merg sort run olognloglogn parallel step use on processor less commonli known two sort algorithm cole time bound aksnetwork also use on processor one algorithm work crewpram model parallel comput constant run time small howev meet condit appli cole optim one work erew pram model complex first algorithm cole optim appli it fact parallel requir resolv root binarysearch fashion suffic abl collect root associ independ comparison small number batch paper show quicksort quit surprisingli meet requir lead consider simplif sortingbas parametr search yield expect run time onlogn n see section cole optim cannot appli here also show certain condit seem unlik practic situat expect run time parametr search opt logp even without cole optim quicksortbas parametr search mean expect run time onlognt logn condit explain section met parametricsearch alway popular theoretician practition parametr search appli right problem often lead asymptot run time order magnitud better altern often advis use techniqu practic reason neg advic usual twofold firstli sinc parametr search complic techniqu believ implement must also complic hard knowledg techniqu implement twice first time toledo appli medianoflinesproblem megiddo gave simpl illustr parametr search slope select problem second implement know schwerdt et al implement algorithm find minimum diamet set move point gupta et al second reason parametr search hardli ever use practic gener assum overhead involv ie hidden constant onot larg practic use partli presum difficulti parametr search altern propos mani specif problem see instanc agarw sharir chan howev parametr search current still gener method would like counterbal advic avoid parametr search realworld applic make observ consider simplifi sortingbas parametricsearch section provid framework take care much difficulti parametr search whether sortingbas section quicksortbas parametr search now sortingbas parametr search alway reli parallel sort algorithm batch comparison megiddo suggest parallel sort algorithm valiant preparata author propos use aksnetwork deriv run time asymptot faster cole origin appli optim techniqu aksnetwork later paper gave two parallel sort algorithm asymptot time bound aksnetwork much smaller constant factor hidden onot paper show quicksort use gener algorithm sortingbas parametr search need use parallel version quicksort serial version suffic abl batch comparison complet descript analysi quicksort see introductori textbook algorithm instanc one cormen leiserson rivest short quicksort sort input array element less two element return otherwis choos a pivot element partit two subarray a contain element smaller pivot contain element greater equal pivot element recurs sort a quicksort worstcas run time wn fact input almost sort run time inde quadrat input size attain onlogn expect run time random employ either randomli permut input choos random element array pivot element step quicksort simpl wellknown practic usual outperform sort algorithm determinist onlogn run time third step algorithm usual perform maintain two pointer one initi point first element array move toward higher element element e found greater equal pivot element pointer initi point last element array move toward lower element element e j found less pivot element e come e j array swap process continu pointer pass other observ step three algorithm comparison element array ind pendent compar element pivot element impli use quicksort parametricsearch set collect comparison step three resolv binarysearch fashion megiddo suggest comparison third step resolv actual partit describ previou paragraph make quicksortbas parametr search effici would like collect comparison recurs call recurs level l singl batch rather resolv o l separ batch trivial replac recurs iter maintain list pointer to subarray initi list contain one array name input array a iter step first collect on comparison subarray ie subarray compar element subarray pivot element subarray resolv binarysearch fashion next partit subarray describ befor doubl size list subarray list remov subarray size proceed next iter employ random either randomli permut input first step algorithm choos random element subarray pivot element expect number iter ologn iter on work total number call algorithm solv p ologn iter follow use quicksort gener algorithm sortingbas parametr search run time onlogn seem possibl appli cole optim we cannot partit subarray comparison subarray resolvedand therefor cannot reduc run time onlognt logn howev next section show certain condit seem reason practic run time closer onlogn t logn onlogn t log n evid use quicksort gener algorithm sortingbas parametr search consider simplifi implement also sinc quicksort prove effici practic expect lead faster algorithm complic parallel algorithm larger constant factor run time use note batch comparison prerequisit parametr search without batch quicksort serial sort algorithm also use gener algorithm sortingbas parametr search cost much higher run time fact toledo give implement nonbatch quicksortbas parametricsearch algorithm apart version use valiant parallel merg sort howev observ quicksort use batch comparison make implement optim version parametr search consider easier cole optim revisit cole show case run time parametr search reduc opt p logp opt p t p t logp optim techniqu work follow instead resolv batch op root ologp call binarysearch fashion which requir root sort first find median root r which done linear time call r determin outcom decis problem half root assum moment comparison made gener algorithm depend one root singl call outcom half comparison depend root batch known parallel process depend comparison resum lead new comparison associ root root join first batch of half number root resolv far process repeat find median root on cole show root weight accord clever scheme weight median find algorithm use number call reduc logfactor techniqu still work comparison depend constant number root rather singl root drawback techniqu cannot gener appli impos condit parallel algorithm also make gener algorithm complic experi see section appli cole optim resolv batch root ologp step megiddo origin paper notic number call decis process inde grow input size yet much less expect attribut mainten progress smaller interv l known lie recal resolv batch root either give us valu l name l one root end interv root one batch process far none root batch lie inbetween r k r l resolv next batch root disregard root lie interv outcom decis process root alreadi known henc binari search root intuit sinc interv get smaller rootsresolv step consid fewer fewer root algorithm progress let us assum moment root uniformli distribut batch number batch process algorithm m megiddo set number parallel step gener algorithm step interv give bound l call ologp time resolv decis process root binarysearch fashion begin step i m outcom p r root r batch solv step known total number root p furthermor interv maintain bound two consecut root r k r l set p root sinc number root call step p expect number root step lie insid r i under assumpt root uniformli distribut k call root lie r k r l instead binari search expect total number call sum step m i ologm follow expect run time parametr search opt p t logp t p sinc p the number parallel step gener algorithm usual smaller p the number processor opt p t logp quicksort get expect run time onlognt logn cours cannot gener assum root uniformli distribut batch may case step i m root step lie insid interv result previou step mean binari search root howev seem us mani practic situat extrem situat unlik occur expect practic distribut root batch suffici uniform benefit maintain bound l use quicksort gener algorithm randomli permut input preprocess step may even help respect although still give guarante howev experi quicksortbas parametricsearch solut frechetdist problem show bulk invoc decis algorithm inde done first iter see section parametricsearch framework batch comparison alway possibl necessari applic parametr search applic usual reduc number call decis process order magnitud time also make implement algorithm base parametr search difficult disrupt normal flow control suppos exampl function f in pseudoc code figur void f int i j k gi gj gk call ref jk figur origin code assum want execut code parametricsearch set comparison made function g g g mutual independ natur would like batch them similarli assum comparison made h h h independ also want batch those howev latter three function depend variabl i turn depend result three function line cannot collect resolv comparison six function line singl batch instead start execut g collect comparison suspend execut g g resolv comparison collect far resum execut three function next execut statement line get anoth round start function collect comparison suspend execut resolv comparison resum execut time function line get even clutter want simul parallel ie order execut function line arbitrari well order execut function line parametricsearch framework take care start suspend resum function collect resolv comparison framework consist small hierarchi c class user need interact four class number function public interfac class small four class name schedul process_bas comparison_bas root respect idea function need start suspend resum turn object userdefin class deriv process_bas call object process note howev unrel process oper system instead regular c object similarli comparison implement user deriv comparison_bas let us give exampl transform code collect class see figur code incomplet simplifi show import principl transform straightforward function perform independ comparison such three function line figur correspond dynam creat object creation independ object done singl member function line figur similarli code line class proc_f public process_bas public void memfun_ spawn new proc_gi spawn new proc_gj spawn new proc_gk void memfun_ spawn new proc_hi spawn new proc_hi spawn new proc_hi privat member variabl int i j k figur transform code figur translat line figur final local variabl origin code correspond member variabl transform code two member function memfun_ memfun_ regist framework constructor proc_f not shown here process themselv proc_f process creat also regist framework done automat spawn function take care link child process parent process process creat execut immedi schedul decid process start time proc_f figur schedul tell execut first regist member function memfun_ result three new process creat but execut immedi memfun_ finish proc_f suspend schedul select process run includ child process proc_f child process spawn proc_f finish command schedul resum execut start next regist member function memfun_ on member function proc_f delet schedul process spawn process comparison object userdefin class deriv comparison_bas comparison turn spawn object class root schedul take care resolv root binarysearch fashion signal comparison associ root resolv outcom comparison determin start suspend resum termin process comparison detail found refer manual tutori come softwar see cgal extens packag section httpwwwcgalorg hope show mean simpl code exampl brief explan simplic framework user need knowledg inner work framework simpl transform similar one code shown figur code shown figur natur complic construct also translat instanc iter express member function regist framework finish task recurs express process spawn anoth process class gener algorithm run l the unknown solut optim problem certain case replac sort simplifi implement parametr search even case provid implement two sort algorithm first one biton sort parallel sort network batcher use on processor sort n input item olog n parallel step implement biton sort use parametricsearch framework simul parallel resolv comparison batch second sort algorithm quicksort here also use framework collect resolv comparison partit step prior actual partit see section use framework sortingbas parametr search requir user implement follow class function class function comput item sort input input may consist item themselv class deriv comparison_bas comput root associ comparison two item determin outcom comparison solut decis problem p known root class function solv decis problem furthermor user specifi whether use biton sort quicksort decid number type use calcul parametricsearch framework two sort algorithm design philosophi cgal librari algorithm comput geometri framework depend cgal two cooper well consid import sinc goal use framework implement algorithm solv geometr optim problem fact plan make framework avail cgal extens packag applic use framework two sort algorithm implement two algorithm appli sort base parametricsearch first one solv medianoflin problem megiddo gave simpl illustr parametr search motiv implement algorithm give simpl mean test framework time enabl us easili explain framework tutori second algorithm implement one alt godau comput frechet distanc two polygon curv discuss briefli illustr framework use usual inform illustr frechet metric follow suppos man walk dog keep leash man walk polygon curv p dog polygon curv q allow control speed may nonneg valu ie allow stop cannot go back frechet distanc p q minim length leash necessari two follow definit alt godau character frechet metric formal definit v denot arbitrari euclidean vector space curv continu map f a b v ab ir b polygon curv length n curv n p jiij affin ie pi curv f f g denot frechet distanc defin ab rang continu increas function let p q polygon curv n edg respect alt godau first show solv case simpl line segment lg f l call free space shown figur cite alt godau togeth p q l proven distanc measur two point either polygon curv euclidean intersect f l unit squar ellips f l l figur p q l f l definit f l extend arbitrari polygon curv p q n edg respect f l fs lg figur also cite alt godau show exampl two polygon curv segment l figur diagram polygon chain p q given l algorithm decis problem base observ given two polygon curv p q f pq l exactli curv within correspond f l mn monoton direct critic valu decis process coordin intersect ellips boundari squar diagram see figur sinc number intersect constant squar omn critic valu depend l input paramet decis problem fact polynomi p l index rang omn possibl alt godau show l l either two critic valu row two critic valu column diagram valu there case need consid ignor simplic mean sortingbas parametr search use find frechet distanc p l adjac polynomi sort therefor sort algorithm compar p p j otherwis order p p j cannot known comparison involv comput root p one root l first c class implement solv decis problem take effort overli complic given l comput intersect ellips boundari squar diagram subsequ step determin path mn within f l monoton direct see paper alt godau detail item sort intersect ellips boundari squar diagram p q polynomi input paramet l decis process second class implement comput omn polynomi p q tell framework use class retriev input sort algorithm final third class implement compar two polynomi deriv comparison_bas two polynomi p p j compar comput root p p j root collect framework resolv binarysearch fashion outcom decis process root p p j known framework tell comparison class determin outcom comparison p p j done evalu p p j arbitrari valu interv l known lie interv guarante contain root p p j time framework tell comparison class determin outcom comparison three class need implement solv optim problem ie comput frechet distanc p q test result implement present next section decis problem consid omn critic valu solv omn time use quicksort gener sort algorithm expect number call decis process with assumpt distribut root olog mn expect overhead sort omnlogmn total expect run time omnlog mn howev distribut root subsequ step algorithm suffici random may expect run time closer omnlogmn show section experiment result test algorithm comput frechet distanc two polygon curv n vertic fg polygon curv creat gener n random point unit squar comput frechet distanc run sortingbas parametr search algorithm describ previou section biton sort quicksort use gener sort algo rithm first number type use long doubl mean get exact answer approxim also comput approxim binari search valu represent long doubl often suggest altern parametr search sinc long doubl bit sy tem expect number call decis process would also realiti found much higher number iter explain fact distanc two consecut number represent long doubl much smaller around around larg posit neg valu fact possibl binari search bit long doubl rather implement effici binari search simpli comput run time iter actual run time number iter comput possibl sinc overhead method binari search neglig almost time spent decis process three algorithm run randomli gener input input size repetit result present tabl run time binari search normal iter describ abov experi done pc mhz pentium iii processor mb memori run linux nearli case quicksort faster two method one repetit input size howev run time high second compar second secondhighest run time may due fact quicksort expectedcas perform onlogn worstcas perform on biton sort quicksort framework abort sort l found root number time actual happen list tabl binari search method also stop encount l howev differ smallest highest number iter less percent also test frechetdist algorithm use leda_r number type provid exact relat oper close addit subtract multipl divis comput kth root exact comparison leda_r gener effici time expens especi two complic express compar actual equal first trial polygon curv less vertic each run time measur hour simplifi arithmet express decis process reduc run time minut polygon curv vertic each still consid slow see lot possibl optim specif maintain extra inform data structur decis algorithm avoid comparison express know equal prioriand comparison expens verifi assumpt mainten progress smaller interv bound l result fewer fewer invoc decis algorithm gener algorithm progress sec tion record number call iter quicksortbas frechetdist algorithm randomli gener input size turn case without earli abort invoc decis algorithm done first iter recal implement iter rather recurs version quicksort see section input size method min avg max time abort quicksort binari search quicksort binari search quicksort binari search biton sort quicksort binari search tabl test result frechetdist algorithm time second conclud remark paper observ quicksort may use effici implement algorithm use sort base parametr search also argu cole optim may need certain condit seem reason practic present framework allow user implement variou applic parametr search simpl effici way two sort algorithm provid framework use gener algorithm sortingbas parametr search especi quicksort perform well quicksortbas implement algorithm alt godau give better result simpl binarysearch approach r effici algorithm geometr optim sort clogn parallel step comput frechet distanc two polygon curv sort network applic applic gener program paradigm design cgal leda class real number geometr applic random optim techniqu geometr pattern match euclidean motion slow sort network obtain faster sort algorithm parallel merg sort optimaltim algorithm slope select introduct algorithm improv bottleneck match relat problem use geometri fast algorithm collis proxim problem involv move geometr object combinatori optim ration object function appli parallel comput algorithm design serial algorithm label point rectangl variou shape new parallelsort scheme comput minimum diamet move point exact implement use parametr search extrem polygon contain problem issu parametr search parallel comparison problem tr slow sort network obtain faster sort algorithm sort italicc log italicn parallel step parallel merg sort optimaltim algorithm slope select introduct algorithm fast algorithm collis proxim problem involv move geometr object geometr pattern match euclidean motion comput minimum diamet move point effici algorithm geometr optim appli parallel comput algorithm design serial algorithm applic gener program paradigm design cgal