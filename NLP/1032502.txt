t softwar trace cach a paper explor use compil optim optim layout instruct memori target enabl code make better use underli hardwar resourc regardless specif detail processorarchitectur order increas fetch perform softwar trace cach stc code layout algorithm broader target previou layout optim target improv instruct cach hit rate also increas effect fetch width fetch engin stc algorithm organ basic block chain tri make sequenti execut basic block resid consecut memori posit map basic block chain memori minim conflict miss import section program evalu analyz detail impact stc code layout optim gener three main aspect fetch perform instruct cach hit rate effect fetch width branch predict accuraci result show layout optim code special characterist make amen highperform instruct high rate nottaken branch execut long chain sequenti instruct also make effect use instruct cach line map use instruct execut close time increas spatial tempor local b introduct instruct fetch bandwidth may becom major limit factor futur aggress wideissu superscalar cons quentli crucial develop softwar hardwar techniqu interact deliv multipl basic block processor everi cycl unfortun mani import code hard do instanc databas code sever integ spec research support cicyt grant tic author generalitat de catalunya grant aci josep l larribapey josep torrella fi aptind alex ramirez commiss cultur educ scientif exchang unit state america spain josep l larribapey josep torrella mateo valero nsf grant mip josep torrella cepba alex ramirez want thank fellow pbc time effort author want thank xavi serrano help set analyz postgresql univers illinoi urbana champaign usa applic frequent control flow transfer high instructioncach miss rate characterist make suppli high number use instruct difficult task even presenc aid devic like hardwar trace cach htc softwar side possibl reorder code memori easier suppli use instruct execut unit code reorder target elimin cach conflict addit also map sequentiallyexecut basic block consecut memori posit aspect may increas number use instruct fetch per access futur wideissu superscalar paper focu interact hardwar softwar provid high instruct bandwidth start present fullyautom compiletim code reorder techniqu focus maxim sequenti instruct still tri minim instruct cach miss call techniqu softwar trace cach stc compar result obtain stc obtain htc alon combin techniqu result obtain postgresql databas arcad game spec benchmark result show larg code loop determinist execut sequenc like postgr databas manag system stc offer similar better result htc moreov combin stc htc obtain encourag result specif number fetch instruct per cycl obtain combin stc small htc compar htc doubl size alon final stc use even combin larg htc due instruct cach miss rate reduct paper structur follow section describ fetch mechan htc section describ character instruct refer stream varieti workload section use simul evalu variou combin stc htc section discuss relat work section draw final remark fetch mechan simul aggress sequenti fetch unit similar describ shown figur core fetch unit model compos interleav instruct cach icach multipl branch predictor bp interleav branch target buffer btb return address stack ra fetch unit design fetch mani contigu instruct possibl limit pose width data path branch predictor throughput work assum limit instruct branch per cycl core fetch unit icach tcach fill buffer fetch commit next fetch address hit next address logic fetch address decod figur fetch unit model use simul complet hardwar trace cach mechan simul n m two consecut icach line access per cycl allow us fetch sequenti code cross cach line boundari btb access parallel icach use predict address indirect jump subroutin call return address subroutin accur predict use ra assum instruct predecod allow branch control transfer detect target pcrel branch calcul obtain btb use output bp btb inform regard instruct repres control transfer obtain instruct mask select valid instruct fetch icach line gener fetch address next cycl allow fetch unit stop indirect jump break execut sequenc add break bit btb inform fetch unit predict jump address break sequenc summar instruct fetch stop one condit instruct fetch ffl branch fetch ffl branch predict taken ffl indirect jump predict break execut sequenc ffl system call fetch ffl mispredict btb miss high branch predict accuraci use kb gag correl branch predictor bit histori length extend allow multipl branch predict singl cycl entri btb enhanc break bit entri ra also simul core fetch unit conjunct basic trace cach model describ complet fetch unit trace cach tcach call hardwar trace cach htc fill buffer read instruct either fetch unit specul trace con struction commit stage nonspecul trace construct store special purpos buffer trace complet store tcach conjunct branch outcom led instruct sequenc lead instruct branch outcom encount futur trace fed directli tcach decod unit fill buffer stop build trace condit core fetch unit except case sequenc break tcach abl store noncontigu instruct contigu memori posit softwar trace cach number use instruct per cycl provid processor broadli determin three factor branch predict accuraci instruct cach miss rate execut noncontigu basic block deal last two problem propos code reorder techniqu use whole memori space softwar trace cach store popular sequenc basic block order avoid sequenc break reorder basic block program chang taken branch nontaken one move unus basic block execut path inlin basic block popular function reduc instruct cach miss rate map popular trace reserv area icach algorithm base profil inform mean result obtain depend repres train input popular execut path given input set need relat execut path differ input set run train set benchmark obtain direct graph basic block weight edg edg connect two basic block p q q execut p weight edg w pq equal total number time q execut p weight basic block w p obtain ad weight outgo edg branch probabl edg bpq obtain w pqw p unexecut basic block prune graph next describ select seed start basic block code sequenc algorithm build basic block trace select seed map algorithm use alloc trace minim instruct cach miss seed select obtain order list seed sort entri point function decreas frequenc execut tri expos maximum tempor local first trace built start frequent referenc function possibl obtain better result seed select base intern structur code show howev access sourc code applic alway grant gain deep understand code time consum task may offer improv larg enough compens effort trace build use weight graph obtain run train set start select seed implement greedi algorithm build basic block trace target increas code sequenti given basic block algorithm follow frequent execut path it impli visit subroutin call basic block follow control transfer highest probabl use valid transit basic block note futur examin algorithm use two paramet call exec threshold branch threshold trace build algorithm stop successor basic block visit weight lower exec threshold outgo arc branch probabl less branch threshold case start next accept transit note befor build secondari execut path seed basic block reachabl given seed includ main secondari sequenc proceed next seed figur a show exampl weight graph figur b show result sequenc use exec thresh branchthresh start seed follow like outgo edg basic block build sequenc b transit b c discard due branch threshold note transit valid transit start secondari trace a successor alreadi visit sequenc end there start secondari trace weight lower exec threshold execut threshold b result sequenc a weight graph discard trace secondari branch threshold discard branch threshold discard trace main branch probabilitynod weight aa uncondit branch fallthrough subroutin call condit branch subroutin return figur trace build exampl code replic order increas code sequenti introduc limit form code replic method allow main execut path subroutin replic call point introduc two new threshold valu execrep branchrep threshold control amount code replic sequenc replic call probabl pass branchrep threshold start basic block sequenc pass execrep threshold exampl figur found new call c from say a would replic sequenc c c includ main execut path threshold select loop algorithm repeatedli select set valu four threshold gener result trace pass basic block includ previou pass prune newli form trace limit amount code replic pass iter select less less restrict valu threshold build trace group pass decreas frequenc execut valu select exec branch threshold determin number basic block includ pass algorithm gener larger smaller group trace target pack given pass trace similar popular keep total number instruct control paper select exec threshold pass contain approxim kb replic code maxim effect code replic use least restrict execrep branchrep threshold trace map shown figur map code sequenc decreas order popular concentr like use code first memori page map popular sequenc close equal popular one reduc conflict among them also popular sequenc map reserv area cach leav gap creat conflict free area cfa shield popular trace interfer code popular trace least popular trace icach size cfa instruct cach icach figur trace map direct map instruct cach map algorithm appli set associ cach minor modif complet studi differ factor determin instruct cach miss reduct offer map code sequenc comparison code map algorithm postgresql databas found local studi object stc build compil time popular trace built run time htc also stc target minim icach miss rate time analyz instruct refer stream wide set workload character instruct local execut path determin affect perform offer stc inform intend predict perform increas expect use stc workload refer local affect icach miss rate reduct offer techniqu basic block size number loop determin program execut influenc increas code sequenti accomplish basic block reorder workload use four class workload tri cover wide rang applic common integ float point code commerci workload arcad game recent studi shown commerci workload behav like common integ code like specint set also well known float point code differ behavior integ code workload includ whole spec benchmark use postgresql databas manag system commerci workload xblast arcad game exampl littl studi workload execut simul need develop work done use alpha processor dec atom trace driven simul use differ input set obtain profil inform obtain simul result ensur improv valid input profil one benchmark run complet train simul code analysi examin profil inform obtain run train set classifi workload attend characterist affect perform techniqu code local amount loop condit branch subroutin call basic block size number sequenc break examin code local determin number static instruct need gather dynam instruct refer shown tabl total code size benchmark cfa size select kb instruct cach also shown tabl observ code larg work set like applu apsi fpppp gcc postgr fit even kb cach furthermor code exhibit littl tempor local like gcc fit refer kb cach select cfa size gather instruct refer still leav reason space rest code obvious larger cach allow larger cfa code replic exampl xblast concentr dynam refer instruct byte almost fit kb cfa use kb instruct cach kb cach allow cfa grow kb next examin code sequenti origin layout observ float point benchmark larg basic block instruct averag lead larg code sequenc consecut instruct aver age meanwhil averag sequenc length integ benchmark usual instruct less consecut basic block execut typic basic block size around instruct dynam refer code cfa size benchmark size kb kb sucor hydrod mgrid turbd compress perl vortex postgr xblast tabl number static instruct need accumul dynam refer total code size includ unreferenc instruct select cfa size instruct cach final examin classif dynam basic block execut benchmark differ type basic block consid shown tabl percentag basic block type execut shown tabl last two column show percentag branch loop basic block behav fix way fbfl is alway taken alway taken low proport fix loop branch mean loop execut iter less bb type descript target f fallthrough next instruct j uncondit branch pc rel uncondit branch indirect condit branch pc rel subroutin call pc rel subroutin call indirect r subroutin return indirect tabl basic block type consid chang order basic block program reduc number uncondit branch chang taken condit branch taken one also inlin popular function elimin subroutin call return increment number sequenti execut instruct note number sequenc break due loop branch unpredict condit branch depend organ code consid indirect jump separ way elimin target address unknown may jump unexpect address how ever reorder code frequent target address break execut sequenc reduc number loop compil optim like loop unrol use yet includ work consequ stc offer littl advantag code lot loop fix condit branch also code subroutin call benefit fact stc build execut sequenc cross procedur call number predict basic block transit determin fallthrough basic block pcrel uncondit branch condit branch fix behavior subroutin call percentag fallthrough basic block around code stc perform determin rest basic block class mainli percentag loop basic block criteria expect postgr loop basic block subroutin call condit branch behav fix way one benefit stc hand basic block execut ijpeg end loop branch bare condit branch behav fix way make difficult enlarg execut sequenc among fp code apsi look best candid larg proport fix condit branch loop subroutin call simul result select appropri cfa size bench mark measur increas number instruct execut two sequenc break obtain stc tabl show percentag basic block transit break sequenc averag number consecut instruct execut benchmark origin code propos layout measur run test set number consecut instruct execut repres perform limit sequenti fetch unit even limit bu width branch predictor throughput branch mispredict would still limit taken branch tabl show stc improv perform limit averag origin reorder benchmark bb size break seq len break seq len sucor hydrod mgrid applu turbd apsi averag compress li ijpeg perl vortex averag postgr xblast tabl percentag basic block transit averag number consecut instruct execut origin reorder code averag bb size code layout expect fp benchmark bare reduc percentag sequenc break best result obtain hydrod apsi reduct translat sequenc length increas expect due reduc proport loop ex ecut hand mgrid actual increas percentag sequenc break bb transit fp benchmark higher proport loop basic block execut integ code obtain sequenc length increas mksim vortex postgr xblast meanwhil ijpeg experi notic improv ment roughli correspond expect section gener term integ code experi signific reduct percentag sequenc break bb transit reorder code execut consecut basic block rais averag perform limit instruct fetch unit simul tabl show simul result fetch unit describ section use kb instruct cach icach simul code layout core fetch unit combin trace cach tcach kb code layout either origin code base optim layout correspond cfa xkb cfax present number fetch instruct per access three separ result averag number instruct core fetch unit icach provid averag number instruct tcach provid averag global perform tcach present core fetch unit global perform also separ icach tcach miss rate present term miss per line access two icach line access one tcach line access fetch unit access also present branch mispredict rate final perform metric number fetch instruct per cycl fipc fipc obtain divid fipa estim number cycl per access cpa instruct cach miss caus fetch engin stall increas cpa branch mispredict caus fetch unit fetch instruct wrong execut path effect wast fetch cycl use fix number cycl icach miss assum icach line miss could serv simultan also assum averag number penalti cycl branch mispredict icach miss penalti use cycl branch mispredict penalti cycl depend execut core processor softwar trace cach main effect stc increas fipa provid core fetch unit reduct icach miss rate code show larg improv one number other seem unaffect found unexpect side effect branch predict accuraci exampl reorder code postgr increas fipa core fetch unit instruct instruct per access still far away shown tabl perform limit limit bu width branch predictor throughput accuraci taken branch basic block type fix branch tomcatv sucor hydrod mgrid turbd fpppp wave gcc compress li ijpeg perl vortex postgr xblast tabl percent dynam basic block type workload percent condit loop branch fix behavior increas caus global fipa perform stc alon come quit close htc code exampl core fetch unit provid instruct per access reorder xblast use kb tcach origin code obtain instruct per access also observ stc drastic reduc icach miss rate fp integ code larg code like apsi xblast postgr obtain miss rate reduct around final icach miss rate around kb cach branch mispredict rate increas slightli reorder code reorder code reduc number taken branch introduc zero histori regist gag predictor lead wors util histori tabl exampl branch mispredict rate mksim increas code reorder mainli due reduct sequenc break see tabl hardwar trace cach fact trace provid tcach built fill buffer make fipa provid tcach independ tcach geometri also read instruct form dynam stream make trace independ code layout tcach miss rate seem depend code layout tcach size itself order reduc tcach miss rate techniqu like partial match propos also reduc number instruct provid htc mechan assum tcach alway abl provid instruct core fetch unit statement may true consid increas fipa perform stc reduc trace length caus techniqu may worth ad function htc compiletim optim obtain similar result htc visibl impact branch predict accuraci stc htc interact best result obtain combin stc htc core fetch unit abl provid instruct tcach miss lower icach miss rate exampl combin stc kb tcach vortex provid instruct per access htc provid larger code tcach rememb execut code sequenc core fetch unit use extens case like gcc stc prove use combin small tcach provid better result tcach doubl size alon combin stc larg tcach still improv result larger code fipa increas minimum small one stc htc improv fipa also target reduct cpa minim icach miss small code like hydrod alreadi low icach miss rate stc use htc provid much better perform case like li increas branch mispredict rate actual hinder perform htc hand largest code like postgr xblast stc alon offer similar better result htc alon case combin compiletim runtim techniqu offer best result rais fipc stc kb htc combin both case use combin stc small htc offer similar better result htc doubl size benefit stc obviou icach miss penalti increas branch mispredict penalti small htc prove use icach miss penalti low conclud larg code loop stc provid better result htc alon combin stc small htc provid similar better result much larger htc alon combin larg tcach stc still abl provid perform improv due reduc icach miss rate setup fipa miss rate branch fipc miss penbr pen bench tcach layout icach tcach global icach tcach mispr base hydrod kb base base base apsi kb base base base base base base gcc kb base base base li kb base base base ijpeg kb base base base vortex kb base base base postgr kb base base base xblast kb base base tabl simul result kb instruct cach relat work much work code map algorithm optim instruct cach miss rate work target less aggress processor need fetch instruct multipl basic block per cycl hwu chang use function inlin expans group trace basic block tend execut sequenc observ profil code then map trace cach function execut close place page petti hansen propos profil base techniqu reorder procedur program basic block within procedur aim minim conflict frequent use function place function refer close memori also reorder basic block procedur move unus basic block bottom function code even split procedur two move away unus basic block torrella et al design basic block reorder algorithm oper system code run conserv vector processor map code form sequenc basic block span sever function keep section cach address space reserv frequent referenc basic block comparison stc petti hansen method torrella et al method found gloy et al extend petti hansen placement algorithm procedur level consid tempor relationship procedur addit target cach inform size procedur hashemi et al kalamaitiano et al use cach line color algorithm inspir regist color techniqu map procedur result number conflict minim techniqu develop vliw processor like trace schedul also identifi frequent execut path program techniqu tri optim schedul instruct execut core processor perform instruct fetch en gine individu instruct move down cross basic block boundari optim ilp execut core processor insert compens code undo wrongli place instruct wrong path taken trace defin logic basic block need actual move order obtain desir effect sens techniqu stc may complementari one optim instruct fetch optim instruct schedul use profil inform hardwar side techniqu like branch address cach collaps buffer trace cach approach problem fetch multipl noncontigu basic block cycl branch address cach collaps buffer access nonconsecut cach line interleav icach cycl merg requir instruct access line trace cach requir fetch nonconsecut basic block icach store dynam construct sequenc basic block special purpos cach techniqu requir hardwar extens fetch unit target icach miss rate reduct reli techniqu it work examin interact runtim compiletim techniqu regard instruct fetch mechan chen et al examin effect code expand optim loop unrol function inlin instruct cach miss rate also exampl softwar hardwar cooper patel et al identifi branch fix behavior avoid make predict them increas potenti trace cach conclus paper present profil base code reorder techniqu target optim instruct fetch perform aggress wide superscalar processor care map basic block program store frequent execut trace memori use instruct cach softwar trace cach stc obtain better perform sequenti fetch unit complement hardwar trace cach htc mechan better failsaf mechan result show larg code loop determinist execut sequenc like databas appli cation stc offer similar better result htc alon howev optimum result come combin softwar hardwar approach number fetch instruct per cycl obtain combin stc small trace cach compar htc doubl size alon storag popular trace instruct cach lead new view fetch unit trace cach tightli coupl content instruct cach trace redundantli store cach effect wast space displac potenti use trace trace cach yet anoth exampl need softwar hardwar work togeth order obtain optimum perform minimum cost r effect code expand optim instruct cach design optim instruct fetch mechan high issu rate trace schedul techniqu global microcod compact altern fetch issu techniqu trace cach mecha nism procedur placement use tempor order informa tion effici procedur map use cach line color achiev high instruct cach perform optim compil improv trace cach effect branch promot trace pack profil guid code posi tion code reorder decis support system optim instruct fetch trace cach low latenc aprroach high bandwith instruct fetch optim instruct cach perform oper system intens workload increas instruct fetch rate via multipl branch predict branch address cach tr ctr code reorder limit branch offset acm transact architectur code optim taco v n pe june