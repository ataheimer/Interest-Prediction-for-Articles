t path analysi renam predic instruct schedul a increas instruct level parallel need exploit potenti parallel avail futur wide issu architectur predic execut architectur mechan increas instruct level parallel remov branch allow simultan execut multipl path control commit instruct correct path order compil expos use parallel tradit compil dataflow path analysi need extend predic code paper motiv need renam predic reflect path inform present predic static singl assign pssa use renam introduc full path predic remov fals depend enabl aggress predic optim instruct schedul demonstr use pssa predic specul control height reduct two predic code optim use instruct schedul reduc depend length critic path predic region result show use pssa enabl specul control height reduct reduc execut time b introduct explicitli parallel instruct comput epic architectur put forth viabl architectur achiev instruct level parallel ilp need keep increas futur processor perform intel applic epic architectur technolog found ia architectur whose first instanti itanium processor epic architectur issu wide instruct similar vliw architectur instruct contain mani oper one new featur epic architectur support predic execut oper guard one predic regist avail architectur oper commit valu guard predic true one advantag predic execut elimin hardtopredict branch combin path branch singl path anoth advantag come use predic combin sever smaller basic block one larger hyperblock provid larger pool draw ilp epic architectur signific limit ilp presenc controlflow dataflow depend static singl assign ssa import compil transform use remov fals data depend across basic block boundari control flow graph remov fals depend reveal ilp allow better perform optim like instruct schedul without perform ssa benefit mani optim tradit code limit elimin fals depend equal import complex task predic code sinc multipl control path merg singl predic region howev controlflow dataflow analysi need support predic compil differ tradit analysi use compil superscalar architectur sequenti region predic code contain data depend also predic depend predic depend exist everi oper definit guard predic techniqu introduc chain predic depend repres uniqu control path origin code describ predicatesensit implement ssa call predic static singl assign pssa pssa introduc fullpath predic extend ssa handl predic depend multipl control path merg togeth singl predic region demonstr pssa allow effect predic schedul elimin fals depend along path via renam creat fullpath predic provid pathsensit dataflow analysi show benefit use pssa perform predic specul control height reduct instruct schedul ba brand true brandom number pp cmppunuc ba true ba ptruepfals els pfals ptrue bq p p true bq els nullifi db p p true db els nullifi statement fb true fb a origin control flow graph b predic hyperblock figur short code exampl show transform nonpred code predic hyperblock ing use pssa allow two optim appli togeth schedul oper earliest schedul cycl implement earliest schedul cycl take consider true data depend loadstor constraint paper expand upon work present includ addit benchmark motiv need renam predic reflect path inform beyond avail tradit ifconvert code paper organ follow section describ predic execut section motiv need predicatesensit analysi fullpath predic section present predic static singl assign section show pssa enabl aggress predic specul control height reduct section report increas ilp reduc execut time achiev appli algorithm predic code section summar relat work section discuss use pssa within ia framework section describ futur work final section summar contribut paper predic execut predic execut featur design increas ilp remov hardtopredict branch also use support softwar pipelin machin hardwar support predic code includ addit set regist call predic regist process predic replac branch compar oper set predic regist either true fals base comparison origin branch oper associ one predic regist hold valu oper guard predic oper commit guard predic true process replac branch compar oper associ oper predic defin compar call ifconvers work use notion hyperblock hyperblock predic region code consist straightlin sequenc instruct singl entri point possibl multipl exit point branch target hyperblock elimin convert predic definit use ifconvers remain branch target outsid hyperblock consequ cyclic controlflow dataflow depend within hyperblock select instruct includ hyperblock base program profil origin basic block includ inform execut frequenc basic block size oper latenc characterist typic code section includ hyperblock one contain hardtopredict unbias branch shown figur ifconvers control flow graph cfg figur a compris four basic block result predic hyperblock shown figur b oper hyperblock guard either predic regist set constant valu true regist defin either true fals cmpp compar put result predic oper oper guard constant true oper fb figur execut commit regardless path taken oper guard predic regist oper bq put pipelin commit valu oper guard predic p oper determin true follow describ three type oper includ hyperblock cmpp oper predic oper normal nonpredicatedefin oper defin trimaran system which support epic comput via playdoh isa guard predic assign valu via cmpp oper consid oper bc cmppunac ac exampl cmpp oper defin one two predic oper defin predic b c first tag un appli definit first predic b second tag ac c first charact tag defin predic defin charact u mean predic uncondit get valu whether guard predic case true fals fals b set fals otherwis true valu b depend upon evalu ac charact second tag ac indic full definit relat predic c conting valu a evalu ac prior valu c fals valu predic c chang true c previous set fals c remain fals one except uncondit definit predic discuss later section addit second charact tag defin whether normal n result condit ac complement c condit must true make relat predic true true c true ac true new valu c true complet definit cmpp statement see playdoh architectur specif implement pssa introduc new oper current defin trimaran predic oper defin block predic take logic multipl predic exampl consid oper g ora b c true where a b c predic defin uniqu path g one valu true g receiv valu true otherwis g assign fals schedul make reason assumpt definit predic avail use sourc anoth oper guard subsequ cmpp oper cycl follow definit use guard oper predic definit avail use cycl defin refer oper defin predic normal oper normal oper includ assign arithmet oper branch memori oper motiv predicatesensit analysi major task schedul multiissu machin find independ instruct unfortu nate predic introduc addit depend tradit code consid figur b depend definit guard predic p use statement bq p sinc predic combin multipl basic block introduc fals depend disjoint path exampl figur b absenc predic depend inform would infer depend definit b bq p use b db p howev two statement guard disjoint predic therefor one predic p p possibl true one statement actual commit depend fact exist johnson et al devis scheme determin disjoint predic use predic partit graph analysi allow effect regist alloc live rang across predic code could accur determin approach limit describ disjoint restrict path inform path inform extend across join point collect convers true c true ac fals new valu c fals figur predic partit graph would determin follow pair predic disjoint g h b c d howev inform regard relationship g h would avail crossjoin inform need provid schedul full flexibl schedul statement ytr path inform avail ytr guard true schedul correctli assum statement depend trand tt rx rx howev sinc two possibl definit operand combin operand could fact caus definit execut via one or more path execut region version statement could made one combin operand could schedul minimum depend length version disjoint inform maintain inform regard path sinc recent join need combin path inform across join remov unnecessarili conserv schedul depend figur b show crossjoin path inform would need guard assign schedul know precis depend copi allow flexibl schedul statement although precis depend inform determin guard predic relat also show renam techniqu addit use achiev greater schedul flexibl renam variabl one definit region maintain path inform even optim chang guard predic statement appli predic static singl assign pssa techniqu renam static singl assign ssa prove use elimin fals depend tradit code remov fals depend allow flexibl schedul sinc data independ oper move past instruct schedul nonpred code ssa assign target assign oper uniqu variabl join node oefunct may need insert multipl definit variabl reach join oefunct determin version variabl use assign addit renam version new variabl use repres merg differ variabl name figur show simpl exampl figur ssa form assign boebb variabl b repres reach definit b use join definit b b discuss section elimin fals depend equal import complex task predic code sinc multipl control path merg address problem develop tr tt d zw true rx g bc tr g bc tr h l w b tt br l ytr dg ytr dh ytr dg ytr dh vy true a origin control flow graph b predic hyperblock path first join block second join block third join block br figur code duplic one definit reach use maintain maximum flexibl schedul b statement ytr duplic pair definit may reach statement copi guard predic defin path along definit would occur predicatesensit implement ssa call predic static singl assign pssa pssa seek accomplish object ssa predic hyperblock first must assign target assign oper hyperblock uniqu variabl second point hyperblock multipl path come togeth must summar condit multipl definit variabl reach join second object accomplish creation fullpath predic pathsensit analysi consid sampl predic code shown figur use tradit hyperblock predic ba a control flow graph b code ssa form ba els db figur static singl assign br zw true rx g bc tr true l w b tt br l ytr true vy true a origin control flow graph b predic hyperblock tr tt d figur extend exampl transform nonpred cfg predic hyperblock tt ftrue true agfahf cmppunuc z f rx agf bagfcagf cmppunuc tr agf bahfcahf cmppunuc tr ahf lbagfebagf cmppunuc w bagf lbahfebahf cmppunuc w bahf ecagf edcagf cmppunuc t cagf ecahf edcahf cmppunuc t cahf tt br l agf ahf t rand br bagf cagf bahf cahf agf ahf d a pssa depend graph b pssatransform code figur pssa depend graph show flow data control pssatransform code block label fullpath predic indic multipl letter contain statement execut along path block label block predic singl letter contain statement execut along sever path predic exampl branch replac except one leav hyperblock predicatedefin oper use ifconvers predic defin exampl correspond two edg exit condit branch cfg figur figur show exampl pssa appli display graph show postpssa depend relationship pssa transform phase pre postoptim hyperblock convert pssa form optim optim pssa insert cleanup code edg leav hyperblock copi renam variabl back origin name remov unus predic definit convert pssa form convert pssa form oper process turn begin top hyperblock proceed end control pssa appli predicatedefin oper normal pssa appli oper first describ normal pssa oper assign variabl defin renam third oper figur b zw exampl operand adjust reflect previous renam variabl eg w becom w oper part join block multipl version operand may live first oper ytr third join block figur a provid exampl here oper duplic path lead join correct operand version path use duplic statement seen figur in multipl definit y duplic guard fullpath predic describ below associ path along operand defin though definit onli uniqu one definit given path definit predic disjoint predic one possibl true one commit next describ control pssa singl cmpp oper defin one two block predic such definit b c figur replac one cmpp oper associ particular path lead block seen figur b two cmpp oper one defin bagf cagf one defin bahf cahf new predic call fullpath predic fpp fpp definit appropri operand version path guard fpp defin path prior reach new block exampl cmpp defin bagf cagf predic agf fpp specifi uniqu path along oper valid execut enabl pssa provid correct guard predic duplic statement previous describ exampl figur point definit need guard predic captur inform path execut first definit need guard predic repres path execut block g block d addit predic need reflect execut actual reach block statement question e case regist would incorrectli modifi if exampl branch hyperblock taken block e never reach new fpp ebagf repres precis condit correct execut addit cmpp statement ad defin fpp cmpp statement includ renam join block whose statement origin predic true e associ fpp exampl oper figur b predic true predic f e pssa version code shown figur necessari maintain exact path inform clearli potenti caus exponenti amount code duplic might seem reason follow exampl ssa insert oefunct join point resolv multipl definit exampl implement oefunct resolv r definit could be rr g tt true would advantag decreas duplic elimin need predicatesensit analysi predic relationship inform still need determin reach definit associ predic determin order copi oper exampl statement defin previou sequenc could commit liter predic true alway true predic could true well use get correct definit statement cannot execut statement moreov side effect degrad perform introduc import insert oefunct add data depend exampl true depend introduc definit use addit fals depend reintroduc exampl output depend two definit t thu ssa usual oefunct implement give desir schedul flexibl block predic also import pssa transform pssa use predic statement redefin block predic union fpp associ path reach block pssa simpli duplic everi path hyperblock duplic occur necessari remov fals depend one version operand reach statement one version statement requir case vy figur variabl version live node e statement guard e block predic creat take logic ebagf ebahf ecagf ecahf edcagf edcahf long control reach node e regardless path taken execut commit statement vy postoptim cleanup optim appli code pssa form cleanup phase run remov unnecessari code assur consist code outsid hyperblock pssa implement describ paper gener cmpp statement everi path block enter pssa data structur maintain inform relationship predic defin provid maximum flexibl optim howev fpp definit may use correspond cmpp oper discard reduc code size significantli final assur correct execut follow hyperblock pssa insert copi oper assign origin variabl name renam definit live hyperblock place appropri exit hyperblock exampl exit branch guard l figur would includ live hyperblock exit hyperblock schedul optim section describ pssa enabl predic specul pspec control height reduct chr aggress instruct schedul pspec allow oper execut guard predic determin chr allow guard predic determin soon possibl reduc number oper need specul use togeth pssa demonstr schedul code earliest schedul cycl assum machin unlimit resourc ftrue true agfahf cmppunuc z f bagfcagf cmppunuc tr agf bahfcahf cmppunuc tr ahf lbagfebagf cmppunuc w bagf lbahfebahf cmppunuc w bahf ecagf edcagf cmppunuc t cagf ecahf edcahf cmppunuc t cahf tt true br lbagf br lbahf figur extend code exampl pspec optim appli statement other first statement predic true specul predic specul section describ perform specul pssatransform code gener specul use reliev constraint control depend place schedul one specul execut oper likelytaken path highlypredict branch schedul oper control branch similarli predic specul pspec schedul normal oper cmpp oper depend upon optim hyperblock execut time pspec handl placement specul predic oper uniform manner pspec schedul normal oper earliest schedul cycl specul oper oper schedul earlier oper control depend on predic true assum except rais specul oper taken care use architectur featur poison bit pspecnorm op f normal opguard predic defin normal opearliest schedul cycl f multipl def normal optarget exist f renamenorm optarget updat usesnorm optarget normal opscheduleearliest schedul cycl normal opset predicatetru els f normal opscheduleearliest schedul cycl figur basic pspec algorithm instruct schedul specul demonstr use pssa enabl pspec figur show code figur pspec optim appli assign r r exampl specul oper notic base depend could schedul cycl one would imposs without renam predic specul oper consid sequenti begin first instruct hyperblock normal nonstor oper pspec compar earliest schedul cycl cycl guard predic current defin oper schedul earlier guard predic oper predic true schedul earliest schedul cycl recal pssa perform full renam renam may requir pspec exampl definit figur specul definit predic true without renam incorrect code result consequ must renam oper specul result appli definit now y y y y yand y appear figur specul renam may requir duplic oper use definit specul sinc may multipl reach definit specul y oper vy duplic guard appropri fpp though figur statement shown they too specul possibl pssa previous creat necessari fpp path inform guard predic defin oper earliest schedul cycl appli pspec schedul earliest schedul cycl guard guard predic assign pssa instruct zw exampl algorithm pspec instruct schedul shown figur use pspec hyperblock schedul cycl compar cycl figur sinc pspec appli whenev definit oper guard predic occur later earliest schedul cycl oper could reduc number oper need specul move definit guard predic earlier goal next optim control height reduct allow predic defin earli possibl branch specul chose pspec branch therefor branch statement earliest schedul cycl one guard predic known howev branch predic block predic pssa becaus multipl operand version reach it may unnecessarili delay schedul wait block predic comput shown figur may choos duplic statement much normal pspec guard execut duplic respect fpp instead predic singl instruct block predic control height reduct control height reduct chr eas control constraint multipl control statement chr allow success control oper control path schedul cycl effect reduc control depend height exampl code figur control comparison z tr schedul cycl respect howev second comparison wait definit guard predic agf schedul earlier consid pssa depend graph figur definit bagf defin condit tr control depend definit agf defin condit z could defin bagf directli logic condit z tr remov depend definit agf express could schedul cycl control height reduct propos success use reduc height control recurr found loop appli superblock superblock select trace basic block control flow graph contain one path control pathdefin aspect pssa ftrue true agfa hf cmppunuc z f bagf cagf cmppanan z true bagf cagf cmppanac tr true bahf cahf cmppacac z true bahf cahf cmppanac tr true lbagfebagf cmppanan z true lbagfebagf cmppanan tr true lbagfebagf cmppanac w true lbahfebahf cmppacac z true lbahfebahf cmppanan tr true lbahfebahf cmppanac w true ecagfedcagf cmppanan z true ecagfedcagf cmppacac tr true ecagf edcagf cmppanac t true ecahfedcahf cmppacac z true ecahfedcahf cmppacac tr true ecahf edcahf cmppanac t true tt true br lbagf br lbahf figur extend exampl pspec chr optim appli cmpp instruct display ital defin predic use optim therefor statement remov final code allow algorithm effect appli chr predic hyperblock sinc fullpath predic expos origin separ path throughout hyperblock schlansker et al recent expand previou research appli specul prior attempt height reduct specul need remov depend branch condit need combin accomplish reduct howev work specul limit oper would overwrit live regist memori valu specul sinc use renam figur cmpp oper defin bagf cagf shown schedul cycl due depend r pssa allow us appli pspec schedul definit cycl make cmpp avail chr shown figur instruct schedul pspec chr instruct schedul pspec perform describ section sequenti pass instruct control oper cmpp chr perform possibl recal oper figur schedul order given pssa hyperblock like pspec chr compar oper earliest schedul cycl must schedul wait guard predic defin need wait definit guard predic simpli schedul earliest schedul cycl without pspec definit bagf wait definit r pspec wait definit guard predic therefor benefici control height reduc and condit current definit condit defin guard predic schedul definit earlier definit guard predic involv condit and well condit must includ number cmpp statement need defin current oper increas a tag cmpp statement indic requir final definit consid oper z tr t figur control height reduc oper figur sinc schedul cycl base schedul constraint definit ecagf describ combin z true tr valu fals t valu true implement logic use ac an qualifi definit ecagf requir condit z t condit tr evalu true fpp get valu true one requir met fpp set fals compar perform cycl allow multipl link control path defin simultan algorithm chr found figur f cmpp opguard pred defin cmpp opearliest schedul cycl f cmpp opschedulecmpp opearliest schedul cycl f appli control height reduct els f more stmt definingcmpp opguard pred f next defnext defin stmtcmpp opguard pred copyduplicatenext def copyschedulenext defget schedul time copypred onnext defget guard pred copyset definecmpp opget pred defin copyset tag toa cmpp opschedulenext defget schedul time cmpp oppred onnext defget guard pred cmpp opset tag toa figur basic control height reduct algorithm use pspec chr pssatransform code result cycl schedul shown figur note oper shown ital remov postpass oper defin predic never use use predic specul control height reduct togeth pssatransform code allow everi oper schedul earliest schedul cycl result implement algorithm perform pssa chr pspec hyperblock trimaran system version collect profilebas execut weight oper code schedul oper assum onecycl latenc order calcul execut time addit conserv assum load depend prior store along given path store depend prior store well also ensur instruct along path lead branch hyperblock execut prior exit hyperblock figur show normal execut time appli optim sever trimaran benchmark fib mm wc fir wave nbradar a trimaran media benchmark qsort alvinn from percent execut time origin way origin way origin infinit optim way optim infinit figur execut cycl normal number cycl execut origin code produc trimaran issu machin specfp compress from specint li from specint code describ trimaran benchmark certif origin execut time creat default trimaran set except architectur issu rate set execut time estim sum togeth frequenc execut hyperblock multipli number cycl take execut hyperblock assum perfect memori system infinit result restrict number oper issu per cycl way result obtain divid cycl schedul oper ceilingtot oper schedul cycl cycl result normal origin schedul gener trimaran issu machin schedul way optim result show perform appli pssa pspec chr result show use pssa pspec chr result signific reduct execut cycl figur show averag number oper execut per cycl configur examin figur compar two graph way result time mani instruct issu per cycl appli pssa pspec chr result reduct execut time rang sinc pspec chr appli pssa code effect remov restrict control depend optim infinit result provid pictur best case instruct level parallel inspect optim infinit result alvinn compress li show that given current hyperblock format peak ipc somewhat limit renam requir pssa pspec also significantli increas regist pressur trimaran isa playdoh support regist file gener purpos float point branch predic averag instruct per cycl origin way origin infinit optim way optim infinit figur weight averag number oper schedul per cycl hyperblock use pssa predic specul control height reduct note sever optim infinit result greater issu width simul experi averag live regist origin optim fib mm wc fir wave nbradar qsort compress alvinn li figur weight averag regist pressur hyperblock use pssa predic specul control height reduct shown left right benchmark gener purpos file predic file branch file float point file zero util benchmark percent code expans static dynam figur static dynam code expans normal origin code size dynam code expans indic increas work set size support instruct cach figur show averag number live regist origin code optim code use pssa pspec chr averag live regist result weight frequenc hyperblock execut exampl matrix multipli averag live gener purpos regist origin code live gener purpos regist optim though increas util regist file notabl weight averag util mostli still remain within report regist file size gener purpos float point branch predic addit pssa combin aggress pspec chr significantli increas code size static dynam aggress resourc insensit applic chr pspec aim reduc cycl requir schedul cost duplic code special particular path in case pspec duplic code faster comput predic in case chr figur show static dynam code expans pssa pspec chr optim code origin code calcul static code expans compar number static oper optim code number static oper origin code dynam code expans measur similarli except static oper weight number time execut as calcul trimaran profilebas region weight dynam code expans intend captur runtim effect introduc duplic code memori system dynam code expans indic increas work set size support instruct cach relat work predic execut present challeng prospect research address varieti way mahlk et al show predic execut use remov averag execut branch branch mispredict tyson also found similar result correl relationship predic branch predict effort reliev difficulti relat appli compil techniqu predic code mahlk et al defin hyperblock singleentri multipleexit structur help support effect predic compil hyperblock form via select ifconvers techniqu replac branch predic defin instruct success predic execut depend greatli region code select includ predic hyperblock august et al relat pitfal potenti hyperblock format heurist use guid inclus exclus path hyperblock warter et al explor use revers ifconvers expos schedul opportun architectur lack support predic execut well reform hyperblock increas effici predic code challeng dataflow controlflow analysi hyperblock also address sinc hyperblock includ multipl path control one block tradit compil techniqu often conserv ineffici appli them method predicatesensit analysi devis make tradit optim techniqu effect predic code work present and expand upon work extend local predicatesensit analysi present complet path analysi hyperblock pathsensit analysi previous found use tradit dataflow analysi use special path inform accomplish pssa a predicatesensit form ssa enabl predic specul control height reduct hyperblock previous examin presenc singl path control found superblock moon ebcioglu implement select schedul algorithm schedul oper earliest possibl cycl nonpred code work extend predic code allow earliest possibl cycl schedul use predic renam fullpath predic implement pssa ia implement pssa use ia isa would straightforward except predic statement introduc found statement use effici combin path inform order elimin unnecessari code expans instruct explicitli ad ia could implement transfer predic regist file gener regist use move predic instruct ia gener purpos mask instruct would use mask bit correspond sourc predic instruct result zero evalu fals anyth els evalu true ia unlik playdoh isa place limit compar instruct exampl condit includ logic compar statement compar variabl zero specif statement lbagfebagf cmppanan tr true figur would permit implement chr would transform prior express follow statement express ia futur work construct hyperblock schedul specif processor implement resourc limit mandat mani oper perform cycl architectur characterist issu width resourc util number avail predic regist number avail renam regist need consid creat architecturespecif schedul goal hyperblock schedul reduc executionheight take architectur featur consider paper goal show pssa provid effici form renam precis path inform allow oper schedul earliest schedul cycl current examin differ pssa represent reduc code duplic number fullpath predic creat sinc variou control path hyperblock may differ true data depend height may provid advantag specul oper critic path hyperblock pssa could concentr critic path hyperblock reduc code duplic noncrit path may advantag pssa implement oefunct combin differ variabl name instead maintain renam variabl fullpath hyperblock point hyperblock path join copi oper could use return renam definit origin name path definit could restart point would reduc amount duplic requir given oper use correctli renam variabl futur research concentr issu creat effici implement pssa conclus paper extend predic static singl assign first introduc motiv need renam predic analysi extend across path hyperblock demonstr predic static singl assign pssa predicatesensit implement ssa implement renam use fullpath predic use elimin fals depend predic code show benefit use pssa enabl predic specul pspec control height reduct chr schedul predic specul allow oper execut earliest schedul cycl even guard predic determin control height reduct allow guard predic defin soon possibl reduc amount specul need maintain inform origin control path hyperblock pssa provid inform allow precis placement renam specul code allow correct renam valu propag subsequ oper renam use pssa allow aggress specul overwrit live valu longer concern addit pssa support control height reduct along everi control path use fullpath predic reduc control depend depth throughout hyperblock experi show pssa effect tool optim predic code gave extend experi show use pssa pspec chr result reduct execut cycl rang issu machin acknowledg would like thank compil architectur research group hewlett packard univers illinoi impact group new york univers reactilp group provid trimaran specif appreci time patienc rodric rabbah scott mahlk vinod kathail richard johnson answer mani question regard trimaran system addit would like thank scott mahlk provid use comment paper work support part nsf career grant no ccr nation defens scienc engin graduat fellowship research grant intel corpor equip support hewlett packard intel corpor r merc processor ia architectur convers control depend data depend improv dataflow analysi path profil integr predic specul execut impact epic architectur impact epic architectur instruct set refer manual framework balanc control flow predic effici path profil predic static singl assign effici method comput static singl assign form effici comput static singl assign form control depend graph compil cydra global predic analysi applic regist alloc path profil guid partial dead code elim use predic hp make epic disclosur analysi techniqu predic code hpl playdoh architectur specif version multiflow trace schedul compil character impact predic execut branch predict effect compil support predic execut use hyperblock parallel nonnumer code select schedul softwar pipelin predic execut cydra department supercomput critic path reduct scalar program height reduct control recurr ilp processor control cpr branch height reduct optim epic architectur effect predic execut branch predict revers ifconvers high perform compil parallel comput tr ctr fubo zhang erik h dholland use hammock graph structur program ieee transact softwar engin v n p april mihai budiu girish venkataramani tiberiu chelcea seth copen goldstein spatial comput acm sigarch comput architectur new v n decemb