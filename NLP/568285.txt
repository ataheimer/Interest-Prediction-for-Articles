t decid edtl structur equival a show tree pushdown automaton verifi arbitrari nondeterminist construct structur tree t correspond valid deriv given edtl grammar way reduc structur equival problem edtl grammar decid empti tree languag recogn tree pushdown automaton ie empti problem contextfre tree languag thu establish structur equival edtl grammar decid effect result contrast known undecid result etl structur equival b introduct contextfre type grammar g g said structur equival if correspond syntax tree g produc termin word grammar g syntax tree structur vice versa structur syntax tree leaflabel tree obtain remov nontermin label intern node import notion structur equival contextfre grammar due fact decid effect wherea languag equival undecid work support natur scienc engin research council canada grant ogp ogp depart comput inform scienc queen univers kingston ontario kl n canada email ksalomaacsqueensuca z depart comput scienc univers western ontario london ontario na b canada email syucsduwoca structur equival remain decid also parallel contextfre el grammar surprisingli shown parallel deriv control finit set tabl in etl grammar structur equival undecid cannot even decid whether el grammar etl grammar two tabl structur equival show structur equival becom decid tabl grammar restrict homomorph is edtl grammar thu structur equival problem cross borderlin undecid decid restrict tabl grammar homomorph proof use automata theoret method differ consider automata theoret decid proof el structur equival etl strong structur equival el structur tree well etl structur tree augment inform controlsequ use recogn determinist bottomup use tree automaton model equival decid appear possibl edtl structur tree sinc arbitrari choic sequenc tabl make deriv inher nondeterminist reduc edtl structur equival empti problem tree pushdown automata guessarian automata recogn exactli contextfre tree languag empti decid algorithm show that given edtl grammar g g tree pushdown automaton verifi nondeterminist guess structur tree g correspond valid deriv g decid proof reli strongli nondetermin actual algorithm follow proof requir multipl exponenti time seen easili edtl structur equival pspacehard one cannot expect find effici algorithm shown el structur equival hard determinist exponenti time edtl case obtain exponenti time lower bound preliminari assum reader familiar basic formal languag theori briefli recal definit concern parallel contextfre type grammar tree automata inform regard parallel grammar interest reader ask consult regard tree automata refer reader cardin finit set denot a power set a sometim identifi singleton set fag a set posit nonneg integ denot respect set nonempti finit word denot empti word length w jwj let finit set defin map pi set tree domain nonempti finit subset satisfi follow two condit i u d everi prefix u d ii everi u exist rank u ui node u successor alabel tree map domt gamma a domt tree domain node u domt said label tu a node v successor respect immedi successor assum notion height root leaf intern node subtre tree known height denot hgt use convent height onenod tree zero subtre node u tu level node u domt mean distanc u root ie juj clearli maxim level node hgt tree said balanc leaf node level set level k subtre t sub k t k hgt defin note sub k t set tree oppos set occurr subtre thu sub k t contain one copi tree occur subtre defin level k node t also ftg decid proof use topdown tree pushdown automaton model guessarian give brief inform descript model suffici purpos interest reader find formal algebra definit tree pushdown automaton extens finit tree automaton copi finitest control access auxiliari pushdown store automaton begin comput root input tree given initi state q initi symbol pushdown store state q node u label b input tree z topmost stack symbol depend tupl q b z either i chang intern state pop z stack ii chang state push symbol stack iii go immedi successor node u state q send node copi pushdown stack the node u assum rank m automaton accept input tree in nondeterminist reach leav accept state tree languag recogn denot a gener automata employ tree structur stack automaton model describ call restrict tree pushdown automaton restrict gener tree pushdown automata recogn exactli famili contextfre tree languag given contextfre tree languag in term tree pushdown automaton contextfre tree grammar effect construct index grammar gener yield sinc empti decid index grammar follow result proposit decid effect whether tree languag recogn given tree pushdown automaton empti structur equival recal invent notat concern parallel contextfre grammar structur tree deriv etl grammar g tupl v finit alphabet nontermin sigma finit alphabet termin initi nontermin h finit set tabl tabl h h finit set rewrit rule we allow rewrit termin grammar g edtl determinist etl grammar everi tabl h h contain exactli one rule left side a nontermin v thu h morphism v gamma v sigma ha denot right side rule h nontermin left side grammar g el contain one tabl grammar said propag right side product empti word ie h h paper deal mainli structur tree edtl deriv defin structur tree arbitrari etl grammar sinc definit essenti simpler determinist case remaind section g alway etl grammar let fg denot set v sigma tree new symbol use label node correspond empti word defin parallel deriv relat g par union relat par defin follow let obtain follow assum leav m note leaf label termin deriv cannot continu choos rule node u k successor label respect symbol node u one successor label symbol u leaf denot singleton tree node label initi nontermin set syntax tree sg g defin syntax tree sg termin leav label element sigma set termin syntax tree g denot tsg case g edtl grammar rule determin uniqu tabl h call word alphabet h controlsequ given edtl grammar g controlsequ g syntax tree obtain initi nontermin appli sequenc tabl specifi thu g uniqu tree tree exist otherwis g undefin g propag everi syntax tree g path root leaf length ie balanc nonpropag grammar path root leaf label element v sigma length note definit allow rewrit termin symbol ie assum grammar synchron restrict sinc arbitrari edtl grammar easili transform synchron edtl grammar way transform preserv structur equival grammar transform for el grammar explain obtain caten natur lefttoright order leav label leav t yield syntax tree defin morphism defin set e a e syntax tree t yieldt sententi form gener g deriv correspond t languag lg gener g consist termin word gener g ie clearli definit equival standard definit languag gener edtl grammar structur syntax tree sg strt tree obtain relabel intern node oe oe new symbol v sigma denot element stsg call termin structur tree g g known sometim speak simpli sigmastructur tree sinc leav label element sigma note rule g determin maxim number immedi successor node structur tree g thu cours alphabet sigma determin set sigmastructur tree grammar g g said languag equival lg well known languag equival undecid alreadi contextfre grammar shall consid follow two restrict notion equival let g g etl grammar grammar g g ffl structur equival stsg ffl syntax equival equal modulo renam nontermin note syntax equival impli structur equival structur equival grammar turn alway languag equival syntax equival incompar notion strong structur equival etl grammar syntax structur equival decid contextfre el grammar we formal defin notion sequenti contextfre grammar here definit analog parallel case syntax equival strong structur equival decid also etl grammar etl structur equival undecid consid structur equival problem determinist etl grammar main result show edtl structur equival decid effect first introduc notat concern width tree intuit structur tree said width distinct subtre level definit set sigmastructur tree said subtreewidth in if distinct subtre level k ie definit note sub k t j set sigma foeglabel tree ie element consist occurr subtre j note also subtreewidth need minim number distinct subtre given level ie width code structur arbitrari deriv edtl grammar g string use string encod stack tree pushdown automaton verifi one comput controlsequ anoth grammar g gener structur tree construct reli essenti fact failur edtl deriv respect given control sequenc check follow one nondeterminist chosen path tree lemma let edtl grammar exist that everi controlsequ h structur tree strg width proof sinc tabl h homomorph follow alway node domg length label nontermin gu choos strg width structur tree constant subtreewidth code string ith symbol left code inform level subtre direct descend level node ith symbol also code order occurr level subtre number distinct level subtre bound constant and furthermor need consid constant number level node correspond pairwis differ subtre defin describ code structur tree subtreewidth prove regular properti code in lemma propag edtl grammar onli restrict propag grammar done avoid unnecessarili complic notat afterward explain result straightforwardli extend grammar allow eras product definit let propag edtl grammar let defin setomegagamma m consist tupl map j everi element occur tupl j set final f m defin consist tupl map note sigma j set order jtupl element sigma and set string length j sequenc w omegagamma m said wellform consid stupl structur tree denot structur tree level one subtre left right thi standard algebra notat tree allow symbol oe variabl ariti correspond wellform sequenc w defin induct tupl sigmastructur tree xiw say wellform sequenc w repres xiw first final repres tupl structur tree induct definit denot w suffix w obtain delet first symbol assum note sinc w wellform denot exampl let tree given figur choos c c c c c c c c b b b b oe oe oe oe oe oe oe figur follow lemma prove use induct maxim height tree lemma let fix let set sigmastructur tree subtreewidth max im exist wellform sequenc w omegagamma m furthermor i cardin set level word w omegagamma m omega f m said simpl first symbol w form m w simpl wellform xiw onetupl t sigmastructur tree and practic identifi xiw t immedi consequ lemma have corollari everi sigmastructur tree subtreewidth exist simpl wellform sequenc w omegagamma m omega f m xiw t follow lemma state given simpl wellform sequenc w omegagamma m omega f m controlsequ edtl grammar g finit automaton determin whether lemma let propag edtl grammar in let alphabet andomega f m definit denot l set word omega f m simpl wellform denot map pi simpli pi claim l regular languag proof condit i easili verifi finit automaton henc suffici show given satisfi i finit automaton verifi whether ii hold note i hold xipi necessarili defin may denot order tupl tree set state initi state fs g assum state u read input symbol goe reject state rej construct follow possibl condit i hold assum goe accept state acc also goe accept state acc x u read rest input verifi i hold remain possibl x u form s case read symbol goe state z set z construct follow x u follow add element set z j set z nonempti satisfi condit intuit u consist element v deriv g follow morphism read far second compon input reach node correspond ith subtre repres thi say kth level xipi thu condit hold deriv reach level k node u xipi symbol v number immedi successor u equal jhaj condit contain termin symbol thu deriv use next tabl h cannot structur xipi condit ii hold case condit hold correspond situat parallel deriv step determin h level k immedi violat structur tree set z construct consist respect nontermin appear subtre repres follow level remain defin oper reach final symbol m h state u follow idea done accept exactli deriv step h produc leaf repres b sigma wrong termin symbol or nontermin possibl correspond situat i hold need consid possibl deriv step h produc correct termin symbol leav mean ii hold reject hand enter accept state x u lemma formul prove propag grammar onli howev exactli proof work also gener edtl grammar possibl eras product add one subtre repres level structur tree modifi definit symbol m as partial function i undefin repres node immedi successor or case i defin new symbol belong g proof lemma simpli modifi divid condit case depend whether i defin not thu prove follow lemma statement lemma hold without assumpt g propag show tree pushdown automaton singl comput verifi whether possibl deriv given edtl grammar violat given structur tree constant width lemma let g edtl grammar let constant guarante g lemma effect construct tree pushdown automaton exist width proof denot k tree pushdown automaton receiv input tree intern node exactli k immedi successor intern node label symbol set stack symbol omegagamma m assum automaton accept balanc kari input tree begin comput nondeterminist push stack word ff the top stack left intuit stack content guess omega f m simpl wellform satisfi follow properti denot corollari exist w satisfi read input symbol alway pop topmost stack symbol remain stack content forward k successor node initi nondeterminist guess push symbol stack state consist two compon oper parallel first compon verifi condit hold proof lemma see done use finitest memori first compon oper ident path input tree is ignor input symbol treat initi stack content input path leaf input second compon verifi proof lemma follow possibl use finitest control a second compon ignor second compon h stack symbol henc differ path input verifi xiw structur syntax tree controlsequ length verifi xiw stsg hand branch comput consum entir stack accept input tree necessarili balanc thu accept input tree exist tree hold subtreewidth note proof lemma essenti guess instanc stsg pushdown stack string encod although gener tree pushdown automaton model allow fact tree also stack shown tree pushdown automaton cannot nondeterminist push balanc tree arbitrari height stack one could directli store arbitrari stsg tree stack begin comput furthermor simul deriv g given differ controlsequ directli tree would follow problem path lead failur deriv g t may branch earlier correspond controlsequ branch input tree specif tree pushdown automaton find controlsequ g least one path lead failur controlsequ correspond differ path input is gener possibl two controlsequ long common prefix wherea correspond path branch alreadi root t situat like caus problem string encod xiw pushdown stack simul path input distinct subderiv g within structur t combin lemma proposit prove follow result note constant lemma independ controlsequ chosen theorem given edtl grammar g g decid effect whether exactli proof lemma given edtl grammar g g nonempti reduc decid whether tree pushdown automaton recogn nonempti tree languag sinc number nontermin g g finit new proof decid syntax equival result follow also theorem syntax equival decid edtl grammar discuss open problem decid result syntax equival structur equival strong structur equival edtl grammar summar tabl tabl stand decid u undecid decid strong structur equival etl grammar prove el grammar notion coincid structur equival languag equival natur undecid case note el edtl languag famili incompar syntax equiv structur equiv strong struct equiv el edtl etl u tabl decid syntax strong structur equival proof theorem give multipl exponenti time algorithm edtl structur equival know exact complex problem determinist exponenti time hard result obtain el structur equival cannot use least directli prove similar lower bound complex edtl structur equiva lenc hand cannot expect obtain effici algorithm edtl case sinc known alreadi structur equival problem linear grammar pspacecomplet structur equival linear grammar easili logspac reduc edtl structur equival note sententi form one nontermin or constant number occurr nontermin edtl grammar simul contextfre deriv simpli differ tabl rule intuit decid proof previou section reli follow two properti edtl deriv i current nontermin remain controlsequ determin uniqu subderiv ii controlsequ gener structur tree one level time properti enabl us produc string encod w structur tree failur possibl controlsequ produc structur verifi finit automaton read w controlsequ parallel necess condit i ii illustr consid indian parallel grammar ip grammar contextfre grammar deriv relat defin deriv step one rewrit occurr one nondeterminist chosen nontermin b given sententi form use rule left side b nontermin rewritten formal definit reader may consult well known languag gener ip grammar strictli includ edtl languag sequenc rule use deriv ip grammar view control sequenc ip grammar clearli properti i howev differ sequenc rule gener distinct part given structur tree complet differ order analog condit ii seem hold ip grammar thu spite fact edtl grammar strictli power ip grammar term famili gener languag appear possibl use proof method previou section decid structur equival problem ip grammar conjectur ip structur equival decid elip grammar structur equival shown decid exactli proof theorem elip grammar combin indian parallel el rewrit mechan deriv step occurr everi nontermin rewritten use rule russian parallel rp grammar extend ip grammar allow also sequenti contextfre deriv step decid rp structur equival problem remain open r extens contextfre case regul rewrit formal languag theori io oi grammar macrolik product tree automata akademiai kiado in handbook formal languag system sci pushdown tree automata strong equival etl grammar studi parallel rewrit system character parenthesi languag grammar global product in russian normal form structur equival el grammar defin famili tree el grammar simplif el grammar classif indian parallel languag map grammar tree mathemat theori l system academ press determinist tree pushdown automata monad tree rewrit system complex el structur equival decid structur equival el grammar parallel contextfre languag parallel contextfre languag decomposit theorem variou kind languag parallel natur theori comput john wiley tr determinist tree pushdown automata monad tree rewrit system classif indian parallel languag decid structur equival eol grammar defin famili tree el grammar tree languag parenthesi grammar theori comput regul rewrit formal languag theori mathemat theori l system structur equival etl grammar extend abstract