t optimist distribut simul base transit depend track a tradit optimist distribut simul protocol logic process lp receiv straggler roll back send antimessag receiv antimessag may also roll back send antimessag singl straggler may result larg number antimessag multipl rollback lp author protocol lp receiv straggler broadcast rollback receiv announc lp may roll back announc rollback lp roll back respons straggler antimessag use elimin need output queue result simpl memori manag also elimin problem cascad rollback echo result faster simul achiev scheme maintain transit depend inform cost incur includ tag messag extra depend inform increas process time upon receiv messag also present similar two area distribut simul distribut recoveri show solut one area appli area b introduct modifi time warp algorithm quickli stop spread erron comput scheme requir output queue antimessag result less memori overhead simpl memori manag algorithm also elimin problem cascad rollback echo result faster simul use aggress cancel protocol adapt similar protocol problem distribut recoveri support part nsf grant ccr ec trw faculti assistantship award gener motor fellowship ibm grant illustr main concept behind scheme help figur figur horizont arrow show direct simul time messag shown interprocess direct arrow circl repres state state transit caus act messag associ incom arrow exampl state transit p happen p act m time warp scheme logic process lp p receiv straggler ie messag schedul event back state send antimessag correspond messag m receiv antimessag p roll back state send antimessag correspond m act next messag messag queue happen m receiv antimessag m p roll back send antimessag m receiv antimessag p roll back s scheme transit depend inform maintain state messag roll back due straggler p broadcast roll back receiv announc ment p roll back find transit depend s p also find transit depend discard it similarli p roll back receiv broadcast see p abl discard faster compar previou scheme even p would like receiv broadcast faster receiv antimessag sent p roll back s therefor simul proceed faster explain later use incarn number distinguish two state timestamp one commit roll back need lp receiv straggler broadcast timestamp straggler everi lp determin whether need roll back compar local depend inform broadcast timestamp lp roll back respons rollback announc send announc antimessag henc roll back respons strag gler problem multipl rollback avoid sever scheme propos minim figur distribut simul spread erron comput survey scheme found filter protocol prakash subramanian close relat work maintain list assumpt messag describ class straggler event could caus messag cancel maintain one assumpt per channel wherea protocol view maintain one assumpt per lp worst case filter tag messag on integ wherea protocol tag on integ n number lp sy tem sinc applic even ontag may accept also describ techniqu reduc overhead subset lp interact mostli other then time tag size messag bound size subset paper organ follow section describ basic model simul section introduc happen relat state simul vector serv basi optimist simul protocol section describ protocol give correct proof section present optim techniqu reduc overhead protocol section compar distribut simul distribut recoveri model simul consid eventdriven optimist simul execut lp consist sequenc state state transit caus execut event multipl event schedul time execut event arbitrari order addit caus state transi tion execut event may also schedul new event lp or local lp send messag lp p act messag p p becom depend p depend relat transit arriv straggler caus lp roll back state roll back transit depend roll back state call orphan state messag sent orphan state call orphan messag correct simul orphan state must roll back orphan messag must discard exampl distribut simul shown figur number shown parenthes either virtual time state virtual time schedul event carri messag solid line indic use comput dash line indic roll back comput figur a schedul event p time send messag m p optimist execut event result state transit s schedul event p time send messag m receiv messag schedul event time detect straggler execut arriv straggler shown figur b p roll back restor s take action need maintain correct simul to describ later restart state r broadcast rollback announc shown dot arrow act m act m upon receiv rollback announc p p realiz depend roll back state also roll back restor state s take action need restart state r final orphan messag discard p depend track on ij refer lp number k refer incarn refer state p refer logic process refer number associ lp belong is refer messag e refer event happen relat lamport defin happen befor relat event rollbackfre distribut comput take rollback account extend relat defin state two state u u transit closur relat defin follow three condit immedi preced u state restor rollback u state p up taken a b figur use simul vector distribut simul a prestraggl comput b poststraggl comput action need maintain correct simul despit rollback exampl figur sender messag u re ceiver state event schedul execut exampl figur a s figur b r say happen u equival say u transit depend s protocol action need maintain correct simul includ broadcast rollback announc increment incarn number protocol action may dif ferent exampl time warp action includ send antimessag definit happen independ action term rollback announc token use interchang token contribut happen relat u receiv token s u becom transit depend due token simul vector vector clock vector size n n number process system vector entri timestamp usual count number send receiv event process context distribut simul modifi extend notion vector clock defin simul vector sv follow maintain depend presenc rollback extend entri contain timestamp incarn number timestamp th entri sv correspond virtual time p timestamp j th entri correspond virtual time latest state p j p depend incarn number th entri equal number time p roll back incarn number j th entri equal highest incarn number p j p depend let entri en tupl incarn v timestamp t defin lexicograph order entri follow en simul vector use maintain transit depend inform suppos p schedul event e p j time send messag m p attach current sv m virtual time m mean schedul time event e neither orphan straggler kept incom queue p j event correspond execut p j updat sv ms sv take componentwis lexicograph maximum virtual time denot j th timestamp sv virtual time m formal descript sv protocol given figur exampl sv shown figur sv state shown box near it sv properti similar vector clock use detect transit depend state follow theorem show relationship virtual time sv theorem timestamp th entri p s sv correspond virtual time p incarn timestamp var sv array n entri time execut send mdata mt msv execut messag mdata mt msv event schedul figur formal descript simul vector protocol proof induct claim true initi state p execut messag virtual time p correctli set rollback virtual time restor state remain unchang let ssv denot sv p sp state s defin order two sv c follow p s sv j th timestamp denot maximum virtual time p j p depend timestamp greater p s virtual time lemma formal notion lemma timestamp th entri sv state p highest valu among timestamp sv proof induct lemma true initi state p assum state p j sent messag p state u p execut m result state w induct hypothesi ssvjt usvit highest timestamp sv maximum two timestamp greater timestamp wsv max oper execut messag mt virtual time messag m less virtual time state send messag also less virtual time state u act messag otherwis would caus rollback theorem mt less maximum ssvjt usvit henc set wsvit mt preserv properti routin chang timestamp follow two lemma give relationship sv happen relat happen u ssv less equal usv proof induct consid two state u happen u appli one three rule definit happen befor case rule state chang state u act messag m updat sv take maximum routin execut messag maintain properti consid next action usvupt set mt sinc virtual time cannot less virtual time state execut it oper also maintain properti case rule routin rollback updat sv increment incarn number preserv properti case rule similar rule let state w chang state u act messag sent state s lemma ms sv sp th timestamp less up th timestamp also virtual time less sp th timestamp sv henc set th timestamp virtual time m take max preserv properti follow lemma show lp acquir timestamp becom depend lp properti later use detect orphan lemma state j th timestamp state ws sv minu one an imposs virtual time w must depend state u p j virtual time u wsvjt proof induct initi trivial satisfi properti execut messag let x state send let state chang state w act m induct hypothesi x satisfi lemma take maximum let j th entri x se lect j xp x play role u els induct hypothesi xsvjt henc either wsvjt transit u happen w argument also appli case th entri come s case rollback let state restor let w state result take action need correct simul induct hypothesi satisfi lemma ssv wsv differ wp th entri state happen also happen w henc w satisfi lemma simul vector set entri incarn end tabl announc receiv els mt svit straggler receiv broadcast roll back block till lp acknowledg broadcast execut messag messag lowest valu mt act event schedul receiv tokenv t rollbackj v save iet restor latest state discard state follow restor save iet sviinc figur protocol distribut simul protocol protocol distribut simul shown figur keep present correct proof clear optim techniqu reduc overhead includ protocol describ next section besid simul vector lp p also maintain incarn end tabl iet j th compon iet set entri form k ts ts timestamp straggler caus rollback k th incarn p j state k th incarn p j timestamp greater ts roll back iet allow lp detect orphan messag p readi next event act messag lowest virtual time explain section p updat sv intern state possibl schedul event lp send messag upon receiv messag m p orphan case when j p s iet j th entri ms sv indic depend roll back state p j p detect straggler virtual time t broadcast token contain current incarn number k roll back state virtual time greater increment incarn number shown rollback thu token basic indic state incarn k virtual time greater orphan state depend orphan state also orphan lp receiv token contain virtual time p j roll back state j th timestamp greater t discard orphan messag input queue increment incarn number broadcast token import properti protocol work transit depend maintain suppos state w p depend roll back state u p j state x depend w must also depend u x detect orphan state token p j arriv p xp without need addit token p argument detect orphan messag similar requir lp block execut broadcast token receiv acknowledg lp ensur token lower incarn p j reach lp becom depend higher incarn greatli simplifi design becaus depend entri overwritten entri higher incarn lexicograph maximum oper guarante futur rollback occur due overwritten entri as correspond token must arriv block lp acknowledg receiv broadcast proof correct suppos state u p j roll back due arriv straggler simul correct state depend u also roll back follow theorem prove protocol correctli implement simul theorem state roll back due either straggler token state roll back due token depend state roll back due straggler proof routin rollback call two place receiv messag receiv token state roll back call receiv messag roll back due straggler suppos p j receiv strag gler let u one state p j roll back due straggler call routin receiv token state w satisfi condit c roll back sinc virtual time u greater virtual time straggler lemma state w depend u satisfi condit c futur state becom depend u messag caus depend discard arriv token discard first test routin receiv messag arriv token discard first test routin receiv token orphan state roll back lemma state w satisfi condit c thu roll back exist state u roll back due straggler u w mean state unnecessarili roll back reduc overhead system larg number lp overhead sv delay due block substanti section describ sever optim techniqu reduc overhead block reduc block simplic protocol descript figur increment incarn number upon rollback due token although broadcast anoth token next argu protocol work even incarn number increment modif allow optim reduc block use exampl figur b illustr modif suppos p execut event make state transit r virtual time not shown figur p increment incarn number roll back due token p rd entri sv ss rd entri figur a suppos rd entri state w anoth lp p p decid whether w depend roll back roll back answer that w depend s also depend s therefor orphan statu identifi nd entri without reli rd entri modif ensur that everi new incarn token broadcast everi lp iet entri it allow follow optim techniqu reduc block suppos receiv straggler broadcast token instead requir p block receiv acknowl edgement allow p continu execut new incarn one problem need solv depend new incarn may reach lp p j through chain messag correspond token doe p j depend entri roll back state old incarn identifi orphan token arriv overwrit old entri new entri via lexicograph maximum oper result undetect orphan henc incorrect simul solut forc p j block token acquir depend new incarn conjectur block token receiv side would improv origin block token sender side number lp and henc acknowledg larg reduc size simul vector global virtual timegvt virtual time given point simul state virtual time less gvt ever roll back minimum virtual time lp messag transit given instant sever algorithm develop comput gvt reduc size simul vector entri timestamp less gvt set null null entri need transmit messag affect correct simul becaus virtual time messag must greater equal gvt timestamp less gvt never use detect straggler virtual time contain token must greater equal gvt timestamp less gvt never use detect orphan sinc sv entri initi see figur must less gvt optim allow simul start small vector particularli effect high local messag activ follow also use koptimist pro tocol scheme lp allow act messag result k nonnul entri sv otherwis block ensur lp roll back k lp sens optimist protocol n optimist pessimist protocol optimist anoth approach reduc size simul vector divid lp cluster sever design possibl interact insid cluster optimist interclust messag sent conserv independ sv use insid cluster involv lp clu ter intraclust execut sequenti interclust execut optimist sv use interclust messag one entri per cluster similarli one devis scheme interclust intraclust execut optimist employ differ simul vector gener hierarchi cluster simul vector gener howev interclust simul vector introduc fals depend may result unnecessari rollback tradeoff size simul vector unnecessari rollback affect correct simul distribut simul distribut recoveri problem failur recoveri distribut system similar problem distribut simul upon failur process typic restor last checkpoint start execut there howev process state lost upon failur may creat orphan caus system state becom inconsist consist system state one send messag must record receiv record pessimist log everi messag log receiv act it process fail restor last checkpoint replay log messag origin or der ensur prefailur state recreat process need roll back synchron messag log messag process reduc speed comput optimist log messag store volatil memori buffer log asynchron stabl storag sinc content volatil memori lost upon failur messag longer avail replay failur thu process state lost failur state process depend lost state becom orphan state optimist log protocol must roll back orphan state order bring system back consist state mani parallel issu distribut recoveri distribut simul survey differ approach distribut recoveri found tabl list equival term two domain refer omit term wide use equival exact mani case approxim case straggler trigger rollback distribut simula tion failur trigger rollback distribut re coveri conserv simul ensur current state never need roll back similarli pessimist log ensur current state alway recover failur word although rollback occur roll back state alway reconstruct time warp optimist approach inspir semin work optimist messag log optimist protocol present paper base optimist recoveri protocol present simul scheme dicken reynold result optimist process event sent process becom definit recoveri scheme jalot messag origin unstabl state interv sent process interv becom stabl scheme confin loss comput either due straggler failur local process distribut simul distribut recoveri logic process recoveri unit virtual time state interv index sim vector thi paper tran dep vector straggler failur antimessag rollback announc fossil collect garbag collect global virtual time global recoveri line conserv scheme pessimist scheme optimist scheme optimist scheme causal error orphan detect cascad rollback domino effect echo livelock condit event unstabl state event stabl state tabl parallel term distribut simul recoveri conserv optimist simul combin divid lp cluster differ scheme interclust intraclust execut distribut recoveri paper lowri et al describ idea similar conserv time window simul literatur list main differ two area arriv straggler prevent occurr failur cannot pessimist log cancel effect failur messag log replay arriv straggler optimist simul caus loss inform occurr failur optimist log caus volatil messag log lost recoveri protocol deal lost intransit messag problem present distribut simul protocol incom messag differ channel process arbitrari order event messag distribut simul must execut order increas timestamp due differ protocol present one area may applic area distribut recoveri potenti benefit advanc distribut simul area memori manag analyt model determin checkpoint frequenc checkpoint mechan time constrain system simi larli research work coordin checkpoint optim checkpoint garbag collect depend track potenti appli distribut simul r cluster time warp logic simul global virtual time algorithm condit event approach distribut simul recov effici asynchron optim fail survey rollbackrecoveri protocol messagepass system parallel discret event simul compar analysi period state save techniqu time warp simul time warp simul time constrain system virtual time fault toler process memori manag algorithm optimist parallel simul optimist failur recoveri larg network virtual time global state distribut system effici optimist distribut simul scheme base condit knowledg local time warp approach parallel simul optimist recoveri distribut system algorithm minim latent global virtual time distribut recoveri koptimist log automat increment state save tr optimist recoveri distribut system virtual time rollback sometim worksif filter parallel discret event simul algorithm minim latent global virtual time local time warp approach parallel simul time warp simul time constrain system compar analysi period state save techniqu time warp simul time warp logic simul automat increment state save time clock order event distribut system recov effici asynchron optim fail distribut recoveri koptimist log ctr reuben pasquini vernon rego optimist parallel simul network workstat proceed st confer winter simul simulationa bridg futur p decemb phoenix arizona unit state om p damani vijay k garg faulttoler distribut simul acm sigsim simul digest v n p juli