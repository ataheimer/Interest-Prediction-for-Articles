t recurs formul choleski factor matrix pack storag a new compact way store symmetr triangular matrix call rpf recurs pack format fulli describ novel way transform rpf standard pack format includ new algorithm call rpc recurs pack choleski oper rpg format present algorithm rpc basd level bla requir variant algorithm trsm syrk work rpf call rp_trsm rp_syrk find work call gemm follow execut time rpc lie gemm advantag storag scheme compar tradit pack full storag demonstr first rpc storag format use minim amount storag symmetr triangular matrix second rpc give level implement choleski factor wherea standard pack implement level henc perform rpc implement decidedli superior third unlik fix block size algorithm rpc requir block size tune paramet present perform measur sever current architectur demonstr improv tradit pack routin also msp parallel comput ibm smp comput made graph attach section show rpc algorithm superior factor order around order around tradit pack algorithm architectur rpc perform result almost even better tradit fullstorag algorithm result b introduct import class linear algebra problem coefcient matrix symmetr posit denit symmetri necessari store either upper lower triangular part matrix lower triangular caseb upper triangular caseb figur map matrix lapack choleski algorithm use full storag lda fortran lower triangular caseb upper triangular caseb figur map matrix lapack choleski algorithm use pack storag lapack potrf pptrf subroutin lapack librari oer two dierent kind subroutin solv problem instanc potrf pptrf factor symmetr posit four name spotrf dpotrf cpotrf zpotrf use lapack real symmetr complex hermitian matric rst charact indic precis arithmet version singl precis doubl precis c complex z doubl complex lapack use one name la potrf version potrf andor pptrf express paper precis arithmet languag version po andor pp matrix factor algorithm denit matric mean choleski algorithm dierenc way triangular matrix store see gure potrf case matrix store one lower left upper right triangl full squar matrix page triangl wast see gure uniform storag scheme block level bla subroutin employ result high speed solut pptrf case matrix kept pack storag page mean column lower upper triangl store consecut one dimension array see gure triangular matrix occupi strictli necessari storag space nonuniform storag scheme mean use full storag bla imposs level bla pack subroutin employ result low speed solut summar choic high speed wast memori versu low speed wast memori new way store real symmetr complex hermitian and either case posit denit matric togeth new recurs formul linear algebra subroutin propos new way store lower upper triangular matrix solv dilemma word obtain speed potrf amount memori use pptrf new storag scheme name rpf recurs pack formatse gure explain below benet recurs formul choleski factor lu decomposit describ work gustavson toledo symmetr posit denit matrix choleski case kept full matrix storag emphasi work better data local thu better util comput memori hierarchi recurs formul oer howev recurs pack formul also properti provid short introduct comput memori hierarchi basic linear algebra subprogram bla describ recurs pack choleski rpc recurs pack format rpf rational behind introduc new recurs algorithm rpc new recurs data format rpf comput sever level memori ow data memori comput unit import factor govern perform engin scientic comput object keep function unit run peak capac use memori hierarchi fortran column major c row major system see gure high perform achiev use local refer within program present context call block regist cach level cach level cach level share memori distribut memori secondari storag secondari storag faster smaller expens slower larger cheaper figur comput memori hierarchi top hierarchi central process unit cpu commun directli regist number regist usual small level cach directli connect regist comput run almost peak perform abl deliv data level cach way cpu perman busi sever book describ problem associ comput memori hier archi literatur adequ numer linear algebra specialist memori near cpu regist cach faster access cpu memori away fast memori expens one reason small regist set tini cach memori much larger set regist howev l cach still larg enough solv scientic problem even subproblem like matrix factor cach order matrix larg special set basic linear algebra subprogram bla develop address comput memori hierarchi problem area numer linear algebra bla document bla well summar explain numer linear algebra specialist three level bla level bla show vector vector opera tion level bla show vector matrix andor matrix vector oper level bla show matrix matrix oper choleski factor one make follow three observ respect bla level implement use full storag format run fast level implement use pack storag format rare exist level implement previous use howev great program cost convent level implement use pack storag format run larg problem size consider slower full storag implement transform convent pack storag rpf use rpc algorithm produc level implement use amount storag pack storag overview paper section describ new pack storag data format data transform convent pack storag section describ convent lower upper triangular pack storag section discuss transform place either lower upper trapezoid pack data format recurs pack data format vice versa section describ possibl transpos matrix reorder pack recurs pack format vice versa final section recurs aspect data transform describ four subsect describ place transform pictori via sever gure section recurs trsm syrk work rpf describ routin almost requir oat point oper call level bla gemm final section rpc algorithm describ term use recurs algorithm section section three algorithm describ pictori via sever gure note rpc algorithm use one level bla subroutin name gemm usual gemm routin special highli tune done comput manufactur not atla gemm use section explain rpc algorithm numer stabl section describ perform graph pack storag lapack algorithm recurs pack algorithm sever comput typic comput like compacq hp ibm sp ibm smp intel pen tium sgi sun consid gure result show recurs pack choleski factor rp pptrf solut rp pptr time faster tradit pack sub routin three graph one demonstr success use openmp parallel direct gure second graph show recurs data format also eectiv complex arithmet g ure third one show perform three algorithm factor potrf pptrf rp pptrf solut potr pptr rp pptr gure section discuss import develop paper recurs pack storag new way store triangular matric pack storag call recurs pack present storag scheme right way explain it describ convers pack recurs pack storag vice versa see gure lower triangular caseb upper triangular caseb figur map matrix choleski algorithm use recurs pack storag recurs block divis illustr lower upper triangular pack storag symmetr complex hermitian triangular matric may store pack storag form see lapack user guid ibm essl librari manual page gure column triangl store sequenti one dimension array start rst column map posit full storag pack storag triangular matrix size is ij ap ij m j lthe advantag storag save almost half memori compar full storag upper triangular lower triangular store least m formula function lda lead dimens fortran save fortran reorder lower upper trapezoid pack storag pack storag memori map buer pp word recurs pack storag memori map figur reorder lower pack matrix first last p column lead triangl copi buer then place column accentu rectangl assembl bottom space trapezoid last buer copi back top trapezoid assum matric store column major order concept paper fulli applic also matric store row major order intermedi step transform pack triangular matrix recurs pack matrix matrix divid two part along column thu divid matrix trapezoid triangular part shown g triangular part remain pack form trapezoid part reorder consist triangl pack form rectangl full storag form reorder demand buer size triangl minu longest column reorder lower case g take follow step first column triangular part trapezoid move buer note rst column correct place column rectangular part trapezoid move consecut locat nalli buer copi back correct locat reorder array p gure chosen bmc rectangular submatrix squar deviat squar singl column buer size pp address lead pack storag pack storag memori map buer m pm p word recurs pack storag memori map figur reorder upper pack matrix first rst column trail triangl copi buer then place column accentu rectangl assembl top space trapezoid last buer copi back bottom trapezoid ing triangl rectangular submatrix trail triangl given by reorder lead trail triangl lower upper pack storag scheme origin triangular matrix reorder implement subroutin subroutin tpz trm p ap subroutin tr tpz m p ap tpz tr mean reorder trapezoid part pack format triangularrectangular format describ tr tpz opposit reorder transposit rectangular part rectangular part reorder matrix kept full matrix storag desir oer excel opportun transpos matrix transform recurs pack format rectangular submatrix squar transposit done complet inplac deviat squar column buer size column necessari transposit purpos reus buer use reorder recurs applic reorder method reorder appli recurs lead trail triangl still pack storag nalli origin triangular pack matrix divid rectangular submatric decreas size full storag implement complet transform pack recurs pack format p rp compar gure recurs subroutin p rpmap m call tpz trm p ap call p rpp ap call p rpm invers transform recurs pack pack rp p is recurs subroutin rp pmap m call rp pp ap call tr tpz m p ap call rp pm exampl shown concern lower triangular matrix upper triangular transform transform transposit follow pattern gure illustr recurs divis small lower upper triangular matric figur lower upper triangular matric recurs pack storag data format rectangular submatric shown gure kept full storag column major order array contain whole matric recurs formul choleski algorithm necessari bla two bla oper triangular solver multipl right hand side trsm rank k updat symmetr matrix syrk need recurs choleski factor solut rp pptrf rp pptr section rp trsm rp syrk rp pptrf rp pptr formul recurs use recurs pack operand explain trsm syrk pptrf pptr oper variou case depend operand order operand follow consid singl specic case deduct case follow guidelin comput work recurs bla routin rp trsm rp syrk and also rp trmm done non recurs matrixmatrix multipli routin gemm attract properti sinc gemm usual highli optim current comput architectur gemm oper well document explain speed comput depend much speed good gemm good gemm implement usual develop comput manufactur model implement gemm obtain name trsm syrk herk gemm see footnot potrf page prex rp indic subroutin belong recurs pack librari exampl rp pptrf recurs pack choleski factor routin netlib work correctli slowli innov comput laboratori univers tennesse knoxvil develop automat system call usual produc fast gemm subroutin anoth automat code gener scheme gemm develop berkeley essl see gemm bla produc via block high perform kernel routin exampl essl produc singl kernel routin datb function atla chip gemm kernel principl underli product kernel similar major dierenc essl gemm code written hand wherea atla gemm code parametr run paramet set best paramet set found particular machin recurs trsm base nonrecurs gemm fig show split trsm operand oper consist three suboper base split algorithm program follow recurs subroutin rp trsm m n n els call rp trsm m call gemm n call rp trsm m n recurs syrk base nonrecurs gemm fig show split syrk operand oper consist three suboper figur recurs split matric rp trsm oper case sideright uplolow transatranspos base split algorithm program follow recurs subroutin rp syrk m n m els call rp syrk p n call gemm n call rp syrk m recurs pptrf pptr base recurs trsm recurs syrk fig show split pptrf operand oper consist four suboper mp c mp bc mp mp figur recurs split matric rp syrk oper case uplolow transno transpos rp pptrf base split algorithm program follow recurs subroutin rp pptrf m ap m els call rp pptrf p ap call rp trsm m call rp syrk m call rp pptrf m solut subroutin rp pptr perform consecut triangular solut transpos nontranspos choleski factor routin explicitli recurs call recurs rp trsm twice stabil recurs algorithm paper show recurs choleski factor algorithm equival tradit algorithm book whole theap mp mp mp mp figur recurs split matrix rp pptrf oper case uplolow ori tradit choleski factor bla trsm syrk algorithm carri recurs choleski factor bla trsm syrk algorithm describ section error analysi stabil algorithm well describ book nichola j higham dierenc lapack algorithm po pp rp inner product accumul case dierent order use mathemat equival and stabil analysi show summat order stabl perform result sun ultrasparc ii mhz sgi r mhz compaq alpha ev mhz hp pa mhz intel pentium iii mhz tabl comput name new recurs pack bla rp trsm rp syrk new recurs pack choleski factor solut rp pptrf rp pptr routin compar tradit lapack subroutin concern result perform comparison made seven full pack recurs pack dierent architectur list tabl result graph attach appendix paper doubl precis arithmet fortran use case ibmppc essl lesslsmp ibmpw essl lesslp sun sun perform librari lsunperf sgi standard execut environ lbla compaq dxml v ldxmp ev hp hpux pa bla librari lbla intel atla tabl comput librari version follow procedur use carri perform test machin recurs tradit routin compil compil compil ag call vendor optim otherwis optim bla librari bla librari version seen tabl compar recurs tradit routin receiv input produc output time measur time spent reorder matrix recurs pack format includ run time rp pptrf rp pptr tradit routin data transform cost cpu time measur time function etim except powerpc machin way smp machin run time measur wall clock time mean special ibm util function call rtc except oper system program run test run machin time made sequenc matrix size rang step case hp intel machin matrix size start start resolut etim util coars number right hand side taken nrh n due memori limit actual hp machin test seri could rang oper count choleski factor solut howev necessari perform transform rp pptrf transform rp pptr get correct result n number equat nrh number right hand side count use convert run time flop rate ten gure gure show perform graph comparison new rpc algorithm tradit lapack algorithm rpc algorithm use rpf data format comparison mention cost transform pack format rpf rpf pack format includ recurs pack factor solv routin subroutin dpptrf zpptrf dpptr zpptr use pack data format dpotrf dpotr use full data format figur compar three algorithm rpc lapack full storag lapack pack storag everi gure two subgur one caption upper subgur show comparison curv choleski factor lower subgur show comparison curv forward backward substitut caption describ detail perform gure rst seven gure describ comparison perform sever dierent comput ibm smp powerpc figur show perform ibm way powerpc e mhz comput lapack routin dpptrf the upper subgur perform mflop perform u graph littl better l graph perform remain constant order matrix increas perform rpc factor routin increas n increas u graph increas mflop almost mflop l graph mflop mflop u graph perform better l graph perform rel u l rpc algorithm perform time better dpptrf algorithm larg matrix size perform rpc solut routin the lower subgur l u graph almost equal dpptr routin perform mflop matrix size rpc algorithm curv increas mflop almost mflop rel u l perform rpc algorithm time faster dpptr algorithm larg matrix size matrix size vari subgur ibm power figur show perform ibm power mhz comput lapack routin dpptrf the upper subgur u graph perform mflop l graph perform mflop increas graph size matrix grow perform graph rpc factor routin increas u graph littl mflop l graph mflop mflop l graph better u graph matrix size u graph better l graph matrix size graph grow rapidli matrix size rel u l rpc algorithm perform time faster dpptrf algorithm larg matrix size perform rpc solut routin the lower subgur l u graph almost equal perform dpptr algorithm stay constant mflop decreas slightli n rang perform rpc algorithm increas mflop rel u l rpc algorithm perform time faster dpptr algorithm larg matrix size matrix size vari subgur compaq alpha ev figur show perform compaq alpha ev mhz comput lapack routin dpptrf the upper subgur u graph perform better l graph dierenc mflop perform start mflop increas mflop drop mflop perform rpc factor routin increas n increas graph the u l graph almost equal u graph littl higher matrix size rel u l rpc algorithm perform time faster dpptrf algorithm larg matrix size routin dpptr shape solut perform curv the lower subgur l u graph almost equal perform dpptr routin decreas mflop n increas rpc perform curv increas mflop mflop perform u l rpc algorithm time faster dpptr algorithm larg matrix size matrix size vari subgur sgi r figur show perform sgi r mhz comput one processor onli lapack routin dpptrf the upper subgur u graph perform better l graph matrix size u l graph same dpptrf perform slowli decreas perform rpc factor routin u l graph increas mflop n increas stay constant n increas rel u l rpc algorithm perform time faster dpptrf algorithm larg matrix size routin dpptr shape solut perform curv the lower subgur l u graph almost equal perform dpptr routin decreas mflop mflop n increas perform rpc solut routin increas begin run constantli mflop perform u l rpc algorithm time faster dpptr algorithm larg matrix size matrix size vari subgur sun ultrasparc ii figur show perform sun ultrasparc ii mhz comput lapack routin dpptrf the upper subgur u l graph show almost equal perform n function start mflop decreas mflop rpc factor routin perform u l graph also almost equal whole interv function valu start quickli rise mflop slowli increas mflop rpc factor u l algorithm time faster dpptrf algorithm larg matrix size perform rpc solut routin the lower subgur l u graph almost equal dpptr perform graph decreas mflop perform rpc solut graph increas almost mflop rpc solut u l algorithm time faster dpptr algorithm larg matrix size matrix size vari subgur hp pa figur show perform hp pa mhz comput lapack routin dpptrf the upper subgur u l graph decreas function u graph function valu go mflop l graph function goe mflop perform rpc factor graph increas function matrix size increas perform vari matrix size u graph function valu rang mflop almost mflop l graph function valu rang mflop littl mflop rpc algorithm u l time faster dpptrf algorithm larg matrix size perform rpc solut routin the lower subgur l u graph almost equal dpptr routin perform decreas mflop mflop rpc algorithm curv increas mflop almost mflop rpc algorithm u l time faster dpptr algorithm larg matric solut case matrix size vari subgur intel pentium iii figur show perform intel pentium iii mhz comput lapack routin dpptrf the upper subgur u l graph decreas function u graph function rang mflop l graph function rang less mflop rpc factor routin u l graph almost equal graph increas function mflop rpc factor algorithm u l time faster dpptrf algorithm larg matric perform rpc solut routin the lower subgur l u graph almost equal dpptr perform graph decreas mflop rpc algorithm curv increas mflop rpc algorithm u l time faster dpptr algorithm larg matric matrix size vari subgur ibm smp powerpc openmp direct figur show perform ibm way powerpc e mhz comput graph demonstr success use openmp parallel direct curv lapackl lapacku recursivel recur ident correspond curv gure compar curv recursivel recursiveu recparl recparu recparl recparu curv result doubl parallel rpc algorithm call parallel dgemm parallel openmp direct recparl curv much faster recursivel sometim slower recparu fastest special larg size matric doubli parallel rpc algorithm recparu mflop faster ordinari rpc algorithm recursiveu rel u l rpc factor algorithm perform time faster dpptrf algorithm larg matric rpc doubl parallel algorithm solut lower subgur exce mflop rel u l rpc solut algorithm perform time faster dpptrf algorithm larg matric matrix size vari subgur intel pentium iii run complex arithmet figur show perform intel pentium iii mhz comput gure demonstr success use rpc algorithm hermitian posit denit matric perform measur complex mflop compar usual real arithmet mflop complex mflop multipli lapack routin zpptrf the upper subgur u graph perform littl better l graph routin perform mflop rpc hermitian factor routin u graph perform better l graph rpc perform graph increas function go mflop rpc hermitian factor algorithm u l time faster zpptrf algorithm larg size matric perform rpc solut routin the lower subgur l u graph almost equal zpptr perform decreas mflop rpc solut algorithm increas mflop rpc algorithm u l time faster zpptr algorithm larg hermitian matric matrix size vari subgur intel pentium iii three choleski algorithm figur show perform intel pentium iii mhz comput graph gure depict three choleski algorithm lapack full storag dpotrf dpotr algorithm lapack pack storag dpptrf dpptr algorithm rpc factor solut algorithm lapack pack storag algorithm dpptrf dpptr previous explain gure dpotrf routin the upper subgur u l case perform better rpc factor routin smaller matric larger matric rpc factor algorithm perform equal well slightli better dpotrf algorithm perform dpotr algorithm u l graph better rpc perform comput howev potrf potr storag requir almost twice storag requir rpc algorithm matrix size vari subgur conclus summar emphas import develop describ paper recurs pack choleski factor algorithm base bla level oper develop rpc factor algorithm work almost speed tradit full storag algorithm occupi data storag tradit pack storag algorithm also see bullet user interfac new pack recurs subroutin rp pptrf rp pptr exactli tradit lapack subroutin pptrf pptr user see ident data format howev new routin run much faster two separ routin describ here rp pptrf rp pptr data format alway convert lapack pack data format recurs pack data format routin start oper convert back lapack data format afterward rp ppsv subroutin exist packag equival lapack ppsv routin rp ppsv subroutin data convert factor solut new recurs pack level bla rp trsm rp syrk written fortran develop call gemm routin gemm subroutin develop either comput manufactur gener atla system atla gener gemm subroutin usual compat manufactur develop routin acknowledg research partial support lawra project unic collabor ibm tj watson research center yorktown height last two author also support danish natur scienc research council grant epo project ecient parallel algorithm optim simul r exploit function parallel power design highperform numer algorithm appli numer linear algebra bla basic linear algebra subprogram extend set fortran basic linear algebra subroutin matrix comput recurs lead automat variabl block dens linearalgebra algorithm accuraci stabil numer algorithm basic linear algebra subprogram fortran usag fortran explain local refer lu decomposit partial pivot numer linear algebra automat tune linear algebra softwar atla tr extend set fortran basic linear algebra subprogram set level basic linear algebra subprogram exploit function parallel power design highperform numer algorithm matrix comput rd ed optim matrix multipli use phipac appli numer linear algebra local refer lu decomposit partial pivot recurs lead automat variabl block dens linearalgebra algorithm gemmbas level bla fortran explain nd ed basic linear algebra subprogram fortran usag accuraci stabil numer algorithm numer linear algebra high perform comput recurs formul choleski algorithm fortran superscalar gemmbas level bla ongo evolut portabl highperform librari recurs block data format blass dens linear algebra algorithm ctr chan enriqu s quintanaorti gregorio quintanaorti robert van de geijn supermatrix outoford schedul matrix oper smp multicor architectur proceed nineteenth annual acm symposium parallel algorithm architectur june san diego california usa steven t gabriel david s wise opi compil rowmajor sourc mortonord matric proceed rd workshop memori perform issu conjunct st intern symposium comput architectur p june munich germani dror ironi gil shklarski sivan toledo parallel fulli recurs multifront spars choleski futur gener comput system v n p april bjarn s andersen john a gunnel fred g gustavson john k reid jerzi waniewski fulli portabl high perform minim storag hybrid format choleski algorithm acm transact mathemat softwar tom v n p june f g gustavson highperform linear algebra algorithm use new gener data structur matric ibm journal research develop v n p januari