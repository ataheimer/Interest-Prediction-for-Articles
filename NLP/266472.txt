t sequenti optimis without state space explor a propos algorithm area optim sequenti circuit redund remov algorithm find compat redund impli valu net circuit potenti exponenti cost state space travers avoid redund found remov onc optim circuit safe delay replac origin circuit algorithm comput set compat sequenti redund simplifi circuit propag circuit demonstr efficaci algorithm even larg circuit experiment result benchmark circuit b introduct sequenti optimis seek replac given sequenti circuit anoth one optimis respect criterion area perform power way environ circuit cannot detect replac work deal problem optimis sequenti circuit area present algorithm comput sequenti redund circuit propag implic net redund comput compat sens form set remov simultan algorithm work larg circuit scale better algorithm depend state space explor start point work method describ identifi sequenti redund without explor state space basic algorithm net two case consid net valu net valu case constant well unobserv condit learnt net net either set constant case constant one case unobserv other identifi redund exampl consid trivial circuit shown figur valu net n unobserv valu net n thu net n stuckat redund howev redund found method compat sens remain redund even univers california berkeley berkeley ca cadenc berkeley lab berkeley ca univers texa austin austin figur exampl incompat redund presenc other instanc redund identif algorithm declar input n n stuckat redund howev logic optimis incorrect replac net constant straightforward applic iyer method redund remov identifi one redund implic procedur remov redund iter con vergenc goal learn compat implic circuit one step use compat implic remov redund simultan in sens method find compat unobserv relat work comput compat odc observ care first contribut sec ondli generalis implic procedur combin recurs learn enhanc capabl redund identif procedur recurs learn let us perform case split unjustifi gate possibl learn implic expens comput time consid circuit figur set net impli net f set becom andgat connect remain unjustifi perform recurs learn two justif former case net f becom latter case f becom unobserv e thu possibl case either f unobserv henc f declar stuckat redund recurs learn help identifi kind new redund present data show abl gain signific optimis larg benchmark circuit use two new improv fact circuit find recurs learn give us optimis even faster sinc previou recurs learn step make circuit simpler later stage assum design initi state circuit sequenti optimis use notion cdelay replac notion guarante everi possibl inputoutput behaviour observ new circuit clock c cycl powerup must present old circuit contrast work synthesi method present requir state space e c f figur exampl recurs learn c c figur circuit graph travers therefor appli larg sequenti cir cuit recurs learn use earlier optimi sation describ method appli combin circuit use unobserv condit anoth procedur redund remov describ show notion replac composit may also identifi redund destroy initialis circuit therefor chosen use notion safe delay replac preserv respons initi sequenc interest composition would like notion replac valid without make assumpt environ circuit replac notion safer use identifi sequenti redund preserv weak synchron se quenc work implicitli assum environ circuit total control suppli arbitrari sequenc redund identif tool mind approach pose restrict rest paper organis follow section present algorithm comput compat redund combin sequenti circuit section present experiment result larg circuit isca benchmark set section conclud direct futur work redund remov present algorithm sequenti circuit map use edgetrigg latch invert input gate note combin implement map circuit contain invert input gate use notion circuit graph explain algorithm circuit graph label direct graph whose vertic correspond primari input primari output logic gate latch edg correspond wire element circuit label vertex identifi type ele figur rule impli constant ment repres eg twoinput gate invert latch refer edg circuit graph net figur show exampl circuit graph combin redund explain algorithm prove correct combin circuit later extend sequenti circuit consid circuit graph circuit v set vertic e set net assumpt subset p e label net p valu set fg let n p net label net n valu v assumpt denot order tupl set possibl assumpt set p net denot p consid set assumpt label n denot hm n ihm n ihm n ig assumpt p inconsist satisfi assign primari input circuit instanc assumpt input output gate inconsist algorithm valu impli net e np assumpt p impli either constant unobserv indic net indic unobserv net impli symbol valueomega it let set possibl valu impli net implic label n net r r figur illustr rule impli constant rule c c c c selfexplanatori rule c state gate output input impli input rule c state constant fanout net gate impli constant fanout net figur illustr rule implyingomega s rule state input gate impli aomega input rule state aomega everi fanout net gate impli aomega everi fanin net gate note constant impli direct across gate whileomega propag backward shown rule invert gate similar rule easili formul gate well use rule label edg circuit graph constant label net indic omega omega omega omega omega omega figur rule impli unobservabilitya e c b omega omega omega figur overwrit constant unobserv indic net assum respect constant valu current assumpt aomega label indic net observ primari output henc freeli assign either current assumpt suppos everi assumpt p net n label either constant v withomega safe replac n constant v shown everi possibl assump tion either net take valu v valu affect output therefor conclud net n stuckatv redund concern compat label otherwis run danger mark net label label consist exampl consid circuit figur purpos identifi redund would infer implic assumpt hn i addit assumpt hn impli hn impli notic use symbolomega denot compat observ oppos simpli denot observ so would rightli claim n stuckat redund isola tion howev redund remov easi see cannot want make label compat suffici condit redund compat ensur procedur comput implic assumpt return compat implic ie everi implic valid presenc implic easi see label edg circuit graph done invok rule describ label ever overwritten set learnt implic compat ibl instanc circuit figur n label aomega cannot infer n overwritten approach conserv miss redund figur show exampl overwrit constant aomega yield redund could found otherwis propag implic assumpt net a redund remov find remov redund circuit graph there unvisit net n circuit graph f learn implic g hn i learn implic g hn i r t everi implic set net n constant v propag constant simplifi learn implic propag implic circuit graph given assign f foral n n v f label n v some rule invok f b new implic b label n b conflict current label return els label n b return set current label figur combin redund remov algorithm implic ha written ha written wire note propag implic ha i initi label label c label success overwritten s henc found stuckat redund result gate re move prove later section overwrit make previous learnt implic invalid ie compat implic maintain overwrit allow constant unobserv indic algorithm remov combin redund given figur function learn implic take input assumpt arbitrari subset net label net valu f learnt implic initi net n n v assumpt la bell deriv new label invok rule cc oo similar rule kind two input gate note time net uniqu label constant overwritten withomega s viceversa return set final label function redund remov take input circuit graph g call learn implic success assumpt hn hn singleton subset fn g two set label use comput pair n v n stuckatv redund later show label procedur learn implic guarante redund remov f c e f c e figur implic graph simultan redund use simplifi network process repeat net con sider note function redund remov consid assumpt singl net gener number net could use gener assumpt later show result case consid assumpt two net second one correspond unjustifi node closest instanc recurs learn formalis notion valid label one implic graph exist use notion implic graph prove compat set label gener algorithm let assumpt set p net implic graph label assumpt direct acycl graph g v l set label form m a net f label everi vertex v v ffl everi root vertex label ffl exactli one leaf vertex v v label ffl vertex v v v root node implic label obtain implic label parent invok infer rule exampl implic graph label assumpt hn shown figur set label c deriv assumpt compat everi label cc exist implic graph c lc c prove compat implic return label procedur step label procedur either label node first time overwrit constant aomega prove invari time current set implic c compat must prove label overwritten new label everi label must implic graph depend overwritten label claim prove follow lemma need current label simultan valid vertex incom edg vertex outgo edg note overwrit or viceversa impli inconsist assumpt procedur exit lemma let consist assumpt label a overwritten label m omega current set label label n implic graph a label vertex graph proof call net parent net n node v circuit graph incom arc n outgo arc v also say n child m say sibl n node v n outgo edg v prove claim contradict suppos fals let replac a m omega first instanc make fals therefor implic graph current implic happen let implic valid implic graph now consid path old implic graph net n j n ith implic path consid case b j constant henc b k s path constant sinc aomega net impli aomega anoth case omega consid later show assumpt consist possibl replac n implic graph n j three case relat case circuit edg n igamma child n omega infer n either n omega current implic current implic n n input gate first case fact implic graph exist n igamma label constant contradict second case n igamma output gate whose two input n n sinc n either case case n igamma n sibl n applic rule c n i either parent sibl n remov implic graph implic n i child n thenomega infer omega current implic n current implic n n input gate first case fact implic graph exist n i label constant contradict second case clearli n i label ie b otherwis assumpt inconsist path n replac path n note get new implic graph need implic graph n exist affect overwrit previou label withomega e g x c f figur sequenti circuit c case n igamma parent n reason case thu shown assumpt consist vertex label n implic graph current implic n replac current implic show replac n omega falsifi claim contradict consid case b j omega then greatest k b k constant b l constant omega k l j proof befor know exist implic graph n k use yield implic graph n use lemma let consist assumpt set label return algorithm compat proof step algorithm either valu impli net first time constant overwritten aomega proof lemma follow induct number step algorithm use lemma prove induct step theorem let n stuckatv redund set redund fault report algorithm circuit obtain set combin equival origin sequenti redund extend algorithm combin circuit describ previou section find sequenti redund propag implic across latch implic may valid first clock cycl sinc latch powerup nondeterminist random boolean valu initi nevertheless use notion k delay replac requir modifi circuit produc behaviour origin k clock cycl elaps thu exampl impli constant v latch output constant v input yield redun danci delay replac guarante remov redund latch reset valu guarante first cycl oper suffici ensur constant v equal reset valu case replac delay replac figur sequenti implic graph assumpt circuit c figur incorrect sequenti implic graph assumpt circuit c notion label implic graph modifi also contain integ time offset respect global symbol time step t rule learn implic exactli addit new rule allow us propag implic across latch go across latch modifi time offset accord ingli eg output latch label offset input latch label offset exampl implic graph circuit c figur shown figur exampl also show potenti problem learn sequenti implic consid circuit c figur two assumpt ha a denot global symbol time ha get two implic graph in figur impli c might lead us believ dundanc howev new circuit obtain replac c power state each latch remain forev circuit output x howev origin circuit produc matter state power in thu kdelay replac k reason incorrect redund identif order infer c assumpt need c ie time c could one way solv problem ensur net label differ label differ time label net one label net label associ list integ label denot time offset label valid thu exampl implic propag phase assumpt never infer a get second implic graph figur label one net one label also obviat need valid step describ algorithm replac net n constant v time offset either label v unobserv assumpt replac associ time k follow valid redund n stuckatv time set implic graph one assumpt impli either n omega let least time offset label implic graph net m label constant say n kcycl stuckatv redund use follow theorem claim circuit obtain replac net n constant v kdelay safe replac lemma let net n kcycl stuckatv redund circuit obtain set net result k delay safe replac origin circuit combin case allow overwrit constant unobserv indic make sure label net n time a overwritten new label isomega net n label time offset thi prevent problem shown figur may make algorithm depend order applic rule explor variou option proof follow two lemma follow easi extens lemma lemma let consist assumpt label replac omega current set label label implic graph label graph lemma let consist assumpt set label return algorithm compat henc redund report algorithm compat redund remov simultan get delay safe replac theorem let n k cycl stuckatv redund set redund fault report algorithm then circuit obtain set net kdelay safe replac origin proof lemma know redund circuit obtain set shown circuit c e c adelay replac bdelay replac e c a delay replac e desir result follow easili induct n properti delay replac experiment result present experiment result algorithm demonstr approach identifi sequenti redund yield signific reduct area better circuit redund remov recurs learn name red lr red lr cordic legend see tabl tabl experiment result combin redund approach remov combin redund also show exampl recurs learn give better result simpl implic propag scheme fact mani circuit recurs learn could identifi redund simpl implic propag scheme unabl find ani algorithm implement si circuit first optimis use scriptrug perform combin optimis network optimis circuit map librari consist input gate invert sequenti redund remov algorithm run map circuit propag implic allow propag time step forward timestep backward global symbol time tabl show map to mcnc librari area circuit obtain run scriptruggedand obtain start result appli redund remov algorithm larg circuit s larger bdd oper full simplifi step scriptruggedwer per form report result circuit algorithm abl find redund mention earlier algorithm start assumpt net impli valu net circuit implement two flavor select assumpt first case conflict assign assum one net valu impli net second case similar first except implic could propag assumpt net perform nave circuit attribut redund remov recurs learn name pi po l red c lr time red c lr time s full simplifi run time report alpha mhz dual processor g memori pi number primari input po number primari output l number latch map area scriptrug map area redund remov map area redund remov recurs learn red number redund remov lr number latch remov c upper bound c new circuit cdelay replac time cpu time percentag area reduct tabl experiment result sequenti redund version case split net closest origin net implic propag implic common two case also ad set implic learnt origin net enabl us propag implic larger set net network henc discov redund expens cpu time tabl indic area reduct obtain simpl propag perform recurs learn find even nave recurs learn get reduct area circuit obtain without case split instanc abl obtain area reduct recurs learn without it medium size circuit abl obtain reduct area without recurs learn larg circuit also abl obtain approxim area reduct except obtain reduct area except circuit cpu time recurs learn less twice cpu time redund remov without it suggest sophist recurs learn node unjustifi forward propag implic casesplit perform set output net node unjustifi backward propag case split achiev set one two input input control valu nand gate nor gate time propag implic backward base techniqu could yield larger area reduct without prohibit overhead term cpu time sinc algorithm also identifi combin redundan cie want quantifi mani redund pure combin verifi ran algorithm circuit combin redund remov onli tabl show area reduct due combin redund without recurs learn case number redund identifi tabl significantli larger set combin redund identifi algorithm combin redund remov result approxim area reduct sequenti redund case exampl circuit present abl achiev area reduct number case algorithm abl remov signific number latch case new circuit cdelay safe replac origin circuit c report tabl actual upper bound delay replac circuit c howev practic circuit oper speed exceed mhz present technolog c circuit would requir user wait s use oper begin sever restrict unabl compar sequenti redund remov result previou work entrena cheng note earlier notion sequenti replac ment base conserv xvalu simula tion composit unlik notion delay replac use futur work redund remov algorithm find complet set redund extend scheme sever way identifi larger set instanc instead analyz two assumpt due case split singl net could case split multipl net intersect implic learnt larger set assumpt one method increment select frontier first phase implic die out addit split multipl net possibl detect pair net one replac anoth circuit function chang current approach split singl net one net pair alway mean identifi stuckatconst redund algorithm map given circuit use librari two input gate invert differ approach would use origin circuit propag implic forward backward build bdd node function term immedi fanin intend compar run time area reduct number approach bdd base approach addit bdd base approach may allow us redund remov multivalu logic circuit well rel inexpens way extend notion redund multivalu circuit identifi case net take subset allow valu latch kind encod use fewer bit acknowledg use discuss mahesh iyer miron abramovici cours work comment refere also help improv paper r identifi sequenti redund without search the transduct method design logic network base permiss function care multilevel network optimiza tion recurs learn new implic techniqu effici solut cad problem test verif optim ex ploit powerup delay sequenti optim latch redund remov without global reset lot logic optim testabl new transform use recurs learn sequenti logic optim redund addit remov redund untest sequenti circuit on remov redund synchron sequenti circuit synchron sequenc si system sequenti circuit synthesi tr transduct methoddesign logic network base permiss function dont care multilevel network optim exploit powerup delay sequenti optim remov redund synchron sequenti circuit synchron sequenc redund untest sequenti circuit sequenti redund without search sequenti logic optim redund addit remov latch redund remov without global reset ctr vigyan singhal carl pixley adnan aziz shaz qadeer robert brayton sequenti optim absenc global reset acm transact design autom electron system toda v n p april