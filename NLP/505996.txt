t improv latenc toler multithread decoupl a abstractth increas hardwar complex dynam schedul superscalar processor may compromis scalabl organ make effici use futur increas transistor budget smt processor design superscalar core therefor directli concern problem work present evalu novel processor microarchitectur combin two paradigm simultan multithread accessexecut decoupl sinc decoupl unit issu instruct inord architectur significantli less complex term critic path delay central outoford design effect futur growth issuewidth clock speed investig techniqu complement other sinc decoupl featur excel memori latenc hide effici larg amount parallel exploit multithread may use hide latenc function unit keep fulli util studi show that ad decoupl multithread architectur fewer thread need achiev maximum throughput therefor addit obviou hardwar complex reduct place lower demand memori system sinc one problem multithread degrad memori system perform term miss latenc bandwidth requir improv becom critic high miss latenc bandwidth might becom bottleneck final although may seem rather surpris studi reveal multithread exhibit littl memori latenc toler result suggest latenc hide effect smt architectur come dynam schedul hand decoupl effect hide memori latenc increas cach miss penalti cycl reduc perform context multithread decoupl processor less percent nondecoupl multithread processor loss perform percent b introduct gap speed processor memori kept increas past decad expect sustain trend near futur diverg impli term clock cycl increas latenc memori oper cross chip boundari addit processor keep grow capabl exploit parallel mean greater issu width deeper pipelin make even higher neg impact memori latenc perform allevi problem current processor devot high fraction transistor onchip cach order reduc averag memori access time sever prefetch techniqu also develop hardwar softwar processor commonli known outoford processor includ dynam schedul techniqu base tomasulo algorithm variat it allow toler memori function unit latenc overlap use comput independ instruct implement it processor capabl fill issu slot independ instruct look forward instruct stream limit instruct window gener mechan aggress extract instruct parallel avail instruct window memori latenc continu grow futur outoford processor need larger instruct window find independ instruct fill increas number empti issu slot number grow even faster greater issu width increas instruct window size obviou influenc chip area major neg impact strike processor clock cycl time report recent network involv issu wakeup bypass mechan also although less extent renam stage critic path determin clock cycl time analysi author studi state delay function network compon increas quadrat window length and although linearli also depend strongli issu width moreov higher densiti technolog acceler increas latenc analysi suggest outoford architectur could find futur seriou boundari clock speed differ kind architectur propos recent either inord outoford address clock cycl problem partit critic compon architectur andor provid less complex schedul mechan follow differ partit strategi one accessexecut paradigm first propos earli scalar architectur provid dual issu limit form dynam schedul especi orient toler memori latenc believ decoupl accessexecut architectur regain progress interest far issu width memori latenc keep grow demand larger instruct window trend make worth trade issu complex clock speed typic decoupl accessexecut architectur split either static dynam instruct stream two access stream compos instruct involv fetch data memori run asynchron respect execut stream form instruct process data stream execut independ process unit call ap ep respect paper ap expect execut advanc ep prefetch data memori appropri buffer structur ep consum without delay anticip slippag may involv multipl condit branch howev amount slippag ap ep highli depend program ilp data control depend forc unit synchron call loss decoupl event produc seriou perform degrad decoupl model present paper perform dynam code partit follow simpl scheme base instruct data type ie integ fp although rather simplist scheme mostli benefit numer program still provid basi studi mainli focus latenc hide potenti decoupl synergi multithread recent studi propos altern compilerassist partit scheme address partit integ code sinc one main argument decoupl approach reduc issu logic complex chosen issu instruct inord within process unit decoupl architectur adapt higher memori latenc scale much simpler structur outoford ie scale lower hardwar cost convers scale higher degre similar cost may argu inord processor limit potenti exploit ilp howev current compil techniqu extract much ilp thu compil pass inform hardwar instead use runtim scheme approach emerg epic explicitli parallel instruct comput architectur take propos new decoupl architectur provid ap ep power dynam schedul mechan simultan multithread process unit sever context issu instruct mention decoupl mode activ simultan compet issu slot instruct differ context issu cycl show studi combin decoupl mulithread take advantag best featur decoupl simpl effect techniqu hide high memori latenc reduc issu complex multithread provid enough parallel hide function unit latenc keep function unit busi addit multithread also help hide memori latenc program decoupl badli howev far decoupl succe hide memori latenc thread need keep function unit busi achiev nearpeak issu rate import result sinc thread reduc memori pressur report major bottleneck multithread architectur reduc hardwar cost complex rest paper organ follow section describ base decoupl architectur analyz section provid justif multithread section describ evalu propos multithread decoupl architectur final summar conclus section basic decoupl architectur model baselin decoupl architectur consid paper figur consist two superscalar decoupl process unit address process unit ap execut process unit ep decoupl processor execut singl instruct stream base decalpha isa split dynam dispatch instruct either ap ep two separ physic regist file one ap integ regist ep fp regist unit share common fetch dispatch stage separ issu execut writeback stage pipelin next brief descript stage memori subsystem store addr figur scheme base decoupl processor fetch decod renam instruct reg file reg file map tabl regist fetch stage read consecut instruct per cycl but less taken branch among them infinit icach notic icach miss ratio spec fp usual low approxim introduc small perturb also provid condit branch predict scheme base k entri branch histori tabl bit satur counter per entri dispatch stage decod renam instruct per cycl send either ap instruct queue iq entri ep depend whether integ float point instruct memori instruct dispatch ap iq allow ap execut ahead ep provid necessari slippag hide memori latenc except kept precis mean reorder buffer graduat mechan regist renam map tabl decoupl architectur chosen steer memori instruct unit allow copi data load queue regist sinc preliminari studi show code expans would significantli reduc perform implement dynam regist renam avoid duplic is data fetch memori written physic regist rather data queue elimin need copi also conveni way manag disord complet load lockupfre cach present duplic condit branch instruct also use may avoid incorpor similar specul recoveri mechan use mip r identifi instruct squash case mispredict ap ep provid gener purpos fulli pipelin function unit whose latenc cycl ap cycl ep respect process unit read issu instruct per cycl better exploit parallel ap ep instruct issu execut specul beyond four unresolv branch as mip r powerpc featur may becom sometim key factor enabl ap slip ahead ep store address held saq queue entri store graduat load issu cach disambigu address held saq whenev depend encount data pend store immedi bypass regist avail otherwis load put asid data forward it primari data cach onchip port directmap kb size block length implement writeback polici minim offchip bu traffic lockupfre cach model similarli maf alpha hold outstand primari miss differ line capabl merg secondari per pend line assum l cach miss alway hit infinit multibank offchip l cach cycl latenc plu penalti due bu content ll interfac consist fast bit wide data bu capabl deliv byte per cycl like r the bu busi cycl line fetch copi back quantit evalu decoupl processor section first character major sourc wast cycl typic singlethread decoupl processor next latenc hide effect architectur evalu identifi main factor influenc latenc toler architectur studi decoupl machin carri incorpor techniqu like storeload forward control specul lockupfre cach section also provid motiv multithread decoupl architectur analyz section experiment framework experi carri trace driven simul binari code obtain compil spec fp benchmark suit dec alphast dec compil appli full optim trace gener run code previous instrument atom tool simul model cyclebycycl architectur describ previou section run spec fp benchmark fed largest avail input data set sinc slow due detail simul run portion instruct benchmark skip initi startup phase determin appropri initi discard offset compar instructiontyp frequenc fragment start differ point full run frequenc found phase length benchmark instruct tomcatv hydrod wave rest benchmark sourc wast cycl figur show throughput issu stage term percentag commit instruct total issu slot count ie percent issu slot realli use work ap ep wast throughput also character identifi caus empti issu slot four differ configur evalu differ whether lockupfre cach includ whether storeload forward mechan enabl stress memori system section assum kb l data cach shown figur lockupfre cach present first second bar ap stall load miss ep starv time miss latenc increas ap cycl count far ep cycl count ap execut time becom bound limit global perform decoupl hardli hide memori latenc natur figur issu slot breakdown sever decoupl architectur show effect lockupfre cach storeload forward mechan kb l cach size none forwd lfree lfree forwd none forwd lfree lfree forwd configurationof issu slot wrongpath instr idl wait operand fu wait operand memori block miss stld hazard use work stall structur hazard lockupfre cach use kind stall almost elimin third fourth bar cours uncov overlap caus overal improv perform achiev impress speedup from ipc memori data hazard occur store fp load detect memori disambigu storeload forward enabl first third bar memori hazard produc stall ap store issu cach addit caus slippag reduct two unit call event loss decoupl lod may expos ep penal memori latenc case subsequ load miss amount slippag reduct ap ep caus memori hazard depend close load schedul match store result depict figur show ap stall label stld hazard almost complet remov storeload forward enabl howev averag improv ep perform almost neglig overal ipc increas latter fact suggest either store schedul enough advanc match load littl probabl get subsequ miss final full featur configur fourth bar graph observ major sourc wast slot ep true data depend regist operand label wait operand fu stall less caus miss label wait operand memori notic although mani load ep regist load ap regist stall caus miss similar processor unit integ load miss produc higher penalti clearli illustr next section latenc hide effect interest decoupl architectur close relat abil hide high memori latenc without resort complex issu mechan latenc hide potenti decoupl processor depend strongli decoupl behaviour program test program schedul abil compil remov lod event forc ap ep synchron also key factor howev compil use digit f especi tailor decoupl processor therefor sinc latenc hide effect decoupl provid basi propos multithread decoupl architectur order valid conclus interest assess base architectur without specif compil support purpos run benchmark extern l cach latenc vari cycl simul assum architectur paramet describ section except architectur l latenc cycl averag perceiv fpload miss latenc cycl tomcatv sucor hydrod mgrid applu turbd apsi tomcat swim sucor hydro mgrid applu turbd apsi fpppp wave benchmark miss latenc store load l latenc cyclesaverag perceiv iload miss latenc cycl tomcatv sucor hydrod mgrid applu turbd apsi l latenc cycl loss sucor hydrod mgrid applu turbd apsi figur a perceiv miss latenc fp load figur b perceiv miss latenc integ load figur c miss ratio load store l latenc cycl figur d impact latenc perform loss rel cycl l latenc case queue physic regist file scale proport l latenc addit perform also measur separ averag perceiv latenc integ fp load miss sinc interest particular benefit decoupl independ cach miss ratio averag includ load hit perceiv latenc fp load miss measur ep stall caus miss reveal decoupl behavior program ie amount slippag ap respect ep shown figur a except fpppp fp load miss latenc alway hidden perceiv latenc integ load miss measur ap stall caus miss depend abil compil schedul integ load ahead depend instruct shown figur b fpppp sucor turbd wave program experi largest integ load miss stall regard impact l latenc perform see figur d although program like fpppp turbd quit high perceiv load miss latenc hardli perform degrad due extrem low miss ratio depict figur c perform degrad program high perceiv miss latenc signific miss ratio hydrod wave sucor summar perform littl affect l latenc either hidden effici tomcatv swim mgrid applu apsi miss ratio low fpppp turbd serious degrad program lack featur sucor wave hydrod hidden miss latenc fp load depend good decoupl behavior program integ load reli exclus static instruct schedul multithread decoupl architectur shown previou section stall decoupl processor may remov except caus true data depend regist operand ep figur right label wait operand fu restrict abil inord issu model exploit ilp ap ep provid dynam schedul capabl stall could also remov simultan multithread smt dynam schedul techniqu increas processor throughput exploit thread level parallel multipl context simultan activ compet issu slot function unit previou studi smt focus sever dynam instruct schedul mechan among other decoupl paper analyz potenti implement decoupl processor still refer simultan although obviou substanti differ origin smt retain key concept issu differ thread singl cycl sinc decoupl provid excel memori latenc toler multithread suppli enough amount parallel remov remain stall expect import synergist effect new microarchitectur combin two techniqu section present evalu perform memori latenc toler multithread decoupl accessexecut architectur analyz mutual benefit techniqu especi miss latenc larg architectur overview propos multithread decoupl architectur figur is thread execut decoupl mode share function unit data cach thread base memori subsystem store addr figur scheme multithread decoupl processor instruct reg file reg file map tabl regist fetch dispatch renam multithread decoupl architectur base decoupl design previou section extens run thread issu instruct per cycl ap ep function unit l lockupfre data cach augment port fetch dispatch stage includ branch predict regist map tabl regist file queue replic context issu logic function unit data cach share thread model thread allow compet issu slot cycl prioriti among determin pure roundrobin order similar full simultan issu scheme report cycl two thread access i cach fetch consecut instruct up first taken branch chosen thread less instruct pend dispatch similar rr icount scheme report experiment evalu multithread decoupl simul fed differ trace correspond independ thread trace everi thread built concaten first million instruct trace use previou section thread use differ permut thu total million instruct per thread way thread differ trace balanc workload similar missratio etc figur show wast issu slot vari number thread sinc differ thread may candid slot lose differ caus order character loss perform classifi wast issu slot proport caus prevent individu thread issu wast issu slot multithread decoupl architectur first column figur repres case singl thread reveal expect major bottleneck caus ep function unit latenc caus lack parallel inord issu polici discuss section two context ad multithread mechan reduc drastic stall unit produc speedup from ipc ipc sinc thread ap function unit nearli satur neglig addit speedup obtain ad context ipc achiev thread notic although ap almost achiev maximum throughput ep function unit satur due load imbal ap ep therefor effect peak perform reduc ipc problem could address differ choic number function unit processor unit beyond scope studi anoth import remark number thread increas combin work set larger miss ratio increas progress put greater demand extern bu bandwidth averag pend miss thu increas effect load miss latenc increas ep stall caus wait operand memori see rightmost graph figur hand ap stall due integ load miss see operand memori leftmost graph figur almost elimin multithread sinc load benefit decoupl number threadsof issu cycl idl wait operand fu wait operand memori use work number threadsof issu cycl empi iqueu wait operand fu wait operand memori use work figur ap left ep right issu slot breakdown multithread decoupl architectur latenc hide effect multithread decoupl two differ approach toler high memori latenc run experi similar section multithread decoupl processor context quantifi latenc toler addit experi also carri reveal contribut mechan latenc hide effect consist set ident run degener version multithread architectur instruct queue disabl ie nondecoupl multithread architectur figur a show averag perceiv load miss latenc point view individu thread configur mention abov vari l latenc cycl metric express averag number time instruct schedul thread cannot issu operand depend pend load miss figur b show correspond rel perform loss with respect cycl l latenc configur notic metric compar toler architectur memori latenc rather absolut perform sever conclus drawn graph first observ figur a averag load miss latenc perceiv individu thread quit low decoupl enabl less cycl l latenc cycl much higher decoupl disabl second load miss latenc perceiv individu thread slightli longer thread run although thread effect reduc number stall cycl thread also increas miss ratio due larger combin work set produc longer bu content delay becom slightli domin effect third shown figur b l memori latenc increas cycl cycl decoupl multithread architectur experi perform drop less less thread perform degrad observ non decoupl configur greater even huge memori latenc cycl perform loss decoupl configur lower greater nondecoupl configur fourth multithread provid addit latenc toler improv especi nondecoupl configur much lower latenc toler provid decoupl conclus drawn figur c multithread rais perform curv decoupl make flatter word main effect l latenc cycl perceiv load miss l latenc cycl loss rel tocycl latenc figur a averag perceiv load miss latenc individu thread figur b latenc toler perform loss rel cycl l latenc case figur c contribut decoupl multithread perform l latenc cyclesipc t decoupl t decoupl t decoupl t nondecoupl t nondecoupl t nondecoupl nondecoupl multithread provid throughput exploit thread level parallel major contribut memori latenc toler relat slope curv come decoupl precis specif role decoupl play hybrid architectur hardwar context reduct extern bu bandwidth bottleneck multithread power mechan highli improv processor throughput cost need consider amount hardwar resourc run experi illustr decoupl reduc hardwar context requir measur perform sever configur context decoupl multithread architectur nondecoupl multithread architectur see figur a decoupl configur achiev maximum perform thread non decoupl configur need thread achiev similar ipc ratio one tradit claim multithread approach abil sustain high processor throughput even system high memori latenc sinc hide longer latenc may requir higher number context and well known strong neg impact memori perform reduct hardwar context requir obtain decoupl may becom key factor l memori latenc high illustr thi run previou experi l memori latenc cycl shown figur b number threadsipc decoupl nondecoupl number threadsipc decoupl nondecoupl figur a decoupl reduc number hardwar context figur b maximum perform without decoupl cannot reach due extern bu satur decoupl architectur achiev maximum perform thread nondecoupl architectur cannot reach similar perform number thread would need mani would satur extern l bu averag bu util thread thread moreov notic decoupl architectur requir thread achiev perform nondecoupl architectur thread thu decoupl significantli reduc amount parallel requir reach certain level perform previou result suggest extern l bu bandwidth potenti bottleneck kind architectur describ impact measur perform bu util sever configur hardwar context three differ extern bu bandwidth bytescycl result shown figur a figur b bytescycl bandwidth bu becom satur thread run perform degrad beyond point summar decoupl multithread complement hide memori latenc increas ilp reduc amount threadlevel parallel low issu logic complex figur a ipc sever bu bandwidth figur b extern l bu util sever bu bandwidth number thread extern bu util cycl bytescycl number threadsipc bytescycl summari conclus paper anal synergi multithread accessexecut decoupl multithread decoupl architectur aim take advantag latenc hide effect decoupl potenti multithread exploit ilp analyz import factor determin perform synergist effect paradigm multithread decoupl architectur hide effici memori latenc averag load miss latenc perceiv individu thread less cycl worst case with thread l latenc cycl also found that l latenc lower cycl impact perform quit low less ipc loss rel cycl latenc scenario quit independ number thread howev impact greater ipc loss decoupl disabl latter fact show main contribut memori latenc toler correspond decoupl mechan architectur reach maximum perform thread significantli less nondecoupl architectur number simultan activ thread support architectur signific impact hardwar chip area eg number regist instruct queue complex eg instruct fetch issu mechan consequ clock cycl reduc number thread also reduc cach conflict requir memori bandwidth usual one potenti bottleneck multithread architectur shown extern l bu bandwidth becom bottleneck miss latenc cycl decoupl disabl prevent achiev maximum perform number thread summari conclud decoupl multithread techniqu complement exploit instruct level parallel hide memori latenc particular combin obtain maximum perform thread reduc issu logic complex hardli perform degrad wide rang l latenc featur make promis altern futur increas clock speed issu width r decoupl accessexecut architectur effici access structur data effect decoupl perform studi softwar hardwar data prefetch scheme concurr execut multipl execut stream superscalar processor alpha microprocessor hardwar refer manual multiclust architectur reduc cycl time partit pipe vlsi decoupl architectur s p use decoupl superscalar design digit set new standard hp make epic disclosur elementari processor architectur simultan instruct issu multipl thread design tfp microprocessor superscalar microprocessor design limit studi access decoupl improv directmap cach perform addit small fullyassoci cach prefetch buffer pew decentr dynam schedul ilp process memori latenc effect decoupl architectur powerpc decoupl integ execut superscalar processor structur memori access architectur exploit idl floatingpoint resourc integ execut studi branch predict strategi decoupl accessexecut comput architectur implement precis interrupt pipelin processor simul studi decoupl architectur comput multiscalar processor atom system build custom program analysi tool standard perform evalu corpor effici algorithm exploit multipl arithmet unit compil optim decoupl architectur exploit choic instruct fetch issu implement simultan multithread processor simultan multithread maxim onchip par allel misc multipl instruct stream comput evalu wm architectur mip r superscalar microprocessor tr simul studi decoupl architectur comput zs central processor highbandwidth data memori system superscalar processor elementari processor architectur simultan instruct issu multipl thread evalu wm architectur misc effect decoupl atom design tfp microprocessor compil optim decoupl architectur simultan multithread multiscalar processor decoupl integ execut superscalar processor exploit choic complexityeffect superscalar processor trace processor multiclust architectur exploit idl floatingpoint resourc integ execut perform model code partit ds architectur improv directmap cach perform addit small fullyassoci cach prefetch buffer implement precis interrupt pipelin processor decoupl accessexecut comput architectur mip r superscalar microprocessor memori latenc effect decoupl architectur limit studi access decoupl powerpc microprocessor lockupfre instruct fetchprefetch cach organ studi branch predict strategi costeffect cluster architectur latenc hide effect decoupl accessexecut processor