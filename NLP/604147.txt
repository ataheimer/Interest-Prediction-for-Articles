t type theori memori alloc data layout a order type theori extens linear type theori variabl context may neither drop reorder restrict give rise natur notion adjac show languag base order type use properti give exact account layout data memori fuse constructor order logic describ adjac valu memori mobil modal describ pointer heap choos particular alloc model base common implement scheme copi garbag collect show permit us separ alloc initi memori locat way account optim coalesc multipl call alloc b introduct highlevel program languag ml java allow programm program term abstract pair record object welldefin semant whose realiz term underli concret machin left unspecifi unobserv sometim necessari program without abstract programm may need interact oper system network anoth program languag way requir exact knowledg of control over manner data laid memori compil must choos concret implement highlevel abstract provid sourc level languagesuch actual layout data memori manner memori get alloc initi tradit need address un type weakli type fashion languag c give programm rel precis control data layout initi expens type memori safeti tradit compil repres program intern use untyp languag reli correct compil preserv safeti properti enjoy sourc program recent research area type compil certifi code focus provid type system lowlevel languag abstract control flow data layout made explicit idea use number compil howev mechan invent describ lowlevel oper fairli ad hoc yet interpret standard type the ori exampl type assembl languag formal alloc initi separ expens annot type flag indic whether valu classifi initi kind lowlevel techniqu seem unlik integr well highlevel program languag paper attempt give type theoret account data layout provid foundat defin highlevel construct pair laid memori realiz system concret alloc model base common implement copi garbag collector show separ process alloc block memori process initi individu memori word system flex figur three possibl layout term ibl enough permit multipl alloc call coalesc memori multipl sourc level object alloc si multan ensur call alloc never invalid assumpt made state partial initi data import contribut work remain complet within framework lambda calculu enjoy standard metatheoret properti way reconcil lowlevel notion alloc memori substitut properti expect highlevel program languag particular interest suggest possibl idea could made avail programm even program requir detail control memori layout could written highlevel languag data layout alloc specifi layout data memori essenti part realiz highlevel program concret collect machin instruct data one usual direct interest programm programm care abil construct object time care layout memori insofar affect perform oper object term laid memori therefor matter polici compil writer exampl lambda calculu term type int intint defin pair whose first element whose second element pair contain figur show sever possibl represent term one compil might choos repres pointer pair whose element integ pointer anoth pair howev anoth might choos add indirect integ attempt flatten whole term three adjac cell memori high level notion pair captur certain oper properti use programm uniqu specifi implement strategi commonli compil simpli choos interpret pair type mean one particular strategi purpos give gener account data layout clearli unsatisfactori permit us break highlevel concept constitu concept first step gener type theori data layout observ seem two key concept use differ interpret pair given figur adjac indirec tion differ choic represent correspond differ choic data repres physic adjac byte memori data repres via indirect anoth portion memori first notion shall attempt captur type system alloc layout data memori made explicit becom possibl consid process new memori creat initi suggest use think term three stage regardless mechan employ reserv process new block uniniti memori creat initi process valu get written reserv memori potenti chang type import type safeti either memori treat linearli stage els initi oper refin type alloc process section reserv and presum initi memori made avail ordinari unrestrict object differ memorymanag system combin stage differ way exampl tal framework reserv alloc done atom henc initi restrict chang type concret memori manag system choos model one commonli use practic copi garbag collector henc particular interest choic essenti system express use similar techniqu present here copi garbag collector avail memori divid two adjac contigu section heap contain data alloc sinc last garbag collect or perhap youngest gener thereof possibl empti freespac contain memori yet alloc alloc maintain alloc pointer or freespac pointer point end alloc data start free memori heaplimit pointer point end free memori creat new heap object requir n byte program first compar alloc pointer heaplimit pointer ensur least n byte avail freespac not call garbag collector free enough space step correspond reserv phase discuss abov suffici memori foundeith exist freespac call garbag collectorth program may assum n byte space exist front alloc pointer refer initi area frontier space reserv frontier valu written individu cell memori via offset alloc pointer correspond initi phase point program may move prefix frontier heap valu alloc pointer becom pointer new heap valu alloc pointer advanc past alloc space correspond alloc phase figur give exampl process first line show schemat diagram heap freespac ap stand alloc pointer lp stand limit pointer heap freespac lp ap x c freespac xheap lp ap x reserv abcd b c lp ap freespac c heap lp ap x freespac figur reserv initi alloc rag boundari freespac indic inform extentit may potenti exhaust second line figur show result reserv four word spacesuffici alloc term use first layout strategi figur refer individu cell frontier name abc d note step may invok garbag collector free memori freespac previous line fact exhaust creat pair assign a b alloc b heap get back heap pointer x shown third line figur initi toplevel pair write c x d final alloc step give us pointer refer heap alloc structur form pictur first line figur exampl show requir entir frontier alloc singl object program may choos reserv space sever object initi alloc individu optim avoid multipl check heaplimit pointer two constraint process must captur type system ensur safeti firstli manner move object heap mean object cannot alloc middl end fron tier prefix frontierthat is contigu block memori adjac alloc pointermay alloc secondli reserv space frontier cannot persist across success reserv across function call garbag collector call copi live data new heap chang alloc pointer point new locat partial initi data previous frontier lost process correspond kind destruct effect state frontier cannot assum preserv across evalu term could potenti call alloc type system must therefor ensur assumpt state frontier persist across evalu term might reserv alloc memori order linear type theori order or noncommut linear logic variant standard linear logic hypothes must use exactli onc must also use order correspond proof term make order lambda calculu character lack exchang properti order context addit usual linear restrict present small fragment order lambda calculu way introduct idea present simpler previou work omit linear context retain order unrestrict context modal therefor move directli order term unrestrict term type rule order lambda calculu form gw t indic type variabl assumpt declar unrestrict context g order context w distinguish syntact order variabl must use linearli order unrestrict variabl x may use arbitrarili often unlik standard linear type theori order comma oper interpret simpl list concaten permit intermingl hypothes unambigu write at instead at singleton context unrestrict arrow multipl unrestrict context x unrestrict variabl n integ liter m fuse intro leta a minm fuse elim lxte lambda intro lambda elim figur standard order lambda calculu syntax definit mean concaten context preserv order entri context multipl connect fuse demonstr use concaten oper elimin rule fuse split compon place order context notic variabl repres compon go order context place w final mobil modal permit term orderedli close move unrestrict context g g size preserv adjac three interest observ make order lambda calculu term motiv applic order type theori data layout order variabl may exchang posit context may think order variabl simpli stand locat order context may break order term compon reform them may chang order particu lar term split apart order pair reform opposit order welltyp let a a view linear rather order term code would welltyp modal take order term whose locat fix move unrestrict context locat becom indetermin base observ propos follow three intuit basi system order context may thought describ particular region memori consider order variabl correspond locat offset region adjac variabl context correspond physic adjac lo cation extent given type variabl fuse constructor t describ term physic adjac memori fact cannot reorder order term correspond natur fact cannot reorder byte memori modal correspond indirect region memori describ order context anoth unspecifi part heap standard order lambda calculu entir justifi intuit order term preserv order subcompon gener preserv adjac essenc problem seen deriv order substitut principl notic portion order context pass term bound replac variabl typecheck rest bodi intent oper done inplac memori describ order context howev follow term demonstr hold gener order lambda calculu g problem abl insert unrestrict term order term arbitrari place violat notion order variabl correspond locat mean locat fix oper would seem would forc shift w memori make room new term context altern way look gener order lambda calculu size preserv subderiv g produc term size one context size zero interpret order context describ region mem ori term insert wordsiz valu empti region memori order prevent problemat term necessari care restrict calculu way ensur oper memori preserv size notion size preserv last insight necessari formul lambda calculu give full account data layout use fuse type describ adjac modal type describ indirect restrict term way enforc variou key size preserv properti alloc model describ section account use order context describ frontier order variabl becom offset frontier reserv initi alloc becom oper order term linear ns n v v lxte v ns n lxte v reserv n e alloc q xin e let let let x x m e let x m e figur syntax order context permit destruct oper frontier such initi size preserv properti ensur oper frontier may done inplac orderli lambda calculu idea need defin languag data layout alloc shall call orderli lambda calculu l ord short sake breviti paper focu small core languag captur essenti idea syntax core languag given figur use notat n nari fuse t data layout purpos requir new type order lambda calculu fuse constructor model adjac modal constructor model indirect multipl unit type includ base type integ type unrestrict function ns nonsens type type singl uniniti word memori import purpos distinguish type unit size henc kept regist stack type must heap alloc accomplish kind distinct k kind reg classifi type valu may load regist wherea kind h classifi type may heapalloc a strict superset former import properti languag type uniqu determin size data classifi simplic smallest unit size consid singl machin word multipl unit type size zero sinc inhabit singl valu therefor need rep resent view function type unit size sinc expect practic implement would use closur repres function closur convers lambda becom existenti quantifi record alloc heap henc repres pointer unit size assum actual code function static alloc order context w map order variabl type t use describ region memori in particular frontier notion size type extend natur order context befor exchang discard duplic variabl order context permit unrestrict context g map ordinari variabl x type wellformed judgement unrestrict context check unrestrict variabl units typesthat is type whose kind reg ordinari variabl correspond regist stack slot underli machin restrict word size via kind mechan key point orderli lambda calculu larg object requir explicitli alloc initi term level l ord split four separ syntact class coercion term q heap valu v term express e main type judgement describ figur along comment size properti enjoy complet definit type rule found appendix a make alloc explicit introduc kind effect lan guag reserv alloc memori effect oper saw previou section effect may interfer order control effect interact introduc distinct term express e style pfen davi without explicit modal type comput the comput type seem use set sinc inclus express term instead take partial arrow primit syntact form impos overli restrict actual relat to permiss than anorm cp form mani compil typic use term term correspond valu reserv alloc cours evalu may contain free refer order variabl that is frontier present term valuesbut straightforward use includ primit oper alloc such integ oper ation level type judgement term form t term may refer variabl g arbitrarili often must refer variabl w exactli onc order fashion type rule term part unsurpris labstract case bodi function check express argument place unrestrict context notic permit free refer frontier function sinc function applic lie categori express judgement size properti mean w w wellform order context wellform unrestrict context wellform type look like nonallocatingnonreserv term type t type express type consum w close valu type t welltyp frontier order context w figur type judgement l ord defer discuss elimin form section term must close respect order context nonstandard term v term correspond pointer heap locat occupi heap valu v canon form term type t g trm interest facet present account heap alloc without requir explicit heap for exampl style morrisett harper heap semant pointer valu v repres label bound v explicit heap datastructur sinc share observ simpl calculu avoid extra complex repres valu directli v denot pointer locat occupi v stress pure technic convenienceit straightforward give heap semant share made explicit usual fashion heap valu may occur memori therefor essenti close open heap term would requir new copi implicitli alloc everi time differ valu substitut it contrari aim l ord type judgement heap valu val t enforc properti primari motiv heap valu come oper semant languag howev intend play role socal semant object permit introduc cours evalu perfectli reason programm write heap valu sourc program correspond precis notion static alloc datathat is data present heap start program import differ heap valu term heap valu may arbitrari size reflect syntax valu denot contigu block memori v laid adjac valu v fact fuse term adjac mean constructor associ sens term represent memori term term describ three success word memori occupi integ respect fundament differ ordinari lambda calculu pair almost certain differ represent associ one exampl valu differ type represent exampl includ valu involv order unit sinc choos repres valu expect represent runtim coercion term exist provid mechan convert valu differ type structur underli represent coercion level coercion term fragment languag extrem simpl consist variabl a order unit fuse q q coercion bind elimin form provid express level section intuit coercion term packag frontier new form without chang underli represent exampl term take section frontier describ section describ combin singl fuse could bound new name use express level coercion let ordered term ensur two section alreadi adjac henc combin fuse chang represent type judgement coercion term form w crc signifi q reassoci w form t coerciv natur term exhibit size preserv properti hold judgement unit term welltyp empti context express far seen valu form occupi coerc memori modifi it memori oper reserv alloc initializationar done level express wellformed judgement express given t order context w type judgement describ current state frontier destruct natur reserv alloc oper interpret frontier consum express e is space frontier must either alloc e explicitli destroy saw section memori oper effect type system express must care design ensur effect interfer enforc alway pass entir order context and henc entir frontier subexpress but subterm way ensur everi possibl allocatingreserv express correct view entir frontier evalu express conceptu divid four basic categori ordinari express inclus valu express given express retm g g valu form express consum re sourc unsound permit term contain order vari abl sinc may substitut unrestrict variabl primit let form discuss below function applic express sinc evalu bodi function may engend memori effect applic syntact restrict permit applic term anoth term g trm term appli permit refer order variabl argument must close sinc unrestrict function may duplic drop argument applic allow us defin termlevel let construct follow deriv type rule g let fulli gener sinc way bind result applic variabl therefor introduc primit let form bind express variabl notic pass entir order context first sub express crucial point e may memori effect could invalid previou assumpt state frontier e might make therefor e cannot assum anyth state frontierthat is must welltyp empti order context somewhat surprisingli safe permit e free refer order context reason express consum resourc contain them mean valu form express retm welltyp empti order context therefor order context w empti e must explicitli destroy alloc memori describ w reach valu sinc valu orderedli close safe substitut freeli unrestrict variabl x memori express interest nonstandard express deal directli frontier recal three oper interest reserv space frontier initi piec frontier alloc prefix frontier heap three oper captur directli primit shall see later entir necessarybi extend type system somewhat give type primit constant simplic howev first present primit notion first oper reserv discard resourc previous mention order context introduc n word nonsens frontier reserv n correspond exactli reserv oper describ section destroy exist data frontier provid block new uniniti space memori must written use assign g order term q give locat order context valu written locat refer bodi express linear order context import here sinc destruct chang type memori locat point space alloc left side frontier alloc construct coercion term q describ section frontier packag box heap valu split order context ensur term alloc prefix frontier new heap valu given pointer type permit use unrestrictedli rest program coercion express memori express manipul frontier use order variabl stand offset frontier coercion use manipul order variabl combin bigger term break smaller piec simplest coercion express elimin form unit g fuse load x mi e load load fuse figur exampl directload defin term split sinc unit term consid zero size may elimin freeli order context without chang size adjac properti term frontier elimin form fuse also coercion express intuit sinc describ two adjac block memori free view singl block memori describ q two adjac block offset name last coercion oper simpl order let form permit order term packag renam load express memori oper account creation heap object equal import abil load valu heap object heap must way access compon pointer small object dereferenc directli g kind restrict ensur valu load oper fit regist access field larger object provid composit elimin construct take pointer larg object produc two pointer immedi subcompon object g notic variabl bound compon themselv rather pointer compon m use express may success iter larg composit object arriv pointer small object load directli construct somewhat disturb practic standpoint two reason first place seem requir pointer interior object sometim call loc order implement effici complet question interior pointer quit problemat copi garbag collector at least implement direct pointer interior heap object importantli howev construct permit constant time access field heapalloc record exampl access last element nari tupl rightassoci form requir comput arriv term load directli clearli impract choos use split oper primit notion provid simpl natur elimin form practic howev like term would elimin favor one number directload construct defin term split figur take directload primit give direct implement need interior pointer elimin field record load constant time frontier semant order make connect orderli lambda calculu frontier model alloc clear semant keep explicit frontier mean reduct relat defin express rather frontier express togeth frontier term w as defin figur that is offset valu v standpoint oper se mantic frontier play role similar explicit substi tution type judgement frontier w w assert order context w describ frontier look like w evalu relat orderli lambda calculu given term frontierexpress pair relat we w indic frontier w express reduc singl step express e new frontier w complet definit relat given appendix b straightforward show reduct preserv type welltyp term valu may alway reduc further theorem progress preserv either we w we w proof proof proce induct deriv t help sever substitut lemma auxiliari lemma prove properti order context frontier size properti import properti orderli lambda calculu type uniqu determin size data repres inform mention number size properti calcu lu particular coercion term preserv size term express alway unit size so kept regist properti formal follow theorem size i w crc val gw trm gw exp w proof claus proceed separ induct type deriv repres lambda calculu one intend use l ord target languag translat higherlevel languag show done provid intuit languag use present section translat simpli type lambda calculu product unit orderli lambda calculu begin defin translat ptq map ordinari lambda calculu type l ord type product case unsurpris repres pair pointer heapalloc record contain subcompon discuss section represent possibl repres ordinari lambda calculu unit pointer orderli lambda calculu unit recal l ord mean chosen represent unit pointer zeroword object correspond precis standard implement valu type unit distinguish pointer noth eg null pointer analog translat defin term level interest case translat pair sinc pair term requir alloc begin defin l ord function pair reserv leta a leta a x x alloca ret x first line function reserv space frontier pair creat bind singl order variabl point begin space line give name respect first second word newli alloc space type rule reserv see second locat extra zerobyt valu type unit attach line serv split elimin thi line initi two locat renam final line alloc initi space heap name result x becom return valu function line definit demonstr variou oper interact permit lowlevel code written rel highlevel man ner particular mention offset all everyth done term standard alphavari variabl may seem code somewhat verbos simpl defin syntact abbrevi composit term elimin much verbos exampl common case initi term coercion term q variabl may take advantag alphaconvers simpli reus old variabl name yield standard look assign syntax also trivial defin composit reserv oper precomput offset variabl work definit term left exercis reader use abbrevi write pair constructor quit succinctli reserv x x alloca ret x elimin form pair given succinct definit use direct load defin figur fst load ret x load ret x remaind translat simpli type lambda calculu straightforward variabl introduc translat assum fresh plxteq pe let x x x let x let x let ret x fst x snd x coalesc reserv translat simpli type lambda calculu term orderli lambda calculu break high level memori abstract expos finer grain detail expos detail enabl optim express abstract level simpl exampl abil coalesc multipl call alloc exampl consid result translat term translat with minor simplif alloca a x ret x reserv asa x alloca a x ret x code fragment make two separ call alloc reserv two word space easi see second reserv oper coalesc first reduc total number call alloc opt reserv asa alloca x alloca a x ret x kind optim commonli done untyp compil easili express type set step consid tri coalesc two alloc op erat addit coalesc reserv unfortun gener possibl set problem current cannot express pointer frontiersuch pointer would difficult typecheck sinc type locat frontier chang therefor unabl initi second field top level pair move pair heap extens futur work paper given detail present core orderli lambda calculu develop highlevel framework discuss issu alloc datalayout full languag includ account sum recurs type permit sum alloc tag done use memori mechan alreadi describ addit extend coercion level includ order function applic form shown rich languag coercion defin set final shown reserv alloc write primit replac type constant elimin need incorpor special memorymanag primit languag full languag describ separ technic report import question yet address give account alloc object dynam extent system develop far predic abil static predict size object base type object array howev clearli true adhoc treatment array fairli easili integr languag unsatisfactori sinc intent make alloc explicit mechan interest possibl use depend type formal type analysi formal introduc notion dynam extent type system intend explor avenu futur anoth import area futur research attempt account pointer frontier itself saw section forc alloc object heap initi object pointer it prevent use optim destin pass style optim relat work order logic order type theori explor extens pfen polakow signific amount previou work appli ordinari linear type theori memori manag none address nor intend address question separ alloc initi give foundat account data layout work close address issu discuss alia type formal smith walker morrisett alia type allow alias inform track exactli type system quasilinear type system allow memori locat destruct updat sinc alias track exactli explicit free oper provid dealloc space use optim destin pass style optim encod fairli easili languag alia type formal seem provid explicit coalesc alloc call provid explicit type theori describ data layout manner attempt do r refer count comput interpret linear logic certifi compil java type structur lowlevel program langaug flexibl type analysi garbag collect base linear type system safe dialect c function represent data structur hole realist type assembl languag semant memori manag polymorph languag system f type assembl languag design implement certifi compil frank pfen ning judgment reconstruct modal logic order linear logic applic natur deduct intuitionist noncommut linear logic relat natur deduct sequent calculu intuitionist noncommut linear logic properti term continuationpass style order logic framework overview flintml compil alia type oper interpret linear logic elimin array bound check depend type tr function represent data structur hole elimin array bound check depend type design implement certifi compil quasilinear type semant memori manag polymorph languag flexibl type analysi oper interpret linear logic system f type assembl languag certifi compil java type structur lowlevel program languag natur deduct intuitionist noncommun linear logic order linear logic applic ctr byoungro mari w hall heidi e ziegler custom data layout memori parallel proceed intern symposium code gener optim feedbackdirect runtim optim p march palo alto california lar birked noah torpsmith john c reynold local reason copi garbag collector acm sigplan notic v n p januari amal ahm david walker logic approach stack type acm sigplan notic v n march