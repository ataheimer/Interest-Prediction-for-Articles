t ldl system prototyp a logic data languag ldl system provid declar logicbas languag integr relat databas logic program technolog support advanc data knowledgebas applic comprehens overview system descript ldl languag compil techniqu employ translat ldl queri target queri execut plan store data present architectur runtim environ system optim techniqu employ order improv perform assur safeti compil queri given experi gain far system applic area ldl approach appear particularli effect discuss b introduct object logic data languag ldl system develop technolog new gener databas system support rapid develop sophist applicationssuch expert system advanc scientif engin applic object new sinc consider interest databas languag babu propos vehicl facilit develop complex data intens applic bridg gap databas program languagethi gap often describ bell commun research morristown nj imped mismatch coma yet approach favor previou research interfac relat dbmss tradit languag rigel sch recent major effort made integr databas program languag objectori paradigm kilo approach tend abandon relat databas favor objectori oneoften support limit queri capabl navig queri style prerel system contradistinct approach ldl research taken viewpoint full program capabl achiev extens relat queri languag technolog advanc provid effici support integr part databas manag system also believ system repres import waystat toward futur knowledg manag system combin effici infer mechan logic effici secur manag larg inform bank databas system toward goal ldl project began produc new languag new techniqu compil queri optim effici portabl prototyp paper recount experi variou lesson learn effort overview begin ldl design rulebas extens relat domain calculu base languag in domain calculu variabl stand valu rather tupl tupleori calculu larg due influenc prolog also qbe inlin version felt express power former eas use latter provid desir beacon endeavor straight extens sql yet domain calculu tupl calculu known equival ull overal techniqu use implement ldl easili appli suitabl sql extens basic research challeng face provid system combin express power prolog function facil data base manag system dbmss as support tran action recoveri schemabas integr effici manag secondari storag soon becam clear approach base coupl prolog relat databas boc cegw kuyo li jacv would support level function perform eas use seek realiz fulli integr system requir distinct queri languag applic languag arduou research challeng stood way realiz goal first issu came focu user respons execut control s earli s databas field wit dramat evolut navig system relat one navig system codasylcompli dbmss programm must explicitli navig maze databas record pay care attent sequenti order record visitedth key effici relat dbmss instead user respons formul correct queri use logicbas languag limit express power sql quel ull special system modul call queri optim compil queri effici execut plan contrast prolog programm must care order rule goal ensur effici execut termin basic mismatch system coupl prolog relat dbmss suffer also challeng ldl quest harmoni integr leav two altern path open zan one consist ad navig databas facil prologlik languag reject navig procedur semant prolog favor pure declar one wherebi order goal rule program becom immateri fall critic decis taken pursu second solut expect would provid better usabl suitabl massiv parallel lead excit research problem technolog breakthrough describ follow paragraph earli decis profound repercuss design languag implement prolog programm must keenli awar sequenti execut model sldresolut leftmost goal first rule select veko llo termin perform program depend it also semant mani nonhorn construct primarili cut updat also negat setof predic base execut model nonhorn construct introduc prolog obtain express power need applic develop decid divorc execut order rule goal program first technic challeng face ldl research provid clean design formal declar semant nonhorn construct need languag reason express power result languag differ prolog term construct program style entail design choic regard ldl implement approach dictat need support databas applic effici thu ldl rule compil fact base describ compil time schema updat freeli run time need program interpret recompil first differ prolog system fact rule treat way thu requir interpret fact chang furthermor conclud implement technolog prolog system base backwardchain base effici implement sldresolut unif llo war depend main memori differ approach need obtain maximum perform secondarystorag resid data thu simpler execut model select base upon oper match comput least fixpoint iter benefit approach match oper set fact implement use simpl extens relat algebra zan zan use mani relat databas second advantag sinc recurs replac iter use simpler static environ execut chosen simpler target languag ldl design face challeng design sophist compil support full function sourc languag approach chosen built two pillar ffl use global analysi infer bind induc specif queri rule goal ffl compil method rewrit recurs program that such effici safe implement fixpoint comput equival program are first ldl implement complet base compil use earli version languag call fad target languag interpret languag dakv fad languag base relat algebra support massiv parallel databas machin design mcc experi produc fulli function system fad drop target languag follow reason fad interpret avail robust fast enough support seriou experiment furthermor fad implement made avail larg expens parallel systemhardli afford portabl vehicl releas ldl led decis design develop saladan effici portabl ldl system unix implement assum singletupl getnext interfac compil ldl program underli fact manag singletupl framework creat opportun refin optim avail framework relat algebra implement includ fact manag databas resid virtual memori support effici access complex variabl record structur avail ldl complet salad prototyp made possibl start develop interest applic ldl variou extens improv ad system result experi system improv expand domain applic beyond tradit databas applic owe open architectur compil c salad find applic rulebas system rapid prototyp applic c environ incipi understand paradigm program ldl also emerg experi along variou idea desir improv structur paper section summar key techniqu concept implement system novel untri techniqu develop ldl research parallel effort meta thu section give brief survey novel featur languag summar rule compil techniqu constant push effici implement recurs section describ variou execut scheme support system describ optim that compil time select safe effici execut given queri section describ architectur implement salad includ discuss main modul section variou techniqu peephol optim section fact manag section section recount experi ldl salad use novel applic area enabl technolog languag design languag design combin declar style relat languag express power prolog concret meant use horn claus prolog did reject remain prolog construct negat set of updat cut etc construct ad prolog obtain express power necessari write gener applic horn claus welldefin declar semant addit construct oper semant base prolog execut model thu first challeng work design languag proper construct negat set updat nondetermin give formal semant extend horn claus semant formal defin use notion minim model altern equival definit base notion least fixpoint also possibl veko llo detail discuss ldl design outsid scope paper focus implement issu thu provid brief discuss main construct illustr rich languag complex compil optim issu pose implement reader interest detail discuss ldl formal semant refer nat languag datalog support rule recurs full horn claus languag also support complex term use function symbol thu instanc record employe could follow employeenamejo doe admin educationhigh school along employe name find depart work admin educ admin simpl term two complex term entail intern structur unrestrict complex instanc educ field one may want keep detail inform such school name level major peopl colleg degre and instanc record follow format employeenamejo cool sale educationcollegeharvard bs math subargu refin detail descrip tion thu enabl model object arbitrarili complex structur includ recurs structur list tree ldl enhanc complex term capabl provid set term nest rela tion thu complet educ record person follow employeenamejo smart mt educationfhigh school collegeharvard bs math collegeharvard ms engr g set term ldl first class citizen wellknown properti set commut idempot associ bnst shtz addit nest relat ldl provid simpl construct nest unnest relat problem negat goal recurs rule repres one main research challeng defin declar semant ldl problem resolv introduct rather natur concept stratif apbw naq prz inform speak result disallow circular definit predic use negat same similar constraint must also observ defin nest set bnst shna updat defin allow full use construct rule support notion databas transact nakr difficult problem formal semant solv use dynam logic har semant defin reduc first order logic absenc updat final notion function depend use support nondetermin construct call choic krn compil problem ldl compil perform sever function begin pars rule predic connect graph pcg keot end code gener phase detail complex process discuss section other beyond scope paper section describ rule rewrit phase conceptu kernel compil object special refin origin program one special particular constraint result queri rule hand larg extent process view gener wellknown principl push select project oper relat express compil phase begin queri form given ie queri mode declar specifi argument given ground actual queri time then constant migrat step nonrecurs predic perform instanc consid queri form grandmaxi where x denot valu suppli actual queri time follow set rule constant migrat step actual insert x sinc valu known run time treat constant compil correspond argument variabl rule yield grandmaxi set rule simplifi drop first argument grandma parent grandmay thu origin program special given queri form furthermor sinc x migrat queri form databas predic father mother correspond select oper push root relat algebra tree repres queri leaf node select appli databas tupl ull select push oper linchpin queri process strategi relat system krza ull implement simpl rule transform techniqu treatment recurs predic is gener complex program special approach describ work simpl case recurs predic instanc follow queri ancmarc z ancx z ancx y parenti z support special anc rule ancmarc z ancmarc y parenti z ancmarc marc personmarc drop constant argument anc yield ancmarc personmarc singl fixpoint iter comput transit closur effici origin queri condit appli directli datum parent relat deriv anc relat ie select push insid recurs furthermor refin fixpoint known semina fixpoint use solv problem ban bar ull saz semina fixpoint iter basic begin comput parent marc parent parent new ancestor found complex rewrit requir howev follow queri map singl fixpoint ancx brian here recurs rule must first rewritten rightlinear form follow ancx z parentxi ancx z then special approach appli result linear transit closur kind rule easili map singl semina fixpoint frequenc simpl transitiveclosur type rule encount ldl compil perform sophist analysi recogn case recurs support effici singl fixpoint comput howev mani situat constant cannot push recurs ahul and therefor recurs goal bound argument cannot comput effici safe singl fixpoint comput the problem detect constant push recurs gener undecid bet thu complex rewrit techniqu use handl gener case take instanc wellknown gener exampl two individu gener parent are everyon gener himherself sgxx queri as sgmarc x cannot support rule obtain replac x marc more over bottomup comput imposs sinc exit rule sgxx could qualifi infinit number tupl similar problem occur comput procedur listappend take advantag bound argument essenti safe effici implement consider amount research devot key problem reader refer bara overview techniqu ldl compil use magic set method bmsu saz gener count method saz express rule rewrit script lead effici implement use fixpoint comput nutshel method take recurs cliqu that given queri cannot support well mean fixpoint comput recast pair connect recurs cliqu amen effici fixpoint implement transform illustr exampl peopl gener marc sought one altern way find peopl consist ffl deriv ancestor marc count level go marc zero level ancestor himself ffl ancestor marc say x found descend x comput level count down descend level counter zero gener marc express previou comput follow j j denot respect successor predecessor integ j sgup marc sgdownx thu initi recurs cliqu reformul pair recurs cliqu connect via index j recurs cliqu implement effici safe use fixpoint comput inde basic transit closur oper equival preserv transform introduc use intuit semant ancestri perform full gener pure syntact basi inde observ success recurs call gener goal sgmarc x x xp bound wherea yp not thu recurs sgdown rule basic construct drop bound argument retain other new argument ad perform countdown recurs rule sgup instead built retain bound argument exchang recurs predic head tail rule inde want simul topdown comput bottomup one ad countup index also observ origin exit rule use glue togeth comput final bound part queri goal becom new exit rule sgup unbound part becom new queri goal gener formal express rule rewrit techniqu known gener count method given saz count method effici acycl databas loop forev prolog doe cyclic databas eg samegener exampl abov parent relat cycl magic set method use solv cycl problem also complex recurs situat bmsu saz function symbol present previou exampl compil techniqu describ appli present entail manipul tree list complex structur anoth area consider innov ldl compil support set term set term treat complex term commut idempot properti properti support via compil time rule transform techniqu use sort variou optim techniqu elimin blind runtim search commut idempot match shtz mode execut even though ldl semant defin bottomup fashion fashion eg via stratif implementor use execut faith declar semant particular execut bottomup topdown well hybrid execut incorpor memo mi choic enabl optimizercompil select custom appropri mode given program first approxim easi view ldl execut bottom comput use relat algebra instanc let p queri follow rule p p either databas deriv predic then queri answer first comput relat repres p p comput join follow project actual ldl optim compil select implement rule use four differ execut mode follow ffl pipelin execut comput tupl p join tupl p pipelin fashion avoid comput tupl p join p ie superflu work wherea tupl p join mani tupl p comput mani time ffl lazi pipelin execut pipelin execut which tupl gener p store temporari relat say rp subsequ use therefor tupl p comput exactli even use mani time ie amort work well superflu work pipelin execut further pipelin execut comput ptupl one time possibl avoid residu comput case intellig backtrackingthi call backtrack advantag ffl lazi materi execut proce lazi pipelin case except that given zvalu tupl p join tupl p comput store relat proceed main advantag execut execut reentrant a properti import context recurs wherea two pipelin execut comput tupl p one time hand execut backtrack advantag materi execut comput tupl p store relat say rp then comput proce use tupl rp note amort work reentrant advantag lack backtrack superflu work advantag note discuss gener ornod possibl empti set bound argument conclus pipelin execut use join column p wherea materi execut best zvalu p join p tupl note case respect lazi evalu incur overhead due check need p tupl reentrant properti especi use predic scope recurs queri comput top down therefor case lazi materi execut prefer lazi pipelin execut otherwis lazi pipelin execut prefer exploit backtrack properti even though limit discuss singl nonrecurs rule gener includ arbitrari rule recurs present detail cgkb optim problem queri optim deleg respons choos optim execut a function similar optim relat databas system optim use knowledg storag structur inform databas statist estim cost etc predict cost variou execut scheme chosen predefin search space select minimum cost execut compar relat queri ldl queri pose new set problem stem follow observ first model data enhanc includ complex object eg hierarchi heterogen data allow attribut secondli new oper need oper complex data also handl new oper recurs negat etc thu complex data well set oper emphas need new databas statist new estim cost final use evalu function ie extern procedur function symbol conjunct recurs provid abil state queri unsaf ie termin unsaf execut limit case poor execut optim guarante choic safe execut formal defin optim problem follow given queri q execut space e cost model defin e find execut e minimum cost discuss advanc context formul problem solut problem describ along three main coordin execut space search strategi cost model search space strategi search space optim execut defin set allow execut turn defin set i execut graph ii graph set allow annot associ node execut graph basic structur nest andor graph represent similar predic connect graph keot rule graph ull except give specif semant intern node describ below andor graph correspond nonrecurs program obviou graph andor node onetoon correspond head rule predic occurr recurs predic occurr p subtre whose root correspond rule predic also rule recurs cliqu contain p intuit fixpoint rule node ie predic occurr p need comput comput p annot provid inform need model execut intuit paramet properti model annot if given structur execut graph optim choic inform greedili chosen exampl given order ie structur join conjunct queri choic access method creation indic push select exampl choic greedili decid hand push select recurs cliqu properti greedili chosen instanc annot defin four execut method previous describ use predic occurr ie node annot execut method addit annot describ index use whether duplic elimin perform particular node much effort devot devis effici search strategi enabl optim use altern strategi includ exhaust search stochast search polynomi algorithm tradit dbm approach use exhaust search use dynam program algorithm propos seta well known even render useless join relat krza propos exhaust search optim ldl program execut space approach feasibl long number argument number predic occurr bodi reason small ie stochast approach provid effect mean find nearoptim solut intuit nearoptim execut found pick ran domli larg subset execut execut space choos minimum cost execut simul anneal iowo variat thereof sg effect limit subset must search reason approxim found polynomi search algorithm obtain make simplifi assumpt natur cost function krbz present time algorithm comput optim order conjunct queri queri acycl cost function satisfi linear properti call adjac sequenc interchang asi properti further algorithm extend includ cyclic queri cost model cost estim safeti cost model assign cost execut therebi order them intuit cost execut sum cost individu oper therefor cost function must capabl comput cost oper base descriptor operand three major problem face devis cost function comput descriptor estim cost extern predic safeti recurs queri presenc nest view especi recurs complex object estim descriptor relat correspond predic difficult problem complic fact logic base languag allow union nonhomogen set object net effect estim descriptor predic is effect comput queri algebra fashion is program execut abstract domain instead concret domain instanc age attribut may take valu concret domain wherea abstract domain take valu integ obvious comput domain difficult approxim comput devis effici also effect ldl extern procedur eg c program treat interchang manner predic intuit extern procedur view infinit relat satisfi constraint therefor concis descriptor infinit relat must declar schema cost function oper infinit relat must devis abstract approach taken ldl present cgkc approach integr tradit optim framework seamless fashion cost model must associ infinit cost execut comput infinit answer never complet unsaf queri detect optim avoid choos them exampl consid follow definit integ zero given integ k intend program unsaf argument free let us discuss safeti predic first argument bound second free note iter recurs rule valu j increas upper bound valu given valu k thu conclud number iter finit iter produc finit tupl consequ rule safe gener problem check safeti undecid safeti check algorithm propos krr find wellfound formula use suffici condit guarante safeti algorithm enum algorithm exhaust exponenti number case ensur exist wellfound formula recurs cycl enum algorithm guess wellfound formula check one one found satisfi system architectur figur show conceptu architectur current ldl prototyp six basic compon modul current prototyp user interfac fact manag schema manag queri manag rule manag queri form manag section provid brief overview function differ modul section discuss detail pertain system architectur relev compil process main modul user interfac receiv process user command ie invok variou procedur appropri manag modul command avail user interfac describ cg fact manag respons maintain variou data structur associ extension databas well provid runtim support ldl queri fact manag data structur collect refer intern fact base schema manag receiv schema definit file user interfac record inform intern form type index key constraint subsequ use fact manag verifi databas base relat specif use rule current implement contain approxim line code half prolog half c figur conceptu architectur manag verifi consist queri manag receiv queri user interfac determin compil queri form appropri queri invok correspond c program pass constant queri argument rule manag respons process intent databas ie rule base initi process rule pars variou syntact consist check perform pars rule store intern rule base sent global pcg gener respons transform rule set predic connect graph pcg global pcg tabular data structur entri specifi rulego index predic occur rule base provid effici mean access rule subsequ queri form pro cess rule process recurs cliqu analyz invok identifi maxim recurs cliqu detect cliqu exit rule creat necessari intern structur repres cliqu rcbox strongli connect compon predic pcg defin recurs cliqu addit data structur repres ldl modul extern cgka also produc rule manag queri form manag embodi bulk ldl compil technolog receiv queri form user interfac respons produc compil version queri form figur show organ queri form manag relev pcg gener gener relev pcg rpcg andor graph contain rule relev queri form data structur gener actual tree instead graph sinc common subexpress elimin current part compil design rpcg extract process constant migrat ie process substitut defer constant queri form constant relev rule variabl wherev possibl also perform note constant migrat recurs rule optim transform rpcg associ recurs cliqu necessari choos optim execut perform safeti analysi reorder goal or node pcg appropri node pcg annot optim reflect among thing adorn preselect postselect execut strategi employ transform rpcg term control pcg cpcg preenhanc respons provid program adorn optim use asi compil miscellan rewrit optim eg choic also handl preenhanc enhanc respons rewrit recurs rule re figur queri form manag architectur cursiv cliqu recast form guarante effici execut via fixpoint oper variou recurs queri process strategi support includ stack base implement gener count method magic set method semina fixpoint method output enhanc enhanc pcg epcg set rewrit use rule transform techniqu produc revis equival pcg set object map first order term order avoid set unif runtim set properti commut idempot support via rule rewrit process context rule use constrain set altern must explor shtz final code gener travers pcg gener c code ultim result complet c program compil link form final compil queri form code gener actual quit sophist perform variou peephol optim eg intellig backtrack existenti queri optim provid default annot case asi compil support variou execut strategi fli code gener compil techniqu addit rule transform describ section ldl compil appli number techniqu improv effici runtim code prune execut graph much unif requir support complex term perform compiletim consid instanc follow rule compiletim rewrit rule result function fxi migrat rule p replac occurr v subsequ first rule p deem fals thrown relev rule set furthermor second rule p result unif x substitut throughout rule x u compiletim determin whether assign valu x assign y check valu x valu y requir base whether given variabl bound not note code gener would choos entri rule p appropri place check order detect earli failur wherea assign would place success rule order avoid unnecessari assign rule fail thu runtim effort reduc elimin rule perform compiletim unif simpl match assign necessari runtim philosophi employ set unif set object map first order term compiletim ordinari match requir runtim static variabl one goal rewrit perform system renam variabl scope variabl global respect program purpos rewrit runtim effici make variabl global space variabl alloc static oppos dynam offset frame pointer moreov assign variabl done effici global framework paramet pass becom unnecessari hand nonrecurs rule invok one predic duplic thu result larger object code adorn queri form compil construct adorn program use notion sideway inform pass sip defin ull mark argument predic either bound instanti particular constant valu runtim free the current predic occurr instanti runtim existenti it appear elsewher rule except possibl head existenti argument note rule case duplic and renam differ adorn predic occurr refer stabil transform saz thu predic adorn program associ uniqu bind pattern everi occurr predic conform bind pattern program segment gener predic exploit boundexistenti argument gener effici code approach gener code particular predic respect given bind pattern import deviat approach taken prolog result improv perform intellig backtrack nestedloop join oper impli pipelin execut present signific opportun avoid comput cannot gener new result literatur know intellig backtrack problem two type intellig backtrack address com piler getnext getfirst consid again ldl rule given abov let us assum rule compil queri rxi comput tupl r backtrack get next tupl b unnecessari sinc yield new tupl r compil choos predic p getnext backtrack point rule sinc variabl bound illustr getfirst intellig backtrack consid predic b attempt get first tupl b fail unnecessari backtrack p sinc chang bound argument b therefor tupl found b backtrack point b sinc variabl x bound henc compiletim analysi intellig backtrack implement littl if ani overhead incur runtim result elimin unnecessari runtim process rule r also serv illustr addit optim util compil respect existenti argument predic b variabl z care existenti variabl therefor assign valu z unnecessari might seem inconsequenti optim experi shown avoid singl assign innermost loop great influenc execut time again compiletim analysi avoid unnecessari overhead runtim implement recurs updat choic abov discuss backtrack assum pipelin execut ala prolog order effici compil advanc construct ldl addit execut strategi ie materi lazi materi lazi pipelin snapshot stackbas execut must use differ execut method along respect advantag disadvantag describ detail cgkb ldl code gener capabl select appli execut strategi chosen op interest note queri rx variabl existenti respect rule r getnext backtrack point rule would predic b timiz predic rule set moreov languag featur dictat appropri execut strategi must appli set group recurs exampl materi essenti correct execut full materi howev allow select push is therefor ineffici presenc bound argument therefor lazi materi execut appli bind util addit recurs rewrit strategi employ compiletim recast recurs form guarante effici execut via fixpoint oper magic set rewrit method use lazi materi execut strategi appli possibl cyclic data user compil option state need detect cycl case compil choos stackbas implement count method better perform approach pipelin lazypipelin execut strategi employ henc appropri execut strategi chosen context compiletim ensur effici runtim execut semant ldl ascrib dynam logic interpret updatesnakr snapshot may requir everi updat oper compil doe howev recogn instanc snapshot necessari and thu sequenc updat collaps implement ldl nondeterminist choic construct requir materi store function depend follow rule tabl x valu materi due choic construct chosen valu particular x commit howev success queri rule r possibl goal x result backtrack rule p obtain new choic ie valu y may contrast prolog cut bad choic result failur queri valu commit materi tabl use avoid unnecessari recomput thu bind x obtain predic b check perform determin valu alreadi commit and so remaind rule need execut again compiletim techniqu use reduc comput effort runtim prolog cut also provid function depend express fact manag fact manag provid runtim environ ldl program support ldl object atom set list well databas object tupl base deriv relat current im plement object kept virtual memori ldl data type directli support fact manag implement c abstract data type is fact manag provid definit well set routin oper object type level abstract maintain translat fact manag itself hand free take advantag data represent sake effici exampl complex object store onedimension array first zeroth c compon functor name function fm get functor argobjecti use translat select th compon complex object fact manag implement inlin ie preprocessor array lookup objecti similarli fact manag store set sort array set oper union intersect implement effici effici support base deriv relat provid tupl level call fm get first fm get next key consider design fact manag number oper perform innermost loop execut ie nest join exampl get next tupl base relat postselect bound argument thu relat store call fm get next reduc follow link list henc suitabl inlin implement possibl databas kept inmemori thu never necessari access next tupl disk order speed equal comparison use postselect exampl object databas assign uniqu represent compar use hardwar integ compar instruct case numer constant uniqu represent quit natur string complex object memori address actual object use uniqu represent whenev new complex object creat fact manag guarante address uniqu first check whether object alreadi exist effici oper sinc object kept memori uniqu represent also use fact manag perform databas oper effici exampl index use hash function oper directli uniqu represent rather ldl object substanti save sinc ldl object arbitrarili complex moreov bucket select search find match tupl involv equal comparison uniqu represent exploit well intuit uniqu represent allow fact manag reduc cost subsequ index lookup partial hash object creat deriv relat use translat support ldl languag featur recurs group recurs implement use semina fixpoint oper rewrit magic set etc taken place thu effici execut recurs depend effici implement semina oper therefor fact manag support oper directli partit recurs relat delta cumul compon return tupl compon semina scan desir sinc tupl insert sequenti delta compon implement easili maintain highwat mark similarli fact manag provid effici support group convert relat set given pattern describ specif groupbi oper desir experi experi use languag sinc ldl design queri languag rulebas applic languag need evalu function usabl start two domain independ comparison ldl databas queri languag suggest simplest queri easier express ldl sql hardli repres endors ldl sinc inordin difficulti express sophist queri sql wellknown yet experi suggest even complex queri readili express short ldl program consist experi ldl distinct complex queri simpl applic arbitrari blur found easi develop rapidli complex databas applic includ comput scienc genealog nat program part explos inventori control shop schedul side coin involv compar ldl rulebas system reader may notic coars descript ldl compil map function backward chain system topdown mechan forward chain bottomup inde felt former conduc express power languag second conduc effici implement databas context thu program ldl similar program prolog op yet differ ldl prolog signific often baffl experienc prolog programm prolog power ldl mani respect builtin predic includ metapred moreov prolog variabl instanti dynam fashioneg differ goal instanti variabl complex term ldl restrict sinc although goal reorder compil time execut goal assum bind variabl also fact prolog stream one answer time provid programm opportun fine control ldl hand ldl provid structur program para digm cleaner syntax semant optim excus user think hard execut sequenc benefit becom appar challeng area nondetermin recurs instanc recurs procedur gener integ zero given integ k express follow ldl repres natur render peano induct definit integ augment condit k second rule ensur termin one first rule ensur answer return neg k second formul also possibl ldl follow less clear intuit definit one handl prolog the equal sign would also replac is also write recurs predic travers graph possibl cycl prolog programm must make provis termin eg carri around bag answer produc far cycl easili handl ldl compil specif option final abil store effici partial result retriev later comput major plu ldl eas deal extern modul therefor plausibl argument made easeofus ldl prolog hardli reason jubil much work need bring system level usabl easeofus entic nonprofession programm develop complex applic analog mani gl user simpl applic current work two major extens direct toward enhanc eas use one debugg that given natur system tantamount answer justif capabl tradit debugg retrac execut program would littl help unsophist user sinc compil optim complet transform origin program instead plan answer justif capabl capabl carri dialogu user ask question as whi or not return answer dialogu direct user incorrect rule miss fact sourc problem also plan add visual interfac data entri display program visual procedur languag focu visual chang program state declar languag ldl focu display static relationship defin rule briefli describ aspect affect perform current implement ldl one import featur ldl elimin duplic result process recursionthat is all answer oppos all proof approach duplic need elimin certain case guarante termin travers cyclic graph moreov elimin duplic speed execut mani case exampl comput gener queri discov remov duplic result major perform improv sinc sibl databas two way prove relat through father mother becom even signific distant relat eg greatgrandpar explor time comparison use databas tupl show system comput gener roughli second wherea quintu prolog need minut result ratio hand also recurs queri duplic ever gener exampl append two list queri overhead duplic elimin wast henc ldl implement compar favor with say prolog particular list append found ratio favor prolog anoth factor contribut result uniqu check perform creation new object ie temporari list check remov ratio reduc ldl applic section report experi gain ldl system far recogn way util new technolog assess applic develop process use distinguish two class applic ffl old applic databas one tradit implement procedur applic program embed queri call underli databas ffl new applic applic thu far never implement or implement accomplish without use databas technolog describ previou section experi tradit databas applic posit concentr two new promis applic area data dredg har softwar data dredg class applic sourc data typic but exclus larg set empir observ measur organ one base relat addit data may ad time exist data seldom updat fact updat found erron typic sourc measur data empir process data record simul experi problem interpret data ie use verif certain hypothes or use formul new concept case hypothes concept may conceptu far remov level record data crystal definit entail interact humansystem process follow formul hypothesi concept translat ldl ruleset queri execut queri given data observ result result verifi deni then reformul goto otherwis exit obvious decis exit process entir subject decid programm stage hesh may either decid concept properli defin or data support concept abandon tri differ data process could carri use program languag use ldl advantag formul done abstract level henc iter time process significantli shorten compar tradit way iter involv usual programmingcompiledebug cycl experi data dredg two differ applic do main comput system perform evalu scientif data analysi area microbiolog first applic nat involv formul convoy concept distribut comput system in tuitiv convoy subset system entiti process task move togeth time one node network processor queue record data lowlevel consist ar rivaldepartur record individu entiti certain node concept defin ldl use small set rule actual instanc detect simul data use second instanc data dredg involv identif dna sequenc veri lowlevel digit autoradiograph record result experi perform sequenc ecoli bacteria gene again task extract definit four dna base acgt lowlevel noisi often imperfect data larg number heurist need appli case use ldl addit advantag simpl add special definit need use within narrow context gener definit thu rel simpl add smart system experi use increas har softwar mention extern c procedur use definit ldl program ldl context regard evalu predic normal expect use extern code except rather rule reserv special purpos eg graphic routin think situat lay extrem bulk softwar written standard procedur code small fraction rulebas encod ldl situat ruleset form har around bulk code implement rule portion form knowledg base contain definit cmodul type use system rule set defin variou way modul combin exportimport relationship modul constraint combin etc advantag organ knowledg base use decis pertain reus softwar subset instanc exist modul type recombin subject rule restrict support differ taskspecif ad advantag individu moduletyp verifi use exist verif method global behavior control ruleset current experi applic type domain bank softwar conclus perhap signific result ldl experi prove technic feasibl build logicbas applic languag extens relat databas technolog realiz object requir solv technic challeng mani frontslanguag design formal definit compil optim system implementa tion five year sinc begin project problem solv trough combin effort group six eight peopl perhap encourag aspect whole experi wide spectrum interest backgroundsfrom theoret one appli onewa repres group effort remain foucus gener remark degre synerg result system support theoret declar semant languag complet effici experi suggest reason easi develop applic use ldl program paradigm conclus base small sampl forwardlook programm lean toward declar languag logic program whether languag incorpor concept recurs attract larg throng mainstream practition still seen also clear ldl much offer current sqlbase gl wide use rapid prototyp dm thu ldl show real potenti power rulebas languag rapid develop data intens applic applic c environ main thrust current effort improv usabl system support interfac visual program answer justif acknowledg author would like recogn contribut follow person brijesh agarw francoi bancilhon catriel beeri charl kellogg pari kanellaki toni ohar kayliang ong arshad matin raghu ramakrish nan domenico sacca ode shmueli leona slepeti peter song emilia villarr carolyn west r univers data retriev lan guag toward theori declar knowledg workshop databas program languag naiv evalu recurs defin relat a differenti approach queri optim recurs deduct databas an amateur introduct recurs queri process strategi set negat logic data languag ldl bound propag select logic pro gram bound propag select logic program set constructor logic databas languag magic set strang way implement logic program on evalu strategi educ interfac relat databas prolog effici an overview ldl system the salad cookbook user guid use modul extern ldl abstract machin ldl toward open architectur ldl make smalltalk databas sy tem fada databas program languag rev the rapid prototyp conundrum model queri updat deduct databas logic databas deduct approach map gene genom project big fast firstord dynam logic queri optim simul anneal an optim prolog front end relat queri system optim rule data interfac km prolog relat databas th gener comput system optim nonrecurs queri nondeterminist choic data log toward real horn claus lan guag a framework test safeti effect comput optim logic base languag knowledg data intens applic a prolog databas system foundat logic program semant updat logic pro gram a logic negat databas system a logic languag data knowledg base on semant stratifi deduct databas logic program optim existenti datalog queri data abstract view updat rigel on implement simpl class logic queri databas implement recurs queri data languag base pure horn logic the gener count method recurs logic queri differenti fixpoint method stratif logic program some high level languag construct data type relat access path select relat databas manag system set group layer horn claus program rewrit rule contain set term logic data languag ldl optim larg join queri ldl logicbas data languag databas knowledgebas system the semant predic logic program languag an abstract prolog instruct set prolog databas queri languag season the represent deduct retriev complex object safeti compil nonrecurs horn claus tr implement simpl class logic queri databas naiv evalu recurs defin relat magic set strang way implement logic program extend abstract amateur introduct recurs queri process strategi evalu strategi educ prolog databas queri languag season bound propag select logic program gener differenti approach recurs queri evalu queri optim simul anneal foundat logic program nd extend ed optim larg join queri framework test safeti effect comput extend datalog toward theori declar knowledg declar semant deduct databas logic program parallel bubba objectori concept databas applic logic languag data knowledg base toward open architectur ldl set constructor logic databas languag rewrit rule contain set term logic data languag ldl optim existenti datalog queri databas updat logic program high level languag construct data type relat semant predic logic program languag logic databas deduct approach prolog databas system univers data retriev languag access path select relat databas manag system data abstract view updat rigel make smalltalk databas system optim logic base languag knowledg data intens applic optim ruledata interfac km optim nonrecurs queri toward real horn claus languag ctr ari segev j leon zhao framework join pattern index intellig databas system ieee transact knowledg data engin v n p decemb qing zhou ligong long sedatalog set extens datalog intellig inform process ii springerverlag london raghu ramakrishnan divesh srivastava s sudarshan praveen seshadri implement coral deduct databas system acm sigmod record v n p june ari segev j leon zhao effici mainten rulederiv data join pattern index proceed second intern confer inform knowledg manag p novemb washington dc unit state raghu ramakrishnan divesh srivastava s sudarshan coral control relat logic proceed th intern confer larg data base p august linda sirounian william i groski knowledg model unifi deduct nondeduct heterogen databas ieee transact knowledg data engin v n p februari jeffrey d ullman carlo zaniolo deduct databas achiev futur direct acm sigmod record v n p dec jiawei han chainsplit evalu deduct databas ieee transact knowledg data engin v n p april alanoli j andrew nematollaah shiri lak v s lakshmanan iyer n subramanian implement schemalog ari segev j leon zhao data manag larg rule system proceed th intern confer larg data base p septemb r g g cattel nextgener databas system commun acm v n p oct jiawei han ling liu zhaohui xie logicbas deduct databas system prototyp proceed third intern confer inform knowledg manag p novemb decemb gaithersburg maryland unit state michael stonebrak jim frew kenn gardel jeff meredith sequoia storag benchmark acm sigmod record v n p june haixun wang carlo zaniolo nonmonoton reason ldl logicbas artifici intellig kluwer academ publish norwel ma r ramesh weidong chen implement tabl evalu delay prolog ieee transact knowledg data engin v n p juli konstantino sagona terranc swift david s warren xsb effici deduct databas engin acm sigmod record v n p june carlo zaniolo data knowledg databas system deduct databas handbook data mine knowledg discoveri oxford univers press inc new york ny m stonebrak integr rule system databas system ieee transact knowledg data engin v n p octob f nihan kesim marek sergot logic program framework model tempor object ieee transact knowledg data engin v n p octob hasan m jamil belief reason ml deduct databas acm sigmod record v n p june mengchi liu design implement rol deduct objectori databas system journal intellig inform system v n p septoct vincenzo ambriola giovanni a cignoni distribut virtual machin support softwar process acm sigsoft softwar engin note v n p jan antonella guzzo domenico sacc_affn semiinflationari datalog declar databas languag procedur featur ai commun v n p april jess m almendrosjimnez antonio becerratern databas queri languag function logic program new gener comput v n p januari raghu ramakrishnan divesh srivastava s sudarshan praveen seshadri coral deduct system vldb journal intern journal larg data base v n april alexandra poulovassili carol small domaintheoret approach integr function logic databas languag proceed th intern confer larg data base p august nicola leon pasqual rullo antonella mecchia giusepp rossi deduct environ deal object nonmonoton reason ieee transact knowledg data engin v n p juli paolo ciancarini coordin rulebas softwar process esp acm transact softwar engin methodolog tosem v n p juli alexandra poulovassili carol small function program approach deduct databas proceed th intern confer larg data base p septemb yuhm shyy javier arroyo stanley yw su herman lam design implement k highlevel knowledgebas program languag osamkbm vldb journal intern journal larg data base v n p august vincenzo ambriola reidar conradi alfonso fuggetta assess processcent softwar engin environ acm transact softwar engin methodolog tosem v n p juli barbara catania elisa bertino static analysi logic languag defer updat semant ieee transact knowledg data engin v n p februari guy m lohman bruce lindsay hamid pirahesh k bernhard schiefer extens starburst object type function rule commun acm v n p oct shalom tsur deduct databas action proceed tenth acm sigactsigmodsigart symposium principl databas system p may denver colorado unit state use deduct objectrel databas cad softwarepractic experi v n p februari mengchi liu deduct databas languag problem solut acm comput survey csur v n p march mihali yannakaki perspect databas theori acm sigact new v n p sept