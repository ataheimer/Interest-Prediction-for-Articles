t modul via concept analysi a abstractw describ gener techniqu identifi modul legaci code method base concept analysisa branch lattic theori use identifi similar among set object base attribut discuss concept analysi identifi potenti modul use posit neg inform present algorithm framework construct lattic concept program concept repres potenti modul defin notion concept partit present algorithm discov concept partit given concept lattic prove algorithm correct b introduct mani exist softwar system develop use program languag paradigm incorpor objectori featur design principl system often monolith style make mainten enhanc arduou task softwar engin job would less difficult tool could transform code make explicit use modul function equival objectori code make use modul or class given tool partial autom transform legaci system could modern make easier maintain modular program offer ad benefit increas opportun code reus major difficulti softwar modular accur identif potenti modul class paper describ techniqu known concept analysi help autom modular main contribut paper are ffl show appli concept analysi modular problem ffl previou work modular problem made use posit inform modul identifi base properti function f use variabl x f argument type t sometim case modul identifi valu type depend upon exampl function f use field struct queue field struct stack concept analysi allow posit neg inform incorpor modular criterion see section ffl unlik sever previous propos techniqu conceptanalysi approach offer abil stay within system as oppos appli ad hoc method first suggest modular judg inadequ propos modular fine scale user move up partit lattic see section propos modular coars user add addit attribut identifi concept see section ffl implement prototyp tool use concept analysi propos modular c program implement test sever small mediums exampl largest exampl consist line sourc code see section exampl consid c implement stack queue shown figur queue repres two stack one front one back inform shift front stack back stack back stack empti queue function make use stack field indirectli call stack function although stack queue function written interleav order would like abl teas two compon apart make separ class one client other c code given figur paper discuss techniqu modul in case c class identifi code delin explicitli result inform suppli suitabl transform tool map c code c code aforement exampl although modular algorithm abl identifi decomposit unabl handl variant exampl stack queue tightli intertwin see section section show concept analysi abl group code latter exampl separ queue stack modul section introduc context concept analysi algorithm build concept lattic context section discuss process identifi modul c program base concept analysi section defin notion concept partit present algorithm find partit concept lattic section discuss implement result section concern relat work defin struct stack f int base int sp int size struct queue f struct stack front struct stack back struct stack initstackint sz f struct stack struct stackmallocsizeofstruct stack return s g struct queue initq f struct queue struct queuemallocsizeofstruct queue return q g int isemptystackstruct stack s f return ssp sbase g int isemptyqstruct queue q f return isemptystackqfront isemptystackqback g void pushstruct stack s int i overflow check void enqstruct queue q int i f pushqfront i g int popstruct stack s f isemptystack return return ssp g int deqstruct queue q f isemptyqq return isemptystackqback pushqback popqfront return popqback g figur c code implement queue use two stack defin class stack f privat int base int public stackint new int isempti f return sp base g int pop f isempti return return sp void pushint i f overflow check class queue f privat stack front back public new stackqueu size back new stackqueu size g int isempti f return frontisempti backisempti g int deq f isempti return backisempti return backpop void enqint i f frontpushi g figur queue stack class c concept analysi provid way identifi sensibl group object common attribut illustr concept analysi consid exampl crude classif group mammal cat chimpanze dog dolphin human whale suppos consid five at tribut fourleg haircov intellig marin thumb tabl show anim consid attribut attribut fourleg haircov intellig marin thumb cat chimpanze object dog dolphin human whale tabl crude character mammal order understand basic concept analysi definit requir follow present context tripl finit set the object attribut respect r binari relat a mammal exampl object differ kind mammal attribut characterist fourleg haircov etc binari relat r given tabl exampl tupl whale marin r cat intellig not a map attribut x y the common object form galoi connect is map satisfi the map antimonoton extens mammal exampl oefcat fhaircoveredg concept pair set set object the extent set attribut the intent is concept maxim collect object share common attribut exampl fcat dogsg ffourleg haircoveredg concept wherea fcat chimpanzeesg fhaircoveredg concept concept x subconcept concept x or equival instanc fdolphin whalesg fintellig marineg subconcept fchimpanze dolphin human whalesg fintelligentg subconcept relat form complet partial order the concept lattic set concept concept lattic mammal exampl shown figur top fcat chimpanze dog dolphin human whalesg fchimpanze dolphin human whalesg fintelligentg fcat chimpanze dogsg fhaircoveredg fchimpanze humansg fintellig thumbedg fdolphin whalesg fintellig marineg fcat dogsg fhaircov fourleggedg bot ffourleg haircov intellig marin thumbedg figur concept lattic and accompani key mammal exampl fundament theorem concept lattic relat subconcept superconcept follow g ii oe ii ii signific theorem least common superconcept set concept comput intersect intent take union extent find common object set common attribut result union exampl applic fundament theorem follow comput correspond fact c c lattic shown figur sever algorithm comput concept lattic given context describ simpl bottomup algorithm here import fact concept context use algorithm that given set object x smallest concept extent contain x oex oex thu bottom element concept lattic oe oe concept consist object attribut often empti set exampl initi step algorithm comput bottom concept lattic next step comput atom concept smallest concept extent contain object treat singleton set atom concept correspond node concept lattic reachabl bottom node one step comput atom concept mammal exampl shown below algorithm close set atom concept join initi worklist form contain pair atom concept c c c c c worklist empti remov element worklist c use fundament theorem concept analysi c concept yet discov add pair concept c c c c c worklist process repeat worklist empti iter step conceptbuild algorithm illustr below use concept analysi identifi potenti modul main idea paper appli concept analysi problem identifi potenti modul within monolith code outlin process follow build context object function defin input program attribut properti function attribut could sever properti relat function data structur attribut discuss detail below construct concept lattic context describ section partit collect concept whose extent partit set ob ject concept partit correspond possibl modular input program concept partit discuss section appli concept analysi stack queue exampl consid stack queue exampl introduct section demonstr concept analysi use identifi modul partit indic c code figur page first defin context let object attribut ff s ff s correspond function properti function indic tabl below return type struct stack return type struct initq argument type struct stack argument type struct queue use field struct stack use field struct queue context relat stack queue exampl then next step build concept lattic context describ section concept lattic stack queue exampl togeth key identifi latticenod label correspond concept shown below bot fff g empti concept one advantag use concept analysi multipl possibl modular offer addit relationship among concept concept lattic also offer insight structur within propos modul exampl atom level initi function concept c c distinct concept function concept c c former two concept correspond constructor latter two member function concept correspond stack modul c correspond queue modul subconcept relationship indic stack concept consist constructor concept memberfunct concept ad complementari attribut untangl code stack queue exampl consid thu far demonstr full power concept analysi bring modular problem rel straightforward separ code shown figur two modul techniqu describ also creat group essenc concept analysi describ emul techniqu show concept analysi encompass previous defin method modular show concept analysi offer possibl go beyond previous defin method offer abil teas apart code is sens tangl illustr mean tangl code consid slightli modifi stack queue exampl suppos function isemptyq enq written modifi stack field directli see figur rather call isemptystack push may effici make code difficult maintain simpl chang stack implement may requir chang queue code furthermor complic process identifi separ modul appli concept analysi use set attribut abov attribut ff use field struct stack appli isemptyq enq tabl show context relat tangl stack queue code origin set object attribut result concept lattic shown figur observ concept c still identifi queue modul none concept coincid stack modul particular even though extent c finitstackg extent c fisemptystack push popg concept stack concept c consist initstack isemptystack isemptyq push enq pop mix stack oper some all queue oper int isemptyqstruct queue q f return qfrontsp qfrontbas qbacksp qbackbas void enqstruct queue q int i f figur queue stack exampl revisit tangl c code tabl context relat tangl stack queue exampl top f c g queue concept c bot fff figur concept lattic and correspond key tangl stack queue exampl use attribut list page problem attribut list page reflect posit inform distinguish characterist stack oper depend field struct stack field struct queue untangl compon need augment set attribut neg inform case complement use field struct queue ie doe use field struct queue revis set attribut correspond context relat shown below return type struct stack return type struct initq argument type struct stack ff argument type struct queue use field struct stack use field struct queue ff use field struct queue ff result concept lattic and correspond key now top f c g queue concept stack concept c g initstack bot fff g empti concept concept lattic contain concept concept lattic figur well addit concept c correspond stack modul modular identifi isemptyq enq part queue modul separ stack modul even though two oper make direct use stack field rais issu subsequ ctoc codetransform phase although one might abl devis transform remov depend queue oper privat member stack class eg introduc appropri call member function stack class straightforward ctoc transform would simpli use c friend mechan shown figur choic attribut concept maxim collect object common properti cohes modul collect function perhap along data structur common properti therefor employ concept analysi modular problem reason object defin class queue class stack f friend class queue privat int base int public stackint new int isempti f return sp base g int pop f isempti return return sp void pushint i f overflow check class queue f privat stack front back public new stackqueu size back new stackqueu size g int return frontsp frontbas backsp backbas void enqint i f int deq f isempti return backisempti return backpop figur queue stack class c friend correspond function howev flexibl come attribut wide varieti attribut might choos effort identifi concept modul program exampl use attribut reflect way struct data type use instanc may use use attribut captur properti possibl attribut includ follow ffl variableusag inform relat function sometim identifi use common global variabl attribut captur inform might form use global variabl x ffl dataflow slice inform use identifi modul attribut captur inform might form may use valu flow statement s is part slice respect statement s ffl inform obtain type inferenc type infer use uncov distinct seemingli ident type exampl f function declar type int theta int bool type infer might discov f s gener type form ff theta fi bool reveal type f s first argument distinct type second argument even though declar type attribut might form ha argument type ff rather simpli ha argument type int would prevent function group togeth mere superfici similar declar type argument ffl disjunct attribut user may awar certain properti input program perhap similar two data structur disjunct attribut allow user specifi properti form exampl use field stack use field queue attribut could use togeth one context highlight one advantag conceptanalysi approach modular repres singl algorithm modular rather provid framework obtain collect differ modular algorithm concept modul partit thu far discuss concept lattic built program way concept repres potenti modul howev overlap concept everi group concept repres potenti modular feasibl modular partit collect modul disjoint includ function input code limit number choic softwar engin would present with help identifi partit formal notion concept partit present algorithm identifi partit concept lattic concept partit given context o ar concept partit set concept whose extent form partit o is partit extent concept cover object set ie o pairwis disjoint x term modular program concept partit correspond collect modul everi function program associ exactli one modul simpl exampl consid concept lattic shown page concept partit context list below ftopg atom partit p p combin atom concept larger concept p consist one stack modul one queue modul p trivial partit function place one modul look concept partit softwar engin elimin nonsens possibl preced exampl c appear partit did modul ie nonoverlap concept would deq belong atom partit concept lattic concept partit consist exactli atom concept recal atom concept concept smallest extent contain object treat singleton set instanc see atom concept mammal exampl page concept lattic need atom partit exampl lattic figur page atom partit atom concept c c howev c c overlap object chimpanze extent concept atom partit concept lattic often good start point choos modular program order develop tool work concept partit use abl guarante exist atom partit achiev augment context neg inform similar section given context o ar complement attribut attribut rg is attribut exactli object properti a exampl attribut tabl page ff ff complement given context complement extens c context c ag r rg complement extens context origin context attribut set augment addit complement everi origin attribut straightforward see everi context complement extens concept lattic complement extens atom partit use fact present algorithm find partit concept lattic find partit concept lattic given concept lattic defin follow relat element set immedi suprema concept x denot supsx set lattic element x element z x z y set ancestor x denot ancsx set lattic element x x sup atom partit w remov p w c p c supsc disjoint endif endif endfor endfor endwhil figur algorithm find partit concept lattic algorithm build collect partit concept lattic let p collect partit form let w worklist partit begin atom partit set immedi suprema bottom element concept lattic p w initi singleton set contain atom partit algorithm work consid partit worklist w w empti partit remov w new partit form when possibl select concept partit choos supremum concept ad partit remov overlap concept algorithm given figur worst case number partit exponenti number concept case or case number partit larg possibl adapt algorithm work interact new partit discov algorithm would paus user consid partit fine scale user would allow algorithm iter find coarsergrain partit implement result implement prototyp tool employ concept analysi propos modular c program written standard ml new jersey version run sun solari prototyp take c program input default object set set function defin input program default attribut set consist one attribut form use field struct t userdefin struct type or equival typedef input program user option includ attribut form ha paramet return type type t context form is form fulli complement form userdefin struct type attribut formdo use field struct t or doe paramet return type type t includ attribut set context context fed concept analyz build concept bottom describ section user view concept lattic feed lattic parti tioner comput depend user choic possibl partit one partit time exampl paper analyz implement preliminari result larger exampl appear promis particular use prototyp tool spec benchmark go the mani face go program consist roughli line c code function userdefin data type concept lattic fulli complement context associ function data type consist thirtyfour concept construct second user time on sparcstat mb ram partition identifi possibl partit lattic roughli amount time case studi chullc chullc program taken computationalgeometri librari comput convex hull set vertic plane program consist roughli one thousand line c code twentysix function three userdefin struct data type tvertex tedg tface repres vertic edg face respect context fed concept analyz consist twentysix function object set six attribut use field tvertex doe use field tvertex etc binari relat indic whether function f use field one struct type concept analyz built twentyeight concept correspond lattic roughli one second user time lattic appear figur partition comput possibl partit concept lattic roughli two second figur concept lattic deriv chullc atom partit group function eight concept list tabl partit indic code cleanli break three modul eg one struct type howev assum goal transform chullc equival c program eight concept suggest possibl modular base three type concept would correspond three class vertex edg face respect concept would correspond driver modul function concept would form four friend modul function would declar friend appropri class concept number userdefin struct type function makevertex readvertic collinear constructhul printvertic tedg makeedg tface cleanfac makefac tvertex tedg cleanvertic printedg tvertex tface volum volum convex printfac tedg tface makeccw cleanedg consist tvertex tedg tface print tetrahedron addon makestruct check tabl atom partit concept lattic deriv chullc relat work although grow bodi literatur concern modul abstractdatatyp recoveri nonmodular code eg unawar previou work problem involv use concept analysi modular reflect design decis inher subject unlik modular process ever fulli autom given user interact requir conceptanalysi approach offer certain advantag previous propos techniqu name abil stay within system as oppos appli ad hoc method user judg modular system suggest unsatisfactori propos modular fine scale user move up partit lattic see section propos modular coars user add addit attribut gener concept see section furthermor concept analysi realli provid famili modular algorithm rather offer one fix techniqu differ attribut chosen differ condit work close relat liu wild make use tabl much like objectattribut relat context howev wherea work use concept analysi analyz tabl liu wild propos less power analysi also propos user interven ad hoc adjust result modular unsatisfactori explain abov conceptanalysi approach natur gener varieti possibl decomposit ie differ collect concept partit set object conceptanalysi approach gener canfora et al identifi abstract data type analyz graph link function argument type return type inform captur use context object function attribut possibl argument return type for exampl attribut attribut tabl page ad attribut indic whether field compound data type use function done exampl use paper conceptanalysi becom power tool identifi potenti modul techniqu describ work describ expand abstractdatatyp identif techniqu describ call domin inform use introduc hierarch nest structur modul may possibl combin techniqu conceptanalysi approach present paper conceptanalysi approach also gener techniqu use obad tool design identifi abstract data type c program obad analyz graph consist node repres function struct type edg repres use intern field struct type function recov similar inform concept analysi attribut exactli indic use field struct type for exampl ff tabl page howev obad stumbl tangl code like exampl discuss section addit discriminatori power conceptanalysi approach due fact abl exploit posit neg inform contrast approach identifi object describ techniqu aim analyz relationship among function type identifi class aim identifi object link function specif variabl similar effect achiev via concept analysi introduc one attribut actual paramet certain amount work involv use cluster analysi identifi potenti modul eg work implicitli explicitli involv identif potenti modul determin similar measur among pair function current investig link concept analysi cluster analysi concept analysi previous appli softwareengin tool albeit problem much differ modular norarec tool use concept analysi identifi conflict softwareconfigur inform acknowledg work support part nation scienc foundat grant ccr defens advanc research project agenc arpa order no monitor offic naval research contract nj comment manuvir da work report paper greatli appreci r greedi approach object identif imper code experi identifi reusabl abstract data type program code program comprehens identif abstract data type system structur analysi cluster data bind evalu process cluster support automat program understand object convent procedur languag exampl data design recoveri practic program understand type infer program gener softwar reus c c reengin configur base mathemat concept analysi restructur lattic theori approach base hierarchi concept second work confer revers engin recov abstract data type object instanc convent procedur languag tr ctr peter wendorff formal approach assess improv terminolog model use inform system engin acm sigsoft softwar engin note v n sept fuhgwo chen tingwei hou instructionco translat approach restructur directli thread interpret low cohes acm sigplan notic v n august kamran sartipi kosta kontogianni userassist approach compon cluster journal softwar mainten research practic v n p juli andrew sutton jonathan i malet recov uml class model c detail explan inform softwar technolog v n p march m di penta m netel g antoniol e merlo languageindepend softwar renov framework journal system softwar v n p septemb andrea christl rainer koschk margaretann storey autom cluster support reflexion method inform softwar technolog v n p march rainer koschk gerardo canfora jrg czeranski revisit ic approach compon recoveri scienc comput program v n p april gerardo canforaharman massimiliano di penta new frontier revers engin futur softwar engin p may