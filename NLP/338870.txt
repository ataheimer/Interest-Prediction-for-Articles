t time analysi data wraparound fill cach a contribut paper twofold first automat toolbas approach describ bound worstcas data cach perform approach work fulli optim code perform analysi entir control flow program detect exploit spatial tempor local within data refer produc result typic within second result obtain run system repres program present indic time analysi data cach behavior usual result significantli tighter worstcas perform predict second method deal realist cach fill approach name wraparoundfil cach miss present extens pipelin analysi result indic worstcas time predict becom significantli tighter wraparoundfil analysi perform overal contribut paper comprehens report method result worstcas time analysi data cach wraparound cach approach taken uniqu provid consider step toward realist worstcas execut time predict contemporari architectur use schedul analysi hard realtim system b introduct realtim system reli assumpt worstcas execut time wcet hard realtim task known ensur deadlin task met otherwis safeti control system jeopard static compil inform control flow configur idcach interfac user analyz time time predict addr info rel data decl virtual address inform cach simul categor idcach user time request address calcul sourc file depend machin inform figur framework time predict analysi program segment correspond task provid analyt approach determin wcet contemporari architectur complex modern processor requir toolbas approach sinc ad hoc test method may exhibit worstcas behavior program paper present system tool perform time predict static analyz optim code without requir interact user work present address bound wcet data cach wraparoundfil mechan handl cach miss thu present approach includ common featur contemporari architectur static predict wcet overal work fill anoth gap realist wcet predict contemporari architectur use schedul analysi hard realtim system framework wcet predict use set tool depict figur vpo optim compil modifi emit controlflow inform data inform call structur function addit regular object code gener static cach simul use controlflow inform call structur conjunct cach configur produc instruct data categor describ cach behavior instruct data refer respect time analyz use categor controlflow inform perform path analysi program analysi includ evalu architectur characterist pipelin wraparoundfil cach miss descript cach behavior suppli static cach simul use time analyz predict tempor effect cach hit miss overlap tempor behavior pipelin time analyz produc wcet predict user select segment program entir program relat work past year research area predict wcet program intensifi convent method static analysi extend unoptim program simpl cisc processor optim program pipelin risc processor uncach architectur instruct cach data cach relat work analyz data cach previou work wraparoundfil cach context wcet predict knowledg rawat use graph color techniqu bound data cach perform howev live rang local scalar variabl within singl function analyz fairli uncommon refer sinc local scalar variabl alloc regist optim compil kim et al recent publish work bound data cach perform calcul refer caus load store instruct referenc address chang dynam techniqu use version pigeonhol principl loop determin maximum number refer dynam loadstor instruct also determin maximum number distinct locat memori referenc instruct differ two valu number data cach hit loop given conflict refer techniqu effici detect tempor local within loop data refer within loop fit cach size data refer size cach line techniqu time detect spatial local ie line size greater size data refer element access contigu detect tempor local across differ loop nest fur thermor approach current deal compil optim alter correspond assembl instruct sourc code compil optim make calcul rang rel address significantli challeng et al describ framework integr data cach integ linear program ilp approach time predict implement perform dataflow analysi find conflict block howev linear constraint describ rang address data refer current calcul hand also requir separ constraint everi element calcul refer caus scalabl problem larg array wcet result data cach report howev ilp approach facilit integr addit userprovid constraint analysi data cach obtain tight wcet presenc data cach quit challeng unlik instruct cach address data refer chang execut program refer item within activ record could differ address depend sequenc call associ invoc function data refer index array dynam calcul vari time data refer occur pointer variabl languag like c may assign address differ variabl address dynam calcul heap initi may appear obtain reason bound worstcas data cach perform simpli feasibl howev problem far hope less sinc address mani data refer static calcul static global scalar data refer retain address throughout execut program runtim stack scalar data refer often static determin set address depend upon sequenc call associ invoc function pattern address associ mani calcul refer eg array index often resolv static predict wcet program data cach achiev automat analyz rang address data refer deriv rel virtual address rang categor data refer accord cach behavior data cach behavior integr pipelin analysi yield worstcas execut time predict program segment calcul rel address vpo compil attempt calcul rel address data refer associ load store instruct compil optim perform see figur compil optim move instruct basic block outsid loop expans regist use address calcul becom difficult analysi describ similar data depend analysi perform vector parallel compil howev data depend analysi typic perform highlevel represent analysi perform lowlevel represent code gener optim appli calcul rel address involv follow step compil determin loop set induct variabl initi valu stride loopinvari regist expans actual paramet inform perform order abl resolv possibl address paramet later expans address use load store perform expans accomplish examin preced instruct repres regist transfer list rtl replac regist use sourc valu address sourc rtl set regist induct variabl associ loop expand loop invari valu expand proceed end prehead block loop expans address scalar refer runtim stack eg local variabl trivial expans refer static data eg global variabl often requir expand loopinvari regist sinc address construct instruct may move loop expans calcul address refer eg array index requir knowledg loop induct variabl approach expand address provid abil handl nonstandard induct variabl limit simpl induct variabl simpl loop updat head loop consid c sourc code rtl sparc assembl instruct figur simpl initi function code initi goe element array array b initi random integ note although delay slot actual fill compil fill compil code figur paper order simplifi exampl reader add llo_ai add llo_bi add ii rsvr save spsp sethi hi_bl sethi hii st st ol store aij store bij int bmaxmax int amaxmax defin max int i j i imax i j jmax j l figur exampl c function rtl sparc assembl function initi first memori address r instruct store aij second memori address r instruct store bij regist r induct regist inner loop instruct thu cannot expand initi valu stride maximum minimum number iter associ it comput store earlier compil process initi valu r consist first element access base address b plu plu offset come comput row locat induct variabl outer loop r stride minimum maximum number iter same initi valu stride number iter avail enough inform comput sequenc address access store bij know refer stride compil use index reduct avoid use anoth induct regist address comput aij sinc share loop control variabl b memori address r r aij includ address b r plu differ two array r seen follow sequenc expans simplif rememb regist r cannot immedi expand sinc induct regist inner loop expans continu regist r follow note regist r expand either sinc induct variabl outer loop instruct load rrr rrrr rrrrr rrrrrlo b rrrlo arrlo b rrhi alo arrlo b rrhi alo arhi blo b effect expans simplifi follow step rr ar b elimin hi lo rr ar b remov unnecessari s remov s distribut s s remov negat term thu left induct regist r plu differ two array simplifi address express string written file contain data declar rel address inform address calcul attempt resolv string actual virtual address use initi valu r r b bs cancel r b a b a note give initi address row array rang rel address exampl depict algorithm shown figur detail static determin address inform fulli optim code see addressa rr figur algorithm rang rel address load figur startup code program code segment static data runtim program stack initi stack figur virtual address space suno calcul virtual address calcul address rel begin global variabl activ record accomplish within compil sinc much data flow inform requir analysi also use compil optim howev calcul virtual address cannot done compil sinc analysi call graph data declar across multipl file requir thu address calcul see figur use rel address inform conjunct controlflow inform obtain virtual address figur show gener organ virtual address space process execut suno startup code preced instruct associ compil program follow program code segment static data align page boundari runtim stack start high address grow toward low address part memori runtim stack static data heap depict figur sinc address heap could calcul static environ static data consist global variabl static variabl nonscalar constant eg string floatingpoint constant gener unix linker ld place static data order declar appear within assembl file also static data within one file preced static data anoth file specifi later list file link there except rule depend upon data static initi addit pad variabl sometim occur instanc variabl declar int doubl sparc align word doubleword boundari respect addit first static global variabl declar sourc file compris program align doubleword boundari runtim stack data includ temporari local variabl alloc regist exampl temporari includ paramet beyond sixth word pass function memori use move valu integ floatingpoint regist sinc movement cannot accomplish directli sparc address activ record function vari depend upon actual sequenc call associ activ virtual address activ record contain local variabl determin sum size activ record associ sequenc call along initi runtim stack address address calcul along static simul time analyz distinguish differ function instanc evalu instanc separ static data name activ record function associ virtual address rel address rang convert virtual address rang virtual address calcul far guarante virtual address actual physic address use access cach memori machin paper assum system page size integ multipl data cach size often case instanc microsparc kb page size kb data cach thu virtual correspond physic address would rel offset within page would map line within data cach static simul produc data refer categor method static cach simul use static categor cach behavior data refer program specifi cach configur see figur program controlflow graph construct includ control flow within function function instanc graph uniqu identifi function instanc sequenc call site requir invoc program controlflow graph analyz determin possibl data line data cach entri exit basic block within program iter algorithm use static instruct cach simul suffici static data cach simul problem calcul refer access rang possibl address point data access occur data line associ address may may brought cach depend upon mani iter loop perform point deal problem new state creat indic whether particular data line could potenti data cach due chang basic block instanc b input line input im pred p b input stateb output statep calc input stateb output statep p anoth loop input stateb calc output statep data linesremain loop output data refer b scalar refer output stateb data line output stateb data linesd conflict with calc output stateb data line calc output stateb data linesconflict with output stateb data linesd could conflict with calc output stateb data linesd could access calc output stateb data linesd could conflict with figur algorithm calcul data cach state calcul refer immedi predecessor block differ loop the transit predecessor block current block exit loop data line associ calcul refer loop guarante still cach union input cach state block iter algorithm figur use calcul input output cach state basic block program control flow cach state vector produc use determin whether memori refer within bound virtual address rang associ data refer cach static cach simul need produc categor data refer program four worstcas categori cach behavior use past static instruct cach simul follow alway miss m refer guarante cach alway hit h refer guarante alway cach first miss fm refer guarante cach first time access time loop enter guarante thereaft first hit fh refer guarante cach first time access time loop enter guarante thereaft categor still use scalar data refer int a int a row order sum main column order sum int i j sum aij sum aij row a detect spatial local int i j sum ai ai ref ai bj ai ref bi ref ref c m h h h h h h h h h h h h h h h h h h due tempor local across loop ref c m h h h h h h first execut inner loop h h h h h success execut it b detect tempor local across within loop figur exampl spatial tempor local obtain accuraci worstcas categor calcul data refer iter loop could determin exampl categor data refer loop iter might follow detail inform time analyz could accur determin worstcas path iter loop howev consid loop iter approach would ineffici space stor ing categor time analyz loop iter separ author decid use new categor call calcul c would also indic maximum number data cach miss could occur loop level data refer nest previou data refer categor string would repres follow sinc one loop level order access cach state vector use detect cach hit within calcul refer due spatial local consid two code segment figur a sum element two dimension array two code segment equival except left code segment access array row order right code segment use column order ie statement revers assum scalar variabl i j sum same alloc regist also assum size directmap data cach byte line contain byte each thu singl row array requir byte cannot fit cach static cach simul abl detect load array element left code segment one miss array element part data line accomplish inspect order array access detect conflict line access loop categor load data refer two segment given figur note case array happen align line boundari specif singl categor calcul refer accomplish two step loop level cach state calcul first number refer iter perform loop retriev next maximum number miss could occur refer loop determin instanc miss occur innermost loop left code segment static cach simul determin load right code segment would result cach miss data cach behavior simpli view alway miss thu rang differ address referenc load collaps singl categor c calcul refer miss innermost level miss outer level left code segment alway miss right code segment likewis cach hit calcul refer due tempor local across within loop also detect consid code segment figur b assum cach configur line byte cach array b requir byte total each fit cach also assum scalar variabl alloc regist access element array first loop categor h alway hit static simul sinc data line associ array cach state first loop exit show detect tempor local across loop first complet execut inner loop element b cach refer remain execut inner loop also categor hit thu categor c given rel innermost loop miss due bring b cach first complet execut inner loop also miss rel outermost loop sinc b complet cach iter first thu tempor local also detect within loop current implement static data cach simul and time an alyz impos restrict first directmap data cach support obtain categor setassoci data cach accomplish manner similar describ work instruct cach second recurs call allow sinc would complic gener uniqu function instanc third indirect call allow sinc explicit call graph must gener static time analysi time analyz see figur util pipelin path analysi estim wcet sequenc instruct repres path loop function pipelin inform instruct type obtain machinedepend data file inform specif instruct path obtain controlflow inform file instruct ad separ pipelin state inform time analyz use data cach categor determin whether mem data memori access stage treat cach hit miss worstcas loop analysi algorithm modifi appropri handl calcul data refer categor time analyz conserv assum miss current loop level calcul refer occur hit level addit time analyz unabl assum penalti miss overlap long run instruct sinc analyz may evalu miss exact iter occur thu calcul refer miss alway view hit within pipelin path analysi maximum number cycl associ data cach miss penalti ad total time path strategi permit effici loop analysi algorithm potenti small overestim data cach miss penalti could overlap stall worstcas loop analysi algorithm given figur addit previous publish algorithm handl calcul refer shown boldfac let n maximum number iter associ given loop loop termin number process iter reach n first miss first hit calcul refer encount miss hit miss respect loop iter minimum n p r time p number path r number calcul refer load instruct loop algorithm select longest path loop iter order demonstr correct algorithm one must show path given iter loop produc longer time calcul algorithm sinc pipelin effect path union remain shown cach effect treat properli categor treat ident repeat refer except first miss first hit calcul refer assum data refer categor correctli loop pipelin analysi correct remain shown first miss first hit calcul refer interpret appropri loop iter correct argument interpret first hit first miss given total pipelin first miss encount first hit encount null find longest continu path first miss encount first miss miss path first hit encount first hit hit path first miss first hit encount path curr iter subtract remain miss calcul refer path concaten pipelin info union info path total cycl addit cycl requir union els calcul refer encount path miss minimum number remain miss calcul refer path nonzero curr iter min miss subtract min miss remain miss calc ref path concaten pipelin info union info path min miss time total cycl min miss addit cycl requir union break concaten pipelin info union pipelin info path n curr iter time total cycl n curr iter addit cycl requir union set exit path transit uniqu exit block find longest exit path set first miss encount first miss miss path first hit encount first hit hit path concaten pipelin info union info exit path set total cycl addit cycl requir exit union store inform exit block loop figur worstcas loop analysi algorithm loop subtract one calcul refer miss count current loop longest path chosen iter whenev first miss first hit encount miss hit respect first miss first hit encount longest path path remain longest path long set calcul refer encount miss continu encount miss sinc cach behavior refer treat same thu pipelin effect longest path effici replic number iter associ minimum number remain miss calcul refer nonzero within longest path loop first miss first hit calcul refer longest path encount hit miss hit respect union pipelin effect loop chang sinc cach behavior refer treat same thu pipelin effect path effici replic one remain iter last iter loop treat separ sinc longest exit path may shorter longest continu path correct argument interpret calcul refer need show calcul refer treat miss appropri number time algorithm treat calcul refer miss specifi number calcul miss loop exhaust ifthen portion loop subtract one calcul refer miss count sinc singl iter analyz calcul refer miss given loop iter elseifthen portion loop subtract minimum miss remain calcul refer path number iter remain loop number iter analyz number miss subtract calcul refer sinc miss calcul refer evalu hit interpret calcul refer underestim actual number calcul miss given data refer categor correctli exampl given figur illustr algorithm statement condit contriv forc worstcas path taken execut assum data cach line size byte enough line hold three array cach figur also show iter element three array referenc whether refer hit miss two differ path taken loop iter shown integ pipelin diagram figur note pipelin diagram reflect load array element found cach miss penalti calcul refer miss simpli ad total cycl path directli reflect pipelin inform sinc miss may occur exact iter assum time analyz tabl show step time analyz use algorithm given figur estim wcet loop exampl shown figur longest path detect first step path a contain refer ki ci pipelin time requir cycl miss two calcul refer ki ci requir cycl note miss penalti assum requir cycl sinc first miss time analyz determin minimum number remain miss two calcul refer thu path replic addit time overlap iter determin cycl note subtract first iter sinc overlap would calcul determin worstcas execut time path main function total time first iter longest path detect step also path a time refer ci hit remain miss ki total time iter cycl longest path detect step path b remain miss si result addit cycl iter step worstcas loop analysi exit loop algorithm step char c short s int k int i sum sum kici els sum si path b block path a block path loop load si load ci load ki ld lo instruct instruct block instruct instruct block block data line data line data line data line data line data line data line data line k missmiss hit miss miss hit miss miss result access iter element array data line s c ki c m h h h si c m h h h h h h h h h c m h h h h h id cycl stage pipelin diagram path b instruct block id cycl pipelin diagram path a instruct block figur exampl illustr worstcas loop analysi algorithm calcul cycl next iter step calcul last iter requir cycl time analyz calcul last iter separ sinc longest exit path may shorter path loop total number cycl calcul time analyz exampl ident number obtain execut simul time analysi tree construct predict worstcas perform node tree repres either loop function function instanc graph function instanc uniqu identifi sequenc call result invoc node repres outer level function instanc treat loop iter onc worstcas time node calcul time immedi child node known tabl time analysi step loop figur start longest total step iter path cycl min miss iter addit cycl cycl instanc consid exampl shown figur tabl time analyz would calcul worstcas time loop use inform next calcul time path main contain loop block loop block construct process time analysi tree occur similar manner describ result measur obtain code gener sparc architectur vpo optim compil machinedepend inform contain pipelin characterist microsparc processor directmap data cach contain line byte total byte use microsparc use writethroughnoalloc data cach static simul abl categor store data refer categor ignor time analyz sinc store alway access memori hit miss associ store data refer effect perform instruct fetch assum hit order isol effect data cach instruct cach tabl show test program use assess time analyz effect bound worstcas data cach perform note program restrict specif class data refer includ dynam alloc heap two version use last five test program version size array use previou studi b version program use smaller array would total fit byte cach number byte report tabl total number byte variabl program note byte static data area other runtim stack amount data chang program de sinc encrypt algorithm base use larg static array preiniti valu tabl depict dynam result execut test program hit ratio obtain data cach execut simul sort high data cach hit ratio due mani repeat refer array element observ cycl obtain use execut simul modifi simul data cach pipelin affect count number cycl estim cycl obtain time analyz discuss tabl test program data cach name byte descript emphasi de encrypt decrypt bit matcnta count sum valu x int matrix matcntb count sum valu x int matrix matmula multipli x matric x int matrix matmulb multipli x matric x int matrix matsuma sum valu x int matrix matsumb sum valu x int matrix sorta bubblesort int array bubblesort integ array section estim ratio quotient two valu naiv ratio calcul assum data cach refer miss divid cycl observ cycl time analyz abl tightli predict worstcas number cycl requir pipelin data cach test program fact five them predict exact less onetenth one percent inner loop function within sort sort valu vari number iter depend upon counter outer loop number iter perform overrepres averag factor two inner loop strategi treat calcul refer miss hit pipelin ad maximum number cycl associ miss penalti total time path caus overestim statsa statsb program floatingpoint intens program test set often delay due longrun floatingpoint oper could overlap data cach miss penalti cycl matmula overestim tabl dynam result data cach hit observ estim estob naiv name ratio cycl cycl ratio ratio de matcnta matcntb matmula matmulb matsuma matsumb sorta averag na na wherea smaller data version matmulb exact matmul program repeat refer element three differ array refer would miss first time encount would cach smaller matmulb access sinc array fit entir cach array fit cach interfer them howev fit cach static simul conserv assum possibl interfer must result cach miss therefor categor conserv overestim larger final de program sever refer element static initi array use index anoth array simpl method determin valu use index therefor must assum element array may access time data refer occur program forc conflict line delet cach state result categor conserv de program also overestim due data depend longer path deem feasibl time analyz could taken function due valu variabl despit rel small overestim detail abov result show certain restrict possibl tightli predict much data cach behavior mani program differ naiv estim ratio show benefit perform data cach analysi predict worstcas execut time benefit worstcas perform data cach signific benefit obtain instruct cach instruct fetch occur instruct execut perform benefit writethroughnoalloc data cach occur data refer load instruct determin time analyz cach load instruct compris averag total execut instruct test program howev result show perform data cach analysi predict worstcas execut time still result substanti tighter predict fact program test set predict improv averag perform overhead associ predict wcet data cach use method come primarili static cach simul time requir static simul increas linearli size data howev even larg array given test program time rather small averag time static simul produc data refer categor program given tabl second overhead time analyz averag second wraparoundfil instruct cach miss sever time tool exist address hitmiss behavior instruct cach modern instruct cach often employ variou sophist approach decreas miss rate reduc miss penalti one approach reduc miss penalti instruct cach wraparound fill processor employ featur load cach line one word time start instruct tabl order fill load word cach line first request word miss delay word within cach line caus cach miss word program line load cach associ instruct cannot fetch word load motiv wraparound fill let cpu proceed instruct allow pipelin execut continu subsequ instruct load cach thu benefit necessari wait entir cach line load proceed execut fetch instruct howev featur complic time analysi sinc introduc dead cycl pipelin analysi cycl instruct load cach wraparound fill use sever recent architectur includ alpha axp mip r ibm tabl show word load cach microsparc processor instruct cach line eight word henc eight instruct row tabl distinguish word w within cach line request entir line found cach leftmost column show word miss becom first word respect program line load cach take seven cycl request instruct reach instruct cach eighth cycl word w even w w odd get load cach pair word load cach dead cycl word written tabl indic microsparc dead cycl ninth twelfth fifteenth cycl miss occur take seventeen cycl entir program line request memori complet load cach note microsparc addit requir entir program line must complet load cach differ program line access whether program line alreadi cach wraparoundfil analysi inform store path loop includ program line number cycl word loop first last program line load cach cycl call avail time time analyz calcul begin end avail time path particular loop loop analysi set begin end inform propag along worstcas path pipelin requir data hazard inform keep track word program line avail cach analog determin particular pipelin stage last occupi detect valu regist avail via hardwar forward avail time use carri wraparoundfil analysi path loop analysi detect delay associ dead cycl case delay overlap pipelin stall produc accur wcet predict wraparoundfil delay within path analysi singl path instruct necessari know individu word cach line load appropri instruct time analyz process instruct categor miss automat determin instruct program line load cach accord order fill given machinedepend inform time analyz store program line number rel word number line everi instruct program analysi path time analyz updat inform program line arriv cach word line avail fetch without delay point time analyz finish examin path store inform associ first last program line referenc path includ cycl word line becom avail cach plu amount delay caus latenc fill cach line inform use path evalu larger context name first iter loop path function enter call anoth part program figur show algorithm use determin number cycl associ instruct fetch analyz path cycl word becom avail last line fetch calcul miss order demonstr correct algorithm one must show requir number cycl calcul wraparoundfil delay instruct fetch three possibl case first case instruct fetch last line fetch mean instruct fetch must hit line algorithm use arriv time associ word contain instruct determin extra cycl need stage second third case refer last line fetch instruct fetch could hit miss respect either case cycl stage instruct includ delay complet load last line calcul line line calcul addit cycl stage requir miss load request word line line establish arriv time word line miss three case handl thu algorithm correct given arriv time current line preced first instruct path accur techniqu determin arriv time point path enter describ follow section matrix contain inform tabl const int waf delayword per lineword per line indic word last line fetch becom avail int availableword per line const int max delay delay requir load last word line curr word inst word num word per line first cycl first vacanc stage instruct last line fetch cycl first cycl els cycl previou line delay maxlast word avail first cycl refer miss cycl waf delaycurr word numcurr word num previou line delay last word previou line delay last line fetch line current instruct cycl figur algorithm calcul waf delay within path delay upon enter loop function path analysi time analyz encount loop function call path child determin first instruct child lie differ program line instruct execut immedi enter loop function doe first instruct child must delay fetch program line contain last instruct execut child still load cach two instruct lie program line necessari ensur instruct belong first program line child avail fetch often avail time and correspond dead cycl delay alreadi calcul child likewis avail time could calcul child encount earlier current path ie situat path call two function share program line figur show small program contain loop ten iter compris instruct first instruct loop instruct memori instruct locat program line instruct begin program execut instruct miss cach caus program line contain instruct load cach first iter loop time analyz detect instruct need spend cycl stage dead cycl associ instruct even though program line process still fetch cach first iter categor fmfm prog line word number id cycl stage pipelin instruct inst save spsp inst mov go inst add sp_ao inst mov oo inst add oo inst inst cmp oo inst bl l inst ret inst add oo inst restor ggo inst st oo c sourc code int i a return figur exampl program pipelin diagram first loop iter delay loop iter loop analysi algorithm import detect delay may result program line load cach late previou iter caus subsequ iter delay exampl consid program figur instruct cach activ infer long variou instruct occupi stage time analysi begin static cach simul determin instruct first miss pipelin behavior first two iter loop given pipelin diagram figur instruct cach activ often infer long variou instruct occupi stage first iter instruct delay stage cycl dead cycl occur program line load cach note instruct delay would later victim structur hazard instruct occupi mem stage cycl thu dead cycl delay overlap potenti pipelin stall later first iter instruct miss must spend total cycl stage program line contain instruct and exist take from cycl cycl complet load time instruct referenc is program line finish load cycl instruct second iter cannot fetch cycl situat delay due jump new program line take place loop iter result result evalu test program section shown tabl fifth column tabl give ratio estim cycl observ cycl time analyz execut wraparoundfil analysi enabl sixth column show similar ratio estim observ cycl time wraparoundfil analysi disabl mode time analyz assum constant penalti cycl instruct cach miss maximum miss penalti instruct fetch would incur fetch delay actual attain maximum consecut miss case call function instruct locat delay slot call first instruct function miss case second miss incur cycl penalti entir program line contain delay slot instruct must complet load first data cach access assum hit time analyz simul experi tabl result test program hit observ estim ratio ratio without name ratio cycl cycl waf analysi waf analysi de matcnta matmula matsuma sorta averag na na wcet program wraparoundfil analysi enabl significantli tighter wraparound fill consid de sorta overestim reason describ section small overestim remain program primarili result time analyz conserv approach first misstofirst miss categor transit slight overestim also occur time analysi assum constant miss penalti situat occur infrequ approach result small overestim overhead execut time analysi quit small even wraparoundfil analysi averag time requir produc wcet program tabl second futur work sever area time analysi investig hardwar featur write buffer branch target buffer could model time analysi best case time bound variou type cach hardwar featur may also investig eventu goal research integr time analysi instruct data cach obtain time predict complet machin actual machin measur use logic analyz could use gaug accuraci simul effect entir time analysi environ conclus two gener contribut paper first approach bound worstcas data cach perform present use data flow analysi within compil determin bound rang rel address data refer address calcul convert rel rang virtual address rang examin order data declar call graph program categor data refer produc static simul time analyz use categor perform pipelin path analysi predict worstcas perform loop function program result far indic approach valid result significantli tighter worstcas perform predict second techniqu wcet predict wraparoundfil cach present process path instruct time analyz comput instruct entir program line load cach base instruct categor indic instruct fetch could result cach miss time analyz use inform determin much delay ani fetch instruct suffer due wraparound fill analyz larger program construct loop function instanc wraparoundfil inform associ path use detect delay beyond scope singl path result indic wcet bound significantli tighter time analyz conserv assum constant miss penalti paper contribut comprehens report method result worstcas time analysi data cach wraparound cach approach taken uniqu provid consider step toward realist worstcas execut time predict contemporari architectur use schedul analysi hard realtim system acknowledg author thank anonym refere comment help improv qualiti paper robert arnold provid time analysi platform research research articl base support part offic naval research contract number n nation scienc foundat cooper agreement number hrd note basic loop induct variabl assign form v v sigma c v variabl regist c integ constant nonbas induct variabl also increment decrement constant valu loop iter get valu either directli indirectli basic induct variabl varieti form assign nonbas induct variabl allow loop invari valu chang execut loop discuss induct variabl loop invari valu identifi found elsewher annul branch sparc actual access memori or updat regist instruct delay slot branch taken simpl featur caus host complic load store annul delay slot howev approach correctli handl data refer earlier comput expans initi valu string induct regist proce basic manner alreadi discuss except loop invari regist expand well microsparc i st instruct requir spend two cycl mem stage r bound worstcas instruct cach perform fix prioriti preemptiv schedul histor perspect portabl global optim linker program vienna fortran high perform fortran without templat extend hpf advanc data parallel applica tion design environ address architectur compil interact retarget techniqu predict execut time bound pipelin instruct cach perform integr time analysi pipelin instruct cach comput architectur quantit approach worst case time analysi risc processor rr case studi effici worst case time analysi data cach effici microarchitectur model path analysi realtim softwar cach model realtim softwar beyond direct map instruct cach accur worst case time analysi risc processor schedul algorithm multiprogram hard realtim environ static cach simul applic predict program execut time analyz static dynam program path parallel program compil zeitanalys von echtzeitprogrammen calcul maximum execut time realtim program static analysi cach analysi realtim program integr sparc processor bound worstcas data cach perform time analysi data cach setassoci cach optim supercompil supercomput high perform compil parallel comput pipelin processor worst case execut time tr ctr wegen frank mueller comparison static analysi evolutionari test verif time constraint realtim system v n p novemb wankang zhao william kreahl david whalley christoph heali frank mueller improv wcet appli worstcas path optim realtim system v n p octob kiran seth aravindh anantaraman frank mueller eric rotenberg fast frequencyawar static time analysi acm transact embed comput system tec v n p februari kaustubh patil kiran seth frank mueller composit static instruct cach simul acm sigplan notic v n juli yudong tan vincent mooney time analysi preemptiv multitask realtim system cach acm transact embed comput system tec v n februari wankang zhao david whalley christoph heali frank mueller improv wcet appli wc codeposit optim acm transact architectur code optim taco v n p decemb aravindh anantaraman kiran seth kaustubh patil eric rotenberg frank mueller virtual simpl architectur visa exceed complex limit safe realtim system acm sigarch comput architectur new v n may