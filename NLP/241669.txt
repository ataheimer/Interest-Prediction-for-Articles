t fileaccess characterist parallel scientif workload a abstractphenomen improv comput perform multiprocessor match compar gain io system perform imbal result io becom signific bottleneck mani scientif applic one key overcom bottleneck improv perform multiprocessor file system design highperform multiprocessor file system requir comprehens understand expect workload unfortun recent gener workload studi multiprocessor file system conduct goal charisma project remedi problem character behavior sever product workload differ machin level individu read write first set result charisma project describ workload observ intel ipsc think machin cm paper intend compar contrast two workload understand essenti similar differ isol common trend platformdepend varianc use comparison abl gain insight gener principl guid multiprocessor filesystem design b introduct grow imbal comput perform io subsystem perform multiprocessor imbal result io becom signific bottleneck mani scientif applic thu clear need improv design highperform parallel file system enabl meet io need applic success system design must possess thorough understand system like use understand system polici mechan optim case expect common system work load design far forc reli specul parallel file system would use extrapol filesystem character generalpurpos workload uniprocessor distribut system scientif workload vector supercomput address limit initi charisma project june character io scientif multiprocessor applic varieti product parallel comput platform site work done studi io need parallel scientif applic typic examin small number select appli cation charisma project uniqu record individu read write request live multiprogram parallel workload far complet character studi intel ipsc nasa ame research center think machin cm nation center supercomput applic system address similar set question ffl job mix look like mani job run concurr mani processor job use ffl mani file read written charisma may found httpwwwcsdartmoutheduresearchcharismahtml ffl typic read write request size space file access sequenti and so way ffl overal implic parallel filesystem design paper address final question integr result observ across multipl platform end use result two machinespecif studi tri identifi observ hold across variou multiprocessor platform pinpoint characterist appear specif singl platform environ next section describ previou studi multiprocessor file system filesystem workload describ two platform examin studi section outlin research method section present result section draw overal conclus background section review mani previou studi filesystem workload outlin basic design current multiprocessor file system final describ design two platform trace intel ipsc think machin cm workload character classifi previou filesystem workload studi character generalpurpos workstat workstat network scientif vector applic scientif parallel applic generalpurpos workstat uniprocessor file access pattern measur mani time floyd elli ousterhout et al measur isol unix work station baker et al measur distribut unix system sprite ramakrishnan et al studi access pattern commerci comput environ vaxvm platform studi cover generalpurpos engin offic workload uniprocessor applic studi identifi sever characterist common among uniprocessor filesystem workload file tend small onli kilobyt tend access small request tend access complet sequenti ie byte file access order begin end scientif vector applic studi specif examin scientif workload vector machin del rosario choudhari provid inform character grandchalleng applic powel measur set static characterist file size cray file system miller katz trace specif iointens cray applic determin perfil access pattern focus primarili access rate miller katz also measur secondarytertiari file migrat pattern cray give good pictur longterm wholefil access pattern pasqual polyzo studi io intens cray applic focus pattern io rate studi limit singleprocess applic vector supercomput studi identifi sever characterist common among supercomput filesystem workload unlik workstat filesystem workload file tend larg mani megabyt gigabyt tend access larg request like workstat workload file typic access complet sequenti scientif parallel applic experiment studi io parallel scientif program run multiprocessor rare crockett kotz hypothes charact parallel scientif filesystem workload reddi banerje chose five sequenti scientif applic perfect benchmark parallel eightprocessor alliant find sequenti fileaccess pattern studi interest far need sampl size small program parallel sequenti program parallel program per se io parallel cypher et al studi individu parallel scientif applic measur tempor pattern io rate galbreath et al present use highlevel character base anecdot evid bagrodia et al propos use pablo analyz character specif applic crandal et al perform analysi three scientif applic part charisma project trace parallel io request live product mix user program intel ipsc cm studi includ one machin program platform exist parallel file system singl coher model parallel fileaccess yet emerg parallelio model often close tie particular machin architectur well program model nonetheless common characterist increas parallel parallel file system declust block file across mani disk access parallel extend tradit file abstract a growabl address linear sequenc byte parallel fileaccess method common provid io mode specifi whether parallel process share common file pointer system base memorymap interfac two provid way user specifi perprocess logic view file provid simd style transfer final addit share file pointer mpiio allow applic describ map linear file comput node run applic term higherlevel data structur clearli industri research commun yet settl singl new model file access thu aspect parallel filesystem workload depend particular model provid user implic fact studi discuss throughout paper whenev depend appar system studi use system design workload character must base realist workload similar expect use futur purpos meant trace multiprocessor file system use product scientif comput intel ipsc nasa ame numer aerodynam simul facil met criterion think machin cm nation center supercomput applic ncsa intel ipsc concurr file system ipsc distributedmemori messagepass mimd machin comput node base intel processor connect hypercub network io handl dedic io node connect singl comput node rather directli hypercub interconnect io node base intel processor control singl scsi disk drive may also one servic node handl thing ethernet connect interact shell time studi ipsc na comput node io node comput node mb memori io node mb memori singl mb disk drive also singl servic node handl mbit ethernet connect host comput total io capac gb total bandwidth less mb concurr file system cf stripe file across disk kb block request sent directli comput node issu request appropri io node servic sinc ipsc mimd machin comput node oper independ one anoth assist programm coordin access independ comput node singl share file cf provid four io mode mode default mode give process file pointer mode share singl file pointer among process mode like mode enforc roundrobin order access across node mode like mode restrict access size ident detail cf perform found think machin cm scalabl file system cm distributedmemori machin mani ten thousand sparcbas process node small number control processor cp process node logic group partit manag cp job execut singl partit gener process node partit execut pro gram although may execut differ instruct spmdstyle within individu partit job timeshar process node commun via two scalabl interprocessor commun network although possibl user job run differ partit commun one anoth rare done practic cm support varieti io devic studi focus scalabl array sda primari highvolum highbandwidth storag devic cm ncsa sda expand raid disk system typic provid io bandwidth mbsec scalabl file system sf enhanc unix file system extens support parallel io larg file although fulli gener file system sf optim parallel highvolum transfer trace project cm ncsa node gener divid static partit size node partit cm reconfigur time machin reconfigur singl node partit node singl cpu network interfac vector unit collect memori size mbnode sda singl file system distribut across data disk pariti disk total capac gb logic block size file system kb physic disk block size kb cm support two primari program model dataparallel controlparallel io model paper character io program written cmf dataparallel fortran dialect cmmd controlparallel messag librari cmf program model present singl thread control user node appear execut ident code though may oper differ data cmf io librari support routin layer top sf allow user read write array or portion thereof sda via either special librari call normal fortran read write statement sinc singl thread control everi io request collect is whenev applic issu io request everi node applic must particip request issu data distribut io parallel hidden user cmmd librari may use varieti familiar program languag eg c c f and like ipsc provid user independ thread control process node cmmd io also layer top sf and like cf provid varieti io mode cmmd localindepend mode like mode cf give process view file allow process make arbitrari request file globalindepend mode process privat file pointer state share exampl one process perform ioctl chang block mode block mode chang everi process cmmd synchronoussequenti mode like cfss mode everi node must particip io request may request differ amount data data read written contigu region file node request satisfi roundrobin order final mode synchronousbroadcast everi node access exact region file possibl write data mode like use read header inform share configur file ncsa cmf user outnumb cmmd user factor method given divers multiprocessor file system possibl construct architectureindepend workload studi thu import studi varieti platform compar contrast result product workload multipl platform may deriv sever benefit first strong common trend one confid make gener use parallel filesystem design second studi variou platform pinpoint platform environmentdepend characterist may use design new file system similar platform environ section describ method collect analyz data two differ platform trace collect charisma trace file begin header record contain enough inform make file selfdescript continu seri event record one per event ipsc one trace file collect entir file system trace io involv concurr file system mean io done standard input output host file system all limit sequenti ethernet speed record collect data hour period week februari trace continu whole week tri get realist pictur whole workload trace differ time day week includ night weekend period cover singl trace file rang minut hour longest continu trace period hour trace usual initi machin idl case job run began trace job trace trace stop one two way manual full system crash machin usual idl trace manual stop ipsc highlevel cf call implement runtim librari link user program instrument librari call gener event record time call sinc instrument almost entir within userlevel librari job whose file access trace includ system program eg cp ftp well user program relink period trace instrument librari default user wish applic trace option link uninstru librari regardless whether applic trace not abl record job start end separ mechan trace job run run singl node actual trace least multinod job least singlenod job tremend number singlenod job system program surpris necessarili undesir mani untrac particular one singlenod job run period account singlenod job simpli check statu machin way distinguish untrac job trace job cf io number trace job lower bound one primari concern minim degre measur perturb workload reduc network content local percal overhead buffer event record node sent central trace collector buffer full sinc larg messag ipsc broken kb block chose buffer size buffer allow us reduc number messag sent collector well without steal much memori user job trace record written file system trace care minim effect perform well creat larg buffer data collector write data cf larg sequenti block sinc data collector link noninstru librari use file system record simpl benchmark instrument librari reveal overhead ad instrument virtual undetect case worst case found increas execut time one run na nht applicationio benchmark instrument librari put product use anecdot evid suggest notic perform loss although collect mb data trace file account less total cf traffic sinc node buffer kb data send central data collector raw trace file contain partial order list event record order record complic lack synchron clock ipsc node maintain clock clock synchron system startup drift significantli partial compens asynchroni timestamp block record left comput node receiv data collector differ two attempt adjust event order compens node clock drift rel collector clock techniqu result better estim actual event order still approxim much analysi base spatial rather tempor inform cm trace collect cm trace program two differ program model dataparallel cm fortran cmf program controlparallel cmmd program cm program model cf applic perform io via runtim librari paper examin discuss io done scalabl disk array cmf cf instrument runtim cmf io librari collect trace gather data singl file ipsc cm applic trace data written separ file trace nearli cmf applic ran day period june juli instrument mechan user disabl trace particular job set environ variabl user for exampl industri partner ncsa request featur made use it therebi applic trace separ mechan allow us count total number cmf job run trace period even suppress trace gener job period trace neither figur includ program compil trace librari instal job trace repres distinct applic run distinct user ipsc attempt reduc effect trace user popul wrote perjob trace file onto serial unix file system avoid content sda io buffer trace record memori wrote disk larg block minim trace overhead perform measur taken betatest indic instrument increas total applic execut time less cmmd classifi cmf workload gener workload cmmd workload selfselect develop cmmd trace librari think machin corpor inhous version cmmd sinc develop offsit ncsa system staff reluct make default librari reli user voluntarili link program cmmd trace librari us gather trace trace period two week summer obtain trace job repres distinct applic run distinct user volunt tend heavi user sda rel sophist programm interest parallelio behavior perhap classifi workload iointens workload compar gener cmf workload differ consid interpret cmmd data cmmd io implement clientserv architectur privileg cm host process respons run server loop monitor cmmd io piggyback trace record clientserv protocol actual trace record produc cm comput node commun host server written local unix file system sinc commun trace record embed normal clientserv io protocol believ perturb minim section compar contrast ipsc cm workload tri identifi common trend isol reason differ behavior character workload top down begin examin number job machin number use file job examin individu io request addit studi size io request look sequenti regular among them examin request higher level tri identifi specif kind regular access pattern final examin file share variou granular summari statist three set trace may seen tabl classifi file whether actual read written read written within singl open period rather mode use open file file open neither read written close trace megabyt number file system job read written open read written neither tabl summari data collect ipsc cm job fig show amount time machin spent run given number job sinc cm much larger user base surpris spent less time idl data overal number job cm collect week may trace period sinc attempt correl inform result paper lack contemporan view signific percent total time number job figur amount time machin spent given number job run data includ job even file access could trace ipsc unlik ipsc cm timeshar partit allow job run time although ipsc idl nearli time trace cm idl less time machin activ execut job ipsc spent time run singl job cm spent time run singl job mean ipsc use run multipl applic simultan time cm execut multipl job time although job use file system file system clearli must provid highperform access mani concurr presum unrel job uniprocessor file system tune situat multiprocessor filesystem research ignor issu focus optim singlejob perform fig show distribut number comput node use job machin although singlenod job appear domin job popul ipsc job caus daemon run period check statu machin multiplenod job fairli evenli distribut among remain size node although ipsc allow job small singl node cm minimum partit size node cmf job cm use percent job number comput node a ipsc b cm percent job number comput node cmmd figur distribut number comput node use job workload machin limit choic power cm minimum partit size node smallest partit size hand sinc cmmd workload selfselect includ fairli larg iointens applic observ bia toward larg number node trace cmmd job use node more clearli file system success must allow effici access small sequenti job larg highli parallel job varieti condit system load file two system studi two differ manner file may open local global file said local open node access file issu independ request open file file local open node open file privat view file oper file directli affect node use file contrast file said open global node applic collect issu request open file file global open node share view file cf io model support notion global open file cf must open local discuss section cf provid sever access mode allow file treat global open discuss perjob file statist coalesc local open issu cf singl global open is multipl node cf applic issu local open file count local open singl global open sinc cmf dataparallel languag provid singl thread control everi file oper cmf collect file open cmf global cmmd allow programm open file either local global sinc cmmd applic wish open file global may explicitli sinc cmmd file open local attempt coalesc local open global open cf tabl note mani file written read inde time mani specul programm trace cf applic often found easier open separ output file comput node rather coordin write common output file hypothesi support substanti smaller averag number byte written per file mb averag byte read per file mb ipsc differ averag number byte access appear cm workload cmf job read averag mbfile wrote averag mbfile cmmd applic read mbfile wrote mbfile domin writeonli file cm appear come partli checkpoint activ partli output file written sda later visual number byte read written per file cmf substanti smaller cmmd amount data transfer per file still order magnitud larger observ cf user seem made use higher disk capac bandwidth cm offer anoth common trend across three platform file read written cf cmmd cmf behavior also common unix file system may accentu difficulti coordin concurr read write file tabl show job open file cours execut number number job file cf cmf cmmd tabl among trace job number file open job often small although open mani file one cf job open file although cmf requir file open node cf job open larg number file open one file per node although shown tabl abov nearli job use cmf use file sda applic probabl comput intens io via nf number file open per job higher cmmd cmf perhap due selfselect natur user despit differ absolut number file open appear clear use multipl file per job common therefor although file open concurr filesystem design must optim access sever file within job found open cf workload temporari file defin file delet job creat it rariti temporari file file read written indic applic chose use file extens memori out core solut mani cf applic comput fluid dynam code found outofcor method gener slow workload cm exhibit larger number temporari file cmf job cmmd job differ may indic out ofcor method common cm may caus delet checkpoint file job ran complet fraction file file size byte cmf figur cumul distribut function cdf number file size close file size x cdfx repres fraction file x fewer byte fig show wide rang size file system system file access cf although file larger generalpurpos file system smaller would expect see scientif supercomput environ file cm significantli larger ipsc size much evenli distribut one like reason file cm larger avail time disk space io request size figur show ipsc cm vast major access small byte transfer larg access inde read cf request fewer byte read transfer data read similarli write cf fewer byte write transfer data written number small request surpris due poor perform cf cmmd interfac mani small file well sever distinct peak across whole rang size constant granular captur detail felt import histogram chose plot file size logarithm scale pseudologarithm bucket size bucket size byte byte bucket size byte on read fraction data fraction cf cmmd cmf cmf read size byte cf figur cdf number read request size amount data read request size fraction fraction data write cmmd cmf write size byte cf cf cmmd figur cdf number write request size amount data written request size similar cf comput node issu request data independ comput node request cmmd somewhat larger cf read write byte cmf provid collect model io request issu comput node onc accordingli would expect see much larger request cmf either cmmd cf found howev even cmf read write byte ipsc small request cm known perform poorli although access cm larger observ ipsc still significantli smaller ten hundr kilobyt use typic perform analys system studi shown larg io request common scientif applic run supercomput seen small request common scientif applic run parallel comput inde trend hold across two differ parallel machin use three parallel filesystem interfac two parallel program model therefor believ preponder small request size observ scientif workload natur result parallel fundament larg class parallel applic conclud futur parallel file system must focu provid low latenc small request well high bandwidth larg request sequenti one common characterist previou file system workload studi particularli scientif workload file typic access sequenti defin sequenti request one begin higher file offset point previou request comput node end looser definit sequenti use studi refer abov previou studi call sequenti call consecut consecut request sequenti request begin precis previou request end figur show amount sequenti consecut access file observ workload figur look pernod access pattern cf cmmd perjob access pattern cmf three interfac nearli access writeonli file sequenti access readonli file also predominantli sequenti cmf cmmd sever file read nonsequenti sever applic cm wrote data file forward order read back revers order behavior account least nonsequenti access machin unsurprisingli readwrit file access nonsequenti cmmd cmf cf cmmd cmf cf cmmd cmf cf a readonli c readwrit fraction file fraction file fraction file figur cdf sequenti access file point line indic fraction file workload contain indic percentag sequenti access look graph consecut access fig find behavior vari system interfac cf cmf nearli writeonli file access consecut cmmd hand writeonli file access complet consecut three interfac readonli file much less like access consecut writeonli file least consecut access found cf readonli file consecut access all case access readwrit file primarili nonconsecut one signific reason rel high percentag consecut access writeonli file ipsc tendenc applic assign differ file node write data singl node access file frequent cf a readonli c readwrit fraction file fraction file fraction file consecut cmmd cmf cmmd cmf cmmd cmf cf cf figur cdf consecut access file point line indic fraction file workload contain indic percentag consecut access reason node access file nonconsecut multipl node access file happen frequent readonli file cf file cmmd larg number sequenti nonconsecut access often result interleav access interleav access aris success record file access differ node perspect individu node byte must skip one request next high percentag consecut access file cmf program expect look collect joblevel pattern rather individu nodelevel pattern sinc io request cmf applic issu individu node sort interleav unlik appear percent file number differ request size cmf cmmd number differ interv percent file cmf cmmd figur number differ interv request size use file across particip node file zero interv size one access node file zero request size open close without access regular workload mani small nonconsecut request differ previous observ workload tradit uniprocessor supercomput attempt gain better understand observ workload tri identifi point regular interv first look interv request number byte end one request begin next consecut access interv size number interv size use file across node access file shown fig surpris number file around case read written one request per node ie interv file cf cmf cmmd access singl interv size access consecut ie one interv size remaind intervals file along intervals file repres remain file suggest exist anoth form highli regular access pattern file differ interv size regular if ani complex request get better feel regular fig also show number differ request size use file cf exhibit highest degre regular file access one two request size cmmd next file access one two differ request size cmf least regular half file access two fewer request size may indic cmf user use file store differ data structur eg differ matric even cmf file access three fewer request size combin regular request size regular interv size mani applic clearli use regular structur access pattern possibl much data matrix form stride access better understand structur caus regular nonconsecut access pattern examin trace file evid stride access pattern simplestrid refer seri io request simplestrid access pattern request number byte file pointer increment amount request pattern would occur exampl process parallel applic read column data matrix store rowmajor order could also correspond pattern gener applic distribut column matrix across processor cyclic pattern column could distribut evenli matrix store rowmajor order sinc stride pattern less like occur singlenod file sinc could occur file one two access look file three request multipl node fig show mani access select subset cf cmmd file appear part simplestrid access pattern sinc consecut access could fraction file cmmdwithout cmfwith cmmdwith cfswithout cfswith fraction file figur cumul distribut file accord fraction access involv simplestrid pattern plot show frequenc stride access consecut access count stride without consid trivial form stride access with interv fig show frequenc stride access without consecut access includ either case file examin cf appar access entir stride pattern stride access also common cmmd file access entir stride nonconsecut pattern exclud consecut access appear almost stride access cmf request file take part stride pattern lack stride access cmf surpris sinc stride access typic caus explicit express data distribut controlparallel program accordingli remaind discuss focu cf cmmd defin stride segment group request appear part singl simplestrid pattern fig show percentag request involv stride segment tell us whether file access singl filelong stride segment mani shorter segment fig show file stride segment file access mani stride segment sinc interest case file clearli access stride pattern figur includ consecut access segment fewer request number request segment vari machin fig number file number stride segment a cf number stride segment number file figur number differ stride segment file ignor segment request note two plot use differ scale number access number segment number access a cf b cmmd number segment figur head segmentlength distribut plot show number segment given length includ short segment fewer access show segment cf fell rang request segment cmmd fig show file access much longer segment machin exist simplestrid pattern interest potenti use fact mani file access multipl short segment suggest level structur beyond describ simplestrid pattern nest pattern nestedstrid access pattern similar simplestrid access pattern rather compos simpl request separ regular stride file compos a cf number access number segment number access number segment figur tail segmentlength distribut stride segment separ regular stride file simplestrid pattern examin last section could call singlynest pattern doublynest pattern could correspond pattern gener applic distribut column matrix store rowmajor order across processor cyclic pattern column could distribut evenli across processor simplestrid subpattern correspond request gener within row matrix toplevel pattern correspond distanc one row next access pattern could also gener applic read singl column data threedimension matrix higher level nest could occur applic map multidimension matrix onto set processor maximum level number number nest cf file cmmd file tabl number file use given maximum level nest tabl show frequent nest pattern occur cf cmmd file appar stride access zero level nest file access simplestrid pattern singl level nest interestingli machin far common file exhibit three level nest two tendenc suggest use multidimension matric common system synchron access mode although notion synchron access file built semant dataparallel cmf case cf cmmd provid synchron access file cf cmmd provid user option use file pointer share among node also provid sever mode provid user differ semant govern file pointer share given regular request interv size ipsc cfss mode see section would seem help trace show howev file use mode provid node independ file pointer fig give one hint whi although differ request size interv size often one someth easili support sharedpoint mode mode also known fastest four mode offer cf contrast cf cmmd localindepend mode known slow use total io instead cmmd applic use synchronoussequenti mode io synchronousbroadcast mode use total io globalindepend mode use total io specul use one node subset node use file among themselv data one may inclin conclud cm applic need fast synchron io anecdot evid suggest howev user frequent want independ io will pay perform penalti cmmd cf user adopt differ io strategi achiev end result high perform illustr capabl exist machin may influenc user behavior writeblock readbyt readblock fraction file percent share writebyt fraction file percent share writebyt writeblock readbyt readblock fraction file percent share readblock readbyt writeblock writebyt a cf c cmmd figur cdf file share node readonli writeonli file byte block granular block size ipsc kbyte block size cm kbyte file share within job file concurr share two process open time uniprocessor distributedsystem workload concurr share known uncom mon write concurr share file almost unheard parallel file system cours concurr file share among process within job presum norm concurr file share job like rare inde trace saw great deal file share within job concurr file share job interest question individu byte block file share fig show frequenc byte blockshar system three case share readonli file writeonli file surpris given complex coordin write share inde cf readonli file byte share multipl comput node writeonli file byte share all found similar result cmmd readonli file byte share writeonli file none byte share cmf least share three system writeonli file byte share readonli file fewer byte share multipl comput node lack share like artifact cmf dataparallel program model processor static assign nonoverlap portion matrix even lot byteshar usual larg amount blockshar overal amount block share impli strong interprocess spatial local suggest cach io node may improv system perform conclus recommend across two machin two program model cover paper found import similar differ compar uniprocessor workload three parallel workload use much larger file domin write although variat magnitud found small request size common three parallel workload uniprocessor workload compar vectorsupercomput workload observ much smaller request tendenc toward nonconsecut sequenti file access final parallel lead new interleav access pattern high interprocess spatial local io node detail result may specif two system studi workload two site believ gener conclus wide applic scientif workload run looselycoupl mimd multiprocessor categori includ mani current multiprocessor ultim believ filesystem interfac must chang current interfac forc programm break larg parallel io activ small nonconsecut request believ controlparallel model support stride io request programm interfac comput node comput node io node stride request effect increas request size lower overhead introduc opportun lowlevel optim futur work believ lowlevel workload analys conduct import first step toward develop parallel file system meet need parallel scientif applic still great deal work done ffl trace platform reduc likelihood result specif architectur environ ffl studi specif applic greater detail workload studi describ parallel file system use studi individu applic allow us understand use fashion better understand applic programm fundament need ffl design implement new interfac file system base workload analys acknowledg mani thank na divis nasa ame especi jeff becker russel carter fineberg art lazanoff bill nitzberg leigh ann tanner mani thank also orran krieger bernard traversat rest charisma group thank michael welg curti canada ncsa mani thank ncsa user includ greg bryan dian cook tom cortes kathryn johnston chri kuszmaul fadi najjar robert sugar also thank kapil mathur david phillimor think machin corpor doreen revi duke final thank mani user agre applic trace r filesystem workload scientif multiprocessor character parallel fileaccess pattern largescal multiprocessor shortterm file refer pattern unix environ directori refer pattern hierarch file system a trace driven analysi unix bsd file system measur distribut file system analysi file io trace commerci comput environ high perform io parallel comput problem prospect the demo file system inputoutput behavior supercomput appli cation an analysi file migrat unix supercomput environ a static analysi io characterist scientif applic product workload a case studi scientif applic io behavior file concept parallel io prefetch file system mimd multi processor a studi io behavior perfect benchmark multiprocessor architectur requir parallel scientif applic explicit commun applicationsdriven parallel io inputoutput instru mentat character model manag polici in putoutput characterist scalabl parallel applic a concurr file system highli parallel mass storag system unix file access cach multicomput environ cmmd io parallel unix io multiprocessor file system interfac hf flexibl file system largescal mul tiprocessor parallel access file vesta file system ncube parallel io softwar connect machin model cm technic summari parallel file io routin mpiio parallel file io interfac mpi ipsc ipsc user guid nasa ame research center perform measur concurr file system intel ipsc hypercub perform ipsc concurr file system cmmd refer manual version person commun a global time refer hypercub multiprocessor perform cm scalabl file system lowlevel interfac highlevel parallel io diskdirect io mimd multiprocessor tr ctr dean hildebrand peter honeyman directpnf scalabl transpar versatil access parallel file system proceed th intern symposium high perform distribut comput june monterey california usa len wisniewski brad smisloff nil nieuwejaar sun mpiio effici io parallel applic proceed acmiee confer supercomput cdrom pe novemb portland oregon unit state dean hildebrand lee ward peter honeyman larg file small write pnf proceed th annual intern confer supercomput june juli cairn queensland australia thakur william gropp ewe lusk case use mpi deriv datatyp improv io perform proceed acmiee confer supercomput cdrom p novemb san jose ca m satyanarayanan carla schlatter elli adapt key mobil io acm comput survey csur v ne dec jarek nieplocha holger dachsel ian foster implement noncollect parallel io cluster environ use activ messag commun cluster comput v n p myra b cohen charl j colbourn order disk doubl erasur code proceed thirteenth annual acm symposium parallel algorithm architectur p juli crete island greec hong scott a brandt darrel d e long ethan l miller ying lin use memsbas storag comput systemsdevic model manag acm transact storag to v n p may gokhan memik mahmut kandemir alok choudhari exploit interfil access pattern use multicollect io proceed st usenix confer file storag technolog januari monterey ca yijian wang david kaeli profileguid io partit proceed th annual intern confer supercomput june san francisco ca usa ron oldfield david kotz improv data access comput grid applic cluster comput v n p januari toni cort sergi girona jess labarta design issu cooper cach coher problem proceed fifth workshop io parallel distribut system p novemb san jose california unit state florin isaila guido malpohl vlad olaru gabor szeder walter tichi integr collect io cooper cach clusterfil parallel file system proceed th annual intern confer supercomput june juli malo franc thakur william gropp ewe lusk implement mpiio portabl high perform proceed sixth workshop io parallel distribut system p may atlanta georgia unit state thoma sterl conclus beowulf cluster comput linux mit press cambridg ma gokhan memik mahmut t kandemir weikeng liao alok choudhari multicollect io techniqu exploit interfil access pattern acm transact storag to v n p august emilia rosti giusepp serazzi evgenia smirni mark s squillant model parallel applic larg comput io requir ieee transact softwar engin v n p march paolo cremonesi claudio gennaro integr perform model spmd applic mimd architectur ieee transact parallel distribut system v n p decemb paolo cremonesi claudio gennaro integr perform model spmd applic mimd architectur ieee transact parallel distribut system v n p juli stergio v anastasiadi kenneth c sevcik michael stumm scalabl faulttoler support variabl bitrat data exedra stream server acm transact storag to v n p novemb david kotz diskdirect io mimd multiprocessor acm transact comput system toc v n p feb jack dongarra ian foster geoffrey fox william gropp ken kennedi linda torczon andi white refer sourcebook parallel comput morgan kaufmann publish inc san francisco ca