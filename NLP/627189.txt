t automat accur costbound analysi highlevel languag a paper describ languagebas approach automat accur costbound analysi approach consist transform build costbound function presenc partial known input structur symbol evalu costbound function base input size paramet optim make overal analysi effici well accur sourcelanguag level calcul cost bound express term primit cost paramet paramet obtain base languag implement measur conserv approxim yield accur conserv approxim time space bound implement approach perform number experi analyz scheme program result help confirm accuraci analysi b introduct analysi program cost run time space consumpt import realtim system embed system interact environ compil optim perform evalu mani comput applic extens work support part nsf grant ccr onr grant n n yanhong a liu address comput scienc depart state univers new york stoni brook stoni brook ny gustavo gomez address comput scienc depart indiana univers bloomington correspond author yanhong a liu email liucssunysbedu tel fax url httpwwwcssunysbeduliu studi mani eld comput scienc algorithm program languag system particularli import mani applic realtim system embed system abl predict accur time bound space bound automat ecient particularli desir abl highlevel languag analyz system run time sinc shaw propos time schema highlevel languag number peopl extend analysi presenc compil optim pipelin cach memori etc howev remain obviou seriou limit time schema even absenc lowlevel complic inabl provid loop bound recurs depth execut path automat accur analysi exampl inaccur loop bound caus calcul worstcas time much higher measur worstcas time manual way provid inform potenti even larger sourc error addit inconveni variou program analysi method propos provid loop bound execut path amelior problem complet solv it appli class program use approxim crude analysi similarli loop bound recurs depth need also space analysi paper describ languagebas approach automat accur costbound analysi approach combin method techniqu studi theori languag system call languagebas approach primarili exploit method techniqu static program analysi transform approach consist transform build costbound function presenc partial known input structur symbol evalu costbound function base input size paramet optim make overal analysi ecient well accur sourcelanguag level describ analysi transform algorithm explain work calcul cost bound express term primit cost paramet paramet obtain base languag implement measur conserv approxim yield accur conserv approxim time space bound cost analysi current includ cach analysi implement approach perform number experi analyz scheme program result help conrm accuraci analysi describ prototyp system alpa well analysi measur result approach gener sens work multipl kind cost analysi main analysi sum cost term dierent oper perform give upper bound kind oper arithmet oper data eld select constructor alloc variat analyz stack space live heap space output size etc analyz lower bound well upper bound basic idea also appli program languag rest paper organ follow section outlin languagebas ap proach section present analysi transform method techniqu section describ implement experiment result section compar relat work conclud languagebas approach cost cost bound languagebas costbound analysi start given program written highlevel languag c lisp rst step build cost function take input origin program but return cost place or addit to origin return valu done easili associ paramet program construct repres cost sum paramet base semant construct call paramet describ cost program construct primit cost paramet calcul actual cost bound base cost function three dicult problem must solv first sinc goal calcul cost without given particular input calcul must base certain assumpt input thu rst problem character input data ect cost function gener due imperfect knowledg input cost function transform costbound function algorithm analysi input character size accommod requir manual semiautomat transform cost time space function analysi mainli asymptot primit cost paramet consid independ input size ie constant comput iter recurs whatev valu primit cost paramet assum second problem aris theoret challeng optim costbound function close form term input size although much progress made area close form known subclass function thu optim automat done analyz gener program system input character indirectli use loop bound execut path program inform must gener provid user even though program analys help case close form term paramet bound obtain easili cost function isol third problem interest system research obtain valu primit cost paramet depend compil runtim system oper system machin hardwar recent year much progress made analyz lowlevel dynam factor clock interrupt memori refresh cach usag instruct schedul parallel architectur time analysi nevertheless inabl comput loop bound execut path automat accur led calcul bound much higher measur worstcas time programminglanguag area rosendahl propos use partial known input structur exampl instead replac input list l length n done algorithm analysi annot loop number relat n done system simpli use input list n unknown element call paramet n describ partial known input structur input size paramet cost function transform automat costbound function control point decis depend unknown valu maximum cost possibl branch comput otherwis cost chosen branch comput rosendahl concentr prove correct transform assum constant primit cost paramet reli optim obtain close form term input size paramet close form obtain costbound function languagebas costbound analysi combin result theori system explor method techniqu static program analysi transform studi languagebas approach comput cost bound automat ecient accur approach three main compon first use automat transform construct costbound function origin program base partial known input structur result function take input size paramet primit cost paramet argument caveat costbound function might termin howev nontermin occur recursiveit structur origin program depend unknown part given partial known input structur then comput worstcas cost bound ecient without reli close form optim costbound function symbol respect given valu input size paramet base partial evalu increment comput symbol evalu alway termin provid costbound function termin result function express cost bound count dierent oper perform cost kind oper denot primit cost paramet third compon consist transform enabl accur cost bound comput lift condit simplifi condit inlin nonrecurs func tion transform appli origin program costbound function construct may result larger code size allow subcomput base control condit merg lead accur cost bound comput ecient well approach gener three compon develop base gener method techniqu particular compon meant new analysi transform combin applic automat accur costbound analysi highlevel languag new result cost bound primit cost paramet obtain base languag implement measur conserv approxim give accur conserv approxim time space bound implement analys transform subset scheme dialect lisp transform done automat cost bound express oper count comput ecient accur exampl program analyz includ number classic sort program matrix comput program variou list process program also estim approxim bound actual run time measur primit cost paramet run time use control loop calcul accur bound heap space alloc constructor program base number byte alloc constructor compil use function subset scheme three reason function program languag togeth featur like automat garbag col lection becom increasingli wide use yet work calcul actual run time space function program lack much work done analyz transform function program includ complex analysi use estim actual run time space ecient accur well analys transform develop function languag appli improv analys imper languag well analys transform perform sourc level allow implement independ compil underli system allow analysi result understood sourc level languag use rstorder callbyvalu function languag structur data primit arithmet boolean comparison oper condit bind mutual recurs function call program set mutual recurs function denit express e given grammar below e v variabl refer primit oper bind express applic binari primit oper chang inx prex notat depend whichev easier present follow lisp scheme use keyword taken ml implement support syntax scheme syntax consh t construct list head h tail t use carl cdrl select head tail respect list l use nil denot empti list use nulll test whether l empti list exampl program select least element nonempti list els let carx carx els end use least small run exampl present variou analysi result also use sever exampl insert sort select sort merg sort set union list revers the standard lineartim version revers append the standard quadratictim version even though languag small sucient power conveni write sophist program structur data essenti record pascal struct c constructor applic ml condit bind easili simul condit statement assign recurs simul loop also see cost analysi presenc array pointer fundament harder cost program construct count similar way cost con struct exampl access array element ai cost access i oset element address a nalli get valu address note side eect caus featur often caus analysi dicult pure function languag higherord function lazi evalu import cost function accommod featur studi symbol evalu optim describ appli well construct costbound function construct cost function rst transform origin program construct cost function take origin input primit cost paramet argument return cost straightforward base semant program construct given origin program add set cost function one origin function simpli count cost origin program execut algorithm given below present transform c origin program call transform c e recurs transform subexpress exampl variabl refer transform symbol c varref repres cost variabl refer condit statement transform cost test plu condit true cost true branch otherwis cost fals branch plu cost transfer control use cf denot cost function f program c variabl refer data construct c e primit oper c e els bind function call c e appli transform program least obtain function least origin given cost function cleast below inx notat use addit unnecessari parenthes omit note variou cs inde argument cost function cleast omit argument posit eas read els c transform similar local cost assign stepcount function cost function etc work transform extend method bind make primit cost paramet explicit sourcelanguag level exampl primit oper p given dierent symbol c p constructor c given dierent symbol c c note cost function termin appropri sum primit cost paramet origin program termin run forev sum inniti origin program termin desir mean cost function construct costbound function character program input captur cost function dicult autom howev partial known input structur provid natur mean special valu unknown repres unknown valu exampl captur input list length n follow partial known input structur use listn els consunknown listn similar structur use describ array n element matrix mbyn element complet binari tree height h etc sinc partial known input structur give incomplet knowledg input origin function need transform handl special valu unknown particular primit function p dene new function f p f p v return unknown v unknown return pv usual otherwis exampl unknown unknown els v v also dene new function lub denot least upper bound take two valu return precis partial known structur valu conform with exampl _ _ unknown els els unknown also cost function need transform comput upper bound cost truth valu condit test known cost chosen branch comput normal otherwis maximum cost branch comput transform b given below embodi algorithm b e transform express origin function b c transform express cost function use uf denot function f extend valu unknown use cbf denot costbound function f program b variabl refer data construct primit oper els v e function call primit cost paramet els v e appli transform function least cleast yield function uleast cbleast below function f p primit oper p function lub given abov share code present whereclaus make code smaller els v e els e end let els v f car x els end end els v e els e end c els v c car result costbound function take argument partial known input structur listn take argument input size paramet n therefor obtain result function take argument input size paramet primit cost paramet comput accur cost bound possibl transform c b take linear time term size program extrem ecient also seen prototyp system alpa note result costbound function might termin occur recurs structur origin program depend unknown part partial known input structur trivial exampl partial known input structur given unknown correspond costbound function recurs function termin sinc origin program cost innit resourc worst case modifi analysi detect nontermin mani case exampl exampl give unknown recurs costbound function nontermin trivial detect sinc argument recurs call would remain unknown optim costbound function section describ symbol evalu optim make comput cost bound ecient transform consist partial evalu realiz global inlin increment comput realiz local optim rst point costbound function might extrem ineci evalu given valu paramet fact worst case evalu take exponenti time term input size paramet sinc essenti search worstcas execut path input satisfi partial known input structur partial evalu costbound function practic valu input size paramet given almost applic timeanalysi techniqu use system requir loop bound user time bound comput gener possibl obtain explicit loop bound automat accur implicitli achiev desir eect evalu costbound function symbol term primit cost paramet given specic valu input size paramet evalu simpli follow structur costbound function specic control structur determin condit branch make recurs function call usual primit oper sum primit cost paramet maximum among altern sum easili done symbol thu transform inlin function call sum primit cost paramet symbol determin condit branch can take maximum sum among possibl branch not symbol evalu e dene perform transform take argument express e environ variabl bind where variabl map valu return result symbol valu contain primit cost paramet evalu start applic costbound function partial unknown input structur eg cbleastlist start empti environ assum add function symbol sum argument function symbol take maximum argument variabl refer look bind v environ primit cost paramet e data primit bind v valu e environ function call e f dene exampl appli symbol evalu cbleast list size obtain follow result symbol evalu exactli special partial evalu fulli automat comput accur cost bound possibl respect given program structur alway termin long costbound function termin symbol evalu given valu input size paramet ineci compar direct evalu given valu input size paramet particular primit cost paramet even though result function take virtual constant time given valu primit cost paramet exampl directli evalu quadratictim revers function that use append oper input size take millisecond wherea symbol evalu take millisecond hundr time slower propos optim greatli speed symbol evalu avoid repeat summat recurs symbol evalu global optim costbound function in volv evalu summat symbol primit cost paramet within function denit perform repeatedli comput recurs thu speed symbol evalu rst perform summat preprocess step specic creat vector let element correspond primit cost paramet transform s given below perform optim use vcbf denot transform costbound function f oper vector use function add v comput componentwis sum argument vector use function comput componentwis maximum argument vector program primit cost paramet c creat vector s except compon correspond c set other c let v follow vector primit cost paramet appli transform function cbleast yield function vcbleast compon vector correspond compon v inx notat v use vector addit els v e els e end els v els costbound function cbleastx simpli dot product vcbleastx v transform increment comput recurs avoid repeat summat again fulli automat take time linear term size costbound function result optim drastic speedup evalu exampl optim symbol evalu quadratictim revers input size take millisecond direct evalu take millisecond result less time slowdown time faster symbol evalu without optim make costbound function accur loop recurs aect cost bound most accuraci cost bound calcul also depend handl condit origin program ect costbound function condit whose test result known true fals symbolicevalu time appropri branch chosen branch may even take longer consid worstcas cost major sourc accuraci worstcas bound condit whose test result known symbolicevalu cost need take maximum cost among altern case would produc inaccur cost bound test condit one subcomput impli test condit anoth subcomput exampl consid variabl v whose valu unknown comput cost bound e directli result least cf cf ibonacci howev consid two realiz execut path know worst case cf ibonacci plu small constant known falsepath elimin problem two transform lift condit simplifi condit appli sourc program construct costbound function allow us achiev accur analysi result function denit former lift condit outermost scope test depend on latter simpli condit accord lift condit exampl lift condit e obtain simplifi condit two occurr e f ibonacci respec tive obtain facilit transform inlin function call function dene recurs power transform depend reason use simplifi condi tional studi mani program transform method least syntact equal use identi obviou sourc inac curaci optim also speed symbol evalu sinc obvious infeas execut path search transform implement appli mani test program even though result program analyz accur ecient perform separ measur major reason exampl program contain condit test impli condit test simpl transform exampl mani power program optim techniqu especi function program use make costbound function accur well ecient plan explor optim measur eect experi program note transform sourc program aim make cost bound function accur ecient optim sourc program even though make sourc program faster also make correspond costbound function faster two goal dierent optim sourc program meant produc dierent program smaller cost cost analysi meant analyz accur cost given program make use techniqu make costbound analysi ecient accur perform overal costbound analysi appli follow transform order sourc program lift condit simplifi condit as section construct cost function costbound function as section precomput repeat local summat perform global symbol evalu as section implement experiment implement analysi approach prototyp system alpa automat languagebas perform analyz perform larg number experi obtain encourag good result implement experiment result implement subset scheme editor sourc program implement use synthes gener thu easili chang syntax sourc program exampl current implement support syntax use paper scheme syntax construct costbound function written ssl simpl function languag use synthes gener lift condit simplifi condit inlin nonrecurs call also implement ssl symbol evalu optim written scheme figur give result symbol evalu costbound function six exampl program input size exampl second row gure mean insert sort input size costbound function last column list sum everi row set union exampl use input argument given size number gure character variou aspect exampl contribut actual time space bound discuss below veri number also exact worstcas count exampl insert sort input size inde function call made worstcas execut worstcas count veri use modi evalu experi show costbound function give accur cost bound term count dierent oper perform figur compar time direct evalu costbound function primit cost paramet set time optim symbol evalu obtain exact symbol count figur measur taken sun ultra mhz cpu mb main memori includ garbagecollect time time without garbagecollect time faster shown here experi show optim costbound function allow symbol evalu time slower direct evalu rather hundr time slower merg sort costbound function construct use algorithm paper take sever day evalu input size larger special simpl optim done obtain number figur name let costbound function merg avoid base case long possibl use size list place list unknown result symbol evalu take second optim yet implement perform automat exampl take hour evalu costbound function note that small input symbol evalu take rel much time direct evalu due rel larg overhead vector setup input get larger symbol evalu almost fast direct evalu exampl again exampl size varref nil con null car cdr let call total insert select set union list figur result symbol evalu costbound function symbol evalu cost bound comput virtual time given valu primit cost paramet insert sort select sort merg sort set union list revers revers wapp size direct symbol direct symbol direct symbol direct symbol direct symbol direct symbol xxxxxx xxxxxx figur time direct evalu vs optim symbol evalu in millisecond among twenti program analyz use alpa two termi nate one quicksort contriv variat sort diverg recurs structur split list depend valu unknown list element similar nontermin caus merg path method nontermin happen much less often method sinc essenti avoid merg path much possibl found dierent symbolicevalu strategi use kind increment path select evalu would termin exampl well exampl give accur worstcas bound evalu algorithm yet implement futur work exploit result static analysi identifi sourc nontermin make costbound analysi termin often practic use costbound analyz might termin certain input modifi evalu stop time output cost bound calcul till point mean longerrun analysi might yield higher bound experi also estim approxim bound actual run time measur primit cost paramet run time use control loop calcul accur bound heap space alloc constructor program base number byte alloc constructor compil timebound analysi perform two set experi rst machin cach enabl second machin cach disabl rst give tight bound case underestim input small larg attribut cach eect second give conserv tight bound input rst describ experi timebound analysi cach enabl analysi heap space alloc bound analyz cach eect show result timebound analysi cach disabl measur analys timebound perform sourc program compil chez scheme compil sourc program use librari partic ular number larg enough trigger bignum implement chez scheme tri avoid compil optim set optim level view necessari optim alreadi appli program handl garbagecollect time perform separ set experi exclud garbagecollect time calcul measur includ garbagecollect time both current analysi handl eect cach memori instruct pipelin approxim cach eect take operand circularli cycl element measur primit cost paramet discuss below timebound analysi cach enabl particular number report taken sun ultra mhz cpu mb main memori also perform analysi sever kind sparc station result similar sinc minimum run time program construct microsecond precis time function millisecond use controltest loop iter time keep measur error microsecond ie loop repeat time averag valu taken comput primit cost paramet test construct the varianc less case calcul time bound done plug measur paramet optim timebound function run exampl program appropri number time measur run time less error figur show estim measur worstcas time six exampl program input size time includ garbagecollect time item meca measur time express percentag calcul time gener measur time close bound calcul time with accuraci except input small case larg case analyz address below measur includ garbagecollect time similar except case underestim figur depict number origin tri avoid garbag collect write loop instead recurs much possibl tri exclud garbagecollect time complet idea includ garbagecollect time come earlier experi mistakenli use time function chez scheme includ garbagecollect time insert sort select sort merg sort size calcul measur meca calcul measur meca calcul measur meca set union list revers revers wappend size calcul measur meca calcul measur meca calcul measur meca figur calcul measur worstcas time in millisecond cach enabl figur input size exampl sort classi complex exampl previou studi calcul time much higher measur time result one sort program singl input of size report experi use cost bound comput also calcul accur instead approx imat bound heap space dynam alloc constructor sourc program number byte alloc constructor obtain precis base languag implement exampl chez scheme alloc byte conscel heap inform also obtain easili use statist utili tie base result figur set c con primit cost paramet obtain exact bound heap space dynam alloc constructor program shown figur consid accuraci timebound analysi cach enabl found input small measur time occasion calcul time exampl also input larg measur includ time millisecond input size insert sort calcul time millisecond input size select sort calcul time millisecond input size merg sort calcul time millisecond input size set union calcul time millisecond input size list revers calcul time millisecond input size revers wappend calcul figur comparison calcul measur worstcas time cach enabl size insert sort select sort merg sort set union list revers revers wapp figur bound heap space alloc constructor in byte garbagecollect time exclud garbagecollect time measur time exampl calcul time attribut cach memori eect follow reason first initi cach miss like show small input second underestim input size figur happen exactli exampl whose alloc heap space larg figur recal use cycl data structur size measur primit cost paramet furthermor program use less space calcul bound accuraci even larger input size program use extrem larg amount space even small input much wors underestim exampl cartesian product underestim occur small input size exampl input size measur time higher calcul time perform second set experi timebound analysi machin cach disabl machin use sun ultra mhz cpu mb main memori figur show estim measur worstcas time six program input size time includ garbagecollect time see measur time close bound calcul time underestim figur depict number figur accommod cach eect timebound analysi cach enabl could adjust measur primit cost paramet data structur appropri size appropri size determin base precis space usag analysi heapspac alloc one less direct aspect directli incorpor precis knowledg compilergener machin instruct analysi method leav futur work current method use approxim timebound estim insert sort select sort merg sort size calcul measur meca calcul measur meca calcul measur meca set union list revers revers wappend size calcul measur meca calcul measur meca calcul measur meca figur calcul measur worstcas time in millisecond cach disabl presenc lowlevel eect precis analysi absenc use accur spacebound analysi help address memori issu relat work conclus preliminari version work appear overview comparison relat work cost analysi appear section certain detail comparison also discuss present method section summar them compar analys loop bound execut path detail conclud compar work algorithm analysi program complex analysi work consist push symbol primit cost paramet allow us calcul actual cost bound valid result experiment measur also work analyz averagecas complex dierent goal worstcas bound compar work system work explor program analysi transform techniqu make analysi automat ecient accur overcom diculti caus inabl obtain loop bound time millisecond input size insert sort calcul time millisecond input size select sort calcul time millisecond input size merg sort calcul time millisecond input size set union calcul time millisecond input size list revers calcul time millisecond input size revers wappend calcul figur comparison calcul measur worstcas time cach disabl recurs depth execut path automat precis also work measur primit cost paramet purpos gener perform predict work inform execut path obtain run program number input program insert sort whose bestcas worstcas execut time dier greatli predict time use method could inaccur number techniqu studi obtain loop bound execut path time analysi manual annot inconveni errorpron automat analysi inform two main problem first even precis loop bound obtain symbol evalu program separ loop path inform rest analysi gener less accur integr analysi second approxim merg path loop recurs often lead nontermin time analysi looser bound newer method power appli certain class program contrast method allow recurs loop consid natur overal cost analysi base partial known input structur addit method merg path recurs loop may caus exponenti time complex analysi worst case experi test program show analysi still feasibl input size thousand also studi simpl power optim speed analysi dramat analysi cach behavior loop transform recurs call preden callstr level determin mani time xedpoint analysi iter thu analysi result approxim method allow analysi perform exact number recurs iter given partial known input data structur work lundqvist stenstrom base similar idea our appli idea machin instruct level accur take account eect instruct pipelin data cach handl dynam alloc data structur can method merg path loop would lead nontermin analysi mani program method appli idea sourc level experi show calcul accur cost bound mani program merg path calcul still ecient also method time analysi base program ow graph unlik method method exploit given input size requir programm give precis path inform idea use partial known input structur origin rosendahl extend manipul primit cost paramet also handl bind construct simpl necessari ecient comput innov method optim costbound function use partial evalu increment comput transform condit make analysi ecient accur partial evalu increment comput transform studi intens program languag applic costbound analysi particularli simpl clean result transform fulli automat ecient start explor suit new languagebas techniqu cost analysi particular analys optim speed evalu cost bound function also appli gener approach analyz stack space live heap space help predict garbagecollect cach behavior also analyz lower bound use symmetr method name replac maximum minimum condit point futur work accommod lowerlevel dynam factor time sourcelanguag level examin correspond compil gener code cach pipelin eect explicit conclus approach propos base entir highlevel program languag method techniqu intuit togeth produc automat tool analyz cost bound ecient accur use accur approxim analyz time space bound acknowledg thank anonym refere care review mani help comment r revis report algorithm languag scheme structur interpret comput program fals path problem hard realtim program bound worstcas instruct cach perform cadenc research system analysi pointer structur scheme program languag facilit worstcas execut time analysi optim code deriv annot tight calcul execut time appli compil techniqu cach behavior predict automat averagecas analysi algorithm gener partial evalu automat deriv path loop annot objectori realtim program retarget techniqu predict execut time abstract recurs pointer data structur improv analysi transform imper program introduct partial evalu partial evalu automat program gener art comput program sizechang principl program termin accur worst case time analysi risc processor static cach increment comput systemat deriv increment program predict program execut time analyz static dynam program path experi program time tool base sourcelevel time schema live memori analysi garbag collect embed system comput maximum task execut time synthes gener system construct languagebas editor automat complex analysi analysi benchmark character benchmark perform predict machin character base abstract highlevel languag machin complex analysi lazi higherord languag program improv intern special reason time higher level languag softwar concept supercompil automat accur live memori analysi garbagecollect languag strict analysi aid time analysi mechan program analysi valu depend graph represent without taxat automat complex analysi divideandconqu algo rithm tr ctr yanhong a liu scott d stoller optim ackermann function increment acm sigplan notic v n p octob yanhong a liu scott d stoller dynam program via static increment higherord symbol comput v n p marchjun