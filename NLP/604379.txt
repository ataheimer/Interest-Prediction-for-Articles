t simul studi decoupl vector architectur a decoupl techniqu appli vector processor result larg increas perform vectoriz program simul select perfect club specfp benchmark suit compar execut time convent singl port vector architectur decoupl vector architectur decoupl increas perform factor greater realist memori latenc ideal memori system zero latenc still speedup much signific portion paper devot studi tradeoff involv choos suitabl size queue decoupl architectur hardwar cost queue need larg achiev perform advantag decoupl b introduct recent year wit increas gap processor speed memori speed due two main reason first technolog improv cpu speed match similar improv memori chip second instruct level parallel avail recent processor increas sinc sever instruct issu processor cycl total amount data request per cycl memori system much higher two factor led situat memori chip order time slower cpu total execut time program greatli domin averag memori access time current superscalar processor attack memori latenc problem basic three main type techniqu cach multithread decoupl which sometim may appear togeth cachebas superscalar processor reduc averag memori access time place work set program faster level memori hierarchi softwar hardwar techniqu devis prefetch data high level memori hierarchi lower level closer cpu data actual need top that program transform loop block proven use fit work set program cach recent address data predict receiv much attent potenti solut indirectli mask memori latenc multithread processor attack memori latenc problem switch thread comput amount parallel exploit aug ment probabl halt cpu due hazard decreas occup function unit increas total throughput system improv singl thread still pay latenc delay cpu presum never idl thank mix differ thread comput decoupl scalar processor focus numer comput attack memori latenc problem make observ execut program split two differ task move data processor execut arithmet instruct perform program com putat decoupl processor typic two independ processor the address processor comput processor perform two task asynchron commun architectur queue latenc hidden fact usual address processor abl slip ahead comput processor start load data need soon comput processor excess data produc address processor store queue stay retriev comput processor vector machin tradit tackl latenc problem use long vector memori vector oper start pay initi po tential long latenc work long stream element effect amort latenc across element although vector machin success mani year certain type numer calcul still much room improv sever studi recent year show perform achiev vector architectur real program far theoret peak perform machin shown memori port singleport vector comput heavili underutil even program memori bound also show vector processor could spend execut cycl wait data come memori despit need improv memori respons time vector architectur possibl appli hardwar softwar techniqu use scalar processor techniqu either expens exhibit poor perform vector context exampl cach softwar pipelin two techniqu studi context vector processor prove use enough widespread use current vector machin conclus order obtain full perform vector processor addit mechan use reduc memori delay com ing lack bandwidth long latenc experienc program mani techniqu borrow superscalar microprocessor world paper focu decoupl also explor altern multithread outoford execut purpos paper show use decoupl techniqu vector processor perform vector program greatli improv show how even ideal memori system zero latenc decoupl provid signific advantag standard mode oper also present data show realist latenc decoupl vector architectur perform substanti better nondecoupl vector architectur anoth benefit journal supercomput decoupl also allow toler latenc insid processor function unit regist crossbar latenc paper organ follow section describ baselin decoupl architectur studi throughout paper section discuss simul environ benchmark program use experi present section provid background analysi perform tradit vector machin section detail perform decoupl vector propos final section present conclus futur line work vector architectur implement studi base tradit vector processor numer applic primarili matur compil avail benchmark simul tool feel gener conclus extend vector applic howev decoupl vector architectur propos model convex c section describ base c architectur implement henceforth refer architectur decoupl vector architectur gener refer dva main implic elect c studi restrict class vector comput one memori port two function unit also import point use output convex compil evalu decoupl architectur mean propos studi paper abl execut fulli transpar manner alreadi exist instruct set refer architectur convex c consist scalar unit independ vector unit see fig scalar unit execut instruct involv scalar regist regist issu maximum one instruct per cycl vector unit consist two comput unit fu fu one memori access unit mem fu unit gener purpos arithmet unit capabl execut vector instruct fu unit restrict function unit execut vector instruct except multipl divis squar root function unit fulli pipelin vector unit vector regist hold element bit each eight vector regist connect function unit restrict crossbar pair vector regist group regist bank share two read port one write port link function unit compil respons schedul vector instruct alloc vector regist port conflict aris fetch decod unit sreg areg rxbar wxbar figur refer vector architectur model convex c decoupl vector architectur decoupl vector architectur propos use fetch processor split incom nondecoupl instruct stream three differ decoupl stream see fig three stream goe differ processor address processor ap perform memori access behalf two processor scalar processor sp perform scalar comput vector processor vp perform vector comput three processor commun set implement queue proceed independ set queue akin implement queue found float point part r microprocessor main differ decoupl architectur previou scalar decoupl architectur zs map pipe fom two comput processor instead one two comput processor sp vp split due differ natur operand work scalar vector respect fetch processor fetch instruct sequenti nondecoupl instruct stream translat decoupl version translat processor proceed independ and yet synchron commun queue need exampl memori instruct load regist v fetch fp translat two pseudoinstruct load instruct sent ap load data vector load data queue vldq queue no fig qmov instruct sent vp dictat move oper vldq final destin regist v import note qmov gener fp journal supercomput figur decoupl vector architectur studi paper queue name vector load data queue vldq vector store data queue vsdq address load queue alq address store queue asq scalar load data queue sldq scalar store data queue ssdq scalaraddress control queue vectoraddress control queue scalarvector control queue instruct real sens ie belong programm visibl instruct set qmov opcod hidden insid implement note total hardwar ad origin refer architectur shown figur consist commun queue privat decod unit one three processor resourc insid processor decoupl vector architectur refer architectur worth note though queue ad scalar queue and therefor requir small amount extra area vldq vsdq hold full vector regist queue fig is slot queue equival normal vector regist element thu requir kb storag space one key point architectur achiev good perform rel slot two queue address processor perform memori access scalar vector well address comput scalar memori access go first scalar cach hold scalar data vector access go cach access main memori directli one pipelin port access memori share memori access address processor insert load instruct address load queue alq store instruct address store queue asq store stay queue associ data roger espasa mateo valero show either output queue vp the vector store data queue vsdq output queue sp the scalar store data queue ssdq either load store becom readi ie depend associ data necessari present sent address bu soon becom avail case load store readi ap alway give prioriti load preserv sequenti semant program address processor need ensur safe order memori instruct held alq asq memori access process two step first associ memori region comput second region use disambigu memori instruct previou memori instruct still held address queue ap use disambigu inform depend scoreboard maintain scoreboard ensur load execut inord store execut inord load execut older store associ memori region overlap all depend found scoreboard guarante load store perform origin program order correct guarante memori region defin tupl h start end address resp consecut region byte memori vl vs sz vector length vector stride access granular need vector memori oper end address comput sz scalar memori access vl set vs special case gather scatter properli character memori region set set scoreboard find depend gatherscatt previou futur memori instruct vector processor perform vector comput main differ vp refer architectur vp two function unit dedic move data processor two unit qmov unit abl move data vldq data queue fill ap vector regist move data regist vadq which drain ap send content memori includ two qmov unit instead one otherwis vp would pay high overhead common sequenc code compar refer architectur set control queue connect three processor queue fig need instruct mix operand common case vector instruct scalar regist sourc operand ie mul vs v case includ mix a s regist instruct vector gather requir address vector sent ap vector reduct produc scalar regist result journal supercomput methodolog simul environ ass perform benefit decoupl vector architectur taken trace driven approach perfect club specfp program chosen benchmark trace procedur follow perfect club program compil convex c machin use fortran compil version optim level o which impli scalar optim plu vector execut process use dixi tool decompos execut basic block instrument basic block produc four type trace basic block trace trace valu set vector length regist trace valu set vector stride regist trace memori refer actual trace base address memori refer dixi instrument basic block program includ librari code especi import sinc number fortran intrins routin sin co exp etc translat compil librari call librari routin highli vector tune underli architectur repres high fraction vector oper execut program thu essenti captur behavior order accur model execut time program execut process dixi modifi execut run convex machin run produc desir set trace accur repres execut program trace fed two differ simul develop first simul model convex c architectur repres singl memori port vector comput second simul extens first introduc decoupl use two cyclebycycl simul gather data necessari discuss perform benefit decoupl benchmark program interest benefit decoupl vector architectur select benchmark program highli vectoriz program perfect specfp benchmark chose program achiev least vector tabl present statist select perfect club specfp program column number indic suit program belong column present total number memori access includ vector scalar load store access next column total number oper perform vector mode column number scalar instruct execut sixth column percentag vector program defin percentag vector ratio number vector oper total number oper perform program final column seven present averag vector length use vector instruct ratio vector oper vector instruct tabl basic oper count perfect club program column million mem vect scal avg program suit op op in vect vl hydrod spec arcd perf flo perf sucor spec bdna perf trfd perf dyfesm perf import thing remark tabl program memori bound run refer machin take column label vect op divid get minimum number cycl requir execut vector comput two vector function unit avail compar column mem op result divis see bottleneck program alway memori port is absolut minimum execut time program determin total amount memori access perform remark worth keep mind sinc follow section show even memori port bottleneck program usag alway good one would intuit expect bottleneck refer architectur first present analysi execut ten benchmark program run refer architectur simul consid three vector function unit refer architectur fu fu mem machin state repres tupl repres individu state one three unit given point time exampl tupl hfu fumem repres state unit work repres state vector unit idl execut time program thu split eight possibl state figur present split execut time state ten benchmark program plot time spent state memori latenc cycl figur see number cycl program proceed peak float point speed state low number cycl state chang rel littl memori latenc increas fraction journal supercomput swm execut cycl hydrod arcd nasa execut cycl dyfesm figur function unit usag refer architectur bar repres total execut time program given latenc valu xaxi repres memori latenc cycl fulli use cycl decreas memori latenc high impact total execut time program dyfesm trfd flo rel small vector length effect memori latenc seen note increas cycl spent state h i sum cycl correspond state mem unit idl quit high program four state correspond cycl memori port could potenti use fetch data memori futur comput figur present percentag cycl total execut time latenc port idl time rang total execut time benchmark program memori bound run singl port vector machin two function unit therefor unus memori cycl result lack loadstor work done perform dva section present perform decoupl vector architectur versu refer architectur ref first start ignor latenc function unit insid processor concentr studi effect main memori latenc section studi determin swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm idl memori port figur percentag cycl memori port idl differ memori latenc costeffect paramet achiev highest perform proceed consid effect arithmet function unit regist crossbar latenc execut time section first show decoupl toler well memori latenc also use toler smaller latenc insid processor start defin dva architectur infinit queue latenc delay the unbound dva udva short compar refer architectur introduc limit udva branch mispredict penalti limit queue size real function unit laten cie step step see individu effect restrict step reach realist version dva rdva compar ref udva machin udva versu ref unbound dva architectur udva version decoupl architectur queue set larg valu slot latenc delay moreov perfect branch predict model assum icach model follow experi sinc previou data indic low pressur icach arithmet function unit scalar vector cycl latenc vector regist file read write crossbar latenc startup penalti vector instruct benefit decoupl seen fig program plot total execut time udva ref architectur memori latenc vari cycl graph also show minimum absolut execut time theoret achiev curv ideal along bottom graph comput ideal execut time program use total number cycl con journal supercomput swmcycl x flocycl cycl dyfesmcycl ref udva ideal figur udva versu refer architectur benchmark program sume heavili use vector unit fu fu mem thu ideal essenti elimin data memori depend program consid perform limit satur resourc across entir execut overal result suggest two import point first dva architectur show clear speedup ref architectur even memori latenc cycl even latenc memori system decoupl produc similar effect prefetch techniqu advantag ap know data load no incorrect prefetch second import point slope execut time curv refer decoupl architectur substanti differ impli decoupl toler long memori delay much better current vector architectur memori latenc cycl hydrod arcd sucor bdna trfd dyfesm figur speedup dva refer architectur benchmark program overal decoupl help minim number cycl machin halt wait memori recal section execut time program could partit eight differ state decoupl greatli reduc cycl spent state h i summar speedup obtain fig present speedup dva ref architectur particular valu memori latenc speedup at latenc rang tomcatv dyfesm reduc iq length first limit introduc udva reduct instruct queue feed three comput processor ap sp vp section look slowdown experienc udva size apiq spiq vpiq queue reduc instruct instruct onli order reduc amount simul requir chosen fix valu memori latenc paramet cycl seen previou section udva toler well wide rang memori latenc thu expect valu cycl quit repres full latenc rang size instruct queue import sinc give upper bound occup queue system exampl determin maximum number entri wait load address queue figur present slowdown respect udva ten benchmark three instruct queue reduc slot fig see perform entri instruct queue virtual benchmark number decid set iq length entri rest experi present paper size line typic instruct queue found current microprocessor journal supercomput swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm figur slowdown experienc udva reduc iq size swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm slowdown figur slowdown due branch mispredict three model specul effect branch predict section look neg effect introduc branch mispredict branch predict mechan evalu directmap btb hold entri branch target address bit predictor the predictor found augment basic btb mechan deep return stack akin one found evalu accuraci branch predictor entri btb accuraci vari lot across set benchmark program flo nasa come worst mispredict rate around tomcatv less mispredict branch nonetheless mispredict rate rather high set program consid easi jump pattern numer code tend domin doloop due combin two fact first vector reduc absolut total number branch perform program unbalanc way number easili predict loop branch diminish factor proport vector length could high difficult branch found remain scalar portion code essenti same second factor use small btb compar found current superscalar microprocessor typic btb could entri although predict accuraci good impact mispredict branch total execut time small figur present slowdown roger espasa mateo valero due mispredict branch rel perform architectur section sinc predict accuraci high test benefit could obtain abl specul across sever branch fig bar label u correspond architectur allow one unresolv branch bar label u u correspond abl specul across branch respect first observ impact mispredict branch rather low see flo mispredict rate total impact mispredict branch second observ specul across multipl branch provid benefit special dyfesm cost certainli justifi simplic one outstand branch resolv plu vector architectur simul follow section perform use entri btb allow unresolv branch reduc vector queue length vector load data queue section look usag vector load data queue goal determin queue size achiev almost perform slot queue use previou section yet minim much possibl hardwar cost figur present distribut busi slot vldq benchmark program program plot three distribut correspond three differ memori latenc valu bar graph repres total number cycl vldq certain number busi slot exampl trfd latenc vldq complet empti zero busi slot around million cycl fig see common use slot except swm tomcatv slot enough cover around cycl latenc increas cycl cycl graph show shift occup toward higher number slot exampl consid program arcd nasa sucor cycl memori latenc program typic busi slot latenc increas three program show increas total usag vldq typic use around slot expect longer memori latenc higher number busi slot sinc memori system outstand request and therefor need slot queue execut impact reduc vldq size seen fig expect data seen fig reduc queue size slot notic program go slot affect mostli nasa bdna impact less reduc vldq slot would start hurt perform although much worst case would nasa around impact alreadi discuss slot clearli lower bound size vldq accommod memori journal supercomput swmcycl arcd flocycl tomcatvcycl dyfesmcycl figur busi slot vldq benchmark program three differ memori latenc valu bound loop reduc queue slot would stop decoupl effect present architectur look data present section decid pick slot vldq follow section use size vldq vector store data queue usag vector store data queue present differ pattern vldq recal ap alway tri give prioriti load oper front store effect put much pressur vsdq can point becom full even slot situat unusu may seem long ap encount depend load store long swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm figur slowdown due reduc vldq size rel section load dispatch store retriev vsdq sent memori thu occup vsdq much higher vldq figur present distribut busi slot vsdq benchmark program load queue plot three distribut correspond three differ memori latenc valu bar graph repres total number cycl vsdq certain number busi slot make plot clear prune graph next name program indic quartil amount shown exampl full set data shown nasa q bar hydrod graph present avail data the rest data set small seen plot compens loss inform graph also includ maximum valu x axi took particular program again hydrod graph show maximum occup vsdq reach slot although xaxi plot goe note program point queue complet fill full slot although common occup rang slot program occup queue bound bdna maximum occup slot queue sucor maximum bound mostli due high percentag spill code time vector load tri recov vector stack previous spill store ap detect depend need updat content memori drain queue heavili limit amount old store kept vsdq program trfd dyfesm qualit differ two program simpli decoupl well program dyfesm recurr forc three main processor ap sp vp work lock step thu typic allow maximum full slot program trfd core triangular matrix decomposit order matrix access make iter main loop depend previou iter caus lot loadstor depend queue depend resolv journal supercomput qcycl hydrod q arcd q cycl sucor q tomcatv qcycl trfd q dyfesm qcycl figur busi slot vsdq benchmark three differ memori latenc valu case spill code drain queue updat memori thu queue never reach larg occup execut impact reduc vsdq size seen fig bar show amount storag vsdq import perform mostli due fact singlememori port environ matter reorder load store themselv everi singl store perform anyway thu send store memori point data readi later chang much overal comput rate data present section select slot vsdq follow experi swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm figur slowdown due reduc vsdq queue size rel section swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesmslowdown figur slowdown due reduc scalar queue size rel section reduc scalar queue length section look impact reduc size variou scalar queue system look back fig reduc queue number slot slot queue number vacq vp toap control queue reduc slot slot note queue hold one full vector regist use gatherscatt oper size chosen reason close modern outoford superscalar processor queue impact reduct seen fig overal use entri queue scalar queue enough sustain perform entri queue even small entri queue slowdown around program dyfesm bdna nasa nonetheless beard mind program heavili vector small degrad perform scalar side temper small percentag scalar code present benchmark order make safe decis took entri queue scalar queue present architectur journal supercomput tabl latenc paramet vector scalar function unit paramet latenc scal vect intfp vector startup read xbar add mul logicshift div sqrt effect function unit latenc section look effect latenc insid comput processor architectur far model simul function unit use cycl latenc vector regist readwrit crossbar model free go them section proceed three step first add architectur latenc vector function unit tabl show valu chosen second step add penalti cycl vector startup vector oper third step add cycl vector read crossbar latenc add cycl vector write crossbar latenc last step set latenc scalar unit also shown tabl figur show set stack bar degrad perform aforement effect ad bar bottom label vect lat repres slowdown rel section follow bar label startup slowdown respect perform vect lat bar similarli follow bar thu total height bar combin slowdown effect figur show two differ behavior seven ten program latenc small impact below due fact decoupl good toler memori latenc but gener help cover latenc insid processor hand two program trfd dyfesm show slowdown bad respect behavior two program surpris given alreadi saw section trfd dyfesm difficulti decoupl interiter depend trfd recurr dyfesm saw achiev small occup vector load data queue indic bad degre decoupl coupl fact swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesmslowdown scal lat r xbar startup vect lat figur slowdown due model arithmet unit latenc vector pipelin crossbar rel section rel low vector length trfd dyfesm see cycl ad vector depend graph typic enlarg critic path program go detail breakdown fig show vector function unit latenc highest impact latenc ad section worth note though order latenc ad might impact rel import individu categori nonetheless sinc vector latenc unit largest latenc ad sinc program highli vector group like impact perform fig confirm startup penalti seen program trfd dyfesm impact less vector regist file readwrit crossbar latenc impact program except again swm tomcatv typic latenc amount impact percentag point vector code around percentag point less vector trfd dyfesm scalar latenc low impact program partli due shorter vector one partli due small fraction scalar code partli due scalar latenc mask vector latenc decid compar impact function unit latenc refer machin dva machin so simul refer machin latenc refer machin standard latenc comput result slowdown compar slowdown slowdown fig present result comparison seen fig result show case effect function unit latenc much wors inord refer machin decoupl machin sinc decoupl introduc form dynam schedul hide latenc previous critic path perform memori load advanc journal supercomput swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm slowdown udva ref figur comparison function unit latenc impact udva ref machin rdva versu ref data present last section reach realist implement origin propos udva realist version refer rdva main paramet follow instruct queue scalar queue entri long address queue ap also entri long latenc use function unit readwrit crossbar regist file shown tabl vldq vsdq slot control queue connect vp ap singl slot branch predict mechan entri btb unresolv branch support section replot fullscal comparison udva rdva ref sever latenc figur present data three architectur memori latenc vari cycl cycl almost program differ udva rdva rather small slope rel parallel swm differ almost program hydrod tomcatv arcd sucor slowdown rdva udva less respect program flo bdna nasa higher slowdown and moreov slope curv rdva perform start diverg udva high valu latenc final dyfesm trfd seen previou section take signific perform hit go udva rdva summari futur work paper describ basic decoupl vector architectur dva use principl decoupl hide memori latenc seen vector processor roger espasa mateo valero swmcycl x flocycl x cycl x dyfesmcycl x ref rdva udva ideal figur comparison ref udva rdva execut time sever latenc dva architectur show clear speedup ref architectur even memori latenc cycl speedup due fact ap slip ahead vp load data advanc vp need input operand almost alway readi queue even latenc memori system slip produc similar effect prefetch techniqu advantag ap know data load no incorrect prefetch thu partit program separ task help exploit parallel ap vp translat increas perform even absenc memori latenc moreov increas latenc see slope curv execut time benchmark remain fairli stabl wherea ref architectur much sensit increas memori latenc memori latenc set journal supercomput cycl exampl speedup rdva ref machin rang latenc increas cycl speedup go high seen speed improv implement reason costperform tradeoff section shown length queue need larg allow decoupl take place vector load queue four slot enough achiev high fraction maximumperform obtain infinit queue side vector store queue need larg experi vari store queue length indic store queue two element achiev almost perform one sixteen slot abil toler larg memori latenc critic futur high perform comput order reduc cost high perform sram vector memori system turn sdram base memori sy tem chang unfortun significantli increas memori latenc point decoupl come rescu shown cycl latenc grace toler perform increas respect tradit inord machin moreov although paper look singl processor case decoupl techniqu would also effect vector multiprocessor help reduc neg effect conflict interconnect network memori modul simul result present paper indic vector architectur benefit mani techniqu current found superscalar processor appli decoupl altern appli multithread techniqu improv memori port usag outoford execut togeth regist renam current pursu latter approach r perform tradeoff multithread processor perfect club benchmark effect perform evalu supercomput er organ architectur tradeoff fom perform studi softwar hardwar data prefetch strategi function parallel architectur array processor convex architectur refer manual c seri quantit analysi vector code dixi trace gener system c instruct level character perfect club program vector comput decoupl vector architectur multithread vector architectur pipe vlsi decoupl architectur optim parallel data local cach perform vector supercomput memori latenc effect decoupl architectur softwar pipelin effect schedul techniqu vliw machin branch predict strategi branch target buffer design valu local load valu predict vector regist design polycycl vector schedul design evalu compil algorithm prefetch explain gap theoret peak perform real perform supercomput architectur decoupl accessexecut comput architectur simul studi decoupl architectur comput polycycl vector schedul vs chain port vector supercomput design microarchitectur ultrasparci exploit choic instruct fetch issu implement simultan multithread processor mip r superscalar microprocessor tr simul studi decoupl architectur comput zs central processor softwar pipelin effect schedul techniqu vliw machin polycycl vector schedul vs chain port vector supercomput optim parallel data local design evalu compil algorithm prefetch design tfp microprocessor perform studi softwar hardwar data prefetch scheme cach perform vector supercomput explain gap theoret peak perform real perform supercomput architectur outoford vector architectur vector regist design polycycl vector schedul decoupl accessexecut comput architectur mip r superscalar microprocessor memori latenc effect decoupl architectur perform tradeoff multithread processor decoupl vector architectur multithread vector architectur quantit analysi vector code ctr mostafa i soliman stanislav g sedukhin matrix bidiagon implement evalu trident processor neural parallel scientif comput v n p decemb mostafa i soliman stanislav g sedukhin trident scalabl architectur scalar vector matrix oper australian comput scienc commun v n p januaryfebruari