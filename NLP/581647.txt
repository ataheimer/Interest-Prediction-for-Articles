t increas power effici multicor network processor data filter a propos evalu data filter method reduc power consumpt highend processor multipl execut core although propos method appli wide varieti multiprocessor system includ mpp smp type singlechip multiprocessor concentr network processor propos method use execut unit call data filter engin process data low tempor local place system bu execut core use local decid load instruct low tempor local portion surround code offload data filter engineour techniqu reduc power consumpt a low tempor data process data filter engin place onto high capacit system bu b conflict miss caus low tempor data reduc result fewer access l cach specif show techniqu reduc bu access repres applic much averag reduc overal power much averag singlecor processor also improv perform much averag processor execut core b introduct power tradit limit resourc one import design criteria mobil processor embed system due part increas logic densiti power dissip high perform processor also becom major design factor increas number transistor caus processor dissip heat return reduc processor perform reliabl network processor npu processor optim network applic recent process element network either generalpurpos processor asic design sinc generalpurpos processor softwar programm flexibl implement differ network task asic hand typic better perform howev chang protocol applic hard reflect chang design increas number new protocol increas link speed need process element satisfi process flexibl requir modern network npu fill gap combin network specif process element softwar programm paper present architectur techniqu reduc power consumpt multicor processor specif we a present simul result show miss network applic caus instruct b devis power reduct techniqu combin local detect mechan execut engin c discuss finegrain techniqu offload code segment engin d conduct simul experi evalu effect techniqu although techniqu effici employ varieti multiprocessor system concentr npu npu follow singlechip multiprocessor design methodolog eg intel ixp execut core ibm powernp execut core addit chip consum signific power ibm powernp consum w typic oper wherea cport c consum w multipl execut core often connect global system bu shown figur capacit load processor inputoutput driver usual much larger by order magnitud intern node processor consequ signific portion power consum bu figur gener network processor design locat propos dfe system bu permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee case octob grenobl franc techniqu use two structur achiev desir reduct power consumpt first share global memori connect system bu execut unit name data filter engin dfe activ dfe pass data bu henc effect execut processor dfe activ execut core process data place result bu goal process lowtempor data within dfe number bu access reduc reduc bu access cach miss caus low tempor access techniqu achiev signific power reduct processor second low tempor access determin execut core use local predict tabl lpt tabl store inform prior load lpt store program counter pc instruct well misshit behavior recent execut instruct lpt also use determin section code offload dfe detail lpt explain section follow subsect present simul number motiv use data filter power reduct instruct caus dl miss crc dh drr md nat url ipc rou tl avg fraction inst inst inst inst inst figur number instruct caus dl miss motiv mani applic major miss l data cach caus instruct perform set simul see cach miss distribut differ instruct network applic simul sever applic netbench suit simul perform use simplescalar simul processor configur explain section result present figur figur give percentag data miss caus differ number instruct exampl crc applic approxim miss caus singl instruct miss caus five instruct highest number miss averag miss caus five instruct miss caus instruct addit perform anoth set experi see type data access caus miss simul reveal miss occur processor read packet data advantag instruct caus major miss offload instruct dfe reduc number cach miss l access henc bu access significantli next section present result combin split cach cach bypass mechan discuss disadvantag local enhanc techniqu section explain detail lpt section discuss design dfe show design option vari section present experiment result section give overview relat work section conclud paper summari reduc l cach access sever cach localityenhanc mechan propos literatur power implic mechan examin bahar et al techniqu tri improv perform reduc l cach miss sinc l miss reduc intuit techniqu also reduc power consumpt due less l l cach activ section first examin power implic repres cach local enhanc mechan combin split cach cach bypass mechan propos gonzalez et al studi split cach techniqu propos mechan use advanc version mechan detect code segment offload mechan l data cach split two structur one store data tempor local tempor cach store data spatial local spatial cach processor use local predict tabl categor instruct into a access data tempor local tempor instruct b access data spatial local spatial instruct c access data local bypass instruct detail simul result explain section although techniqu reduc number execut cycl applic impact overal power consumpt applic techniqu increas power consumpt data cach reason increas twofold lpt structur access everi data access two smaller cach one larger lines access parallel instead singl cach nevertheless overal power consumpt reduc techniqu due signific reduct bu switch activ follow first explain lpt present gonzalez et al discuss enhanc requir implement propos techniqu local predict tabl lpt small tabl use data access processor conjunct pc instruct store inform past behavior access last address access it size access misshit histori predict made use field lpt consid stride past behavior decis made whether data access instruct place tempor cach spatial cach uncach modifi origin lpt accommod inform requir dfe ad three field lpt start address code offload dfe sadd field end address code offload eadd field variabl regist requir execut offload code lreg field assum bit address regist file size three field requir addit bit line lpt function field explain follow section discuss design dfe lreg field bit regist explain section assum regist execut core henc bit requir lreg field figur present dfe design dfe execut core addit featur control pass memori data bu memori request origin execut core pass gate open request transfer bu usual request origin dfe control close pass gate forward data either dfe data cach dfe instruct cach in experi explain section dfe equip kb data instruct cach compar kb data instruct cach execut core two differ generalpurpos execut core dfe first dfe control equip addit logic check whether code execut request regist valu gener dfe commun execut core case dfe commun master creat interrupt execut core offload code segment dfe second dfe codemanag unit cmu keep track origin code execut sum arrayi figur code segment show effect dfe figur dfe design dfe locat onchip l cach execut core activateddeactiv execut core activ execut code segment determin core commun necessari result back core consid code segment figur code segment execut one core core read complet array mean system bu access sever time array structur go use again access result unnecessari power consumpt processor code segment execut dfe hand bu access initi execut get result sum dfe besid reduc number bu access offload segment also posit impact execut core cach replac due access array prevent note code segment execut dfe limit loop discuss code segment offload dfe section determin dfe code execut core detect instruct access low tempor data instruct categor spatial bypass instruct lpt start gather inform code segment contain instruct first run loop contain candid pc detect execut load execut core check branch instruct jump examin pc the destin branch start contain loop procedur callreturn instruct pc instruct store eadd field lpt correspond last instruct code offload core found contain loop destin jump store sadd field correspond start code offload contain loop the core detect procedur callreturn instruct examin pc store sadd field start end address detect execut core gather inform regist valu requir code offload sourc regist instruct mark requir lpt gener within code destin regist mark gener mark requir mark perform help lreg field lpt code segment complet process store lpt execut reach start address again code directli offload dfe achiev thi use compar store five last offload code segment pc becom equal one entri correspond code automat offload note process look code offload turn segment execut sever time exampl code segment figur method first determin load access array candid then loop contain load in case whole loop captur observ branch back start loop final whole loop migrat dfe third iter loop limit code offload dfe offload segment contain store instruct avoid cach coher problem addit offload code must contain within singl procedur thi achiev check procedur callreturn instruct also limit relat perform offload offload segment number requir regist certain register_limit code segment offload dfe go access l cach code segment might benefici offload larg code segment therefor offload code segment larger codesize_limit chang paramet modifi aggress techniqu execut dfe code execut core decid offload code segment send start end address segment dfe along valu requir regist commun achiev extens isa instruct initi commun core dfe therefor addit port requir regist file receiv request dfe first access l cach retriev instruct start execut execut segment dfe use regist neither gener segment lreg field bit repres state requir gener requir gener invalid or use inst cach func unit control reg file pass gate cmu master pass data cach system bu memori commun dfe gener interrupt core offload segment access necessari regist valu except possibl regist valu requir dfe determin previou execut code segment henc differ input data possibl execut segment execut determin dfe code execut end execut tri go eadd sadd dfe commun necessari regist valu core ie valu gener dfe tabl netbench applic properti argument execut argument inst number instruct execut cycl number cycl requir il dl acc number access level instruct data cach l acc level cach access applic argument inst m cycl m il acc crc crc dh dh drr drr drrl drr ipchain ipchain nat nat natl nat rou rout roul rout snortl snort r defcon n dev l log b snortn snort r defcon n v l log c sncnf sslw opensl netbench weak tl tl tll tl url url small_input averag tabl dfe code inform number differ dfe code segment dfe code averag number instruct segment size averag number regist valu transfer segment reg req total number regist valu transfer tofrom dfe tran fraction instruct execut dfe ratio app dfe code size reg req tran ratio dh drr drrl ipchain natl nat roul rou snortl snortn sslw tll tl url averag execut core also send task_id code activ task_id consist core_id uniqu identif number execut core segment_id id process offload code segment task_id uniqu determin process offload segment task complet dfe use task_id store cmu send result back execut core core process similar access data l cach might context switch execut core send request result propag correct process eventu execut segment dfe data cach flush prevent possibl coher problem experi perform sever experi measur effect techniqu simul simplescalararm simul use necessari modif simul implement measur effect lpt dfe due limit simul environ execut core becom idl offload code segment actual implement core might start execut process increas system util simul applic netbench suit import characterist applic explain tabl report reduct execut cycl bu access power consumpt cach overal power consumpt dfe abl reduc power consumpt due smaller number bu access reduct cach access discuss follow simul paramet first report result singlecor processor base processor similar strongarm kb directmap l data instruct cach byte lines kb way setassoci unifi l cach byte lines lpt split cach experi techniqu way entri cach k split cach techniqu tempor cach k byte line spatial cach k byte line techniqu execut core singl cach equal tempor cach k byte line dfe data cach similar spatial cach k byte line dfe also level instruct cach size kb byte line latenc l cach set cycl l cach latenc set cycl dfe activ use l call simul henc delay cycl start dfe execut calcul power consumpt cach use simul number cach power consumpt valu obtain cacti tool modifi simplescalar gather inform switch activ bu bu power consumpt calcul use inform model develop zhang irwin find total power consumpt processor use power consumpt section strongarm present montanaro et al power consumpt cach modifi repres cach simul overal power consumpt sum power execut core share resourc dfe experi regist limit set four maximum offload code size instruct singlecor result first set experi compar perform four system base processor explain section system processor kb way set associ level data cach way system processor directmap kb level data cach kb system processor split cach lpt system processor use propos dfe method dfe tabl give number differ code segment offload size segment number regist requir call total number regist valu transfer tofrom dfe execut offload code fraction instruct execut dfe note code size number instruct first instruct segment last instruct segment correspond number instruct execut figur summar result execut cycl present rel perform system respect base processor propos method increas execut cycl averag none system posit impact perform dh applic data cach miss applic the l data cach miss rate almost henc effect techniqu see dfe approach increas execut cycl mainli due imperfect decis make code segment offload specif dfe might activ code segment contain load data use ie data tempor local case execut cycl improv data access core dfe gener redund access data process dfe segment use again perform might degrad figur present effect techniqu total power consumpt data cach propos techniqu correspond power consumpt level data cach lpt structur execut core level data cach dfe level cach propos techniqu abl reduc power consumpt averag reduct number bit switch bu access present figur see propos mechan reduc switch activ much averag reduct bu activ lpt mechan averag similarli kb way level cach reduc bu activ respect energydelay product present figur dfe techniqu improv energydelay product much averag split cach mechan hand lower energydelay product base processor see almost everi categori split cach techniqu perform better system kb cach way associ kb cach network applic exhibit mixtur access spatial tempor local henc use split cach achiev signific improv cach perform class applic also amen propos structur spatial access effici util dfe crc dh drr drrl ipchain md natl nat rou roul snortl snortn ssl tll tl url avg reduct exec cycl way k lpt dfe figur reduct execut cycl way k lpt dfe figur reduct power consumpt data cach sum level level dfe data cach applic crc dh drr drrl ipchain md natl nat rou roul snortl snortn ssl tll tl url avg reduct way k lpt dfe figur reduct number bit switch system bu crc dh drr drrl ipchain md natl nat rou roul snortl snortn ssl tll tl url avg reduct way k lpt dfe figur reduct energydelay product crc dh drr drrl ipchain md natl nat rou roul snortl snortn ssl tll tl url avg reduct exec cycl way k lpt dfe figur reduct execut cycl processor execut core exec cycl way k lpt dfe figur reduct execut cycl processor execut core multiplecor result two import issu need consid regard use dfe multicor design first sinc dfe share resourc might becom perform bottleneck sever core contend it hand dfe reduc bu access significantli which anoth share resourc might improv perform due less content bu note system bu one import bottleneck chip multiprocessor although techniqu small effect perform singlecor processor perform improv much dramat multi core system due reduct bu access shown figur see effect multipl execut core first design tracedriven multicor simul mc simul process event trace gener simplescalararm framework simplescalar use gener event singlecor process mc account effect global event bu access mc find new execut time use number core employ system event trace execut core run singl applic henc commun execut core although repres workload multicor system singl applic control execut core realist workload npu experi simul applic execut core applic random startup time awar core system henc simul realist measur activ share resourc report result processor execut core execut core note core execut code wait result perform dfe call improv execut cycl processor execut core present figur propos dfe mechan reduc number execut cycl much averag split cach techniqu reduc execut cycl averag figur present result processor execut core dfe abl improv perform much averag techniqu increas execut cycl snort url applic url applic execut core util dfe abl reduc bu activ therefor number execut core increas core stall bu content result increas execut cycl snort applic hand dfe usag high henc although bu content reduc content dfe increas execut cycl note overcom content problem use adapt offload mechan dfe occupi execut core continu execut itself henc code offload dfe idl dfe becom overload overhead approach would check dfe state execut core anoth solut content problem might use multipl dfe howev techniqu scope paper also measur energi consumpt multipl core howev increas number execut core signific effect overal power consumpt addit execut core increas bu dfe level cach activ linearli henc ratio differ system chang significantli relat work stream data ie data access known fix displac success element studi literatur mckee et al propos use special stream buffer unit sbu store stream access special schedul unit reorder access stream data benitez davidson present compil framework detect stream data propos architectur requir compil support task addit displac access network applic fix due unknown natur packet distribut memori sever techniqu propos reduc power consumpt highperform processor techniqu use small energyeffici structur captur portion work set therebi filter access larger structur other concentr restructur cach context multipl processor system moshovo et al propos filter techniqu snoop access smp server plethora techniqu improv cach local techniqu reduc l data cach miss either intellig place data use extern structur studi howev chang locat comput lowtempor data access techniqu could use detect low tempor data propos method activ smart memori extens studi howev techniqu concentr offchip activ memori contrast method improv perform onchip cach therefor finegrain offload feasibl system conclus network processor power comput engin usual combin sever execut core consum signific amount power henc prone perform limit due excess power dissip propos techniqu reduc power multicor network processor techniqu reduc power consumpt bu cach power consum entiti highperform processor shown network applic l data cach miss caus instruct motiv specif techniqu propos techniqu use local predict tabl detect load access low tempor local novel data filter engin process code segment surround low tempor access present simul number show effect techniqu specif techniqu abl reduc overal power consumpt processor singlecor processor abl reduc energydelay product averag singlecor processor processor respect current investig compil techniqu determin code segment offload dfe static techniqu advantag determin exact commun requir code remain execut core segment offload dfe howev determin local dynam advantag therefor believ better optim possibl util static dynam techniqu integr approach r predict loadstor instruct latenc select cach way toward program environ comput intellig memori power perform tradeoff use variou cach strategi architectur compil support energi reduct memori hierarchi high perform processor code gener stream accessexecut mechan case intellig ram iram data cach multipl cach strategi tune differ type local energi dissip gener purpos microprocessor intel network processor target router improv directmap cach perform addit small fullyassoci cach prefetch buffer filter cach energi effici memori structur combin dram logic chip massiv parallel applic simplescalar home page improv bandwidth stream refer benchmark suit network processor jetti snoop filter reduc power smp server reduc address bu transit low power memori map circuit techniqu reduc leakag cach memori reduc conflict directmap cach temporalitybas design manag data cach use select cach line replac enhanc access cycl time model onchip cach tr code gener stream accessexecut mechan data cach multipl cach strategi tune differ type local predict loadstor instruct latenc manag data cach use select cach line replac runtim adapt cach hierarchi manag via refer analysi filter cach architectur compil support energi reduct memori hierarchi high perform microprocessor improv directmap cach perform addit small fullyassoci cach prefetch buffer power perform tradeoff use variou cach strategi select cach way gatedvsubscrptddsubscrpt netbench smarter memori case intellig ram toward program environ comput intellig memori combin dram logic chip massiv parallel system reduc address bu transit low power memori map energydelay analysi onchip interconnect system level ctr mari jane irwin compilerdirect proactiv power manag network proceed intern confer compil architectur synthesi embed system septemb san francisco california usa yan luo jia yu jun yang laxmi n bhuyan conserv network processor power consumpt exploit traffic variabl acm transact architectur code optim taco v n pe march