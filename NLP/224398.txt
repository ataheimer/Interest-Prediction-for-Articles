t lazi releas consist hardwarecoher multiprocessor a releas consist wide accept memori model distribut share memori system eager releas consist repres state art releas consist protocol hardwarecoher multiprocessor lazi releas consist shown provid better perform softwar distribut share memori dsm sever optim perform lazi protocol potenti improv perform hardwarecoher multiprocessor well complex preclud hardwar implement advent programm protocol processor may becom possibl use all present evalu lazi releaseconsist protocol suitabl machin dedic protocol processor protocol admit multipl concurr writer send write notic concurr comput delay invalid acquir oper also consid lazier protocol delay send write notic releas oper result indic first protocol outperform eager releas consist much across varieti applic lazier protocol hand unabl recoup high synchron overhead repres qualit shift dsm world lazier protocol alway yield perform improv base result conclud machin flexibl hardwar support coher use protocol base lazi releas consist less aggress lazi form appropri dsm b introduct remot memori access experi long latenc larg sharedmemori multiprocessor one seriou impedi good parallel program perform relax consist model help reduc cost memori access mask latenc write oper relax consist requir memori consist certain synchron event thu allow protocol buffer merg pipelin write request long respect consist constraint specifi model work support part nsf institut infrastructur grant no cda onr research grant no n j in conjunct darpa research inform scienc technologyhigh perform comput softwar scienc technolog program arpa order no brazilian cape nutesufrj fellowship releas consist wide accept relax consist model releas consist memori access classifi ordinari access acquir releas releas indic processor complet oper processor may depend releas processor previou write must made visibl processor perform subsequ acquir acquir indic processor begin oper may depend processor processor write must made local visibl definit releas consist provid consider flexibl coher protocol design make write processor visibl processor hardwar implement releas consist dash multiprocessor take eager oper trigger coher transact eg invalid immedi though transact execut concurr continu execut applic processor stall write buffer overflow reach releas oper previou transact yet complet approach attempt mask latenc write allow take place background regular comput better softwar coher protocol adopt lazier approach distribut share memori dsm emul delay coher transact further attempt reduc total number messag exchang processor munin exampl buffer write notic associ particular critic section send reach releas point paranet treadmark goe further rather send write notic potenti interest processor time releas keep record allow inform acquir processor and onli write notic logic past releas yet logic past acquir postpon coher transact allow protocol combin messag given pair processor avoid mani useless invalid caus fals share keleh et al shown optim signific benefit implement lazi releas consist dsm system ideal one might hope achiev similar benefit hardwarecoher system sheer complex lazi protocol howev heretofor preclud implement hardwar moreov differ architectur constant hardwar softwar system potenti former concurr execut applic protocol make less obviou kind optim effect kind system lazi releas consist complic term code term size complex state inform absent global garbag collect oper paranet protocol maintain complet histori word modifi critic section lifetim applic given current state art implement sort protocol hardwar would appear prohibit expens sever research group howev develop programm protocol processor complex lazi releas consist may manag remain determin whether lazi profit sort system devis protocol provid best possibl perform paper present protocol combin desir aspect lazi releas consist reduc memori latenc avoid unnecessari invalid eager releas consist reduc synchron wait execut coher oper background protocol support multipl concurr writer overlap transfer write notic comput delay invalid acquir oper outperform eager releas consist varieti applic also consid lazier protocol delay send write notic releas oper result indic howev lazier protocol actual hurt overal program perform sinc reduct memori access latenc compens increas synchron overhead result reveal qualit differ softwar hardwar distribut sharedmemori multiprocessor delay coher oper much possibl appropri dsm system hardwareassist coher final studi sensit result sever architectur paramet includ cach line size memori access latenc memori network bandwidth result indic perform advantag lazi protocol eager releas consist protocol increas futur machin base result conclud machin hardwar support coher possibl employ variant lazi releas consist avoid excess lazi implement rest paper organ follow section describ lazi protocol togeth lazier variant delay send write notic section describ experiment methodolog applic suit section present result begin discuss share pattern exhibit applic proce compar perform lazi protocol eager releas consist protocol similar one implement dash multiprocessor final describ impact architectur trend rel perform protocol present relat work section conclud section hardwaresupport coher section present protocol lazi releas consist sharedmemori multiprocessor hardwaresupport coher protocol resembl softwarebas protocol describ modifi significantli exploit abil overlap coher manag comput deal fact coher block evict processor cach due capac conflict miss basic concept behind protocol allow processor continu referenc cach block written processor although write notic sent home node concurr comput main processor invalid occur acquir oper suffici ensur true share depend observ protocol employ distribut directori maintain cach inform cach block directori entri block resid block home nodeth node whose main memori contain block page directori entri contain set statu bit describ state block state one follow uncach processor copi block initi state cach block share one processor cach block none attempt write it dirti singl processor cach block also write it weak two processor cach block least one write it addit block statu bit directori entri contain list pointer processor share block pointer augment two addit bit one indic whether processor also write block indic whether processor notifi block enter weak state simplifi directori oper two addit counter maintain directori entri number processor share block number processor write it figur show directori state transit diagram origin version protocol text ital indic addit oper accompani transit state describ global properti associ block local properti copi block particular processor cach also notion state associ line local cach play rel minor role protocol specif latter local state indic whether line invalid readonli readwrit allow us detect initi access processor trigger coher transact ie read write invalid line write readonli line addit local data structur maintain protocol processor describ line invalid next acquir oper size data structur upper bound number line cach need maintain inform line drop cach node protocol processor servic request issu local processor well request remot processor affect portion directori locat node local processor request one follow four read miss write miss lock releas lock acquir uncach share read write read reader write singl reader writer read write notic write send write notic write figur directori state diagram variant lazi releas consist read miss caus processor load instruct access data locat processor cach read miss node protocol processor alloc outstand transact data structur contain line block number caus miss outstand transact data structur equival rac entri dash distribut directori protocol send messag block home node ask data request reach home node protocol processor issu memori read block start directori operationread current state block comput new state soon memori return request block protocol processor send messag request node contain data new state block block made transit weak state addit messag sent current writer worth note protocol never requir home node forward read request block current written memori modul contain uptod version written fact read occur indic synchron oper separ write read turn impli in correctli synchron program true share occur recent version block requir write miss caus processor store instruct access line whose local state invalid readonli applic processor free continu execut place write write buffer assum buffer full protocol processor alloc outstand transact data structur send write request messag home node block present processor cach the local line state invalid entri write buffer cannot retir block data return home node block readonli processor cach howev still need contact home node inform write oper need wait home node respons retir write buffer entri import advantag eager implement releas consist dash stem fact allow block multipl concurr writer need use home node serial point choos uniqu processor writer write request arriv home node home node protocol processor consult directori entri decid new state block be new state requir addit coher situat block move weak state result read request current dirti state ie singl writer messag ie block uncach cach request processor acknowledg sent request processor howev block go make transit weak state notif messag must sent share processor respons sent request processor instruct wait collect acknowledg acknowledg could direct to collect by either request processor home node which would forward singl acknowledg request node opt second ap proach lower complex allow us collect acknowledg write request block arriv multipl processor home node keep track write request acknowledg receiv individu acknowledg share proce sor downsid collect acknowledg home node transit weak state becom fourhop transact caus longer delay downsid less signific would singlewrit protocol abil retir write buffer entri send initi messag home node reduc probabl write eventu stall processor lock releas need make sure write releas processor global perform ie processor copi written block inform write written data made way back main memori ensur stall processor write buffer flush outstand request servic ie outstand request data structur dealloc memori acknowledg outstand writeback writethrough see below lock acquir need invalid acquir processor cach line write notic receiv much latenc oper hidden behind latenc lock acquisit itself processor attempt acquir lock protocol processor perform invalid write notic alreadi receiv receiv messag grant ownership lock protocol processor perform invalid addit notic receiv interven time invalid line involv notifi home node local processor longer cach block way home node updat state block directori entri appropri block longer processor write it revert share state processor share all revert uncach state block evict cach due conflict capac miss home node must also inform one last issu need address mechan wherebi data make way back main memori multiplewrit protocol writeback cach requir abil merg write cach block multipl processor assum fals share within individu word could achiev includ perword dirti bit everi cach send bit everi writeback messag approach complic design cach howev introduc potenti larg delay releas oper due cach flush oper writethrough cach solv problem provid word granular memori updat overlap memori updat comput program howev writethrough lead unaccept larg amount traffic delay cach fill read miss critic oper coalesc fulli associ buffer place writethrough cach effect combin best attribut write strategi provid simpl design low releas synchron cost writethrough cach maintain data traffic level compar writeback cach also consid lazier version protocol attempt delay point write notic sent processor protocol node protocol processor refrain send write request block home node long possibl notif sent either written block replac processor cach processor perform releas oper write buffer local data structur maintain protocol processor process write replac block allow us place upper bound size data structur proport size processor cach avoid complic directori process aris process write processor may longer cach block delay notic shown improv perform softwar coher system hardwar implement howev delay notic take full advantag asynchroni comput coher manag caus signific delay synchron oper two sourc perform benefit two lazi protocol compar eager releas consist protocol implement dash multiprocessor one abil avoid invalid henc reduc miss rate use multipl writer toler fals share fals share block invalid synchron oper rather whenev written other less signific sourc benefit reduc write buffer stall time sinc write buffer entri retir immedi written block alreadi cach readonli chanc write buffer stall significantli reduc reduc writebuff stall time secondari effect applic sinc benefit realiz bursti writebehavior neg side releas acquir synchron point expens processor stall wait protocol processor complet outstand read write request invalid weak line evict clean unwritten cach line also forc coher messag sent block home node secondari effect critic path comput experiment methodolog simul testb use executiondriven simul simul mesh connect multiprocessor node simul consist two part front end mint simul execut processor back end simul memori system front end call back end everi data refer instruct fetch assum alway cach hit back end decid processor block wait memori continu execut sinc decis made onlin back end affect time front end interleav instruct across processor depend behavior memori system control flow within processor chang result time memori refer accur tracedriven simul control flow predetermin record trace front end experi implement mip ii instruct set back end quit detail finites cach full protocol emul distancedepend network delay memori access cost includ memori content simul capabl captur content within network substanti cost execut time result report model network content send receiv node messag node inbetween also simplifi simul programm protocol processor abstract away detail instruct data cach miss may suffer process protocol request believ inaccuraci detract conclus current design protocol processor incorpor larg cach neglig miss rate patholog case simul simpli charg fix cost oper one except write request share line cost sum directori access dispatch messag share processor sinc case directori process hidden behind memori access cost increas directori process cost lazi protocol affect perform tabl summar default paramet use simul use paramet ignor content effect may seen network memori modul cach fill would incur cost a send request messag home node network b wait memori respond data c send data back request node network d satisfi fill node local bu assum distanc hop network cost send request cycl cost memori cycl cost send data back cycl cost local cach fill via node bu aggreg cost cach fill processor cycl system constant name default valu cach line size byte cach size kbyte directmap memori setup time cycl memori bandwidth bytescycl bu bandwidth bytescycl network bandwidth bytescycl bidirect switch node latenc cycl latenc cycl write notic process cycl lrc directori access cost cycl erc directori access cost cycl tabl default valu system paramet applic suit report result parallel program run program largest input size could simul reason amount time provid good loadbalanc processor configura tion three program best describ comput kernel gauss fft blu rest complet applic barneshut choleski locusrout mpd gauss perform gaussian elimin without pivot theta matrix fft comput onedimension fft element array complex number use algorithm describ akl blu implement block rightlook lu decomposit algorithm present theta matrix barneshut nbodi applic simul evolut k bodi influenc gravit forc time step choleski perform choleski factor spars matrix use bcsstk matrix input locusrout vlsi standard cell router use circuit primarygrin contain wire mpd windtunnel airflow simul particl step applic part splash suit due simul constraint input data size program smaller would run real machin consequ also chosen smaller cach common real machin order captur effect capac conflict miss experi larger cach size overestim advantag lazi releas consist elimin signific fraction miss common eager lazi protocol princip goal determin perform advantag deriv hardwar system lazi releas consist protocol end begin section categor miss suffer variou applic eager releas consist fals share import part applic miss rate expect lazi protocol realiz substanti perform gain continu section compar perform lazi protocol eager releas consist section evalu perform implic lazier variant protocol section provid intuit qualit differ softwar hardwar implement lazi releas consist section examin impact sever architectur paramet rel perform lazi eager protocol show perform advantag lazi protocol increas hypothet futur machin paramet modifi simultan keep technolog trend applic cold true fals evict write barneshut blockedlu gauss locusrout mpd figur classif miss eager releas consist applic miss rate eager lazi lazyext barneshut blockedlu gauss locusrout mpd figur miss rate differ implement releas consist applic characterist mention section main benefit lazi protocol stem reduct fals share elimin write buffer stall time data alreadi cach readonli attempt identifi extent benefit might realiz applic program run set simul classifi miss eager releas consist applic high percentag fals share frequent write miss readonli block provid best candid perform improv lazi consist tabl present miss rate applic differ protocol case lazi variant exhibit lower miss rate eager implement releas consist improv realiz lazi variant stem two factor one reduct fals share second elimin writemiss fals share block tabl present classif eager protocol miss rate follow compon cold miss trueshar miss falseshar miss evict miss write miss individu categori present percentag total number miss classif scheme refin duboi et al describ detail technic report write miss slightli differ flavor categori result data transfer sinc occur block alreadi present cach processor permiss it seen tabl applic benefit lazi protocol ie reduc miss ratebarneshut blockedlu locusrout high fals share compon mpd also benefit although fals share compon pronounc applic still signific overal miss rate much higher remain applic choleski fft gauss realiz gain miss rate due lazi protocol almost fals share lazi v eager releas consist section compar lazi releas consist protocol present section eager releas consist protocol like one implement dash perform sequenti consist directorybas protocol also present comparison purpos relax consist protocol use entri write buffer allow read bypass write coalesc write cach line eager protocol use writeback polici lazi protocol use writethrough entri coalesc buffer place cach memori system figur present normal execut time differ protocol applic suit execut time normal respect execut time sequenti consist protocol the unit line graph lazi protocol provid perform advantag expect applic advantag rang applic largest perform improv mpd mpd highest overal miss rate fals share write miss import compon it barneshut perform also improv use lazi protocol unlik remain program perform benefit deriv decreas synchron wait time closer studi reveal decreas stem better handl migratori data lazi protocol eager bhut blu chol fft gauss loc mpd normal execut time figur normal execut time lazi releas eagerreleas consist processor bhut blu chol fft gauss loc mpd analysi sync wbstl rdlat figur overhead analysi lazyreleas eagerreleas sequenti consist left right processor block lu locusrout suffer fals share lazi natur protocol allow toler much better eager releas consist result perform benefit respect gauss hand fals share migratori data still realiz perform improv lazi consist studi program found perform advantag lazi consist stem elimin hop transact coher protocol share gauss occur processor attempt access newli produc pivot row dirti state furthermor access tightli synchron potenti gener larg amount content lazi protocol elimin need extra hop reduc observ content thu improv perform choleski fft small amount fals share perform chang littl lazi protocol fft run littl faster choleski run littl slower figur present breakdown aggreg cycl over processor four categori cycl spent cpu process cycl spent wait read request return main memori cycl lost due write buffer stall cycl lost synchron delay cost categori protocol present percentag total cost experienc sequenti consist protocol aggreg cost correl well program execut time though mirror precis sinc captur behavior program critic path result indic lazi consist protocol reduc read latenc buffer stall increas synchron overhead one program decreas read latenc suffici offset increas synchron time result net perform gain much lazi requir unlik basic lazi protocol evalu far softwar coher system implement lazi releas consist attempt postpon process write share data combin write process synchron releas point aggress lazi allow unrel acquir synchron oper proceed without invalid cach line modifi releas processor result program experi reduc miss rate reduc miss latenc howev move process write oper releas point side effect increas amount time processor spend wait releas complet softwar system usual prob lem sinc write notic cannot process parallel comput penalti lazyext bhut blu chol fft gauss loc mpd normal execut time figur normal execut time lazi releas lazyextendedreleas consist processor bhut blu chol fft gauss loc mpd analysi sync wbstl rdlat figur overhead analysi lazyreleas lazyextendedreleas sequenti consist left right processor paid regardless process system hardwar support coher howev coher overhead associ write overlap program comput long program someth product do aggress lazi protocol effect elimin overlap end hurt perform due increas synchron cost figur show normal execut time origin lazi protocol lazier variant refer lazier protocol lazyext analysi overhead two version protocol shown figur previou section normal done respect run time overhead experienc sequenti consist protocol one applic lazier version protocol poorer overal perform find stand contrast previouslyreport result dsm system explain abil overlap process nondelay write notic seen figur lazyext protocol improv miss latenc experienc program increas amount time spent wait synchron former insuffici offset latter result program perform degrad except observ fft fft comput d fft phase separ barrier delay process write allow home node combin process write request block sinc request arriv moreorless simultan time barrier increas synchron time processor experi shorter delay barrier sinc event barrier local observ miss rate applic also agre observ miss latenc lowest lazyext protocol impact technolog advanc three major architectur paramet affect perform cach coher protocol latenc bandwidth cach line size defin latenc startup time request wait first word produc memori bandwidth repres number byte transfer memori interconnect wire across local bu one processor cycl balanc system compon devot given data transfer approxim equal bandwidth chosen four applic three signific fals share compon one without enjoy substanti perform improv lazi consist plot run time differ protocol function system latenc bandwidth plot appear figur normal execut time memori latenc cycl barneseag barneslazyext barneslazi gausseag gausslazyext gausslazi normal execut time memori latenc cycl locuseag locuslazyext locuslazi mpdeager mpdlazyext mpdlazi figur normal execut time differ memori latenc normal execut time network bandwidth bitscycl barneseag barneslazyext barneslazi gausseag gausslazyext normal execut time network bandwidth bitscycl locuseag locuslazyext locuslazi mpdeager mpdlazyext mpdlazi figur normal execut time differ system bandwidth run time normal respect execut time sequenti consist protocol increas memori startup cost seen narrow perform gap two differ lazi protocol increas memori startup cost increas cost cach miss therebi increas import miss rate reduct experienc lazier protocol increas miss cost still enough offset addit synchron cost lazyext protocol howev even highest latenc valu simul perform gap eager lazi protocol also narrow latenc bandwidth increas increas latenc neg affect writethrough strategi lazi protocol sinc writethrough oper take longer complet increas bandwidth allow coher oper cach fill complet faster reduc rel impact coher overal program perform within rang paramet studi howev basic lazi protocol maintain consist perform advantag eager lazyext protocol vari cach line size yield sever unexpect result barneshut achiev best perform smallest line size studi byte block small differ protocol almost ident normal execut time cach line size byte barneseag barneslazyext barneslazi gausseag gausslazyext gausslazi normal execut time cach line size byte locuseag locuslazyext locuslazi mpdeager mpdlazyext mpdlazi figur normal execut time differ cach line size run time line size increas fals share becom issu lazi protocol outperform eager altern much gauss achiev best perform byte block perform gap eager lazi protocol increas increas block size unlik barneshut howev gauss suffer fals share advantag lazi protocol stem abil better util writemerg buffer longer line impli data held buffer without contact memori result less main memori traffic overal program perform improv locusrout favor differ line size depend protocol use eager releas consist achiev best perform byte line basic lazi protocol favor byte line contrast result barneshut gauss perform gap protocol locusrout pronounc smaller block size reason evict miss increas block size increas larg block evict miss becom import factor run time lazi eager protocol converg final mpd achiev best perform byte block eager protocol byte block lazi protocol expect behavior sinc particl data structur byte length howev interest note lazyext protocol suffer sever perform degrad small block size high degre share applic result larg number transact synchron releas point increas synchron cost protocol dramat perform result differ protocol function block size appear figur far vari architectur paramet individu order examin effect rel perform eager lazi releas consist futur machin howev mani paramet like chang onc therefor hypothes futur multiprocessor follow characterist cach line size byte memori startup latenc cycl bandwidth bit per cycl assumpt agreement current technolog trend show dramat improv processor speed applic code much modest improv memori access time maintain overal cach size system kbyte per processor larg enough hold work set processor larg enough hide effect capac conflict miss figur show normal execut time overhead breakdown three differ protocol hypothet machin lazi releas consist seen outperform eager altern applic applic lazi releas consist import earlier experi actual byte pad reduc fals share perform gap increas even further mpd perform gap widen addit origin experi lazi consist outperform eager variant similar gain achiev applic well perform gap lazi eager releas consist increas percentag point compar perform differ seen origin experi observ made earlier overhead breakdown graph continu appli lazi protocol trade increas synchron time decreas read latenc write buffer stall time addit advantag lazi futur machin stem increas cach line size memori startup latenc as measur processor cycl longer line increas potenti fals share increas memori startup cost increas cost servic read miss trend toward increas block size unlik go forev futur improv compil technolog serv reduc amount fals share seen particular block size paramet hypothet machin seem plausibl nearterm futur howev suggest lazi protocol becom increasingli import moreov even applic without signific fals share lazi releas consist provid least good perform eager releas consist make prefer protocol regardless share pattern exhibit applic lazi lazyext eager bhut blu chol fft gauss loc mpd normal execut time figur perform trend lazi lazier eager releas consist execut time bhut blu chol fft gauss loc mpd analysi sync wbstl rdlat figur perform trend lazi lazier eager releas consist overhead analysi relat work work build research programm protocol processor pioneer stanford flash wisconsin typhoon project comparison silicon implement dedic programm protocol processor offer opportun obtain signific perform improv appreci increas hardwar cost algorithm side work bear resembl number system provid share memori coher softwar use variant lazi releas consist munin collect write notic processor post processor reach synchron releas point paranet tread mark relax munin protocol postpon post write notic subsequ acquir munin paranet design run network workstat hardwar support coher petersen li present lazi releas consist protocol small scale multiprocessor cach without cach coher approach post notic eagerli use central list weak page process notic synchron acquir point protocol present paper close relat protocol develop softwar coher largescal numa multiprocessor protocol use concept write notic distribut directori unlik softwar protocol howev one present work better postpon post notic also modifi execut coher oper applic code parallel deal fact processor lose block due capac conflict evict work also similar delay consist protocol invalid schedul work duboi et al protocol our their attempt reduc impact fals share applic work howev assum singl owner requir processor obtain new copi write hit stale block protocol incur longer delay write access falselyshar block increas applic miss rate experi also assum infinit cach exagger import coher miss use miss rate measur perform shown section miss rate indic program perform sometim mislead excess lazi protocol actual hurt perform even though improv applic miss rate fals share dealt softwar use compil techniqu similarli latenc write miss block alreadi cach readonli reduc compil request writabl copi appropri citeskeppstedtasplo techniqu alway success howev former must also tune architectur block size latter requir loadexclus instruct view protocol complementari work compil would do compil success protocol incur littl addit overhead eager releas consist if howev applic still suffer fals share signific number writeafterread delay lazi releas consist yield signific perform improv conclus shown adopt lazi consist protocol hardwar coher multiprocessor provid substanti perform gain eager altern varieti applic system programm protocol processor lazi protocol requir minim addit hardwar cost basic storag space respect eager releas consist introduc two variant lazi releas consist shown hardwar base system delay coher transact help point delay invalid synchron acquir point almost alway benefici delay post write notic synchron releas point tend move background coher oper critic path applic result unaccept synchron overhead also conduct experi attempt evalu import lazi releas consist futur architectur find miss latenc cach line size increas perform gap lazi eager releas consist increas well current investig interact lazi hardwar consist softwar techniqu reduc amount fals share applic program local increas perform advantag lazi protocol decreas direct result decreas coher transact requir result indic howev lazi protocol improv applic perform even absenc fals share eg replac hop transact hop transact gauss elimin writebuff stall due writeafterread oper barneshut moreov sinc parallel applic favor small cach line current architectur trend toward longer line believ lazi consist provid signific perform gain eager releas consist forese futur acknowledg would like thank jack veenstra help support work stale block similar weak block protocol r design analysi parallel algorithm algorithm categor multiprocessor commun invalid updatebas coher protocol implement perform munin effect write polici softwar coher scheme parallel block matrix factor sharedmemori multiprocessor ibm vfj delay consist effect miss rate parallel program detect elimin useless miss multiprocessor elimin fals share memori consist event order scalabl sharedmemori multiprocessor cach write polici perform lazi releas consist softwar distribut share memori paranet distribut share memori standard workstat oper system softwar cach coher larg scale multiprocessor flash multiprocessor directorybas cach coher protocol dash multiprocessor stanford dash multiprocessor memori consist model cach coher share memori multiprocessor base virtual memori support tempest typhoon userlevel sharedmemori splash stanford parallel applic sharedmemori fals share spatial local multiprocessor cach mint tutori user manual front end effici simul sharedmemori multi processor munin distribut share memori use multiprotocol releas consist tr synchron coher event order multiprocessor implement perform munin delay consist effect miss rate parallel program stanford dash multiprocessor lazi releas consist softwar distribut share memori detect elimin useless miss multiprocessor cach write polici perform stanford flash multiprocessor tempest typhoon simpl compil algorithm reduc ownership overhead cach coher protocol memori consist event order scalabl sharedmemori multiprocessor directorybas cach coher protocol dash multiprocessor unifi formal four sharedmemori model mint softwar cach coher larg scale multiprocessor algorithm categor multiprocessor commun invalid updatebas coher protocol high bandwidth latenc justifi larg cach block scalabl multiprocessor ctr leonida i kontothanassi michael l scott effici share memori minim hardwar support acm sigarch comput architectur new v n p sept angelo bila jaswind pal singh effect commun paramet end perform share virtual memori cluster proceed acmiee confer supercomput cdrom p novemb san jose ca lanc hammond brian d carlstrom vicki wong ben hertzberg mike chen christo kozyraki kunl olukotun program transact coher consist tcc acm sigop oper system review v n decemb weisong shi weiwu hu zhimin tang interact coher protocol memori consist model dsm system acm sigop oper system review v n p oct angelo bila dongm jiang jaswind pal singh acceler share virtual memori via generalpurpos network interfac support acm transact comput system toc v n p feb