t asynchron parallel algorithm test set partit fault simul a propos two new asynchron parallel algorithm test set partit fault simul algorithm base new twostag approach parallel fault simul sequenti vlsi circuit test set partit among avail processor algorithm provid result previou synchron two stage approach howev due dynam characterist algorithm due fact minim redund work run faster previou synchron approach theoret analysi compar variou algorithm also given provid insight algorithm implement done mpi therefor portabl mani parallel platform result shown share memori multiprocessor b introduct fault simul import step electron design process use identifi fault caus erron respons output circuit given test set object fault simul algorithm find fraction total fault sequenti circuit detect given set input vector also refer fault coverag simplest form fault inject logic circuit set line gate faulti valu effect fault simul use zerodelay logic simula tion fault simul algorithm typic on time complex n number line circuit studi shown littl hope find lineartim fault simul algorithm typic fault simul good circuit faultfre cir cuit faulti circuit simul test vec tor output respons faulti circuit differ good circuit correspond fault detect fault drop fault list speed simul subsequ test vector fault simul research support part semiconductor research corpor contract src dp advanc research project agenc contract daahg dabtc administ armi research offic run standalon mode grade exist test set interfac test gener reduc number fault must explicitli target test gener random pattern environ fault simul help evalu fault coverag set random pattern either two environ fault simul consum signific amount time especi random pattern test ing million vector may simul thu parallel process use reduc fault simul time significantli propos paper two scalabl asynchron parallel fault simul algorithm test vector set partit across processor paper organ follow section describ variou exist approach parallel fault simul motiv need test set partit approach parallel fault simul section discuss approach test sequenc partit section present variou algorithm implement includ two propos asynchron algorithm theoret analysi sequenti parallel algorithm propos given section provid deeper insight algorithm result present section algorithm compar section conclus parallel fault simul due long execut time larg circuit sever algorithm propos parallel sequenti circuit fault simul circuit partit approach parallel sequenti circuit fault simul describ algorithm implement sharedmemori multi processor circuit partit among processor sinc circuit evalu levelbylevel barrier synchron level gate level evenli distribut among processor balanc work load averag speedup obtain proce sor speedup isca circuit approach suitabl sharedmemori architectur circuit mani level logic algorithm partit propos concurr fault simul pipelin algorithm develop specif function assign processor estim speedup report processor base softwar emul messagepass multicomput limit approach cannot take advantag larger number processor fault partit straightforward approach parallel fault simul approach fault list static partit among processor processor must simul good circuit faulti circuit partit good circuit simul one processor obvious redund comput alterna tive sharedmemori multiprocessor use good circuit may simul one processor remain processor lie idl process perform least first time frame fault partit may also perform dynam fault simul even workload processor expens extra interprocessor commun speedup rang obtain static fault partit processor larger isca circuit reason high fault coverag eg improv obtain circuit dynam fault partit due overhead load redistribut howev static dynam fault partit approach shortest execut time bound time perform good circuit logic simul singl processor one observ made fault partit experi larger speedup obtain circuit lower fault coverag result highlight fact potenti speedup drop number fault simul drop sinc good circuit evalu take larger fraction comput time good circuit evalu parallel fault partit ap proach therefor speedup limit exampl good circuit logic simul take percent total fault simul time singl processor am dahl law one cannot expect speedup number processor parallel good circuit logic simul simpli logic simul therefor import known difficult problem implement shown appreci speedup parallel logic simul base partit circuit suggest success due high level commun requir parallel processor recent new algorithm propos test vector set partit among processor call algorithm spitfir fault simul proce two stage first stage fault list partit among processor processor perform fault simul use fault list test vector partit second stage undetect fault list first stage combin processor simul fault list use test vector partit obvious test set partit strategi provid scalabl implementa tion sinc good circuit logic simul also distribut processor test set partit also use parallel fault simul zamlog zamlog assum independ test sequenc provid form par tition one test sequenc given zamlog partit it if exampl independ sequenc given cannot use processor work make assumpt independ test sequenc henc scalabl number processor shown synchron twostag al gorithm spitfir perform better fault partit parallel approach synchron algorithm spit fire spitfir extens spit fire algorithm present spitfir particular synchron pipelin approach help overcom pessim may exist singl two stage approach propos paper two new asynchron algorithm base test set partit strategi parallel fault simul demonstr asynchron algorithm perform better synchron counterpart shall provid reason same first algorithm spitfir two stage algorithm modif spitfir algorithm describ abov leav first stage unchang second stage implement asynchron commun processor second algorithm spitfir obviat need two stage entir parallel fault simul strategi accomplish one stage asynchron commun processor test sequenc partit parallel fault simul test sequenc partit illustr figur use term test set test sequenc interchang here assum order set test vector test set partit exampl test sequenc n vector processor test sequenc processor n figur test sequenc partit among avail processor processor perform good faulti circuit simul vector partit onli start allunknown x state cours state would realli unknown segment first partit vector sinc unknown state superset known state simul correct may x valu output serial simul consid pessimist simul sens parallel implement produc x output fact known pure logic simul perspect pessim may may accept howev context fault simul effect unknown valu fault detect serial simul detect parallel simul rather accept small degre pe simism test set partion algorithm tri correct much possibl comput start state test segment vector prepend segment preced seg ment process creat overlap vector success segment shown figur hypothesi vector act initi vector bring machin state close correct state exactli state even comput state close actual state still far fewer unknown valu exist start allunknown state result show approach inde reduc pessim number fault detect number initi vector requir depend circuit easi initi overlap larger necessari redund comput perform adjac processor effici lost howev overlap small fault detect test set may identifi thu fault coverag report may overli pessimist parallel test partit algorithm describ four differ algorithm test set partit parallel fault simul first two algorithm parallel singlestag twostag synchron approach propos earlier third fourth algorithm parallel twostag singlestag asynchron approach spitfir singl stage synchron algorith approach test set partit across processor describ previou section algorithm present base refer variou test set partit approach describ later entir fault list alloc processor thu processor target entir list fault use subset test vector processor proce independ drop fault detect result merg end spitfir synchron two stage algorithm simpl algorithm describ somewhat ineffici mani fault testabl detect test segment simul fault processor wast time therefor one filter easytodetect fault initi stage set test set partit among processor result two stage algorithm first stage processor target subset fault use subset test vector illustr figur larg fraction f f f f f partit stage u partit stage u u u u figur partit spitfir detect fault identifi initi stage remain fault simul processor second stage algorithm propos overal algorithm outlin below partit test set among p processor g partit fault list f among p processor g processor p perform first stage fault simul appli f let list detect fault undetect fault processor p fault simul c u respect processor p send detect fault list c processor processor p combin detect fault list processor comput broadcast total detect fault list c processor processor p find list fault need target second stage g reset circuit processor p perform second stage fault simul appli test segment fault list g processor p send detect fault list processor processor p combin detect fault list processor comput result parallel fault simul list detect fault c d avail processor p note g equival express g reason second stage necessari everi test vector must eventu target everi undetect fault alreadi detect processor thu initi fault partit phase use reduc redund work may aris detect easyto detect fault observ though one perform two stage good circuit simul test segment processor howev first stage elimin lot redund work might otherwis per form henc twostag approach prefer test set partit approach parallel fault simul subject inaccuraci fault coverag report circuit cannot initi quickli unknown state begin test segment problem avoid test set partit segment start initi sequenc definit redund comput approach overlap test segment good circuit simu lation howev overlap small compar size test segment assign processor redund comput neglig anoth sourc redund comput second stage processor target entir list fault remain exclud fault left undetect processor situ ation one processor detect fault may drop fault fault list processor may continu target fault detect fault complet simul ie second stage fault simul end redundantcomputationoverheadcould reduc broadcast fault identifi correspond fault processor soon fault detect howev save comput might offset overhead commun cost spitfir two stage asynchron algorith describ asynchronousvers algorithm spitfir consid second stage fault simul algorithm spitfir processor work almost list undetect fault avail end first stage except fault could detect stage would therefor advantag processor period commun processor list fault detect thu processor asynchron send list new detect fault processor provid detect least minfaultlimit new fault processor period probe messag processor drop fault may receiv messag help reduc load processor detect fault yet thu allow processor asynchron commun detect fault processor dynam reduc load processor observ first stage algorithm spitfir processor work differ set fault henc need commun detect fault stage sinc effect workload processor would make sens therefor commun detect fault end stage asynchron algorithm use fault simul stage processor p outlin below vector k test set faultsimul vector k numberofnewfaultsdetect minfaultlimit send list newli detect fault processor use buffer asynchron send checkforanymessag receiv new messag use block receiv drop newli receiv fault if drop earlier end routin checkforanymessag nonblock probe return messag pend receiv spitfir singl stage asynchron algorith possibl employ asynchron commun strategi use algorithm spitfir algorithm spitfir latter algorithm processor start list undetect fault entir list fault f fault processor may detect get drop processor continu work larg set undetect fault again would make sens processor commun detect fault period processor provid detect least minfaultlimit new fault valu minfaultlimit circuit depend also depend parallel platform may use parallel fault simul small circuit mostli easi detect fault may make sens set minfaultlimit small may result mani messag commu nicat hand circuit reason larg fault hard detect granular comput two success commun step larg therefor may make sens small valu min faultlimit similarli may expens commun often distribut parallel platform network workstat howev factor may matter much share memori machin result obtain share memori multiprocessor valu minfault limit empir chosen show mean whenev processor detect least fault commun new fault detect processor possibl reduc load processor may still work fault therefor import ensur comput commun ratio kept high henc depend parallel platform use one need arriv compromis frequenc fault commun processor one may also use number vector test set simul say minvectorlimit control paramet regul frequenc synchro nizat may use toward end fault simul fault detect slowli one also use paramet minfaultlimit minvectorlimit sim ulan commun fault either control paramet exceed long granular comput larg enough compar commun cost involv one expect good perform asynchron ap proach assum commun cost zero one would ideal commun fault soon detect processor frequenc commun reduc one may perform redund comput tradeoff algorithm spitfir spitfir see spitfir complet commun independ phase stage follow asynchron commun intens phase howev spitfir one stage fault simula tion mean good circuit simul test set processor p need perform onc thu although may continu commun algorithm spitfir may obtain substanti save perform one stage fault simul see next section inde case approach asynchron commun discuss previou section use algo rithm howev asynchron commun appli first stage fault simul use algorithm analysi algorithm theoret analysi variou algorithm pre sent first provid analysi serial fault simul extend analysi variou test set partit approach fault partit approach analysi sequenti fault simul first provid analysi uniprocessor proceed analysi multiprocessor situat let us assum n test vector test set f g usual fault simul mani fault detect earli remain fault detect slowli let us assum fraction fault detect vector k test set given ffe gammakgamma ie fraction fault detect step fall exponenti tradit alli one assum fraction fault left undetect kth vector simul given ff e gammak henc fraction fault detect vector k given form ffe gammakgamma fraction fault detect stage n vector simul given gamma gamma henc number undetect fault remain un nth vector simul given total number fault circuit let us assum fl unit cost execut second per gate evalu ation assum fraction ffi total number gate g circuit simul fault cost simul faulti circuit left nth vector fl ffigun assum fraction fi gate g simul good circuit logic simul vector usual ffi fi becaus fault simul event trigger fanout cone start node fault insert need process fault simul cost simul nth vector given flfig ffigun thu total fault simul cost uniprocessor n f g simul n vector given sinc n larg may approxim gamma gamman find n f neglect r relat n obtain analysi algorithm spitfir singl stage test set partit parallel algorithm processor simul n vector vector overlap processor processor also start number fault f singl stage synchron algo rithm commun occur end processor exchang detect fault neglect comparison total execut time therefor total execut cost psyncstag n f g o approxim as g formula show approach scalabl one pay redund comput perform vector overlap factor o analysi fault partit algorithm fault partit algorithm processor simul n vector target f fault henc execut cost case form f formula demonstr fault partit approach scalabl sinc first term correspond good circuit logic simul perform scale across processor eventu factor bound speedup number processor increas tabl uniprocessor execut time pri pri random test set actual test mari mari size atpg tool inp out flip time fault test set time fault circuit fault gate ut put flop sec detect size sec detect tabl execut time processor sunsparccenter share memori multiprocessor random test test fault execut time sec fault execut time sec circuit fault detect spf spf spf spf detect spf spf spf spf div pcont piir analysi algorithm spitfir singl stage asynchron algorithm may assum that due commun processor awar detect fault test vector input assum purpos analysi minf aultlimit mean processor broadcast new fault drop everi time detect least fault fault detect processor stage differ number fault detect n vector simul given case g c pasyncstag n f commun cost involv realiti fault multipli detect one processor factor pff formula smaller also sinc delay processor obtain inform fault drop processor factor may even smaller also minf aultlimit larg delay may even longer factor pff would scale further smaller valu pff indic longer execut time let us assum commun cost form l startup cost second cost second per comput word l length messag sinc f ffr gamma detect nth vector simul p processor total cost commun given c pasyncstag n f note minf aultlimit larg number messag smaller term np would scale down howev term would remain unchang sinc total amount data commun clearli tradeoff involv increas valu minf aultlimit analysi spitfir spitfir easi show use similar analysi total execut cost two stage algorithm spitfir spitfir obtain replac f f e gamma n count good circuit simul cost twice formula execut cost algorithm spitfir spitfir respect appar two stage algorithm effect reduc faulti circuit simul term could pay small price perform two stage good circuit logic simul addit gammapff term help reduc execut time asynchron two stage algorithm see discuss asynchron algorithm would possibl lowest execut time tabl execut time speedup sunsparccenter algorithm spitfir random test random test set execut timessecond speedup uniprocessor processor processor processor circuit time time speedup time speedup time speedup mult div tabl execut time speedup sunsparccenter algorithm spitfir atpg test atpg test set execut timessecond speedup uniprocessor processor processor processor circuit time time speedup time speedup time speedup pcont piir synchron counterpart two factor contribut thi first n term correspond partit test set across processor second gammapff term correspond fact processor inform fault processor drop due asynchron commun two asynchron algorithm singl stage asynchron algorithm may win two stage algorithm simpli one stage good circuit logic simul perform case commun cost factor depend platform use may differ impact differ parallel platform howev long overal commun cost small compar overal execut cost singl stage asynchron algorithm run faster approach experiment result four algorithm describ paper implement use mpi librari implement portabl parallel platform provid support mpi commun librari result obtain sunsparccent e share memori multiprocessor processor mb memori result provid circuit viz s s s am pcont piiro mult div circuit chosen test set avail reason larg mult circuit bit two complement multipli div bit divid bit microprogram sequenc pcont bit parallel control use dsp applica tion piir point infinit impuls respons filter s s circuit taken isca benchmark suit parallel fault simul done random test set size ie sequenc randomli gener input test vector actual test set obtain automat test pattern gener atpg tool show perform parallel fault simul random test pattern environ grade environ tabl show characterist circuit use time singl processor type input test set number fault detect also shown tabl show execut time second proce sor sunsparccent e obtain use four algorithm discuss previou section spf spf spf spf refer algorithm spitfir spit fire spitfir spitfir respect number fault detect algorithm how ever may pessim number fault detect elimin use pipelin approach algorithm spitfir valu use minfaultlimit spf spf minfaultlimit execut timessec div tabl execut time spitfir processor vari minfaultlimit explain next paragraph seen tabl execut time get progress smaller gener proceed spf spf spf spf sometim spf better spf sometim spf better spf lowest execut time shown bold seen spf alway lowest execut time algorithm show algorithm spitfir provid best perform thu see perform singl stage fault simul simultan allow asynchron commun processor provid substanti save term execut time tabl show execut time speedup obtain random test set atpg test set respect processor algorithm spit fire seen algorithm highli scalabl provid excel speedup combin effect test set partit coupl asynchron commun detect fault result superlinear speedup case result experi determin valu minfaultlimit shown tabl experi perform valu minfaultlimit viz use actual test set obtain test gener observ best perform obtain valu circuit processor conclus parallel fault simul difficult problem due limit scalabl parallel previou algorithm could extract parallel fault simul limit serial logic simul faultfre ma chine partit test set across processor achiev scalabl parallel implement thu avoid serial logic simul bottleneck perform asynchron commun dynam reduc load processor redund comput may otherwis occur thu present two asynchron algorithm parallel test set partit fault simul asynchron algorithm provid better perform synchron counterpart share memori multiprocessor singl stage asynchron test set partit parallel algorithm shown provid better perform two stage test set partit asynchron parallel algorithm although two stage synchron algorithm better singl stage synchron algorithm r is hope linear time fault simul parallel algorithm vlsi computeraid de sign parallel test gener sequenti circuit generalpurpos multiprocessor fault simul pipelin multiprocessor system concurr fault simul logic gate memori block messag pass multicomput er a parallel algorithm fault simul base proof zambezi parallel pattern parallel fault sequenti circuit fault simul overcom serial logic simul bottleneck parallel fault simul zamlog parallel algorithm fault simul base zambezi spitfir scalabl parallel algorithm test partit fault simul distribut fault simul vector set partit portabl parallel program messag pass interfac automat test gener use geneticallyengin distinguish se quenc tr parallel test gener sequenti circuit generalpurpos multiprocessor concurr fault simul logic gate memori block messag pass multicomput parallel algorithm vlsi computeraid design use mpi italiczamlogital parallel algorithm fault simul base proof overcom serial logic simul bottleneck parallel fault simul automat test gener use geneticallyengin distinguish sequenc zambezi ctr victor kim prithviraj banerje parallel algorithm power estim proceed th annual confer design autom p june san francisco california unit state