t optim parallel execut multijoin queri a abstractin paper studi subject exploit interoper parallel optim execut multijoin queri specif focu two major issu schedul execut sequenc multipl join within queri determin number processor alloc execut join oper obtain first issu propos evalu simul sever method determin gener join sequenc bushi tree despit simplic heurist propos lead gener join sequenc significantli outperform optim sequenti join sequenc qualiti join sequenc obtain propos heurist shown fairli close optim one second issu shown processor alloc exploit interoper parallel subject constraintssuch execut depend system fragmentationthan studi intraoper parallel singl join concept synchron execut time propos allevi constraint sever heurist deal processor alloc categor bottomup topdown approach deriv evalu simul relationship issu explor among scheme evalu twostep approach propos first appli join sequenc heurist build bushi tree singl processor system then light concept synchron execut time alloc processor execut join bushi tree topdown manner emerg best solut minim queri execut time b introduct grow interest appli gener purpos parallel machin databas applic sever research system develop explor trend includ gamma xpr db grace bubba relat databas certain natur affin parallel relat oper set orient provid queri optim lot flexibl select paralleliz access path relat databas system join expens oper execut especi increas databas size queri complex futur databas manag ment parallel recogn solut effici execut multijoin queri point method exploit parallel execut databas oper multiprocessor system divid three categori first parallel occur oper within queri way sever processor work parallel singl databas oper form parallel term intraoper parallel studi extens variou solut exploit intraoper parallel multiprocessor databas system report literatur sever algorithm propos parallel execut twoway join multiprocessor system research concern multiprocessor particular architectur ring hypercub effect data skew perform parallel join also analyz second form parallel term interoper parallel mean sever oper within queri execut parallel third parallel achiev execut sever queri simultan within multiprocessor system term interqueri parallel seen exploit third form parallel one resort result deriv interoper parallel within queri past year light shed issu effort toward trend object paper studi improv execut multijoin queri devis effici scheme exploit interoper parallel minim queri execut time multiprocessorbas databas system note differ join execut sequenc queri result differ execut cost also execut time join multiprocessor system strongli depend number execut time queri paper similar relat work mean respons time complet queri rather total execut time processor r rr rr rrrr a b figur illustr differ join sequenc processor allot execut join instanc second execut time join processor may increas second processor use thu subject exploit interoper parallel execut multijoin queri compris two major issu i join sequenc schedul queri plan gener ie schedul execut sequenc join queri ii processor alloc ie determin number processor join obtain i execut time requir queri minim clearli join method affect optim procedur exploit parallel hash join opportun use pipelin improv perform wherea opportun avail join method like sortmerg join employ note pipelin caus effect join sequenc schedul processor alloc entangl result cost model join criteria processor alloc presenc pipelin thu intrins differ develop without use pipelin result join method without pipelin dealt separ best optim result paper shall focu join method without pipelin sortmerg join fact preval join method exist databas softwar develop specif solut procedur reader interest optim pipelin multipl join call differ procedur due differ problem formul refer first issu join sequenc schedul develop evalu simul sever heurist determin join sequenc multijoin queri focu minim total amount work requir specif investig two sort join sequenc name sequenti join sequenc gener join sequenc join sequenc result relat intermedi join use next join term sequenti join sequenc exampl sequenti join sequenc found figur everi nonleaf node intern node repres result relat join child node join sequenc result relat join requir use next join term gener join sequenc exampl sequenc join specifi join sequenc tree figur b gener join sequenc execut tree gener join sequenc call bushi tree composit inner note bushi tree join sequenc attract much attent sequenti one literatur matter fact gener deem suffici mani research explor sequenti join sequenc desir perform last decad part explain reason past powers multiprocessor system limit queri structur use simpl requir parallel bushi tree note howev two limit factor phase rapid increas capac multiprocessor trend queri becom complic nowaday therebi justifi necess exploit bushi tree consequ propos evalu simul sever join sequenc heurist paper effici determin gener join sequenc good effici seen result heurist propos despit simplic result gener join sequenc significantli outperform optim sequenti join sequenc especi true complex queri importantli shown qualiti gener join sequenc obtain propos heurist fairli close optim gener join sequenc mean employ appropri heurist avoid excess search cost obtain join sequenc high qualiti next explor issu processor alloc join oper studi intraoper parallel object usual determin processor alloc achiev minimum execut time singl join select refer oper point select paper howev exploit interoper parallel we contrast deal execut complex queri multipl join differ join allow note minim total amount work join sequenc join sequenc schedul confus overal object minim queri execut time execut parallel differ cluster processor seen later minim execut time multijoin queri addit oper point select studi intraoper parallel requir factor execut depend system fragment consid execut depend mean join cannot perform operand gener prior join avail also sequenc processor alloc releas might processor left idl sinc form cluster larg enough execut remain join effici phenomenon term system fragment clearli execut depend system fragment well oper point select taken account better processor alloc strategi thu complic minim procedur queri execut time deal problem propos evalu sever heurist determin number processor join processor alloc heurist propos divid two categori bottom approach number processor alloc intern node join bushi tree determin bushi tree built bottom up top approach which light concept synchron execut time determin processor alloc base given bushi tree concept synchron execut time employ deal processor alloc input relat join made avail approxim time shown concept synchron execut time significantli allevi execut depend system fragment henc improv queri execut time note conduct perform studi execut multijoin queri scheme join sequenc schedul processor alloc integr form final schedul shown simul result join sequenc schedul gener domin factor queri execut time wherea processor alloc becom signific number processor queri complex increas thu confirm simul among scheme investig twostep approach first appli join sequenc heurist build bushi tree singl processor system determin processor alloc light concept synchron execut time bushi tree built emerg best solut minim queri execut time paper organ follow notat assumpt use given section section studi sever join sequenc heurist sequenti gener join sequenc address section respect simul result present section processor alloc dealt section bottom top approach respect develop section follow simul result section paper conclud section preliminari studi assum queri form conjunct equijoin predic attribut renam way two join attribut attribut name join predic them join queri graph denot graph set node e set edg node join queri graph repres relat two node connect edg exist join predic attribut two correspond relat edg r r j queri graph said shrunken edg remov graph r r j merg togeth notic join oper two relat r r j given queri graph carri out obtain result queri graph shrink edg r r j merg two relat togeth repres result relat join oper use jr j denot cardin relat r jaj denot cardin domain attribut a notat r r j use mean join r r j denot result relat r r j notat simplic denot execut tree figur r r r r r figur b r r r r r prior work execut databas oper multiprocessor system assum execut time incur primari cost measur process databas oper sens shown join expens oper cost execut join oper mainli express term cardin relat involv also focu execut complex queri becom increasingli import nowaday real databas due use view mention earlier differ join method differ multiprocessor system result differ execut cost join shall address join method without util pipelin sortmerg join paper effect pipelin examin worth mention due stabl perform sortmerg join preval join method use databas product handl equal nonequ join queri hashbas join though good averag perform suffer problem hash bucket overflow thu avoid mani commerci databas product architectur assum studi multiprocessorbas databas system share disk memori cost function join r r j express jr gener reason join larg relat sortmerg join also processor assum ident amount memori avail execut join assum proport number processor involv facilit discuss perform schedul scheme assess averag execut time plan gener schedul scheme effici join sequenc measur execut singl processor system term join sequenc effici effect processor alloc determin speedup achiev singl processor case term processor alloc effici overal effici deal two issu depend two factor note best assess perform impact certain factor complic databas system gener requir fix factor evalu interest one similarli work perform adopt approach paper concentr investig effect join sequenc schedul processor alloc henc assum sever share disk enough disk bandwidth io oper effect resourc ie disknetwork bandwidth content model assum similar effect scheme evalu thu address paper note even disk bandwidth bottleneck join sequenc schedul scheme gener smaller intermedi relat gener tend better perform case howev data placement disk becom import issu perform improv beyond scope paper also refer reader interest issu execut singl sortmerg join use indic improv one join oper prior work intraoper parallel optim issu system depend fact orthogon rel perform among scheme evalu paper besid assum valu attribut uniformli distribut tupl relat valu one attribut independ anoth cardin result relat join oper thu estim accord formula given appendix refer note assumpt essenti simplifi present also tupl assum size presenc certain databas characterist data skew modifi formula estim cardin result relat join accordingli appli join sequenc schedul processor alloc scheme result effect data skew found determin execut sequenc join section shall propos evalu variou join sequenc heurist specif focu sequenti join sequenc section gener join sequenc ie bushi tree section simul result differ heurist given section object show effect join sequenc total work incur section consid execut join singl processor system join sequenc effici variou join sequenc compar one anoth clearli result section improv join sequenc effici applic multiprocessor singl processor system combin effect join sequenc schedul processor alloc discuss section scheme sequenti join sequenc first investig sequenti join sequenc result follow two method greedi method denot sgd optim permut denot sopt mean sequenti join sequenc subscript mean method use greedi scheme sgd outlin follow first scheme start join requir minim execut cost then scheme tri join composit relat minimalcost join exist composit step repeat join finish seen complex sgd ojv j moreov also investig optim sequenti join sequenc obtain optim permut relat join seen number differ sequenti join sequenc queri n relat n half total number permut n object sinc first two relat interchang evalu optim sequenti join sequenc section differ join sequenc compar simul implement scheme sopt techniqu branch bound use avoid exhaust enumer reduc cost search better readabl implement detail sopt irrelev qualiti join sequenc result includ paper show result join sequenc sgd sopt consid queri figur whose profil given tabl oper sgd formula appendix seen join r r one minim cost among join join r r result queri graph profil given respect figur b tabl r repres result composit then verifi r relat minimalcost join r execut r r r rrr er r rrr er g a b figur two state exampl queri graph a origin graph b result graph join r r figur b perform follow procedur result join sequenc sgd r r r r r r whose total cost hand obtain queri figur a optim sequenti join sequenc sopt cost less requir sgd interest see first join perform sopt r r rather r r first one chosen sgd cardin a cardin relat attribut b c e f g cardin b cardin attribut tabl profil queri figur a cardin a cardin relat attribut b c e g cardin b cardin attribut tabl profil queri figur b scheme gener join sequenc seen cost function present section join whose operand larger size usual higher cost observ suggest follow heurist explor gener join sequenc order reduc total cost incur first perform minimalcost join then result queri choos minimalcost join perform procedur repeat join finish note heurist though effici greedi natur local optim consid thu need lead result join sequenc minim cost base heurist scheme gmc g mean result sequenc gener join sequenc subscript mc stand the join minim cost outlin below seen unlik sgd result composit join gmc need particip next join scheme execut join minim cost begin repeat jv begin choos join r r j gve perform r merg r r j r minij updat profil accordingli exampl queri figur a verifi figur b tabl first minimalcost join r r perform next minimalcost join execut gmc r r rather r r sgd result sequenc r r r r r r whose total cost significantli less requir sgd sopt execut rrr r rr rrrrrrrrrrr arrrrr r opt b mc g d opt g c mr g figur differ execut tree result differ join sequenc heurist tree result sopt gmc shown figur b respect seen complex scheme ojv rather close ojv requir sgd note sequenc join cardin intermedi relat result earli join affect cost join perform later sinc object taken minim total cost requir perform sequenc join one may want execut join produc smaller result relat first view fact develop evalu follow heurist scheme variat gmc name minim result relat gmr instead find minimalcost join gmc scheme gmr search join result minim result relat clearli heurist scheme gmr complex ojv jjej scheme gmc algorithm form gmr similar one gmc except statement gmc chang below a for gmr choos join r r j gve jr simul run time requir two scheme almost same anoth heurist choos join r r j minim expans ie jr evalu found provid mediocr perform result thu report paper follow gmr result join sequenc queri figur r r r r r r whose bushi tree shown figur c associ cost show better join sequenc effici one obtain gmc fact justifi simul result section moreov assess perform heurist implement scheme gopt determin optim gener join sequenc multijoin queri sopt enumer possibl candid sequenc implement gopt employ techniqu branch bound prune search use gopt obtain optim gener join sequenc queri figur r shown figur d requir cost fact rather close obtain gmc gmr clearli optim scheme though lead optim solut se quenc incur excess comput overhead undesir applic might outweigh improv could heurist scheme seen follow heurist scheme gmc gmr despit simplic perform significantli better sgd sopt result join sequenc whose execut cost reason close optim one simul result join sequenc heurist simul perform evalu heurist scheme queri plan gener simul program code c input queri gener follow number relat queri predetermin occurr edg two relat queri graph determin accord given probabl denot prob without loss gener queri connect queri graph deem valid use studi determin structur queri also cardin relat attribut involv referenc prior work workload character workload obtain canadian insur compani make simul feasibl conduct scale averag number tupl relat one million two thousand cardin attribut also scale accordingli join select could still reflect realiti base abov cardin relat attribut randomli gener uniform distribut within reason rang number relat queri denot n chosen respect valu n queri randomli gener queri five schedul scheme ie sgd sopt gmc gmr gopt perform determin join sequenc execut queri two relat join predic join togeth cartesian product perform simul found rel perform scheme sensit densiti queri graph ie number edg graph averag execut cost join sequenc obtain note absolut perform schedul scheme highli depend uopn queri complex relat no sgd sopt gmc gmr gopt tabl averag execut cost join sequenc obtain scheme scheme prob shown tabl also divid averag execut cost first four scheme gopt comparison purpos show result associ tabl figur tabl figur seen except gopt join sequenc effici join sequenc obtain gmr best among obtain four remain scheme then order gmc sopt sgd join sequenc effici sequenc result gmc gmr quit close optim one significantli better sgd sopt especi number relat increas size queri simul here run time sgd gmc gmr rs environ close one anoth wherea sopt gopt larger three order magnitud due exponenti complex processor alloc execut join point section minim execut time multijoin queri necessari address follow three issu oper point select execut depend system fragment note execut time requir join oper within multiprocessor system depend number processor alloc perform join relationship model oper curv evidenc prior result intraoper parallel basic increas number processor reduc execut time join satur point reach point ad processor execut join will contrari increas execut time mainli due combin effect limit parallel exploit excess commun coordin overhead mani processor exampl oper curv phenomenon shown solid curv figur dot curv xy given refer curv oper point chosen curv depend design object gener point discuss issu found note everi join oper curv n n n nn number relat involv minim cost requir figur perform result differ join sequenc heurist minim execut time join refer minimum time point denot one optim execut effici ie minim product number processor execut time refer best effici point denot p b formal execut effici alloc k processor execut join defin exe time one proc k exe time k proc repres effici alloc exampl oper curv figur improv processor alloc effici util inform provid oper curv oper point select also requir compli execut depend avoid system fragment much possibl minim execut time queri consequ propos evalu follow sever heurist determin number processor alloc execut join heurist propos divid two categori bottom approach which present section determin join sequenc processor alloc time ie processor allot bushi tree built top approach which present section determin processor alloc base given bushi tree effect heurist evalu simul section number processor execut time figur exampl oper curv join multiprocessor system bottom approach processor alloc introduc four heurist bottom approach determin processor alloc a sequenti execut se heurist use processor system execut join queri sequen tialli seen interoper parallel absent heurist use join sequenc key factor perform case b fix cluster size heurist alloc fix number processor execut join avoid system fragment clearli take total number processor cluster size special case equival heurist se note use heurist system fragment avoid sinc fix number processor alway releas togeth later use moreov heurist se execut depend inher observ sinc join oper execut sequenti howev two heurist may suffer poor oper point select inform provid cardin a cardin relat attribut b c e f g h j k cardin b cardin attribut tabl profil queri figur oper curv util determin oper point join c minimum time point mt heurist base minimum time point oper curv ie number processor use execut correspond join oper p note even though oper point obtain minimum execut time join may minim execut time multijoin queri whole due effect execut depend system fragment d timeeffici point te recal best effici point oper point processor effici use execut join howev seen figur scheme base best effici point might suffer execut depend sinc join oper best effici point might take long execut time complet due small number processor use execut oper thu caus long wait time subsequ join hand scheme base mt may use processor effici sinc may requir mani processor reach minimum time point clearli number processor associ oper point strike compromis execut time processor effici within region p b p view thi shall use combin minimum time point best effici point term timeeffici point heurist studi ie number processor kp gammakp b use execut join oper k note heurist processor alloc combin scheme schedul join sequenc develop section form final schedul handl schedul processor alloc multijoin queri multiprocessor system is use join sequenc heurist say gmr determin next join consid employ f rrr r jr g figur queri show processor alloc appropri processor alloc heurist determin number processor alloc execut join oper processor alloc dealloc outlin follow processor alloc heurist denot h p se fs mt describ h p j number processor alloc execut join j heurist h p processor alloc p number processor avail initi total number processor use join sequenc heurist determin next join oper j h p jp execut depend observ ie two input relat j avail then join exist go processor dealloc step alloc h p j processor execut join j ppgammah p j step updat profil mark j ongo join step determin complet time j record complet time list ongo join step go step processor dealloc complet time list determin next complet ongo join say j step updat profil reflect j complet pph p j step execut join updat queri profil go processor alloc step go step seen use procedur execut tree built bottom up demonstr processor alloc dealloc shall show oper use heurist se te oper fs follow similarli consid queri figur profil tabl light result parallel sort join phase oper curv join model hyperbol function below n p number processor employ paramet a b c determin path length system process join tupl paramet determin interprocessor commun protocol also observ sortmerg join run sort usual memori intens view fact amount memori avail proport number processor involv have join minim number processor requir execut accord size operand p b oper curv formul thu determin studi ignor oper area number processor less p b consid oper region p b p effici execut without loss gener gmr use determin next join oper execut then heurist se multiprocessor system node abc d execut sequenc shown tabl a column cumul execut cost r use section implement top approach bushi tree correspond processor alloc se shown figur a execut scenario use timeeffici point shown tabl b timeeffici point use determin p b pm bushi tree correspond processor alloc te shown figur b note though scheme gmr use determin next join perform case result join sequenc differ due differ processor alloc scenario seen bushi tree figur b differ one figur a top approach processor alloc seen execut tree built bottom up follow two constraint follow execut depend observ ie operand join select correspond simul result use gmc provid addit inform thu omit paper differ valu k evalu choic k made reason good perform join sequenc proc no start time end time result r r r r r r r r r a se join sequenc proc no start time end time result r r r r r r r r r r b te join sequenc proc no start time end time result r r r r r r r r r c st se join sequenc proc no start time end time result r r r r r r r r r r d st tabl execut sequenc differ heurist a ser r r rr rr r b ter rr rr rrr rrrrrrrrrrrrrr figur bottom processor alloc perform next depend result relat ongo join processor requir satisfi accord processor alloc heurist employ ie number processor requir join larger number processor avail then seen tabl b two constraint lengthen execut time queri degrad perform schedul sinc first constraint caus long wait time operand second result exist idl processor view these one natur want achiev degre execut synchron mean processor alloc join way two input relat join made avail approxim time also idl processor avoid result propos top approach processor alloc use concept synchron execut time allevi two constraint improv queri execut time describ processor alloc use synchron execut time consid bushi tree figur exampl recal everi intern node bushi tree correspond join oper determin number processor alloc join manner top down clearli processor alloc join associ root bushi tree sinc last join perform then processor alloc join root partit two cluster assign execut join associ two child node root bushi tree way two join complet approxim time step partit processor root appli intern node tree top manner intern node join assign number processor formal defin cumul execut cost intern node sum execut cost join subtre intern node also defin cumul execut cost leaf node an origin relat zero let r relat associ intern node bushi tree r x r relat correspond two child node then cumul execut cost node r denot wr determin by r note cumul execut cost node determin bushi tree built bottom up cumul execut cost intern node bushi tree figur b found tabl b respect then import see achiev synchron execut time partit processor node two cluster child node one take account cumul execut cost two child node rather execut cost two join associ two child node let r relat associ intern node bushi tree r x r relat correspond two child node wr x denot number processor alloc perform join gener r pr then pr x pr determin respect by r x r r e p r r x sinc wr r origin relat know one child node correspond join leaf node former inherit processor note number processor alloc intern node join bushi tree say r processor exce requir minimum time point shall employ p processor perform join wherea use r processor subsequ partit subtre intern node also number processor pass intern node lower level tree partit effici execut join sequenti execut join child node employ better perform clearli mani differ bushi execut tree queri seen problem determin optim bushi tree minim execut time concept synchron execut time exponenti complex effici solut appli concept synchron execut time bushi tree obtain heurist introduc section point befor differ bottom processor alloc heurist use may result differ bushi tree even join sequenc heurist appli import see although execut time sequenc tabl by se larger tabl b by te join sequenc effici bushi tree figur fact better tree figur b shown cumul execut cost tabl b note constraint execut depend get introduc bushi tree built heurist te well fs mt constraint absent heurist se employ form bushi tree thi explain tree figur differ figur b thu bushi tree se fact superior heurist former better join sequenc effici owe full exploit join sequenc heurist therefor shall appli concept synchron execut time bushi tree built se denot st se comparison purpos also investig use synchron execut time bushi tree built te denot st execut scenario use heurist st se shown tabl c correspond bushi tree processor alloc shown figur a spite fact bushi tree figur figur a result execut time differ due differ processor alloc seen st se processor alloc execut join way two join gener two operand later join complet approxim time thu allevi execut depend moreov sinc processor alloc node bushi tree partit alloc child node system fragment eas explain st se outperform se despit ident bushi tree join sequenc effici execut scenario use heurist st execut time shown tabl d bushi tree processor alloc st shown figur b bushi tree one figur b differ latter processor alloc import see despit outperform se st se perform better st fact best one among processor alloc heurist evalu section simul result processor alloc queri gener scheme employ section use produc input queri simul subsect section queri given number relat involv randomli gener occurr edg queri graph also determin given probabl prob queri six schedul scheme accord heurist se fs mt te st se st respect perform determin number processor join execut queri section simul result also indic heurist sensit differ valu prob thu shall show result prob follow multiprocessor node averag execut time obtain ar r r rrr r rr rrr st b str rrrrrrrrrrrrrrr figur top processor alloc synchron execut time heurist queri relat shown tabl a seen heurist se ie one use intraoper parallel onli perform well number relat perform wors number relat increas agre intuit sinc number relat increas opportun exploit interoper parallel increas constraint impos execut depend becom rel less sever also heurist fs gener outperform other due mainli execut depend poor oper point select among heurist bottom approach shortest execut time usual achiev heurist te especi number n larg explain reason mention abov ie execut depend eas number relat larg thu perform best best usag processor also randomli gener queri averag execut time obtain six heurist queri relat shown tabl b number processor system vari seen number processor increas heurist se suffer ineffici use processor thu outperform heurist mt te st se st wide margin also observ heurist use processor effici achiev nearli minimum execut time perform well number processor larg clearli processor system parallel exploit heurist te howev mt perform better pn relat no se fs mt n a number processor proc no se fs mt pn b number relat tabl averag execut time heurist explain fact suppli processor suffici achiev minimum time point by mt becom better heurist use processor effici by te all number processor small util intraoper parallel ie se suffic provid reason good perform hand larg multiprocessor system one resort interoper parallel fulli exploit resourc system note howev without use synchron execut time te though good oper point select join cannot improv queri respons time global sens due natur bottom approach thu outperform st se st fact strongli justifi necess take execut depend system fragment consider interoper parallel exploit mention earlier although se outperform due poor oper point select st se remedi defect properli realloc processor use concept synchron execut time st se thu outperform st te worth mention sequenti join sequenc one shown figur a benefit concept synchron execut time sinc case join execut sequenti interoper parallel exploit fact togeth fact sequenti join sequenc usual suffer poor join sequenc effici account import explor gener join sequenc note similar heurist section heurist investig straightforward requir littl implement overhead all result show join sequenc effici gener domin factor queri execut time wherea processor alloc effici becom signific number processor queri complex increas suggest effici solut one attempt optim join sequenc effici build good bushi tree first improv processor alloc effici appropri alloc processor execut join fact heurist st se construct conclus paper dealt two major issu exploit interoper parallel within multijoin queri i join sequenc schedul ii processor alloc first issu explor gener join sequenc exploit parallel achiev multiprocessor system heurist gmc gmr deriv evalu simul heurist propos despit simplic shown lead gener join sequenc whose join sequenc effici close optim one gopt significantli better achiev optim sequenti join sequenc s opt particularli number relat queri larg moreov explor issu processor alloc addit oper point select need intraoper parallel identifi investig two factor execut depend system fragment shown import exploit interoper parallel sever processor alloc heurist categor bottom top approach propos evalu simul form final schedul perform multijoin queri combin result join sequenc schedul processor alloc among scheme evalu twostep approach st se first appli join sequenc heurist build bushi tree minim total amount work requir singl processor system then light concept synchron execut time alloc processor intern node bushi tree top manner shown best solut minim queri execut time r parallel databas system overview db parallel edit databas oper cubeconnect multiprocessor system parallel databas system share store perform comparison two architectur fast transact process prototyp bubba develop cross hc data base comput parallel featur nonstop sql appli segment rightdeep tree pipelin multipl hash join combin join semijoin oper distribut queri process schedul processor alloc parallel execut multijoin queri informix parallel data queri practic skew handl parallel join multiprocessor hashbas join algorithm parallel databas system futur high perform databas system queri optim parallel execut effect join oper relat size dataflow queri process use multiprocessor hashpartit algorithm sequenti sampl procedur queri size estim exploit interoper parallel xpr parallel execut multipl pipelin hash join consid data skew factor multiway join queri optim parallel execut system issu parallel sort databas system percentil find algorithm multipl sort run queri optim databas system architectur perform relat algebra machin grace effect parallel join effect optim search strategi parallel execut space oracl parallel rdbm massiv parallel system optim processor alloc support pipelin hash join exploit databas parallel messagepass multiprocessor optim multiway join queri parallel execut join process relat databas measur complex join enumer queri opti mizat parallel relat data base system architectur issu design approach kendal squar queri decompos design evalu parallel pipelin join algorithm perform evalu four parallel join algorithm sharednoth multiprocessor environ tradeoff process complex join queri via hash multiprocessor databas machin access path select relat databas manag system multipl queri optim design xpr parallel sort merg join algorithm manag data skew hierarch approach parallel multiqueri schedul workload character relat databas environ parallel queri process parallel queri process db tr ctr anindya datta debra vanderm krithi ramamritham parallel star join effici queri process data warehous olap ieee transact knowledg data engin v n p novemb mingsyan chen huii hsiao philip s yu appli hash filter improv execut multijoin queri vldb journal intern journal larg data base v n p may wenchih peng mingsyan chen queri process mobil comput environ exploit featur asymmetri ieee transact knowledg data engin v n p juli shorten match time op product system ieee transact softwar engin v n p juli changhung lee mingsyan chen process distribut mobil queri interleav remot mobil join ieee transact comput v n p octob julian r ullmann partit search nonbinari constraint satisfact inform scienc intern journal v n p septemb