t logic data model a propos objectori data model gener relat hierarch network model databas scheme model direct graph whose leav repres data whose intern node repres connect among data instanc construct object separ name valu defin logic model describ nonprocedur queri languag base logic also describ algebra queri languag show equival logic languag b introduct research databas theori s earli s focus mainli relat model cod due eleg mathemat simplic simplic howev gradual recogn one major disadvantag relat model forc store data flat structur real data alway ss cod motiv great deal research past decad structur data model socal semant data model cf nest relat cf complex object cf reader refer excel survey two work found particular inspir jacob jac jac hull yap hy jacob describ databas logic mathemat model databas claim gener three princip data model hull yap hy describ format model gener relat hierarch model format model databas scheme view tree leaf repres data intern node repres connect among data model unsatisfactori abil restructur data ie abil queri databas hull yap ignor issu data manipul languag jacob treatment overkillhi queri languag enabl one write noncomput queri var furthermor approach fail model signific aspect hierarch network databas manag system abil use virtual record virtual record essenti pointer physic record use avoid redund databas ull note virtual record introduc cyclic schema level also instanc level model propos here databas scheme arbitrari direct graph format model leav ie node outgo edg repres data intern node repres connect among data hard model cyclic schema level quit appar instanc level without run cyclic defini tion solut distinguish object name object valu or equival address space data space distinct goe back codd notion surrog cod thu instanc model consist object separ name valu enabl us give semant instanc welldefin way data model consist sever compon tl first databas structur mention abov describ static portion databas second compon way specifi integr constraint databas restrict allow instanc schema shall describ logic integr constraint specifi logic inspir jacob databas logic jac unlik databas logic logic effect is given databas sentenc logic one test effect whether sentenc true databas not third compon way restructur data order describ user view queri etc describ two mechan logic ie nonprocedur queri languag algebra ie procedur queri languag analog codd relat calculu relat algebra prove two languag equival languag novel featur access nonflat data structur eg hierarchi answer produc flat either thu languag realli abil restructur data retriev it oppos approach cite abov introduct logic data model logic data model ldm gener hull yap format model hy format model fail model import part network hierarch databas system name abil use virtual record model introduc cyclic databas schema ldm schema label direct multigraph node particular type leav schema ie node outgo edg basic type denot graphic instanc node contain data valu store databas interior node one follow type product denot graphic h theta domain node cartesian product domain children power denot graphic h node exactli one child multigraph one one edg two node domain node set finit subset domain child union denot graphic h domain node disjoint union domain children person parent rehoboam solomon solomon david solomon batsheba david jess figur personpar relat theta figur personpar relat ldm schema exampl fig show genealog databas relat repres structur relat ldm schema fig consist two node u v type correspond person parent attribut respect one node w type h theta contain pair relat attribut moment instanc ldm schema assign node u set iu valu correspond domain instanc correspond data fig consist follow assign person oe figur genealog network figur ldm schema correspond fig exampl genealog could repres network fig network two record type person contain name peopl databas dummi record pp two link set connect dummi record person parent idea behind map network ldm schema fig follow record type r map product node v r field r v r child type link set network r member let r j owner link v r j child v r fig w v pp v v person u correspond field person record ie person name two arc w v correspond two link network content relat fig correspond instanc ldm schema fig would virtual person person figur genealog hierarchi figur correspond hierarchi exampl fig show hierarch represent genealog hierarchi person record relat link list parent even though hierarch model use link list realli matter implement intuit user see connect person set parent therefor map record type r product node v r network model child type correspond r s field howev r member link r r j instead connect v r v r j directli connect node type correspond ldm schema cyclic schema fig cyclic schema one cannot defin instanc way write instanc exampl complic gener data well schema cyclic cannot write all similar one problem jacob databas logic mathemat theori develop deal problem close relat nonwellfound set acz approach defin instanc schema separ concept object name object valu intuit object name address object valu content address instanc consist of assign set iu object name node u schema assign object valu vall name l iu name taken fix infinit set l usual set natur number valu taken fix infinit set data valu built object name show instanc previou exampl look like use name valu exampl relat instanc exampl consist follow assign name node assign valu vall name assign shown fig l vall david l vall batsheba jess l vall figur instanc ldm schema correspond relat exampl fig show instanc correspond hierarchi exampl l vall david jess l vall l vall figur instanc ldm schema correspond hierarchi formal descript logic data model definit schema tupl v e direct multigraph total order e function v set type f g satisfi follow condit see fig a leaf b v exactli one child c children v distinct node if theta howev multipl edg v node w order edg use induc order compon tupl v call type v readabl use follow abbrevi w abbrevi child w a n abbrevi theta v n children figur node ldm schema abbrevi theta exactli n edg e e n tail v edg head v v n a n abbrevi v n children abbrevi exactli n edg e e n tail v edg head v v n realli overload symbol practic caus confus abbrevi use includ refer element v e node edg respect s refer order children node s shall ignor order clear context shall often refer schema instanc consist two part assign set object name node s assign object valu object name proviso assum fix infinit set l object name fix infinit set data valu definit instanc tupl hi vali satisfi assign set object name node requir iv iw disjoint whenev v w distinct node s val map domain vv iv ie set name instanc map val must satisfi a v l iv vall member set data valu b vall tupl l i n l element c w l iv vall finit subset iw d definit finit instanc instanc hi vali node v s iv finit shall interest mostli finit instanc sinc correspond real databas l vv iv say name i vall call valu set vv valiv call set valu i definit let instanc schema s let v node type l name iv th compon vall shall also use notat l compon whenev result ambigu follow definit say meaning compar two name ie v w node s l iw possibl l l valu definit say two node v w schema similar iff type children ie one follow hold node u n node u n node u queri ldm schema involv addit node s need follow definit definit i schema extens iff a b v v ie new edg either new node new node node v conserv extens conserv extens intuit behind schema add extra node add edg e e chang schema s ie add edg node v node v new node extens s defin extens instanc follow definit let extens s let hi vali instanc s say instanc extens iff v v v node l iv val proof follow lemma straightforward lemma let extens s let instanc uniqu instanc extens instanc call restrict s conclud section definit isomorph two instanc isomorph essenti same ie differ renam shall want show result queri welldefin isomorph give stronger definit isomorph let instanc s let extens let extens shall say isomorph rel s isomorph leav object fix case queri mean isomorph rel databas leav content databas fix definit let extens let hi vali instanc s let two extens say isomorph rel iff map g v gamma onto v node v s g ident iv node v g map v onto v v node l v a v type val l b v type val val l val l c v type l d v type gval gl special case definit get definit ordinari isomorph definit let instanc s say isomorph iff isomorph rel empti schema ie schema ldm logic section defin ldm logic logic similar relat tupl calculu use part logic queri languag logic also use specifi integr constraint ldm schema defin view throughout section fix schema hi vali fix instanc s variabl logic fix sort sort element v sort defin domain variabl rang exampl x variabl sort v x rang iv analogu relat calculu tupl variabl rang specif relat shall usual write variabl sort subscript eg x v variabl differ subscript denot distinct variabl x u differ variabl x v even though variabl rang object name think rang object thu shall refer the name x v the valu x v definit atom formula follow x v w w node type theta v th child x v ae w w node type v one children x v w w type x x w similar node d data element d v type atom formula x v w mean name x v th compon valu w note mention compon w refer to sinc may multipl edg w v howev shall also write x v w unambigu atom formula mean valu w x v sinc one edg w v use ae rather ae atom formula x v w mean x v member valu w sever kind equal atom formula x mean name x v v equal sinc iv iw disjoint whenev v w need atom formula form x mean valu x v w equal meaning v w similar node final atom formula x mean data valu x v equal data element d definit wellform ldm formula schema is atom formula oe oe oe wellform formula oe wellform formula x v oe oe wellform formula free variabl oe defin way firstord logic use oe oe standard mean anoth use abbrevi follow definit formula x vn v node type defin satisfact ldm formula let oex vn x n vn let l l n assign object name free variabl formula ie l member correspond iv mean oe satisfi l instanc i clear context shall write j instead definit let oex vn formula free variabl x vn let l follow hold oe x oe x oe x oe x oe x oe x hold oe formula free variabl x l definit let oe ldm sentenc say satisfi oe iff oe hold exampl exampl next one ldm schema fig instanc fig ldm formula oex say name x u equal first compon valu v hold l exampl follow constraint say name u relat exactli one set w exampl parent must one set rather two differ set constraint word name u x u one name w z z associ it associ note constraint say name u associ one set w rather say person databas associ one set could still duplic u eg two name data valu solomon one way prevent constraint follow lemma show slightli restrict logic power restrict logic atom formula compar data valu intern node lemma make subsequ proof definit simpler lemma let oex vn ldm formula whose free variabl variabl x x n vn ldm formula x vn contain atom subformula form x differ equival oe is instanc l iff proof proof induct size oe show construct formula form x similar type result follow immedi distinguish possibl type v w u v type new variabl let instanc s l iw l vall therefor oe valid u v type wn wn n x u z n wn z n wn n distinct new variabl let instanc s equival vall vall n vall equival conjunct l i l i word vall therefor equival wn wn n x u z n wn l ie oe valid u v type ae x u z ae v wn z n wn ae x u z n wn ae v z n wn n distinct new variabl let instanc s equival vall hold iff case ae x u z ae v oe valid on shall assum x appear subformula proof concern shall abl use gener form conveni proof follow lemma say satisfact preserv isomorph straightforward lemma let extens s let extens let g isomorph rel s let vn ldm formula oe final show logic effect finit instanc lemma let oex vn ldm formula whose free variabl variabl x vn let finit instanc let l determin effect proof show induct size formula atom formula test satisfact straightforward test disjunct negat also clearli effect quantif make use finit i order test whether test whether l finit set iw logic queri languag relat model result queri relat natur gener would result queri model anoth ldm schema call henceforth queri schema togeth instanc schema modifi slightli requir queri schema independ schema instead allow successor node queri node databas schema continu analog relat calculu natur thing would let queri ldm formula oe result instanc would consist object satisfi oe two problem approach first clear ldm formula select object satisfi certain condit clear ldm formula construct new object one solut would prevent queri refer directli object name rather queri refer object valu could find possibl valu might appear result assign arbitrari name show result uniqu isomorph figur ldm schema l vall v l vall figur possibl result queri still solv second problem deal cyclic need abil refer directli object name order deal cycl even result queri alway l vall v l vall figur anoth possibl result queri defin uniqu exampl queri schema fig queri specifi iu iv contain least two differ name way choos two incompar instanc fig solut problem restrict queri one contain cycl allow cyclic databas furthermor allow queri refer explicitli name node databas detail discuss motiv underli approach see kup recent work eg iql shown queri languag could defin allow cyclic queri queri languag definit let ldm schema queri consist tupl sq extens s oe q topolog order node vq gamma v ie oe q linear order v child w v oe q w phi q set pair hv oe v assign formula oe v node v node v formula oe v correspond node a oe v one free variabl sort v b variabl oe v bound sort either node databas schema queri node preced v oe q order oe q use specifi order defin result queri formula oe v specifi content v term databas node queri node preced v continu formal detail give sever exampl queri databas schema exampl genealog schema fig instanc fig exampl schema q shown fig formula oe u word want iu copi iu we elimin howev duplic may iu result queri shown fig figur schema q exampl schema q shown fig want v contain set parent solomon formula oe oe v exampl result defin isomorph rel s ie choic name arbitrari david jess figur result q intuit behind oe u name valu solomon anoth name y equal x u rest formula say parent oe v say iv contain name iu one set result queri shown fig figur schema q formal defin result logic queri start look queri add one node schema shall call queri simpl queri queri q call simpl queri jv shall use notat q v simpl queri let q v simpl queri schema let instanc s result q v extens v sqv order defin v l vall figur defin name v v contain valu name are would like v v contain object satisfi oe v x v problem use definit v oe v name sinc v v yet defin meaningless talk object satisfi oe v might seem realli trivial problem suppos oe v includ conjunct y v z v y contain one name rest oe v allow sever possibl valu name would way choos one result reason problem us formula allow queri languageal bound variabl languag must refer databas node node preced v cannot refer v itself result restrict turn although oe v refer name oe v actual statement valu therefor find valu satisfi oe v pick name arbitrarili definit let val valu ie anyth could valu say val candid valu v follow hold let l new name ie name appear i let v extens sqv v use arbitrari name abl express fact val one object result queri note definit make use fact queri acycl first show particular choic name unimport lemma let val data valu let two extens sqv defin by respect realli depend q well clear context val proof definit oe v one free variabl sort v ie variabl x v inspect see atom formula contain x v xw last alway true easi see truth other depend valu x v name proof straightforward induct defin result sqv take candid valu v pick new name one put name v v notic set candid valu infinit principl even finit instanc queri properti set candid valu finit correspond safe queri relat model next section look issu detail definit result q v extens v sqv defin follow let r set candid valu v let fl val j val rg set new name ie name appear i v v defin set fl val j val rg val v l val val val r show definit desir properti word result well defin isomorph rel s everyth result satisfi oe v cannot add anyth els satisfi oe v result without introduc duplic proof follow lemma similar proof lemma lemma extens sqv let l element v let extens sqv defin val lemma let two result q v isomorph rel s let v result sqv l v v proof let l element v sinc val l candid valu v must l v val l definit result queri v v dupli cation immedi get correspond name v v straightforward show correspond isomorph let l arbitrari element v v let extens sqv defin lemma sinc vall candid valu v extend instanc sqv defin oe v l lemma oe v l therefor defin result arbitrari queri q thi first defin composit queri definit let q queri let q queri sq queri get compos follow way consist sq ffiq lemma queri s let node ad queri q defin sequenc simpl queri q q vn follow q v queri schema q v igamma q add node v schema formula v oe v easi see use defin result q definit result queri q result appli queri q vn success i lemma result q uniqu isomorph word differ choic name step yield isomorph result proof straightforward applic first part lemma theorem let q result queri q instanc i let v node ad q let l element q v q let v node ad q let l l two differ name iv vall duplic result q maxim extens sq satisfi mean extens q satisfi least one v inclus proper proof let q queri q result q lemma oe v l easi see q extens isomorph imag q extend q q affect satisfact oe v obviou assum exist let first node v v n queri q follow immedi q restrict sq result q lemma impli q q isomorph contradict safe queri previou section observ set candid valu queri node infinit principl even finit instanc exampl exampl oe u queri unsaf sinc set candid data valu fdavidg infinit set definit queri q schema safe finit instanc set candid data valu node finit q safe safe everi finit instanc s let v queri node assum defin result q node preced v preced node contain finit set name theta h h set candid valu v subset of respect cartesian product powerset union instanc vs children therefor finit case set candid valu may infinit sinc set data valu infinit lemma q safe iff everi queri node type set candid data valu v finit follow two exampl use databas queri schema fig databas instanc fig exampl oe u safe sinc set candid data valu solomon rehoboam absalomg test safeti relat queri reduc test safeti ldm queri kup consequ test safeti is gener undecid decid howev test whether given queri q schema safe given instanc i describ decis procedur lemma let w node databas schema type let fd constant occur formula q q safe iff queri node v type candid valu v either a valu element iw b one j s proof one direct obviousif condit hold q safe i prove convers induct queri node queri node type assum lemma hold node preced v q safe i let igamma result q v igamma safe set candid data valu v finit set r show call right hand equat s lemma fals element val r gamma s induct hypothesi sinc val candid data valu v extend igamma instanc sqv defin arbitrari element gamma s extend igamma instanc sqv defin val val appear either databas preced queri node queri formula induct size oe v show key point induct x v occur oe v atom formula form x node type either v one node v v igamma formula fals whenev data valu x v s x v x formula alway true therefor shown element infinit set gamma candid valu contradict assumpt q safe i techniqu proof give us effect procedur determin whether simpl queri q v safe finit instanc i take data valu occur anywher databas queri formula test candid valu it difficult see done effect similar way proof lemma show q v safe iff candid valu v intuit result result infinit sinc cannot distinguish data valu prove follow theorem theorem let q queri let finit instanc s decis procedur test whether q safe i q safe i result comput effect algebra queri languag algebra oper section defin set algebra oper show safe logic queri equival sequenc algebra oper and convers sequenc algebra oper equival safe logic queri sinc logic queri add node databas schema leav instanc databas schema unchang algebra oper must same therefor select oper exampl delet tupl satisfi select condit rather creat copi databas node copi contain tupl satisfi condit fact copi tupl realli done relat modela queri throw away tupl databas meet select condit rather copi tupl do issu address explicitli relat databas theori sinc theori deal happen temporari relat creat comput result queri shall see next section necessari delet node certain circumst would still like make delet explicit rather hide algebra oper section databas schema instanc i algebra consist oper form w ff name oper argument v v n node schema s ff add node w schema extend new schema defin oper simpl logic queri give type argument type w list children ldm formula oe w specifi content iw oper copi combin exist node figur algebra oper figur algebra oper v w v creat copi node v shown fig in figur schema shown box right node creat oper left distinct data valu iv iw contain exactli one name data valu note duplic iv elimin iw a v node type b w type c oe w w d creat node type contain data valu d a data valu data domain d b w type c oe w w h v creat node contain finit subset iv see fig a v node schema s b w type h theta figur algebra oper theta v figur algebra oper c oe w w h theta v creat node contain cartesian product fig a n node schema s b w type h c oe w w h creat node contain disjoint union fig a n distinct node schema s b w type h c oe w select oper ldm algebra two select oper oper w oe j v similar select oper relat algebra oper select tupl v whose th j th compon relat see fig a v node type h one relat b w type h c oe w altern select condit may form data valu d oe w theta theta figur algebra oper u r q figur algebra oper w oe u v w oe u v u child v w contain object iu actual appear iv see fig exampl v type h element iv set element iu result oe u v select iv element least one set a u v node u child v b w type u children c oe w depend type v note v cannot type sinc child u i v type h theta u th child oe w strictli speak oe u v underspecifi here case multipl edg v u sinc specifi edg refer case shall use notat oe u v i mean use th edg tail ii v type h iii v type h oe w union differ project union oper similar relat union syntax use w fig a n node type children b w type children v s c oe w figur algebra oper theta theta v figur algebra oper differ shall use infix notat ie shall write w rather gammav a v v node type children b w type children v v c oe w project oper similar project relat alg bra syntax use w pi v order multiset edg tail v a v node type h order multiset edg tail v b let edg v v j w c oe w caus ambigu shall use set node rather edg fig equival logic algebra queri languag use algebra oper defin algebra queri languag algebra queri sequenc fff g ff algebra oper result ff igamma would like abl show queri languag equival logic queri languag word logic queri schema s exist sequenc algebra oper vice versa properti schema creat two queri ident everi databas instanc i result isomorph rel s unfortun next exampl show quit true exampl let consist node u type let q logic queri add node v type s let two data valu let oe v candid valu v g algebra queri equival q queri would consist one algebra oper alon sinc oper add new node schema inspect see singl algebra oper equival q modifi definit get equival queri qa algebra queri consist oper w d clear instanc v after restrict result queri schema consist node u v get instanc want essenti use two node w w temporari storag comput result queri fact thing occur relat model sinc temporari relat use subexpress delet end therefor reason expect thing happen logic data model abl use temporari node extend algebra queri languag ad delet oper oper delet node schema restrict instanc origin schema new schema make sure never delet node child node sinc case result would legal schema oper delet node v written dv definit let ldm schema instanc i algebra oper dv legal v node parent result dv schema consist delet v s togeth instanc get restrict algebra queri languag must take care delet databas node ie must allow user delet node construct queri shall call languag delet oper extend algebra queri languag definit let ldm schema extend algebra queri sequenc ff either oper form w algebra oper delet oper v either node node creat previou fi j delet oper dv v node creat previou algebra oper sequenc fi fi igamma yet delet definit let qa extend algebra queri s let qb extend algebra queri result qa queri qb ffi qa composit qa qb form simpli concaten list algebra oper obvious delet oper equival logic queri sinc everi logic queri add node schema necessarili mean cannot find logic queri equival extend algebra queri all extend algebra queri delet databas node sinc node delet construct previou algebra oper might still case as exampl equival logic queri use temporari node nevertheless kup shown extend algebra queri languag strictli power logic queri languag order get equival queri languag modifi logic languag includ temporari node well definit let ldm schema extend logic queri tupl logic queri s dq set temporari node use queri dq subset queri node delet still get ldm schema word edg tail outsid dq head dq ie definit let q extend logic queri hs let instanc s result queri consist schema q consist a node vq gamma dq b relev edg ie edg sq whose head tail vq gamma dq c restrict type assign vq gamma dq result q defin follow let q result i result q restrict q show everi extend algebra queri equival extend logic queri lemma let extend algebra queri s exist safe extend logic queri q l everi instanc s result qa q l isomorph rel s proof schema q l consist node creat oper queri qa set temporari node dql set node delet qa ie fv j oper ff dv g sinc allow delet node parent easi see edg whose head dql whose tail not ff delet oper must form w defin order node formula use defin oper fi j easi verifi result qa q l instanc inde isomorph show convers let q l logic queri s let fix instanc q l safe i definit qa depend i result qa q l isomorph instanc q l safe keep fix abl prove variou lemma result queri go along first look case q l simpl queri qw start creat node w dom contain domain w ie object might candid valu w ignor everyth except type w fact q l safe i defin w dom follow w type let v v node type let k constant occur oe w w dom algebra queri w dom s theta v v call algebra queri q dom lemma schema creat q dom equal schema togeth node w dom type children node w origin logic queri qw let dom result q dom let w result qw i val valu object w w val also valu object dom w dom proof w type h theta h h lemma obviou w type first part follow fact node except w dom creat q dom also delet q dom second part immedi consequ lemma definit q dom may assum necessari renam bound variabl bound variabl formula oe w distinct let variabl x x k algebra queri q prod result q dom consist oper w prod h theta w purpos defin qa shall label edg tail w prod follow th edg tail w prod label x label use defin algebra queri part queri purpos tell us bound variabl edg correspond to certain case creat new node use algebra oper ation outgo edg new node inherit label correspond edg whose head one argument oper use inherit case unambigu ie case argument label oper label inherit oe j differ union use project oper new edg also inherit label correspond edg whose head argument project arrang wellform subformula oe w list m subformula j subformula defin extend algebra queri q result q q queri result q prod node w type h intuit tupl l edg tail w label variabl might free ie yet bound definit q follow x x w oe k w prod xw xw q w x w w let order multiset edg tail w label edg tail w let correspond set edg tail w q follow extend algebra queri w w differ temporari node use abov similarli name node use below note way defin guarante ambigu label edg result least long label edg order shall show later inde case j let order multiset edg tail w dom label edg tail w j q follow extend algebra queri w dom previou case shall show label edg tail w without ambigu x wa j let order multiset edg tail edg label x wa show must exactli one edg label q consist algebra oper w lemma one well form subformula oe w let x x j variabl list bound note x s may actual occur w type h furthermor th edg tail head w label variabl x wa consequ thi label edg order assumpt made label defin w s hold proof proof fairli straightforward induct use definit w tricki case children w correspond bound variabl oe w bound j children w bound variabl oe w bound j sinc variabl bound j iff bound j bound see result hold case lemma let w type h result q i let l member w dom let l member w k exist l w l candid valu iff satisfi proof straightforward induct structur extend algebra queri q final result q oe w consist wa oe w dom w oe prod dom final defin algebra queri qa lemma let result qw let result algebra queri qa i isomorph rel s proof first note schema equal node creat delet qa node wa node similar node w dom henc w show instanc wa w isomorph ie point evalu queri comput instanc node candid valu assum point evalu qa final round delet note not bound free variabl bound one formula either free formula appear let val candid data valu w extend instanc w sqw defin w oe w result q oe w i second claus lemma val candid data valu w dom l oe w w dom vall lemma oe w l therefor lemma l oe oe w w dom vall oe val candid data valu wa convers suppos val candid data valu wa let oe w result q oe w i sinc val candid data valu wa l oe oe w w oe w l oe w w dom vall oe l oe oe w w oe w impli restrict oe w instanc dom schema q dom dom lemma vall val candid data valu w sinc arbitrari logic queri view sequenc simpl queri easili extend construct arbitrari queri concaten algebra queri individu simpl queri extend logic queri add delet oper delet node delet set queri yield follow theorem theorem extend algebra queri languag extend logic queri languag equival ie everi extend algebra queri exist safe extend logic queri everi extend logic queri exist extend algebra queri s queri defin schema everi databas instanc logic queri safe result queri isomorph rel s conclud remark describ new model data logic data model design combin advantag exist data model one hand enabl databas describ semant data possibl use relat model data hand lose nice properti relat databas have particular abil queri databas use equival nonprocedur procedur languag complex queri languag studi kv work unifi gener long sequenc previou work semant data model ab db fk gdb gra har kob mak mp oy rr sp ss tsi preliminari public result kv stimul later work model view special case ldm design make certain class queri easier express effici implement model incorpor two import objectori featur object ident captur distinct object name object valu strong type type built product power union oper not howev incorpor featur consid import objectori databas inherit method encapsul etc cf import featur model separ schema instanc unlik model one featur ldm abil describ cyclic data featur lack queri languag bring two question possibl elimin cycl databas possibl add cycl queri first question address kv recent show extend queri languag allow cycl queri queri languag describ base paradigm firstord logic recogn framework relat model firstord languag weak task databas queri au motiv studi power queri lan guag base paradigm logic program rei ull recent similar queri languag develop model similar ldm acknowledg indebt jeff ullman basic idea underli work would also like thank rick hull pari kanellaki dave maier help discuss suggest anonym refere suggest improv r non first normal form relat repres hierarch organ data note nonwellfound set univers data retriev lan guag relat model data larg share data bank extend databas relat model captur mean correct translat updat oper relat view algebra quotient relat semant network data manipul languag objectori approach net oper logic ambigu process boolean queri tdm treestructur studi four differ philosophi format model theori databas organ applic databas logic databas design databas logic overview databas mangement technolog logic data model new approach databas logic new approach databas logic express power logic data model consider normal form notnecessarili normal relat relat data model normal form nest rela tion deduct question answer relat databas data definit languag statist databas data structur integr data base manag inform retriev system databas abstract aggreg gener data model lsl link selector languag principl databas system implement logic queri languag databas review tr format model compil queri recurs firstord databas non first normal form relat algebra allow data restructur logic data model new approach databas logic calculu complex object amateur introduct recurs queri process strategi set negat logic data base languag ldl extend relat algebra relat calculu setvalu attribut aggreg function databas model survey applic research issu survey theoret research type complex databas object complex queri logic data model data model flogic higherord languag reason object inherit scheme object ident queri languag primit logic program set rulebas languag function set objectori databas system express power logic data model function data model data languag daplex databas descript sdm correct translat updat oper relat view implement logicl queri languag databas abstract onli extend databas relat model captur mean databas abstract databas logic normal form nest relat relat model data larg share data bank algebra quotient relat principl databas system univers data retriev languag data model cqlfa queri languag codasyltyp databas new approach databas logic remark algebra non first normal form relat semant network data manipul languag data structur integr data base manag inform retriev system extend algebra calculu nf relat databas ctr hongcheu liu jefferi x yu algebra equival nest relat oper inform system v n p may evgeni dantsin andrei voronkov express power data complex nonrecurs queri languag list tree extend abstract proceed nineteenth acm sigmodsigactsigart symposium principl databas system p may dalla texa unit state serg abiteboul sophi cluet tova milo correspond translat heterogen data theoret comput scienc v n p march jan van den bussch dirk van gucht marc andri marc gyssen complet objectcr databas transform languag journal acm jacm v n p march christoph koch complex nonrecurs xqueri function queri languag complex valu acm transact databas system tod v n p decemb serg abiteboul pari c kanellaki object ident queri languag primit journal acm jacm v n p sept mihali yannakaki perspect databas theori acm sigact new v n p sept