t perform synchron program distribut network random process time transmiss delay a synchron compil transform program design run synchronousnetwork program run asynchron network behavior simplesynchron also repres basic mechan distribut comput forth analysi mark graph studi s even s rajsbaum theassumpt messag transmiss delay process time constant westudi behavior simpl synchron process time transmissiondelay random main perform measur rate network ie theaverag number comput step execut processor network per unittim analyz effect topolog probabl distribut therandom variabl behavior network random variabl exponentialdistribut provid tight ie attain bound studi effect abottleneck processor rate b introduct consid network processor commun send messag along commun link network synchron global clock whose beat heard processor simultan time interv clock beat long enough messag reach destin local comput step complet clock beat again network asynchron global clock transmiss time messag unpredict comput scienc depart present address instituto de matematicasunam ciudad universitaria df mexico rajsbaumredvaxdgscaunammx electr engin depart moshetechsel gener program design synchron network run correctli asynchron network instead design new program asynchron network possibl use synchron a ie compil convert program design synchron network run correctli asynchron network synchron provid use tool program synchron network easier design debug test program asynchron network furthermor import use synchron design effici asynchron algorithm a problem design effici synchron studi past eg a ap pu worst case time complex distribut algorithm usual comput assum process time messag transmiss delay equal constant repres upper bound durat goal paper studi effect random process time transmiss delay perform synchron program run asynchron network control simpl synchron compar result determinist case er er process time well messag delay constant or bound oper synchron follow processor wait messag arriv incom link perform next comput step comput step complet after random time send one messag outgo link implement synchron may requir instanc everi messag follow endofmessag marker even messag empti endofmessag marker model flow inform must exist everi pair processor connect link comput step a processor know wait messag sent it messag sent use synchron analysi sinc simpl yet captur essenc synchron methodolog ie ensur processor initi new phase comput know messag sent previou phase alreadi arriv moreov synchron equival mark graph eg chep initi mark one token per edg ra rm relationship synchron mark graph studi shown simpl synchron model behavior mark graph synchron a distribut schedul bg mmz thu work close relat problem stochast petri net where due huge size state space solut techniqu often reli simul eg m m ma mani distribut protocol base simpl synchron exampl snapshot algorithm cl clock synchron algorithm eg bs og synchron a distribut schedul bg mmz optimist synchron grst synchron similar synchron ff a use also direct network oppos synchron suggest a requir link bidirect er er benefit use synchron initi procedur describ main result paper devot perform analysi strongli connect direct network control simpl synchron transmiss delay well time take processor complet comput step random variabl main perform measur rate comput r v ie averag number comput step execut processor network per unit time facilit present first assum transmiss delay neglig end paper describ extend result network nonneglig delay section studi case random variabl gener probabl distribut consid two approach first section analyz effect topolog rate use stochast comparison techniqu compar rate network differ topolog give exampl network differ topolog rate section analyz network topolog differ process time defin partial order set distribut show determinist ie constant process time maxim rate comput case shown er process time equal gamma rate network regardless number processor network topolog next section show case process time random unbound rate may degrad logarithm factor number processor occur case exponenti distribut process time howev section show exponenti worst among larg natur class distribut it yield minimum rate within class distribut section concentr case process time exponenti distribut random variabl mean gamma prove rate logffi maximum minimum vertex indegre outdegre henc regulardegre either outdegre network rate theta logffi comput exact rate stationari probabl extrem case direct cycl complet graph final studi effect one processor run slower rest processor show sens direct cycl network sensit bottleneck processor complet network last section show easi extend result network nonneglig transmiss delay consid exponenti distribut case show ad transmiss delay regular degre network may reduc rate constant factor provid larger wrt partial order process time network process time exponenti distribut mean larger delay mean gamma compar result er shown correspond determinist case rate probabilist case regulardegre network rate least theta log ffi thu case small larg delay rate bound degre network reduc constant factor previou work exist sever result relat result section literatur stochast petrinet instanc domin result rather gener stochast petrinet obtain ba recent bl use subaddit ergod theori eg k note howev proof provid simpl synchron differ much simpler requir heavi mathemat tool stochast order studi exist paper acycl network forkjoin queue pv bm bm bmt respect close queue network effect increas servic rate subset station system distribut number work station product form solut studi sy model similar model section consid bt claim rate log ffi regular network outdegre equal ffi ident exponenti distribut transmiss delay mean neglig process time bs lower bound theta log ffi rate given regular network indegre equal ffi neglig transmiss delay ident exponenti distribut process time recent shown bk subaddit ergod theori use deriv gener lower bound rate bottleneck problem relat consid b asymptot analysi cyclic queue number costum grow present asymptot perform stochast mark graph number token grow studi m class network exponenti distribut process time belong gener model stochast petri net see ma survey usual assum state space of exponenti size case given network model finit direct strongli connect graph gv e ng set vertic graph e v theta v set direct edg vertex graph correspond processor run program direct edg correspond commun link processor u processor v case shall say u inneighbor v v outneighbor u network processor commun send messag along commun link facilit present assum messag transmiss delay neglig end briefli discuss case nonneglig transmiss delay initi processor quiescent state send messag perform comput processor leav quiescent state never reenter consid awak awaken processor oper phase describ sequel assum arbitrari time tv processor v leav quiescent state enter first process state ps thi may caus messag anoth processor signal outsid world consid model then processor v remain unit time transit first wait state ws from time on let ps k ws k k denot process state wait state respect kth phase observ concern rate comput network natur comput concern us here thu take liberti denot symbol kth process state processor transit rule state follow processor v transit state ps k ws k send one messag outgo edg messag denot note label need implement protocol use analysi v send k messag say v complet kth process step processor v state ws k receiv messag m k incom edg remov one messag incom edg transit state ps k remain k v unit time transit state ws k otherwis if least one incom edg k yet arriv processor v remain state ws k receiv messag inneighbor oper describ abov process time k v correspond time take processor v complet kth comput step process time k v k posit realvalu random variabl defin probabl space k v or k v whenev g understood kth complet time ie time processor v send messag k network g let inset vertex v g g v simpli inv set vertic g edg v includ v itself is fvg notat oper processor follow v sent messag k time k v wait processor edg send messag k start st comput step is maximum k u u inv start st comput step take unit time send k reason shall assum rest paper vertex v edg v v e evolut network describ follow recurs interest note complet time k v simpl graph theoret interpret vertex v let k v set direct path length k end v path length end v consist v itself path p vg thu set random variabl one sum k random variabl note random variabl independ even vs independ explicit comput k v follow theorem everi proof induct k note path length v v itself ie vg henc assum theorem hold k recurs induct hypothesi give desir result perform measur import perform measur investig paper complet time k v k v v relat perform measur interest count process v or simpli n v associ processor v defin is n v number comput step minu complet v time t highest index k messag sent v time t similarli denot total number process step minu n execut network time t follow claim indic processor advanc in term execut process step far ahead processor let diamet direct strongli connect graph g proof denot l length simpl path u v simpl induct argument l show fact last messag sent u time mn u impli d argument simpl path v u prove n u gamma n v d anoth import perform measur comput rate r g v or simpli rv processor v network g defin whenev limit exist similarli comput rate network defin r delta impli everi u gener probabl distribut section compar perform differ network gener distribut process time k v first show ad edg network arbitrari topolog slow oper processor network show theori graph embed use compar rate differ network exampl present graph rate up constant factor gener distribut although differ topolog final compar network arbitrari topolog differ distribut process time specif show determin maxim rate exponenti distribut minim rate among larg class distribut topolog network monoton show ad edg network arbitrari topolog slow oper processor network basic methodolog use sampl path comparison is compar evolut messag transmiss differ network everi instanc realiz random variabl k v yield stochast order variou network ro s theorem let gv e graph e set direct edg let graph obtain g ad edg assum processor v awaken g h time tv everi realiz random variabl k v k v n follow inequ hold proof proof induct k basi induct trivial sinc induct hypothesi g v need show g v from equat sinc g v h v follow therefor follow g k v v previou theorem impli immedi corollari condit theorem n g v r g v r h v when limit exist v v also n g remark notic assumpt made random variabl k v partic ular need independ remark sampl path proof impli random variabl n g stochast larger random variabl n h denot n g ff remark impli one start simpl direct cycl a strongli connect graph least number edg success add edg complet graph obtain without ever increas rate embed theori graph embed use model notion one network simul anoth gener comput task see exampl r show notion graph embed help compar behavior rate differ network control synchron embed graph g graph h specifi onetoon assign ff node g node h rout ae eg pathsh edg g along distinct path h dilat embed maximum amount rout ae stretch edg g dilat measur delay incur simul accord embed follow theorem gener theorem theorem let ff ae embed dilat d graph gvg eg graph distribut everi realiz random variabl follow inequ hold proof path length k g one use ae construct path h length less equal k delta ffv ffv k pass ffv moreov path length exactli k delta d sinc one revisit vertic each vertex selfloop time pair vertic ffv ffv i less edg path aev path h assum realiz k everi u vg follow everi path p g k exist path p h kd thu theorem g kd ffv corollari condit theorem delta n g ffv when limit exist v vg remark hold case too simpl corollari theorem g subgraph h n g g subgraph h embed g h dilat addit number vertic g h equal dilat embed d g dspanner h eg ps pu follow corollari h dspanner g r g d r h r g motiv theori embed simul name one expect embed ff ae g h dilat d architectur h simul step architectur g gener comput order delta step rout messag accord ae approach compar perform g h synchron without use ae embed use purpos prove statement perform network consid exampl follow two result theori embed r proposit one emb order n shuffleexchang graph order n debruijn graph dilat one emb order n debruijn graph order n shuffleexchang graph dilat proposit one emb order n cubeconnectedcycl graph order n butterfli graph dilat one emb order n butterfli graph order n cubeconnectedcycl graph dilat theorem averag rate graph proposit equal constant factor provid process time correspond processor distribut regardless distribut are probabl distribut determinist process time compar network say gv eand hv e arbitrari topolog oper differ distribut random variabl k v end assum process time g independ finit mean e g v say v potenti rate v would rate v would wait messag inneighbor process time h distribut g except subset v v processor process time assum determinist ie h specif realiz random variabl g again assum processor awaken time network theorem condit processor v k expect taken respect distribut process time processor g v proof proof induct k basi observ induct hypothesi h k v need show h from jensen inequ impli induct hypothesi sinc e g remark theorem hold also process time h k v processor v h v determinist necessarili everi k process time network h determinist comput network rate longer stochast problem combinatori one thu conclus theorem case comput rate h obtain via combinatori techniqu er er yield upper bound averag rate g furthermor time h k v comput give lower bound et g k v everi k variabl process time gener studi effect substitut random variabl network eg process time given processor given comput step given distribut random variabl anoth distribut rate network defin order among probabl distribut recal function h convex distribut fx said variabl random variabl distribut f denot x c fx c f ehx ehi increas convex function h partial order c call convex order eg ro s intuit x variabl fx give weight extrem valu f instanc ex convex function compar network say gv e hv e arbitrari topolog process time g variabl correspond process time h ie ks vs g k v process time distribut graph g process time g h independ other follow hold theorem condit follow hold processor v k proof from theorem direct path length k end v from fact s posit max convex increas function follow k v convex increas function argument f vg use proposit ro proposit independ rv independ rv increas convex function g convex argument proof theorem follow sinc assumpt s g independ s h independ h note random variabl independ corollari condit n g v r g v r h v r g r h next section show process time independ exponenti distribut mean gamma rate network least jv log jv j conclud subsect character set distribut lower bound hold assum expect time processor finish process step given alreadi work step ff time unit less equal origin expect process time step name assum distribut process time k v new better use expect nbue eg ro s process time let g v e network determinist process time let g e v e network correspond process time mean independ exponenti distribut let gv e network correspond process time mean independ nbue distribut follow theorem follow fact determinist distribut minimum exponenti distribut maximum respect order c among nbue distribut ro s theorem everi hold gd v exampl distribut less variabl exponenti with appropri paramet gamma weibul uniform normal conclud section point interest reader find similar result rather gener stochast petrinet ba bl section assum process time k v k independ exponenti distribut mean gamma first consid gener topolog deriv upper lower bound expect valu k v thu obtain upper lower bound rate network bound depend indegre outdegre processor network number processor itself then explor markov chain underli process deriv exact rate two extrem topolog direct ring fulli connect complet network two topolog studi also effect singl slower processor within network upper lower bound denot v d v number edg go into v g let v v ffi min vv v lemma lower bound i everi k exist processor v v ii everi k everi v v follow hold log ffi proof present detail proof part i onli proof part ii discuss end start prove everi k exist not necessarili simpl path assum statement hold k prove k proof basi ident let v k processor process time comput step maximum among outneighbor v k ie start st comput step v k finish kth comput step k v k maximum least ffi independ ident distribut exponenti random variabl mean gamma well known eg bt d mean maximum c random variabl least gamma log c follow chose v one latest wake time tv thu et v therefor everi k exist processor v complet proof i proof part ii evolv along line except start v k move backward along path remark from proof one see lemma hold distribut f process time expect valu c maximum c independ rv distribut f exist case impli r v m c remark lemma impli exponenti case slowdown rate least logarithm maximum degre g remark distribut not nbue theorem slowdown larger exampl f slowdown least squar root maximum degre g d pp lemma upper bound i everi k everi processor v log delta ii everi k everi processor v proof restrict proof part i recal theorem state everi v also path p moment let proposit d appendix pr ck log delta ck log delta everi c sinc log log delta follow pr ck log delta ck log delta e gammak c log delta everi c z k log log delta e gammak c log delta log combin lemma lemma obtain theorem log log exact comput theorem impli follow bound rate direct cycl c n complet graph k n number processor r cn v log n log n section shall comput exact valu rate c n k n end consid markov chain associ network markov chain denot number messag store buffer edg time t number edg network note processor posit number messag incom edg process state processor complet process after exponenti time one messag delet incom edg one messag put outgo edg denot state x m thu network repres mark graph eg chep number state markov chain finit say n transit chain chang total number messag circuit network moreov network strongli connect markov chain irreduc therefor limit probabl state chain exist posit sum equal eg cro howev shall see n exponenti n therefor infeas comput rate directli solv markov chain show solv markov chain two network class without produc entir chain hope combinatori approach could appli network well let gx denot transit diagram direct graph markov chain x consid bf breadth first search tree gx root level lv vertex v equal distanc v thu ls set vertic level i l number level gx simpl direct cycl studi perform simpl direct cycl n processor c difficult observ markov chain associ c n correspond close queu network return approach later choos use combinatori approach theorem i state associ c n limit probabl ii graph g simpl direct cycl i hold proof i proof follow two observ first symmetri state one level probabl second indegre state transit diagram equal outdegre simpl induct argument use prove part i ii g cycl node v st v let two node edg v consid state s reach process complet or mark graph terminolog fire vertex v outdegre equal n gamma apart v vertic still enabl indegre n gamma fire v v possibl reach s sinc messag edg v s therefor prove s s consid balanc equat hold state s p limit probabl state edg s limit probabl s prove k n gamma follow possibl probabl last equat equal next theorem state processor c n work least half potenti rate regardless valu n theorem rate rv processor c n limit probabl state n n number state associ chain proof number state least one messag edg go processor say v run rate mn time expect fire rate v enabl messag input edg sinc state probabl theorem percent time enabl simpli mn number way put n object k place difficult see give desir result complet graph let k n complet graph n processor recal n number state associ markov chain let state edg one token state level l l reach fire l processor limit probabl state level l denot p l theorem rate processor k n log n proof simpler proof deriv proof theorem give combinatori proof also yield number limit probabl state associ markov chain consid markov chain similar markov chain associ network k n root state messag edg state one son one enabl processor state s son correspond state arriv fire complet process step one enabl processor state s note chain sever vertic correspond state chain associ k n number state level l nn gamma l time processor fire fire rest processor fire thu number n state number state given processor enabl level l enl edg level l level l level l nn gamma l gamma enabl processor symmetri processor enabl number time level let us denot p l limit probabl state level l one show follow percent time processor enabl l rate delta ut corollari network k n proof note befor may two state correspond state say s k n fact state reach fire sequenc processor length k k permut processor sequenc constitut valid fire sequenc lead state s thu limit probabl state level l number differ state level l nln gamma l total number differ state corollari asymptot rate network n processor n n log n observ best possibl rate processor potenti rate case cycl two processor ad processor lower rate yet rate network grow linearli n case complet graph rate processor reduc n grow also total number comput step execut per unit time n log n grow n bottleneck suppos potenti rate processor graph except one lower rate shall show bottleneck stronger effect network direct cycl one complet graph consid case simpl direct cycl n vertic cb n processor rate one processor rate use standard techniqu queu theori prove follow theorem rate processor cb n ae n number messag buffer incom edg processor i total number messag cycl equal n sinc close queue system limit probabl system state given follow product form ro equal otherwis k normal constant guarante sum probabl equal thu probabl l messag incom edg processor n lg henc k normal factor determin condit final ae l now observ rate simpli rate processor messag incom edg processor n sever conclus deriv theorem first observ rate cycl cannot exceed n thu slow processor bound rate network moreov fix n slow processor ae rate network ae gamman name ae increas rate approach upper bound n next consid case graph complet graph kb n continu assum rate processor nth processor slower oper rate shall show that fix number processor n grow infin influenc slow processor diminish limit rate network network processor run rate theorem rate processor kb n least proof suppos network state given time time return state time return again on then ft sequenc nonneg independ random variabl common distribut f expect valu et denot nt number event return time t count process renew process therefor probabl see exampl ro moreov sinc time process return processor network complet exactli one comput step follow rate network et proceed bound et expect time take return form j n depend slow processor complet comput step system leav slow processor complet comput step et ff gener jth j n processor complet comput step leav slow processor et ff j probabl et j equal ff j necessarili everi j case hold ff j ff j thu give upper bound time et take return ff n lower bound rate processor network log n see et log n thu rkb n least fix r v theta log n observ rate network cannot exceed howev number processor n increas infin rate network decreas proport log n slower processor network briefli discuss case nonneglig transmiss delay model process time random befor transmiss delay also random denot transmiss delay messag k k along edg follow behavior system describ recurs note system equal one bt process time neglig delay nonneglig selfloop processor to model process delay v path length k easi see modifi definit p k thu theorem similar theorem hold correspond result gener distribut consid case process time well transmiss delay exponenti distribut mean say easi see lemma still hold lemma hold factor name theorem regular network nonneglig delay run rate network constant factor provid delay less equal in convex order process time er show network neglig delay determinist process time equal rate network equal thu case random process time degrad rate logarithm factor maximum degre processor now consid case process time mean delay exponenti distribut rate determinist case equal er thu theorem case rate one prove use proposit d also case nonneglig delay rate degrad logarithm factor maximum degre processor respect optim determinist case nbue distribut exact comput network averag process time delay exponenti distribut mean rate simpl cycl comput use tool queu theori use case neglig delay comput rate complet network k n thing straightforward structur markov process complic argument abov rate log n log n howev use idea embed let us show rate k n least log n let k n complet network neglig delay construct g n insert one vertex edg theorem or also rate processor g leastlogn one show rate processor v k n greater equal half rate correspond processor g use use fact embed k n g dilat therefor rate v k n least log n conclus paper studi behavior synchron network random transmiss delay process time attempt present selfcontain gener studi synchron perform view point distribut algorithm rather provid deep mathemat studi underli stochast process particular interest compar behavior synchron random delay oppos usual approach analyz distribut algorithm bound delay main conclus delay belong natur class nbue distribut rate network degrad small local vertex degre factor present sever properti behavior synchron gener probabl distribut describ techniqu use compar rate synchron run network differ topolog exponenti distribut show expect durat round comput depend logarithm vertex degre henc rate comput diminish number processor network present techniqu prove upper lower bound rate obtain exact comput hope combinatori approach techniqu appli ring complet network regular degre network use futur obtain result topolog well follow proposit similar pp bt use prove lower bound rate network proposit d let x sequenc independ exponenti random variabl mean gamma everi posit integ k c log pr ck proof fix fi let fl posit scalar direct calcul yield z e fixgammafl e gammax particular choos fl suffici larg e theta satisfi last equat use independ random variabl x obtain e fi use markov inequ obtain e fikm pr e fi turn impli pr pr pr fi choos fi acknowledg would like thank gurdip singh gil sideman help comment r complex network synchron reduc complex distribut maxflow breadthfirst search algorithm mean network synchron network synchron polylogarithm over head sojourn time cyclic queue influenc slowest server ergod theori stochast petri network concurr heavili load neighborhood constrain system estim cycl time stochast petri net comparison properti stochast decis free petri net queue model system synchron constraint the forkjoin queue relat system synchron constraint stochast order comput bound acycl forkjoin queue network investig faulttoler network comput parallel distribut comput markov chain stationari transit probabl mark direct graph distribut snapshot determin global state distribut system order statist lack global clock slow comput distribut network the use synchron yield maximum rate distribut network tent definit distribut comput optimist approach network synchron subaddit ergod theori stochast petri net elementari introduct analysi distribut schedul commun network perform analysi use stochast petri net fast bound stochast petri net gener global clock distribut system graph spanner an optim synchron hypercub stochast bound execut time task graph shuffleori interconnect network stochast mark graph analysi distribut algorithm base recurr relat comparison method queue stochast model the effect increas servic rate close queue network tr complex network synchron parallel distribut comput numer method investig faulttoler network comput acycl forkjoin queu network concurr heavili load neighborhoodconstrain system optim synchron hypercub stochast petri net elementari introduct unison distribut network use synchron yield maximum comput rate distribut network upper lower bound stochast mark graph distribut snapshot fast bound stochast petri net analysi distribut algorithm base recurr relat preliminari version tent definit distribut comput analysi distribut schedul commun network shuffleori interconnect network ctr julia lipman quentin f stout perform analysi local synchron proceed eighteenth annual acm symposium parallel algorithm architectur juli august cambridg massachusett usa omar bakr idit keidar evalu run time commun round internet proceed twentyfirst annual symposium principl distribut comput juli monterey california jeremi gunawardena maxplu algebra nonexpans map nonlinear theori discret event system theoret comput scienc v n p februari