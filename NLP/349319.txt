t improv spill code gener softwar pipelin loop a softwar pipelin loop schedul techniqu extract parallel loop overlap execut sever consecut iter due overlap iter schedul impos high regist requir execut schedul valid requir number regist avail target architectur not regist requir reduc either decreas iter overlap spill regist memori paper describ set heurist increas qualiti registerconstrain modulo schedul heurist decid two previou altern defin criteria effect select spill candid heurist propos reduc regist pressur appli softwar pipelin techniqu propos evalu use registerconsci softwar pipelin workbench compos larg set loop perfect club benchmark set processor configur propos paper compar previou propos alreadi describ literatur one processor configur set loop fit avail regist speedup reduct memori traffic factor achiev afford increas compil time loop repres speedup reduct memori traffic factor b introduct softwar pipelin instruct schedul techniqu exploit instruct level parallel ilp loop overlap oper variou success loop iter differ approach propos literatur gener softwar pipelin schedul mainli focus achiev high throughput main drawback aggress schedul techniqu high regist requir use regist avail requir action reduc regist pressur may also degrad perform either due addit cycl schedul due addit memori traffic reason propos also focus attent minim regist requir regist alloc consist find final assign regist loop variabl variant invari temporari extens studi framework acycl schedul base origin graph color propos howev softwar pipelin impos constraint inhibit use techniqu regist alloc although propos handl none deal addit spill code and schedul need reduc regist pressur softwar pipelin loop softwar pipelin fail gener schedul requir regist avail target machin case addit action perform order allevi high regist demand one option reschedul loop reduc execut rate ie less iter overlap reduc number overlap oper variabl unfortun regist reduct may expens reduct perform anoth option spill variabl memori occupi regist certain number clock cycl requir insert store load instruct free use regist evalu perform show reduc execut rate tend gener wors schedul spill variabl howev author show case opposit situat may happen sever aspect contribut qualiti spill code gener compil first one decid spill code appli use variabl subset second aspect relat select spill candid impli decid number variabl or use select spill prioriti function use select among them decis need accur estim benefit select spill candid produc term regist pressur reduct order motiv work tabl show two differ spill algorithm averag execut rate cycl initi two consecut iter averag memori traffic number memori access per iter loop workbench section whose schedul fit regist one processor configur use along paper tabl also includ ideal case ie infinit regist avail spill need notic gap two implement one commerci describ experiment ideal case larg result motiv propos new heurist improv whole regist pressur reduct process last column tabl show result appli heurist propos paper repres reduct execut rate memori traffic respect previou propos paper use registerconsci pipelin name hrm schedul loop loop schedul regist alloc perform use wand strategi endfit adjac order then regist requir decreas requir paper contribut set heurist to decid two differ possibl aforement ad spill code directli decreas execut rate better select spill candid both term assign prioriti select appropri number paper also contribut analysi result spill variabl use perform differ propos compar ideal case which upper bound perform metric ideal paper avg execut rate avg memori traffic tabl motiv exampl improv spill process propos present workbench compos loop perfect suitabl softwar pipelin paper organ follow section make brief overview modulo schedul regist alloc spill code modulo schedul section focus differ step propos spill variabl memori then section present differ altern select spill candid effect way analyz tradeoff reduc execut rate ad spill code section differ altern heurist evalu term dynam perform take account rel import loop total execut time benchmark set final section state conclus basic concept modulo schedul softwar pipelin loop schedul iter divid stage execut consecut iter distinct stage overlap number stage one iter term stage count sc number cycl initi success iter softwar pipelin loop determin execut rate term initi interv ii execut loop divid three phase ramp phase fill softwar pipelin steadi state phase maximum overlap iter achiev ramp phase drain softwar pipelin steadi state phase pattern oper execut stage achiev iter piec code name kernel correspond one stage steadi state phase ii bound recurr circuit depend graph loop recmii resourc constraint target architectur resmii lower bound ii term minimum initi interv resmii reader refer extens dissert calcul recmii resmii order perform softwar pipelin hypernod reduct modulo schedul hrm heurist use hrm softwar pipelin achiev mii larg percentag workbench consid paper loop addit gener schedul low regist requir registersensit softwar pipelin techniqu use order overestim necess spill code schedul perform two step first step comput prioriti oper schedul second step perform actual placement oper modulo reserv tabl regist alloc loop schedul alloc valu regist perform valu use loop correspond either loopvari loopinvari variabl invari repeatedli use never defin execut loop invari one valu iter loop therefor requir singl regist execut loop regardless schedul machin configur loop variant new valu gener iter loop and therefor differ lifetim lt natur softwar pipelin lt valu defin iter overlap lt valu defin subsequ iter lt loop variant measur differ way depend execut model machin assum variabl aliv begin produc oper start last consum oper overlap lt differ iter pattern length ii cycl indefinit repeat obtain pattern indic number valu live given cycl maximum number simultan live valu maxliv accur approxim number regist requir schedul variant may lt valu greater ii pose addit difficulti sinc new valu gener previou one use one approach fix problem provid form regist renam success definit valu use distinct regist renam perform compil time use modulo variabl expans mve ie unrol kernel renam multipl definit variabl exist unrol kernel rotat regist file provid hardwar solut solv problem without replic code ie renam differ instanti loopvari done execut time studi implement assum exist rotat regist file use wandsonli strategi use endfit adjac order strategi usual achiev regist alloc use maxliv regist almost never requir maxliv regist howev heurist propos paper applic regardless hardwar model regist alloc strategi use decreas regist requir regist alloc techniqu softwar pipelin loop assum infinit number regist name use regist ur number regist requir execut given schedul avail regist ar number regist avail target architectur ur greater ar obtain schedul valid target processor case regist pressur must decreas loop execut eg must obtain schedul ur ar differ altern decreas regist requir outlin reschedul loop larger ii spill variabl memori split loop sever smaller loop best knowledg loop split yet evalu purpos decreas regist pressur two altern evalu compar use product compil eg cydra compil increas ii mip compil describ add spill code next summar main conclus comparison ffl reschedul loop bigger ii usual lead schedul less iter overlap therefor less regist requir unfortun ur decreas directli expens reduct perform less parallel exploit addit loop possibl find valid schedul ur ar simpli increas ii ffl spill variabl memori make avail associ regist valu spill requir use sever load store oper may satur memori unit turn loop memorybound loop case addit spill code lead increas ii degrad final perform increas ii produc gener wors schedul ad spill code howev loop first option better suggest hybrid method case add spill code other increas ii produc better result instanc spill mani use possibl without increas ii ie tri satur memori buse schedul obtain fit ar ii increas although heurist alway end valid schedul care minim memori traffic in fact may increas memori traffic loop requir spill paper present heurist allow bypass step add spill code case simpli increas ii paper also propos sever new heurist ad spill code heurist allow better tune final schedul perform degrad reduc well memori traffic overhead experiment framework differ propos paper evalu set architectur pimjlk defin follow number function unit use perform kind comput adder multipli divsqr unit j number loadstor unit k latenc adder multipli configur latenc load store access two one cycl respect divis take cycl squar root take cycl function unit fulli pipelin except divsqr function unit particular four differ configur use pml pml pml pml regist each order evalu heurist propos total loop repres total execut time perfect club measur hppa schedul first evalu effect propos section evalu use loop ur ar number loop fulfil condit differ processor configur aforement shown tabl notic regist avail number loop fit ar small and therefor subject varianc heurist themselv consequ main conclus experiment evalu drawn configur howev result regist use confirm trend evalu real impact perform take account loop workbench section ar pml pml pml pml tabl number loop requir regist avail set processor configur pimjlk metric use evalu perform follow ffl sigmaii measur sum individu ii loop consid ffl sigmatrf measur sum individu number memori oper use schedul ffl schedtim measur time schedul loop ad spill code initi algorithm use gener regist constrain modulo schedul iter algorithm shown figur schedul regist alloc loop requir regist avail set spill candid obtain order algorithm decid mani candid final select spill introduc necessari memori access origin depend graph loop reschedul modulo schedul tend compact the goal satur use resourc difficult find empti slot alloc new memori oper modulo reserv tabl process repeat schedul requir regist avail found best knowledg previou spill approach base similar iter algorithm follow subsect describ detail one aspect present solut propos previou research variabl use lifetim variabl span definit last use lifetim variabl divid sever section use whose lifetim span previou use prioriti reg alloc add spill select candid sort candid gener spill code schedul rg reqrm schedul figur flow diagram origin spill algorithm current one exampl figur a show produc oper follow four independ consum oper case lifetim variabl rang begin prod begin con four differ use defin u u shown right part figur disadvantag spill variabl that one variabl sever successor number associ spill memori oper suddenli increas may produc increas ii thu reduc perform addit load ad might actual contribut decreas regist requir spill use allow finegrain control spill process altern use previou propos spill variabl use spill use paper evalu perform two altern combin heurist propos section sort spill candid criteria need decid suitabl spill candid ie decreas regist requir smallest cost achiev assign prioriti spill candid prioriti usual comput accord lt candid ratio lt memori traffic introduc spill expect second heurist alway produc better result paper propos new criterion take account critic cycl span lifetim spill candid quantiti select give prioriti spill candid algorithm decid mani candid actual spill memori object decreas regist requir ur ar minimum number spill oper requir estim benefit candid produc final schedul howev new memori oper may satur memori unit lead increas ii increas ii reduc regist pressur may lead situat unnecessari number candid select select process done differ way instanc propos spill one candid time reschedul again heurist avoid overspil expens unaccept schedul time avoid it perform sever tri spill poweroftwo number candid process finish new schedul fit ar found reduc number reschedul effect way select much candid necessari directli reduc ur ar order avoid overspil time candid select lifetim subtract current ur comput estim number regist need spill anoth altern use gener schedul minimum regist requir consist select much candid necessari satur memori unit current ii paper propos new heurist tri better forese overestim produc previou heurist ad memori access set candid select depend graph modifi order introduc necessari loadstor instruct reschedul order guarante spill effect decreas ur spill oper schedul close possibl producersconsum accomplish schedul spill oper associ producerconsum singl complex oper spill variabl store oper insert produc load oper insert consum figur b show modif depend graph spill variabl figur a spill use store lat fu con con con con store prod con con con con store prod prod a b c con con con u con figur a origin graph b graph spill variabl c graph spill singl use variabl oper ad produc singl load oper ad consum end correspond use figur c show modif graph use u select the one largest lifetim therefor releas regist new heurist spill code section describ issu gaug use control gener valid schedul spill code first control decid prioriti candid select spill idea behind propos give prioriti one contribut reduct regist pressur effect way second control decid mani candid spill reschedul loop final third control decid worth appli direct increas ii addit spill analysi also consid spill candid either variabl use spill variabl spill use algorithm describ section decid candid spill base lifetim ratio lifetim memori traffic spill would gener configur pml regist use usecc useqf usetf useccqftf tabl improv perform metric appli differ heurist make differ consid either spill variabl use variabl instanc tabl show sigmaii sigmatrf two regist file size regist processor configur pml either spill variabl row label var spill use row label use appli use lttrf criterion order spill candid tabl report figur rel ideal case ie sigmaii sigmatrf ideal case subtract valu specif configur notic gener spill use achiev schedul lower ii memori traffic initi result reader may conclud spill use effect spill variabl howev see along paper propos improv metric tend reduc gap two altern addit behavior also depend architectur evalu shown section critic cycl first propos new criterion select candid spill sometim select base lttrf may select candid effect reduc regist pressur rational behind spill reduc number simultan live candid schedul cycl number maximum thu decid number regist need critic cycl cc defin schedul cycl number use regist ur maximum new select criterion give prioriti candid cross cc criterion candid select may improv effici spill process shown tabl processor configur select row label varcc usecc show two perform metric workload number variabl spill comput number candid may accur new spill code might increas ii schedul as result satur memori unit increas ii could reduc overal regist pressur therefor would necessari use much spill initi expect propos section tri forese overestim algorithm assum regist file avail regist ar actual ha add actual number avail regist number proport gap ur ar follow ar qf quantiti factor notic correspond spill one candid time spill necessari candid reduc ur ar qf paramet whose optim valu depend architectur characterist loop itself paper conduct experiment evalu paramet order determin rang use valu analyz effect perform schedul time schedtim figur plot behavior sigmaii sigmatrf schedtim qf valu rang lowest valu qf lead worst result term ii trf low schedtim larg valu qf lead better perform expens increas compil time particular valu qf larger increas schedtim compens increas perfor manc gener medium valu qf gener good schedul neglig increas compil time tabl row label varqf useqf show result notic qf quantiti factorsumii a qf quantiti factor b use qf quantiti factor schedtim qf quantiti factorsumii a qf quantiti factor b qf quantiti factor schedtim c figur behavior of a sigmaii b sigmatrf c total schedtim valu qf regist regist valu increas much compil time reduc consider ii trf traffic control previou techniqu tri improv perform spill process increas effect select candid situat better increas ii instead appli spill exampl ar ur ad spill code would lead satur memori unit case ii memori traffic would increas in order fit new memori oper howev increas ii without ad spill memori traffic increas might also reduc ur figur show algorithm propos control point decid better increas ii insert spill code order forese previou situat algorithm perform estim memori traffic number load store would introduc spill done newtrf maximum traffic maxtrf support current valu ii enough absorb newtrf algorithm directli increas ii without insert spill process repeat again particular new ii valu might produc less spill code may requir all prioriti reg alloc add spill select candid sort candid trf absorb ii gener spill code schedul rg reqrm schedul figur flow diagram propos algorithm combin spill code traffic control maximum traffic architectur support multipli tf traffic factor control satur memori unit the condit accept addit spill code newtrf maxtrf tf done tradeoff appli spill mechan increas ii tf paramet includ obtain better tradeoff mechan moreov take alway increas ii take tf alway insert spill tf take posit valu experiment observ best result obtain tf rang figur plot behavior sigmaii sigmatrf schedtim valu tf within rang gener observ best valu ii obtain tf valu close want reduc traffic use smaller valu tf notic time obtain schedul small variat tabl row label vartf usetf show perform term sigmaii sigmatrf tf set notic regist spill variabl perform better spill use paramet qf tf tend reduc spill code may interfer posit way figur plot combin effect paramet notic tune paramet might lead better valu sigmaii anoth observ tf use higher valu qf need which result higher schedul time particular regist best result obtain qf set zero regist best result obtain qf set order summar previou effect row label varccqftf usecc qftf tabl show perform cc qf tf use qf tf set valu produc best perform result spill variabl use sigmaii reduc sigmatrf reduc with respect initi var regist respect similarli spill use appli sigmaii reduc sigmatrf reduc with tf traffic factor a tf traffic factor b use tf traffic factorschedtim tf traffic factor a tf traffic factorsumtrf b tf traffic factor schedtim c figur behavior of a sigmaii b sigmatrf c schedtim tf rang regist regist first point correspond tf tf traffic factor a tf traffic factorsumtrf b tf traffic factor schedtim tf traffic factor a tf traffic factorsumtrf b tf traffic factor schedtim c figur behavior of a sigmaii b sigmatrf c schedtim sever valu qf tf rang regist regist first point given respect initi use regist respect increas perform expens afford increas schedul time regist schedul requir time origin time regist increas neglig perform evalu effect propos mechan evalu use static inform ii trf evalu demonstr new heurist effect obtain better schedul howev static evalu show use term execut time dynam memori traffic execut time estim ii n n total number iter e number time loop execut dynam memori traffic estim n number memori oper kernel code softwar pipelin loop result obtain pml configur shown figur bar graph upper part a show execut time degrad rel ideal case ie assum infinit number regist closer result better perform notic upper bound perform lower part figur b show memori traffic mem rel ideal case ideal mem again closer traffic better schedul howev case lower bound memori traffic plot left side correspond loop benchmark set plot right side refer loop requir spill code configur regist figur a show speedup respect origin propos spill variabl use spill use appli configur figur b show reduct memori factor close case regist speedup report less import close memori traffic reduc factor close figur a b show perform subset loop requir spill configur regist perform loop increas factor spill variabl appli spill use appli regist perform increas factor close case notic memori traffic regist regist cycl a use usecc useccqf useccqftf regist regist mem b regist regist a regist regist menideal_mem b figur dynam result differ spill heurist configur pml qf tf extraordinarili decreas regist avail memori traffic reduc factor respect origin propos spill variabl use respect regist avail memori traffic reduc factor architectur notic spill use perform better spill variabl combin heurist regist critic cycl consid spill use improv better spill variabl howev quantiti factor traffic factor use perform tend level spill variabl spill use spill use still perform slightli better result obtain processor configur shown figur first all notic configur heurist propos paper perform better howev aspect need discuss exampl case eg configur pml spill use perform wors spill variabl configur eg pml perform better spill use appli regist avail spill variabl perform better regist also contrari happen configur pml regist spill use big perform degrad critic cycl consid final paramet qf tf set differ valu config urat paramet give flexibl algorithm allow adapt regist regist cycl a regist regist mem b regist regist cycl a use usecc useccqf useccqftf regist regist mem b regist regist a regist regist mem b figur dynam result differ spill heurist configur pml pml pml configur howev paramet tune configur order obtain good result instanc use regist spill use architectur spill variabl obtain best perform perform extens evalu empir obtain use rang valu reason good result obtain particular qf rang tf rang addit valu tune specif applic even specif loop final perform much import compil time like embed applic conclus paper present set heurist improv effici process reduc regist pressur softwar pipelin loop paper propos new criteria decid two differ altern contribut reduct decreas execut rate loop increas ii temporarili store regist memori through spill code second altern paper also contribut new criteria select spill candid both mani one propos evalu use registerconsci softwar pipelin howev orthogon could appli algorithm experiment evalu done larg collect loop perfect club benchmark impact differ heurist evalu term effect effici term effect heurist propos reduc case execut rate memori traffic respect origin propos term effici reduct contribut real increas perform particular dynam perform loop fill avail regist increas factor rang memori traffic also reduc factor rang reduct execut time memori traffic achiev expens reason increas compil time worst case schedul requir time origin time whole workbench dynam perform increas factor rang memori traffic reduc factor rang schedul manag compil loop less one minut for configur regist less minut for configur although heurist propos contribut better registerconstrain schedul addit work need tune sever paramet like traffic quantiti factor analyz real effect differ architectur configur also shown that depend configur spill candid either variabl use suggest dynam process schedul decid onthefli specif valu paramet take account variabl use may lead better schedul r realist resourceconstrain softwar pipelin algorithm softwar pipelin spill code minim techniqu optim compil perfect club benchmark effect perform evalu supercomput color heurist regist alloc improv graph color regist alloc regist alloc via hierarch graph color regist alloc spill via graph color approach scientif array process architectur design apbfp famili overlap loop support cydra compil cydra stage schedul techniqu reduc regist requir modulo schedul meet new model loop cyclic regist alloc regist alloc use cyclic interv graph new approach old problem circular schedul new techniqu perform softwar pipelin systol array optim compil heurist registerconstrain softwar pipelin quantit evalu regist pressur softwar pipelin loop hypernod reduct modulo schedul regist requir pipelin pro cessor softwar pipelin parisc compil schedul techniqu easili schedul horizont architectur high perform scientif comput regist alloc softwar pipelin loop iter modulo schedul algorithm softwar pipelin loop softwar pipelin showdown optim vs heurist method product compil softwar pipelin regist alloc spill tr overlap loop support cydra spill code minim techniqu optim complier color heurist regist alloc regist alloc via hierarch graph color circular schedul regist alloc softwar pipelin loop regist requir pipelin processor lifetimesensit modulo schedul compil cydra improv graph color regist alloc iter modulo schedul softwar pipelin regist alloc spill softwar pipelin stage schedul hypernod reduct modulo schedul softwar pipelin showdown heurist registerconstrain softwar pipelin quantit evalu regist pressur softwar pipelin loop systol array optim compil convers control depend data depend schedul techniqu easili schedul horizont architectur high perform scientif comput regist alloc myampersandamp spill via graph color ctr javier zalamea josep llosa eduard ayguad mateo valero softwar hardwar techniqu optim regist file util vliw architectur intern journal parallel program v n p decemb alex alet josep m codina antonio gonzlez david kaeli demystifi onthefli spill code acm sigplan notic v n june xiaotong zhuang santosh pand differenti regist alloc acm sigplan notic v n june xiaotong zhuang santosh pand alloc architect regist differenti encod acm transact program languag system topla v n pe april javier zalamea josep llosa eduard ayguad mateo valero twolevel hierarch regist file organ vliw processor proceed rd annual acmiee intern symposium microarchitectur p decemb monterey california unit state josep m codina josep llosa antonio gonzlez compar studi modulo schedul techniqu proceed th intern confer supercomput june new york new york usa javier zalamea josep llosa eduard ayguad mateo valero modulo schedul integr regist spill cluster vliw architectur proceed th annual acmiee intern symposium microarchitectur decemb austin texa bruno dufour karel driesen lauri hendren clark verbrugg dynam metric java acm sigplan notic v n novemb javier zalamea josep llosa eduard ayguad mateo valero regist constrain modulo schedul ieee transact parallel distribut system v n p may