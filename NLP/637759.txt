t experi model simul comput architectur dev a use tradit approach teach comput organ usual gener misconcept student simul comput alfa design fill gap dev use attack complex design chosen architectur allow definit integr individu compon dev also provid formal specif framework allow reduct test time improv develop process use alfa student acquir practic design implement hardwar compon usual achiev comput organ cours b figur organ integ unit risc processor provid integ regist eight global regglob share everi procedur remain divid window regist regblock window includ input output local regist everi procedur execut recent routin begin new regist reserv local output output record call procedur use input special bit regist call cwp circular window pointer mark activ window everi time new procedur start cwp decrement figur organ processor regist besid gener purpos regist architectur includ pc processor two program counter pc contain address next instruct store address pc execut present instruct instruct cycl finish copi npc pc ad byte one word npc instruct condit branch npc assign pc npc updat jump address if jump condit valid y use product divis oper base size memori consid flat that is neither segment pagin mechan includ likewis multiprogram support base regist point lowest address program access size store maximum size avail program psr processor statu regist store current statu program interpret follow bit content descript reserv neg result last oper neg z zero result last oper zero result last oper overflow result last oper carri one bit reserv lowest interrupt number servic ps previou state last mode enabl trap trap enabl trap disabl current window pointer point current regist window tabl content process statu regist wim window invalid mask bit regist one bit per window use avoid overwrit window use anoth procedur cwp decrement circuit verifi wimbit activ new window case interrupt rais interrupt servic routin store content window memori usual wimonli one bit mark oldest window tbr trap base regist point memori address store posit trap routin bit content descript base address base address trap tabl trap type trap servic constant tabl content trap base regist first bit trap base address store base address trap tabl interrupt request receiv number trap servic store bit therefor tbr point tabl posit contain address servic routin last bit guarante least byte store routin instruct set level sparc architectur analyz see instruct fix size bit memori operand may bit basic loadstor oper classifi accord size sign operand arithmet boolean oper includ add and or div mul xor xnor shift abl chang psr accord oper code use sever jump instruct avail includ rel jump absolut jump trap call return trap instruct includ movement regist window nop readwrit oper psr multipl use bit operand produc bit result signific bit store regist remain alur regist integ divis oper take bit dividend bit divisor produc bit result regist store signific bit divi dend one alu input regist store least signific bit dividend other divisor integ result store alur regist remaind regist instruct carri alu whose structur depict follow figur includ two multiplex connect alu multiplierdivid unit shifter figur organ alu two execut mode user kernel certain instruct execut kernel mode also base size regist use program run user mode cpu execut supervis control unit receiv signal rest processor use input bit organ group instruct regist psr bus_busy_in bus_dack_in bus_err output sent use line organ group includ readingwrit intern regist activ line alu multiplex also connect pc npc trap control psr regist includ final data address control buse access memori organ use byte address littleendian store word processor issu memori access oper write address and data need bu then turn address strobe signal interpret memori order start oper memori use address avail analyz rd_wr line see oper ask read issu one word byte taken specifi address sent data line write oper address store byte select regist line bsel defin byte access word point address regist address wrong err line turn on data acknowledg dtack sent oper finish system compon interconnect use bu see figur bu master use bgrant bu grant iack irq acknowledg line connect two devic follow lower upper prioriti devic highest prioriti connect constant signal bgrant line bgrant signal sent lower prioriti devic arriv devic request bu devic finish transfer iack transmit inputoutput oper memori map devic fix set address data written address interpret instruct devic fifteen irq line irqirq provid devic connect line higher prioriti devic connect lower irq figur organ bu final extern cach memori defin gener structur cach control defin figur design implement modul includ origin version alfa defin assign done undergradu student follow procedur present follow section first stage circuit test separ differ algorithm implement final devic integr architectur model develop dev model integr coupl model extens origin architectur which explain detail show capabl extens modifi alfa figur organ cach memori implement architectur dev model architectur present previou section complet implement use cd first behavior compon care specifi analyz input output time element specif also provid test case then compon defin dev follow specif after model implement cd includ experiment framework follow test case defin specif final main model built coupl model connect submodel previous defin model follow design present figur detail definit found two implement consid first reproduc basic behavior circuit code transit function then implement detail use boolean logic basic build block develop atom model coupl use digit logic concept way two differ abstract level provid depend interest use thoroughli test basic model integr higher level modul complet definit architectur follow section devot present compon implement assign done student show differ abstract level model present exampl modifi alfa incdec explain earlier use gener purpos regist organ overlap window given time one window activ incdec model compon choos activ window use bit cwp regist model part cwp logic shown figur cwp increment decrement valu store dlatch repres anoth dev receiv line opop output transmit line resr atom model defin as behavior transit function inform defin follow x receiv port y increment els decrement dint passiv re differ last output send resp port op figur behavior transit function incdec model fcod valu use tell valu must increment decrement alu model use oper see that extern event arriv hold_in function activ macro repres behavior dev time advanc function d charg manipul sigma variabl state variabl predefin everi dev model repres remain time next schedul intern event model remain current state time output intern transit function activ hold_in macro make time definit easier passiv anoth macro use infinit sigma put model passiv phase hold_inpass infinit follow figur show implement function use cd see extern transit function dext receiv five operand input togeth function code accord code paramet increment decrement after model keep present valu delay relat circuit oper output function l activ circuit chang state present valu transmit then intern transit function dint passiv model that is intern event infinit delay schedul wait next input constructor allow specifi model name inputoutput port paramet see definit dev atom model simpler use standard program languag explain advantag use dev section case see appli build model dev provid interfac consist four function program modular definit independ simul repeat everi model therefor one focu model develop user concentr behavior extern event output must sent submodel occurr intern event behavior everi model encapsul function togeth elaps time definit test pattern easili creat model activ function incdecincdec const string name string time mainsimulatorinstancegetparamet model incdecexternalfunct const externalmessag msg check input port assign input valu _fcod int i increment increment va valu use alu int els decrement int i i i decrement v valu use alu int thisholdinact preparationtim schedul delay circuit return thi model incdecinternalfunct const internalmessag delay consum activ output return thi model incdecoutputfunct const internalmessag msg _res_old _res_old _res_old sendoutputmsgtim re _re sendoutputmsgtim re _re sendoutputmsgtim re _re sendoutputmsgtim re _re sendoutputmsgtim re _re return thi figur incdec model definit transit function defin atom model test inject input valu inspect output experiment frame built includ pair inputoutput valu test model automat case build coupl model includ model test defin follow prepar figur incdec coupl model definit definit follow dev specif defin compon in case i_d instanc incdec model extern paramet then link defin influence translat function includ inputoutput port model case i_d model relat top model use inputoutput port defin earlier regglob model defin behavior global regist keep content global regist allow readwrit oper them two auxiliari state variabl olda oldb store last output output signal transmit bit chang model defin by cin sketch model shown figur see use three select line asel bsel csel choos two output regist regist modifi array integ in keep present valu regist boolean line cen c enabl line use allow write oper extern transit function model recept input function store desir oper accord signal receiv also store input valu number regist activ new intern event schedul predefin delay model circuit delay extern event arriv end delay oper cancel model regglobexternalfunct const externalmessag msg switch msgport case cen line turn case reset breset intmsgvalu reset store input line thisholdin activ delay return thi model regglobinternalfunct const breset int i i i ini bcen int i i i return thi ieth line input enabl store regist number receiv ieth line b input enabl store regist number receiv ieth line c input enabl store regist number receiv reset signal issu regist bit each delet write line enabl updat desir regist wait next intern event model reggloboutputfunct const internalmessag msg oldai inselectai thissendoutputmsgtim aout oldbi inselectbi thissendoutputmsgtim bout return thi regist chang transmit output line regist chang transmit output line figur regglob model definit transit function output function decid regist chang queri olda oldb store previou statu b line regist chang valu sent chosen output b model show interest use intern transit function case consid intern state decid model must react intern transit function see reset line activ case clear content everi regist then cen line activ valu chosen regist updat new input basic compon architectur descript complet sever dev model includ gener aspect make brief descript behavior includ definit model transit func tion built previou exampl detail model found circuit check next window use overwritten compon consist window invalid mask regist return valu cwpeth bit wim regist rd_wr reset memori provid three basic oper read write reset reset issu memori initi imag load processor write address bu signal memori use signal address readi then readwrit signal issu memori react accord signal use output time relat memori latenc adder receiv two input depend result carri bit turn on model use align data readwritten loadstor oper model repres behavior integ arithmeticlog unit capabl execut follow oper add sub addx subx addsub carri and or xor andn orn xnor negat and or xor group model includ provid behavior use boolean gate and or xor receiv binari input produc result accord desir oper as rdwr dtack err reset busi bu interpret input signal provid output relat them devic receiv bgrantin port need write data memori write bgrantout port no smaller prioriti devic abl use bu then devic start bu cycl turn busysig nal devic write address access addresslin data written data after byte select mask bselto defin byte word use final turn rdwrout line tell write oper issu memori receiv signal execut memori cycl finish dtackout line turn on devic issu oper receiv signal dtackin line cycl finish bgrantin still devic abl transfer new data otherwis turn busylin allow new bu oper devic model use condit jump decid branch must execut repres cpu clock period configur model use decid access global regist regist window requir return kind regist regist windowglob number model updat npc model manag action take place interrupt receiv pil processor interrupt line mask interrupt one irq whose number greater pil receiv interrupt must servic then see one higher prioriti tf trap found bit turn on tt trap type regist load accord highest level interrupt model repres processor regist implement dlatch ein line enabl input clear line reset regist zero model charg make multipl divis turn condit bit model repres input multiplex choos them receiv bit select signal whose bit turn mark input sent output model charg manag regist window model charg implement shifter model extend sign operand bit bit compon defin trap must servic base prioriti system one input line defin nonmask trap bit use receiv number trap mask model return bit tell trap must servic bit tell trap type follow tabl show kind prioriti trap avail line descript prioriti trap type inst_acc_excep instruct access except x illeg_inst illeg instruct x priv_inst privileg instruct x win_ov window overflow x win_und window underflow x addr_not_align address align x data_acc_excep data access except x inst_acc_err instruct access error x data_acc_err data access error x div_zero divis zero xa data_st_err data store error xb tabl avail trap accord tabl model analyz higher prioriti trap servic delay send correspond index output port control unit control unit charg drive execut flow processor explain earlier model use sever inputoutput line accord input receiv issu differ output activ differ circuit defin previous show part behavior specif inputoutput set includ size detail found model ucexternalfunct const externalmessag msg els thispassiv els if msgport dtack els if msgport cclogic els string portnam int portnum namenum msgportnam portnam portnum portnam ir els return thi model ucinternalfunct const internalmessag return thi model ucoutputfunct const internalmessag msg see c_en line must activ read instruct regist decod instruct els els see branch els transmit output return thi figur control unit transit function see model activ occurr clock tick case check control unit wait result come memori waitfmc case noth model passiv otherwis regist clock tick finish extern input correspond signal dtack come memori cclogic that is input arriv regist also recogn input instruct regist to store new instruct execut psr to updat condit code intern transit function record address strobe up wait end memori transfer main task control unit execut output function see descript present input valu queri depend number clock tick instruct cycl differ output line activ digit logic level abstract level sever model detail let student analyz digit logic level circuit previou stage behavior circuit defin use atom mod el case model built use atom model repres basic boolean gate and or not xor model describ previou section use compon integr use digit logic coupl model repres complet circuit replac old atom one modif also done cours assign show extens modifi alfa two model implement way explain follow cmp model cmp part address unit detect address fall program boundari model receiv two input through line opa opb connect base limit regist result return signal eq valu equal lwif lower b figur sketch address unit model compos sever onebit compar coupl n gener nbit compara tor follow figur show basic compon build block figur onebit compar model formal describ by select atom defin correspond build block present previous section and_n_ self self and_n_ self not_n_ and_n_ xor_n zij built use i describ earlier definit coupl model use cd present follow figur opan opbn figur cmp coupl model first defin compon coupl model correspond set then inputoutput port includ which relat xy set defin earlier final link show model influence which defin translat function select function implicitli defin order definit model compon chip selector chip selector cs circuit devot determin address two other model receiv bit address address strobe as return boolean valu tell address boundari mask model provid two bit set max mask min mask contain boundari address compar model defin origin latch redefin use boolean gate input address chip selector check use two compar instanc model defin previou section figur sketch chip selector result obtain transmit port lw eq compar output ore first regist as interest see cmp max after lw output second regist invert as interest see cmp b min circuit enabl result obtain transmit compon masmaxma masminma cmpacmp cmpbcmp andand andand oror notnot link atop opacmpa atop opacmpb link atop opacmpa atop opacmpb link outmasmax opbcmpa outmasmin opbcmpb link outmasmax opbcmpa outmasmin opbcmpb link outmasmax opbcmpa outmasmin opbcmpb link inaand link eqcmpa inaor lwcmpa inbor link outor inaand outnot inband link outand inband link outand cstop figur cs coupl model simul result present section show result obtain model previous present simu late first case show result valu increment incdec model figur show model input timestamp output valu obtain first step consist give initi valu circuit in zero default first event gener output model phase chang prepar time circuit time unit occur second input gener chang model output issu simul time new input insert port op valu chang output gener simul time follow input regist circuit keep present state last one increment valu regist insert valu fcod port increment valu seen time unit after input output figur input output incdec model follow exampl show execut regglob model differ input instant c enabl line activ allow write oper regist case regist select csel csel csel number xffffffff use input ter regist select csel csel number x input cincincincin cin first valu store regist second regist input output reset figur inputsoutput regglob c enabl deactiv therefor follow oper devot read regist see valu regist sent output asel regist sent b bsel result valu previous load transmit that is xffffffff a x b after reset activ now tri read regist obtain valu x next test correspond traplog model see result obtain turn trap bit due thi expect obtain index highest prioriti trap pend result obtain delay time correspond highest one section data store error whose code result obtain also trap found flag turn on inst_acc_excep illeg_inst priv_inst win_ov win_und addr_not_align data_acc_excep inst_acc_err data_acc_err div_zero data_st_err trap_inst figur execut result traplog model final show two execut exampl part complet program exampl execut pentium processor mhz use linux version cd averag perform model one instruct per second sourc code translat binari use gnu masm assembl linker execut use initi memori imag simul first part follow figur show part program written assembl languag second part present binari code gener togeth address instruct data one word each set x r st r dest sth r dest sth r dest stb r dest stb r dest stb r dest stb r dest unimp initi imag addr memori imag final imag addr memori imag load regist x store dest variabl store high halfword store last byte interpret store regist address store high part reg address store high part reg address store high byte reg address store high byte reg address store high byte reg address store high byte reg address unimp dest variabl space charactervalu figur store valu memori see piec code copi part number x certain memori address show translat binari code base specif instruct set sparc processor final show memori imag program execut see valu store memori follow instruct defin execut code follow exampl show execut part anoth program see goal place given address shift valu left store result follow address cycl repeat time set r cycl sll r r r stb r rdest subcc r r bne cycl inc r delay slot unimp initi imag addr memori imag final imag load regist shift valu store result repeat cycl interpret valu number time r variabl dest time set take regist shift store r store address substract r rel jump address word increment unimp destin variabl valu x shift time figur shift store result memori basic behavior simul comput verifi thorough integr test attack explain earlier circuit defin togeth set inputoutput valu encapsul experiment framework model test oper instruct set check procedur develop use verif facil dev defin test case mechan consist creat experiment framework execut instruct instruct set execut result store memori memori dump execut obtain memori state execut valu check valu obtain program execut real architectur includ test experiment framework procedur allow us find error deriv coupl model instanc could see divis instruct work properli gener test includ follow sentenc set r store valu regist set r second valu store regist valu divid store r st r dest result store memori unimp valu ascii valu dest word ffffffff result test figur test routin udiv instruct exampl execut test coupl model found error field type expect found dif case destin store valu divid instead found valu allow us see one instruct unexpect behavior way could find error instruct could fix also found error addit instruct condit jump predict final show part execut simul exampl present figur show log file includ messag interchang modul dev framework four kind messag use signal state chang due intern event x use extern event arriv the model output done indic model finish task messag initi correspond model messag show type timestamp valu ori gindestin port use transmiss messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag x messag x messag x messag x messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag x messag messag messag messag messag messag messag messag messag messag messag messag messag root top top mem top bu top csmem top cpu top c top dpc mem top bu top top cpu ir cpu pc_add cpu pc_mux initi higher level compon memori bu cs etc model repli next schedul event cpu initi compon root top top cpu cpu npc take npc cpu pc_latch send pcinc pc_inc increment pc_latch valu schedul activ cpu pcinc model root top top cpu cpu pc cpu initi address pc cpu root top top cpu cpu clock clock tick clock clck cpu clock cpu clck cu root top top cpu arriv cu cpu cu activ compon cu cpu messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag messag x messag x messag x messag x messag x messag x messag cu cpu root top top cpu cpu pc_latch cpu root top top cpu cpu pc_inc updat npc cpu root top top mem memori return first instr mem dtack top mem top figur log file simpl routin execut cycl start initi higher level model memori cpu etc messag arriv cpu model sent lower level compon instruct regist pc adder pc multiplex control unit etc initi cycl finish immin model execut case npc model acti vate transmit address next instruct see nd th bit return valu mean npc valu as see figur program start address valu sent pcinc model charg ad regist updat finish activ time model schedul use circuit delay moment valu ad npc obtain rd th bit re re is next pc after pc activ valu that is obtain initi address program follow event arriv clock tick sent processor cpu schedul next tick in time unit transmit signal control unit activ sever compon amux alu addrmux iretc final see simul time memori return first instruct compar result bit configur address instruct sent cpu store instruct regist follow execut rest instruct cycl complet way abl follow execut flow program analyz log file simplifi analysi result built set script use tk let student choos compon consid way behavior subcompon follow easili student analyz behavior desir subsystem detail conclus present use dev simul simpl comput model base architectur sparc processor includ featur exist simpler cpu tool use comput organ cours analyz understand basic behavior differ level comput system interact level studi experiment evalu system done use dev allow us reusabl model in case boolean gate compar multiplex er latch etc dev also allow us provid reusabl code differ configur provid differ machin one run digit logic level instruct set differ perform case depend educ need concept intern transit function use improv definit time properti compon let defin complex synchron mechan nevertheless case time delay repres simpl in putoutput relat met goal propos alfa public domain develop use cd which also public domain built use gnu c therefor toolkit avail use exist comput organ cours describ sever level architectur from digit logic level instruct set assembl languag level also attack use public domain assembl gener execut code could run alfa easili extend compon for instanc includ cach memori includ first version also modifi exist compon implement instanc digit logic version cir cuit thorough test could done use approach base construct experiment framework associ test function experiment framework also built final integr model import achiev relat educ goal whole project design detail assign rd year discret event simul cours model formal specifi specif use student comput organ cours build final version architectur student taken previou prerequisit cours program knowledg student abl build compon present final integr plan group undergradu teach assist which also develop control unit coupl model repres whole architectur show figur individu integr test also done nd year student sever modif show develop cours assign fact show feasibl approach pedagog point view upper level cours report higher success rate detail knowledg subject use alfa tool obtain httpwwwscecarletoncawainerusenix differ experi attack use toolkit assembl languag level student use exist assembl build execut run simul complet analysi execut flow instruct level achiev trace execut log file student studi flow program instruct detail start memori imag execut instruct cycl signal flow datapath easili inspect go deeper see behavior circuit implement digit logic level extend chang exist instruct implement chang control unit student experi design instruct set allow practic instruct en code relat instruct definit underli architectur student also includ new compon as show cach memori exampl chang exist one implement use digit logic hierarch natur dev provid mean go deeper hierarchi instanc logic gate could implement defin transistor level which implement version plan build assembl linker code gener provid gnu sparc plattform execut straightforward nevertheless implement assembl linker interest assign face complet layer view appli cours also debugg alfa architectur could built make easier studi assembl languag level present alfa extend defin compon inputoutput subsystem sever in putoutput devic interfac dma control simul differ transfer techniqu poll interrupt dma consid likewis implement differ cach manag algorithm finish task face present includ definit graphic interfac enhanc use toolkit set script mention section use gather result simul use input display graphic way way studi analysi differ subsystem improv acknowledg want thank anonym refere detail comment made articl also thank prof trevor pearc sce carleton univers help final version sergio zlotnik collabor earli stage project present earlier research partial fund usenix foundat ubacyt project jw develop gabriel wainer assist professor comput scienc dept universidad de bueno air argentina r comput architectur quantit approach comput organ design hardwaresoftwar interfac comput organ architectur comput system design architectur structur comput organ the simplescalar tool set version an interact environ teach comput architectur note p assembl languag assembl an extens simul intel x processor famili the mp comput system simul the provir virtual processor perform simul alpha microprocessor talisman fast accur multicomput simul a blockori network simul bone improv parallel architectur simul sharedmemori multiprocessor experi simul declar multiprocessor microprocessor architectur design atla design effici simul use maisi harman t master simulink acsl refer manual compani modsim ii languag objectori program simscript simul program languag simul model design execut hardwar descript languag concept principl the verilog hardwar descript languag system engin sdl alfa simul comput educ tool comput organ crap emul sparc processor an emul atari processor objectori simul hierarch modular model dev theori quantiz new extens cd tool tr objectori simul hierarch modular model intellig agent endomorph system structur comput organ rd ed introduct simul gpss improv parallel architectur simul sharedmemori multiprocessor executiondriven simul multiprocessor talisman smprof comput organ architectur th ed interact environ teach comput architectur use simo machin simul studi complex comput system simplescalar tool set version perform depend evalu scalabl massiv parallel comput system conjoint simul iter design effici simul use maisi gdev hardwar descript languag comput system design architectur simul model design execut master simulink comput architectur quantit approach verilog hardwar descript languag theori model simul perform simul alpha microprocessor microprocessor architectur design atla augmint multiprocessor simul toolkit intel x architectur experi simul declar multiprocessor use dev paradigm implement simul processor document chip comput system version proteu highperform parallelarchitectur simul mp comput system simul