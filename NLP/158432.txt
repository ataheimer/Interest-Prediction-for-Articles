t visual execut model ada task a visual execut model ada task help programm attain deeper understand task semant illustr subtleti semant definit appar natur languag design describ contour model ada task depict asynchron task thread control relationship environ task execut manner task interact use highlevel execut model make possibl see happen execut program paper provid introduct contour model ada task demonstr use b introduct ada program languag intend use realtim applic flight navig process control softwar reason task figur promin languag design semant task howev extrem complex time task provid flexibl control requir implement realtim embed softwar undoubtedli difficult ada languag featur understand learn use effect paper describ visual execut model design help softwar practition attain deeper understand semant ada task deriv johnston contour model blockstructur languag model help programm visual effect execut task statement illustr subtleti semant task appar copyright c acm inc permiss copi distribut document herebi grant provid notic retain copi copi alter acm credit materi use form copyright polici standard natur languag descript ada motiv nuanc definit task primit ada languag refer manual alrm definit refer ada languag featur includ task varieti ada languag text book eg describ languag tutori format least one special ada task descript howev lack concret purpos vagu allow variat languag impl mentat textual descript typic group languag construct accord gener featur eg declar statement subprogram packag except handl task combin inform explan exampl program fragment descript tend incomplet ambigu moreov style present obscur subtleti interact differ languag featur make difficult recogn inconsist among definit separ languag featur exist ada issu hundr request clarif task semant alon attest inadequaci natur languag descript formal semant specif base axiomat denot techniqu address mani shortcom natur languag descript use rigor mathemat notat result specif precis unambigu analyz consist complet ness howev also result highli abstract mathemat specif ordinari programm may find difficult understand notat chosen mathemat properti visual clariti typic littl help visual execut program moreov axiomat denot specif poorli suit describ program termin oper system process control system functionbas semant techniqu nontermin program equival trivial program true null endwhil found johnston contour model effect teach semant blockstructur languag model employ data structur diagram depict program state execut program repres visual seri evolv diagram johnston model use natur simpl data structur easili interpret programm autom version model suppli visual semant algol program model also form basi textbook program languag structur descript multitask pl contour model use illustr clarifi semant paramet pass paper axiomat semant section give brief overview ada task section present program calcul prime number illustr use major task fea ture give overview contour model section illustr concept introduc overview concret next two section use exampl program section section show encod program collect nest contour diagram section describ particular program execut compar model johnston model common stackbas execut model section final discuss conclus futur work section task ada restrict attent subset ada order focu parallel execut task particular consid packag gener except handl larg independ task anyway work discuss semant ada task requir understand distinct scope unit declar region defin program runtim instanc scope unit static portion program text block function procedur task encapsul comput local data requir comput virtual blockstructur program languag make use block function procedur therefor limit discuss construct relationship task case task task type determin task interfac comput declar task type consist specif bodi specif defin set entri call within scope unit establish rendezv task type bodi consist declar part sequenc statement execut task type accept statement within bodi defin remot procedur task type execut respons call entri discuss semant task execut includ call accept statement detail below instanc scope unit program dynam object that unlik scope unit themselv exist runtim execut program begin singl thread control creat instanc top level procedur execut bodi execut bodi scope unit thread control may creat new instanc procedur function block statement spawn new thread control execut instanc task type task instanc exist point execut program root instanc main procedur determin activ thread control point view top level procedur defin special root task type entri permit us identifi thread control task instanc instanc task type creat one two way elabor task declar evalu task alloc express form new tt tt design task type call design type latter case task alloc return access pointer valu design new task instanc task instanc said belong collect task instanc associ correspond access type refer instanc task type elabor creat elabor object declar alloc creat task alloc classif task instanc elabor alloc affect manner synchron instanc creation termin describ below instanc given scope unit perform comput referenc environ bind identifi program object may differ instanc instanc lifetim instanc may disjoint instanc nonrecurs invok procedur onc may overlap instanc spawn sever task task type execut instanc p caus creation instanc i refer p parent child p variou point execut program instanc pre cise thread control execut instanc may wait occurr certain event order make progress instanc said block point exampl instanc issu entri call block task instanc own entri accept call execut rendezv instanc task type regard pass sever differ phase lifetim distinguish five phase refer task instanc activ run complet termin abnorm depend phase in instanc task type begin activ creat first phase lifetim task instanc consist elabor declar part activ instanc normal begin run roughli correspond execut sequenc statement appear bodi task type instanc becom complet upon finish execut task bodi complet instanc perform process simpli wait termin instanc block readi execut first three phase final phase lifetim task instanc begin termin semant termin ada ensur implement dealloc local data associ instanc block function procedur task upon termin it lifetim task instanc howev extend past termin instanc interrog attribut associ task instanc invok entri regard lifetim task instanc elabor end execut leav instanc lifetim task instanc alloc end execut leav scope associ access type coincid dealloc collect contain instanc normal circumst therefor task instanc progress four phase activ run algorithm alrm requir instanc pass complet phase instanc may temporarili block termin also talk leav function procedur block rather termin them view leav instanc equival termin it complet termin lifetim begin creation end dealloc sometim termin except normal progress occur instanc explicitli abort concurr task instanc abort task instanc activ run caus enter abnorm phase task instanc abnorm may continu execut statement reach next synchron point point must complet instanc task type alreadi complet termin abort effect ada semant requir instanc task type synchron parent begin end is activ task instanc elabor block immedi upon creat parent continu elabor declar part parent block finish elabor time child instanc elabor unblock begin activ parallel parent remain block last child instanc finish activ point parent unblock task instanc alloc synchron parent slightli differ fashion alloc instanc block upon creation begin activ immedi part evalu alloc parent alloc instanc block call task alloc instanc finish activ rule determin instanc termin make use certain master depend relat instanc task type depend one concurr instanc collect refer master alrm defin direct depend elabor instanc task type instanc parent alloc instanc task type instanc elabor declar associ access type could parent could instanc global scope unit direct depend identifi direct master task instanc depend indirect alrm defin indirect depend task instanc instanc dynam chain revers call chain one task instanc master task instanc master one task instanc master depend instanc may need access instanc local data execut may logic constitut part algorithm thu alrm extend notion complet arbitrari scope unit instanc complet upon finish execut bodi stipul instanc complet cannot termin depend termin rule ensur implement safe dealloc data associ instanc upon termin it alrm state that instanc declar access type collect associ access type dealloc instanc termin case rule termin also guarante task instanc collect termin prior dealloc although instanc may commun share environ prefer method synchron commun rendezv entri associ task instanc ada instanc request rendezv call entri belong concurr task instanc entri call semant remot procedur call caller block task instanc own entri accept call execut accept statement design entri accept statement specifi mode type formal paramet sequenc statement null call instanc execut behalf caller rendezv finish caller resum execut statement follow call entri call asynchron multipl thread control situat ada semant requir call instanc servic entri call firstcomefirstserv basi implement must therefor provid entri queue place caller call accept instanc execut accept statement block call pend entri breviti restrict attent paper singl version ada select statement select wait statement termin altern version select statement allow instanc select accept call one set entri or condit describ below ter minat sequel therefor assum one branch select statement design potenti accept altern one distinguish branch design termin altern context sequenc statement begin accept statement constitut accept altern termin altern consist singl termin statement accept altern termin altern may also preced boolean guard determin altern candid execut first step execut select statement consist evalu guard determin set open altern consist altern guard altern whose guard satisfi treat absenc open altern runtim error instanc execut select statement nondeterminist select open altern also passabl execut it passabl altern instanc block open altern becom passabl and upon unblock select one open passabl altern execut accept altern passabl caller wait rendezv entri name accept statement begin accept altern thu lead accept statement passabl accept altern nonblock termin altern passabl instanc execut select statement depend master complet everi depend master either termin block open termin altern condit ensur caller wait engag rendezv instanc thu ada execut select statement open altern rais except treatment consist semant propag except termin altern select statement pass select statement passabl accept altern say master asleep complet depend either termin open termin altern asleep stabl sens sleep master remain asleep termin master depend finish execut algorithm wait termin alrm state execut termin altern one depend sleep master result termin depend prefer howev view execut passabl termin altern complet depend ultim complet depend effect termin requir us treat distribut termin special case depend termin usual orderli fashion start bottom depend hierarchi work upward sleep master abort statement ada allow instanc abort concurr task instanc abort task instanc caus depend either complet becom abnorm unless alreadi complet termin abnorm task instanc complet reach next synchron point cannot engag rendezv exampl task program exampl program illustr major task featur ada program implement algorithm gener prime number use dynam creat pipelin checker task instanc instanc stage n pipelin check number rel prime nth prime send number pass check instanc stage posit number fed pipelin order thu number move pipelin either fail check reach end pipelin number pass rel prime check final stage pipelin accept prime result new stage ad pipelin procedur prime implement algorithm statement label p p etc use refer below part program readabl show procedur task bodi separ p procedur prime p task fdr feed pipelin check valu p entri get numnum integ divis num terminolog borrow definit howev requir master complet p entri chk itval integ p end chkr type chkr ptr access chkr p procedur make chkrnew pri integ new chkr chkr ptr creat new chkr check rel prime new pri p front chkr ptr front pipelin procedur task bodi shown separ static task fdr declar prime feed pipelin posit num ber requir singl instanc task declar fdr directli without first introduc task type howev direct declar fdr equival first declar anonym task type declar singl object type pipelin compos task instanc type chkr creat dynam procedur make chkr instanc type chkr receiv prime number use get num entri receiv number check rel prime chk entri access type chkr ptr provid valu design instanc type chkr collect associ chkr ptr contain instanc type chkr front design first task instanc pipelin instanc type chkr contain chkr ptr variabl link next task instanc pipelin show procedur task bodi below simplic assum primit oper call get put perform input output procedur make chkrnew pri integ new chkr chkr ptr new chkr new chkr make new chkr task new chkrget numnew pri tell task number print prime number f task bodi fdr f max integ maximum prime test gener first prime f ctr max loop feed pipelin c task bodi chkr c num new val integ c nxt chkr chkr ptr c begin c accept get numnum integ c num num c loop select c accept chk itval integ c c nxt chkr null pass new valu els prime c end if section show contour model describ particular execut program first howev give brief overview model itself overview contour model contour model defin simpl interpret gener sequenc snapshot repres progress comput seri instantan machin state everi sequenc snapshot gener initi snapshot given program given set input describ potenti execut program interpret nondeterminist sens produc differ snapshot sequenc program set input model nondetermin program snapshot consist algorithm remain fix throughout exe cution record execut chang dynam algorithm represent ada program consist collect algorithm contour repres scope unit program algorithm contour scope unit u contain declar array describ local data requir instanc u flow chartlik network instruct defin comput instanc u perform successor link design algorithm contour scope unit lexic enclos u algorithm encod inform requir execut program execut affect algorithm therefor snapshot record execut describ content memori cell regist consist collect execut contour repres instanc scope unit exist point execut collect processor depict activ thread control execut contour c scope unit u contain data array store cs local data successor link interpret use declar array within algorithm contour u templat gener data array c successor link also call static link design execut contour instanc defin global referenc environ c thu instanc find local data execut contour global data execut contour static chain form follow static link processor abstract hardwar cpu associ processor task instanc program includ root instanc toplevel procedur processor associ state indic current phase instanc lifetim valu act run com term abn repres activ run complet termin abnorm phase respect variou compon processor encod inform requir execut task instanc particular instruct pointer describ instanc locu control environ pointer determin referenc environ express stack provid temporari storag intermedi valu valu actual paramet execut statu indic instanc block elig execut describ addit compon use primarili task manag section identifi scope unit algorithm contour instanc scope unit execut contour task instanc processor below machin cycl contour model interpret consist nondeterminist select processor among processor current snapshot block termin fetch instruct design processor instruct pointer updat processor instruct pointer refer next instruct algorithm execut fetch instruct produc new snapshot processor select particular machin cycl said execut contour model inform structur model such use storag cell repres unit memori abstract machin storag cell two import featur may contain number compon compon may refer storag cell concept storag cell use give precis specif contour model similar describ describ contour model level manipul individu storag cell paper instead use diagram describ snapshot higher level abstract explain execut instruct transform diagram snapshot contain two main contour diagram correspond algorithm record execut sever addit diagram show inform associ processor describ environ program execut algorithm program remain constant howev adopt johnston convent present algorithm separ diagram omit individu snapshot diagram next two section illustr concept concret highlight import aspect model describ algorithm prime section record execut simul particular execut prime section algorithm prime contour diagram figur express prime program section algorithm figur illustr notat convent use throughout exampl attach lowercas ital label contour instruct box refer purpos label part algorithm show explicit successor link contour instead repres successor link implicitli nest contour thu nest algorithm contour mirror nest scope unit program declar array contour shown upper left hand corner write contour model instruct lowercas program name identifi uppercas describ below contour model may extend scope unit certain implicit declar choos name begin percent sign eg ret fdr implicitli declar data arrow connect instruct box describ control flow outermost contour prime figur repres toplevel procedur prime regard direct declar fdr implicitli declar task type call fdr declar fdr type thu declar part prime determin six declar repres six row declar array contour prime row declar array specifi name declar object give descript tag tabl figur figur prime make chkr chkr fdr return put new pri ecal new chkrget num activ new chkr chkrchkr ptr creat new chkr acc int task enter task enter termin task complet null activ fdr elabor task enter fdr chkr chkr ptr front acc fg proc enter figur algorithm contour prime r gammapsi oe fdr termin exit int int ctr int ecal compar enter max call make chkrfront get max activ elabor task enter int figur algorithm contour fdr r gammapsi phi c c chk get num chkr int rend exit rend enter chk select truec truec loop rend enter get num accept get num activ elabor task enter numnum rend exit num int num int int termin call make chkr ecal nxt chkrchk compar compar figur algorithm contour chkr tag associ object acc access object atyp access type int integ lab label proc procedur ttype task type figur descript tag use prime exampl figur summar mean tag appear exampl declar array also contain inform requir initi data object shown row fdr fdr chkr make chkr instruct pp describ algorithm perform prime everi algorithm begin enter instruct case top level proce dure use task enter instruct enter scope task type elabor instruct p elabor declar array prime elabor instruct argument abbrevi seri elabor instruct one row declar array enclos algorithm contour activ instruct p activ instanc fdr remain instruct algorithm prime correspond execut bodi prime p complet instanc prime p and final termin instanc prime p contour make chkr repres procedur make chkr john ston model extend procedur implicit formal input param eter call ret use label transfer control back caller first row declar array make chkr repres implicit declar ret last two row repres declar formal paramet new pri new chkr appear specif make chkr row repres formal paramet declar specifi paramet pass mode algorithm make chkr begin proc enter instruct enter scope procedur m requir elabor instruct declar part make chkr empti next four instruct model statement bodi make chkr creat instruct m creat new task instanc type chkr collect associ chkr ptr assign refer new instanc new chkr instruct m activ new instanc instruct implement entri call statement output statement bodi make chkr algorithm make chkr requir complet instruct sinc pi run task inform block depend io entri readi snapshot initi snapshot make chkr depend henc final instruct return control caller figur show algorithm contour fdr chkr contour figur actual nest within contour prime figur shown separ readabl algorithm requir end activ instruct signal parent child instanc done activ forloop bodi fdr produc forblock repres contour figur forblock contain three local data object loop paramet two implicit paramet use initi loop paramet determin loop left contour get num chk figur repres accept statement bodi chkr refer contour rendezvousblock rend exit instruct termin rendezv leav rendezvousblock select instruct c model select statement bodi chkr select wait altern produc pair argument specifi associ guard flow control execut algorithm prime snapshot show initi record execut program prime contain singl processor denot greek symbol pi subscript processor provid uniqu name use notat conveni identifi processor superscript give state horizont arrow processor repres instruct pointer bent arrow repres environ pointer null dash box left processor show program input top left box output bottom left box direct depend middl box task inform block right box identifi entri queue associ task top half task inform block execut statu bottom half exampl execut hypothes singl input valu initi output direct depend task instanc pri entri readi execut snapshot show record execut produc snapshot execut task enter instruct p elabor instruct p comput prime task enter instruct alloc initi execut contour prime move execut processor new contour elabor instruct assign initi valu local data new contour describ below contour creat task enter instruct defin base contour execut processor convent use name processor label base contour data array shown upper left corner execut contour interpret copi program name first column data array declar array algorithm contour part initi new execut contour initi static link new contour environ pointer execut processor thu referenc environ execut processor determin global environ new instanc interpret set environ pointer execut processor refer new contour complet execut task enter instruct interpret next execut elabor instruct p elabor row declar array prime elabor row fdr initi valu task type fdr data array contour pri task type ada local constant implicit initi valu valu task type identifi comput global environ requir comput name entri declar task type first two compon valu task type form complet label bind first instruct algorithm task type environ execut interpret complet instruct pointer given declar array algorithm contour bind environ pointer execut processor copi set entri name declar task type declar array obtain fact contour model extend processor special compon describ inform shown depend diagram task inform block display inform separ diagram help organ snapshot make easier read also use complet label repres procedur valu even though full gener complet label actual need repres either task type procedur valu ada permit assign procedur task type allow pass paramet environ pointer complet label repres procedur task type alway refer execut contour found use complet label instead simpl instruct pointer gener consist johnston model prifdrtask inform block depend io entri readi entri act pi run r f get num chk g null front chkr ptr chkr fdr snapshot processor pri execut instruct p p code indic act task instanc activ design children com task instanc complet await termin design depend cre task instanc creat wait activ ecal task instanc wait design entri queue call accept rend task instanc rendezv design task sacc task instanc selectaccept statement design altern open figur blockedwait code initi valu task type elabor row fdr creat initi new processor assign fdr pointer new processor interpret use label associ task type initi instruct pointer environ pointer new processor creat task inform block contain entri queue need new task instanc interpret start new processor activ state block it sinc activ new instanc must await elabor parent circl processor block maintain inform condit upon block bottom half task inform block figur summar blockedwait code use purpos upon creat new processor interpret must also establish depend new processor direct master environ pointer execut processor design direct master task instanc elabor final pointer new processor assign fdr use broken arrow repres task valu elabor remain row declar array prime straightforward elabor row chkr associ complet label set entri name chkr describ abov elabor row chkr ptr assign empti collect set chkr task chkr ptr elabor row make chkr creat complet label associ make chkr final elabor row front assign front null access valu default initi valu access object ada snapshot depict two independ thread control repres processor pri fdr nevertheless execut must continu pri fdr block snapshot show result execut activ instruct p block execut processor unblock proce prifdrtask inform block depend io entri entri readi act pi run r f get num chk g null front chkr ptr chkr fdr snapshot processor pri execut instruct p sor design argument thu fdr readi execut pri block task inform block pri associ act block wait code activationwait set pri identifi task must finish activ block processor proceed comput processor fdr processor readi execut next three machin cycl execut instruct f f produc snapshot task enter instruct f creat base contour fdr updat environ pointer execut processor elabor instruct f elabor row max declar array fdr effect max initi valu final end activ instruct f chang state execut processor activ run remov processor activationwait set associ parent produc empti activationwait set interpret also unblock parent snapshot present show convent govern placement contour processor symbol enhanc visual util diagram particular nest execut contour directli insid contour design static link place processor symbol immedi within contour referenc environ pointer convent impli referenc environ processor determin visual processor access data execut contour enclos processor cannot see data nonenclos contour thu static chain processor consist contour enclos processor symbol begin innermost enclos contour move outward enclos contour convent also elimin need explicit static link environ pointer therefor omit subsequ diagram either processor pri fdr select execut snapshot assum interpret select pri execut next two machin cycl produc snapshot execut complet instruct task complet execut processor base contour shown snapshot complet processor chang state complet execut contour attach superscript com contour name depend diagram complet instruct also block execut processor if case pri contour complet depend yet termin next machin cycl interpret select processor fdr snapshot show record execut produc execut instruct f f m get instruct f assign first input valu variabl max remov input valu input diagram call instruct f first push data requir call procedur valu actual input state processor chang execut complet instruct procedur block fdrtask inform block depend io entri readi entri readi fget num chk itg fg null front chkr ptr chkr fdr pi run r pi run r snapshot processor fdr execut instruct f pri comfdrtask inform block depend io entri com entri readi fget num chk itg fg null front chkr ptr chkr fdr pi com pi run snapshot processor pri execut instruct p p task inform block depend io entri com entri readi fget num chk itg fg null front chkr ptr chkr fdr pi com pi run prifront snapshot execut instruct paramet refer actual output paramet return label etc onto express stack execut processor retriev label valu associ procedur transfer control label assign instruct pointer environ pointer label instruct pointer environ pointer execut processor effect move processor global environ contour pri requir new procedur instanc transfer control proc enter instruct algorithm procedur proc enter instruct like task enter instruct alloc initi new execut contour move processor new contour howev proc enter instruct also transmit paramet valu push onto express stack execut processor call instruct assign default initi valu paramet requir eg second compon new chkr first compon new chkr illustr notat design refer cell within data array prifront denot cell front contour pri contour creat proc enter instruct base contour construct new label it point fdr processor readi execut snapshot show result execut instruct m m simul call task alloc creat instruct m creat initi new processor task type chkr add new processor collect associ chkr ptr assign new chkr refer new processor repres solid arrow point processor sym bol initi processor chkr follow step outlin abov discuss initi processor fdr time howev new task instanc requir two entri queue one queu task call get num entri queu task call chk entri entri queue maintain order list processor name addit direct master alloc task instanc contour elabor access type chkr ptr activ instruct m block execut processor unblock processor design new chkr produc snapshot snapshot interpret gone execut task enter instruct c elabor instruct c end activ instruct c processor chkr fdr readi execut assum interpret select processor fdr execut ecal instruct next machin cycl produc snapshot like call instruct ecal instruct first push data requir accept statement the remot procedur onto express stack execut processor howev place execut processor design entri queue block processor ecal blockedwait code note entri queue processor suspend besid blockedwait code also extend task inform block stack diagram case express stack processor nonempti thu get numhi readi fget num chk itg fg null front chkr ptr chkr fdr pi com pi run prifront act snapshot processor fdr execut instruct m readi get numhi readi fget num chk itg fg null front chkr ptr chkr fdr pi com pi run prifront pi run null num snapshot processor chkr execut instruct c c c ecal chkrget num get numhfdri readi fget num chk itg fg null front chkr ptr chkr fdr pi com pi run prifront pi run null num snapshot processor fdr execut instruct stack diagram task inform block fdr show valu pass rendezv get num show rendezv progress processor fdr chkr snapshot snapshot obtain select processor chkr next three machin cycl execut instruct cc accept instruct c check entri queue associ get num case presenc processor entri queue show call pend entri chkr block execut rend enter instruct c proce follow interpret first creat new contour get num move processor new contour execut proc enter instruct remov processor fdr entri queue associ get num retriev valu formal input paramet num express stack fdr updat block wait statu processor fdr final instruct c assign current valu num num produc snapshot point assum interpret select processor chkr three machin cycl execut instruct cc select processor fdr four machin cycl execut instruct m m ff snapshot show result record execut rend exit instruct c dealloc contour get num creat rendezv move processor chkr contour chkr held dealloc contour unblock processor fdr engag rendezv processor chkr select instruct c block processor chkr sacc blockedwait code associ selectwait set processor although select wait altern repres argument select instruct open the guard trivial satisfi neither altern passabl accept altern cannot pass call pend chk termin altern cannot pass master chkr asleep selectwait set encod inform open select wait altern need complet execut select statement first element selectwait set chkr indic presenc open accept altern instruct c begin accept statement entri chk it second element signal presenc open termin altern instruct c next instruct processor chkr execut known point depend open altern becom passabl reflect uncertainti snapshot list statement processor may next execut besid instruct pointer execut processor fdr commenc put instruct m output diagram show valu print instruct return instruct simul return procedur call interpret first copi valu new chkr back locat prifront use label store ret reset instruct pointer environ pointer execut processor dealloc contour make enter get numhi readi fget num chk itg fg null front chkr ptr chkr fdr pi com pi run prifront null get pi run snapshot processor chkr execut instruct c c c readi get numhi fget num chk itg fg front chkr ptr chkr fdr pi com fdrctr pi run pi run null snapshot processor chkr execut instruct c c c processor fdr execut instruct m m f f instruct f produc contour for move execut processor new contour pass valu x lim instruct f assign valu x ctr compar instruct f transfer control instruct f snapshot show record execut produc execut ecal instruct f fdr describ abov interpret push valu formal input paramet express stack execut processor place processor design entri queue block processor time howev sinc task inform block call processor chkr indic chkr wate accept call chk it interpret updat chkr instruct pointer unblock it illustr main task featur model speed execut snapshot show processor fdr pass number processor chkr rendezv chk it complet anoth iter forloop call frontchk it time check processor chkr test rel prime call make chkr creat new chkr task processor chkr creat execut new chkr task activ execut accept instruct c block chkr shown snapshot treat accept statement select statement two altern unguard accept altern termin altern guard fals ensu rendezv chkr chkr get num entri assign cell num contour chkr rendezv complet processor chkr output new prime number return call make chkr return instruct copi valu new chkr cell nxt chkr contour chkr next snapshot show effect pass first pipelin number fail check rel prime pass check rel prime result creation new instanc chkr task similar snapshot construct show result pass number pipelin fail rel prime check first stage pipelin pass check three stage add new chkr task snapshot show record execut produc fdr feed chkr pass chkr fdr feed chkr exit forblock termin exit instruct f dealloc contour for move processor enclos contour fdr termin instruct f dealloc processor fdr base contour chang state processor termin note dealloc processor front still design task albeit termin one thu task may call entri belong termin task evalu attribut eg termin attribut also place superscript term name termin processor depend diagram make evid depend pri must termin omega omega omega oe task inform block depend io entri entri ecal get numhi readi fget num chk itg fg front chkr ptr chkr fdr pi com fdrctr pi run pi run null snapshot processor fdr execut instruct f chkr task inform block depend io entri entri ecal get numhi readi chkr get numhi fget num chk itg fg front chkr ptr chkr fdr pi com fdrctr pi run make pi run chkrnxt chkr null chkr pi run chkr null num snapshot processor chkr execut instruct cc c c c mm processor chkr execut instruct c c c c processor fdr execut instruct f f f chkr pri com entri com entri readi readi get numhi chkr readi get numhi chkr readi get numhi fget num chk itg fg front chkr ptr chkr fdr fdrctr pi run pi run chkr num chkr pi run chkr num chkr pi run num pi com snapshot result pass pipelin chkr chkr pri com entri com entri readi get numhi chkr readi get numhi chkr readi get numhi chkr readi get numhi fget num chk itg fg front chkr ptr chkr fdr pi run num chkr pi run chkr num chkr pi run chkr num chkr pi run num pi com snapshot fdr termin pipelin unblock pipelin consist four stage front design processor implement first stage pipelin processor implement remain stage found follow refer nxt chkr cell valu num base contour processor determin prime use processor rel prime check valu new val show next number processor check or processor complet check yet receiv request anoth check last number check snapshot show pipelin two number check concurr first stage check rel prime second stage check rel prime fail prime check execut continu add addit stage pipelin four chkr task eventu execut select instruct c snapshot show chkr chkr chkr execut select instruct chkr execut select instruct first three processor execut select instruct block accept altern passabl master asleep obtain snapshot execut select instruct c chkr termin instruct chkr task instanc time master pri put sleep execut select instruct interpret therefor updat instruct pointer block depend execut processor refer termin instruct unblock chkr chkr chkr termin instruct dealloc base contour chkr task instanc chang state pro cessor last chkr task instanc termin interpret unblock pri final pri execut termin instruct produc snapshot dealloc contour dealloc elabor task alloc task collect contain exampl therefor processor fdr chkr chkr chkr chkr dealloc part dealloc contour pri complet sampl execut program prime relationship inform structur model section highlight main differ contour model ada task describ johnston contour model block structur languag discuss relationship model stackbas execut model johnston contour model berri clarif model omega omega omega omega oe hy phi phi phi phi phichkr chkr chkr pri com entri com entri get numhi chkr readi get numhi chkr get numhi chkr get numhi fget num chk itg fg front chkr ptr chkr fdr pi run num chkr pi run chkr num chkr pi run chkr num chkr pi run num pi com snapshot chkr chkr chkr block select instruct chkr prepar execut select instruct omega omega omega omega omega omega oe hy phi phi phi phi phichkr term chkr term chkr term pri com entri readi entri get numhi chkr get numhi chkr get numhi chkr get numhi fget num chk itg fg front chkr ptr chkr fdr chkr chkr chkr pi com snapshot chkr task instanc termin pri readi termin pi run task inform block depend io entri snapshot termin snapshot form basi contour model ada task alter aspect basic model accommod semant ada task exampl refin notion state processor coincid close phase lifetim task associ separ execut statu processor model therefor state processor determin whether elig execut block processor affect state contrast origin contour model distinguish three processor state state determin execut statu johnston model processor either awak elig execut asleep block termin finish execut algorithm also modifi detail protocol subprogram call return protocol illustr berri procedur call instruct alloc initi contour new procedur activ evalu actual paramet copi paramet valu new contour transfer control enter instruct move execut processor new contour protocol procedur call instruct evalu actual paramet push onto execut processor express stack transfer control appropri enter instruct procedur enter instruct alloc new contour move execut processor new contour pass paramet valu modif allow us treat call subprogram call entri uniformli entri call instruct cannot alloc contour requir rendezv pass paramet valu call task may readi execut rendezv may accept call one explicit elabor declar program unit requir model ada task accur model semant task creation activ particular explicit elabor allow us model erron execut caus race condit occur activ task share global variabl also allow us model program activ certain task must interleav activ andor execut task avoid deadlock addit data structur instruct realiz specif requir ada task mention discuss abov exampl associ direct master entri queue blockedwait inform processor includ instruct activ task signal end task activ parent initi complet rendezv select accept entri call on contour model retent model program object cell retain long access automat reclaim becom inaccess present model give explicit rule reclaim storag execut often visual appar complex object processor contour becom inaccess way dealloc also view driven execut variou contour model instruct howev model design caus effect rule equival retent model particular contour model is therefor equival stackbas implement model describ contour record execut correspond activ record runtim stack processor creat it nest contour enclos processor determin static chain sequenc contour obtain start innermost enclos contour follow environ pointer within contour return label processor base contour determin dynam chain stack model multiprocess processor runtim stack model base contour processor correspond activ record base runtim stack processor conclus futur work visual execut model ada task help programm gain deeper understand task semant contour model depict asynchron task relationship environ task execut manner task interact make possibl see happen execut program exampl show precis activ task instanc begin end instanc synchron parent entri invok similarli show relationship referenc environ concurr instanc variou properti snapshot establish motiv definit task depend termin ada demonstr interplay definit basic runtim manag concern present snapshot level abstract appropri programm tri understand semant ada task higherlevel diagram requir understand complex task program might involv larg number interact task instanc exampl higherlevel instruct defin expand control flow convent establish allow programm identifi segment code treat atom instruct inform within execut contour also suppress focu attent data import understand execut unfold exampl refer task instanc key data valu comput instanc might shown data array return label valu task type procedur might suppress similarli task inform block shown use icon circular configur direct edg icon repres blockedwait condit order highlight inform requir detect deadlock icon expand necessari show addit inform relat statu task instanc mechan implement contour model essenti becom practic tool autom interpret level describ paper would provid valuabl visual aid teach ada task sophist interpret capabl view program abstract level would allow programm explor variou execut program investig potenti interact among task understand effect differ algorithm schedul readi task fairli minor extens autom interpret would provid natur interfac task debugg interleav symbol executor acknowledg i would like thank dan berri gener advic thought review mani draft paper r approv ada languag commentari ada task semant effici implement program ada note pl note contour model treatment ada procedur alias oest editor toward formal descript ada debugg ada task task depend termin ada concurr program program languag concept ada task demo task state transit ada interleav symbol execut approach formal verif ada program task ing fundament program languag contour model block structur process program languag structur program languag design implement visibl semant program languag unit state depart defens contour model ada task program languag tr ada concurr program ada advanc introduct program languag concept e programm languag design implement nd ed fundament program languag nd ed ada task demo debugg ada task toward formal descript ada program ada ctr laura k dillon task depend termin ada acm transact softwar engin methodolog tosem v n p jan