t comput complex knowledg complex a studi comput complex languag interact proof logarithm knowledg complex show languag recogn cal bppcal np prior work languag greaterthanzero knowledg complex trivial comput complex bound known cours proof relat statist knowledg complex perfect knowledg complex specif show that honest verifi hierarchi coincid logarithm addit term b introduct notion knowledgecomplex introduc semin paper goldwass micali rackoff gmr gmr knowledgecomplex kc intend measur comput advantag gain interact satisfactori formul knowledg complex case zero recent appear gp natur suggest made goldwass micali rackoff classifi languag accord knowledgecomplex interactiveproof gmr feel worthwhil give suggest fair tri lowest level knowledgecomplex hierarchi class languag interact proof knowledgecomplex zero better known zeroknowledg actual three hierarchi extend three standard definit zeroknowledg name extend abstract paper appear th acm symposium theori comput stoc held montreal quebec canada may depart appli mathemat comput scienc weizmann institut scienc rehovot israel email odedwisdomweizmannacil support grant no unit state israel binat scienc foundat jerusalem israel z comput scienc divis univers california berkeley intern comput scienc institut berkeley ca email rafailcsberkeleyedu support nsf postdoctor fellowship icsi x comput scienc depart technion israel institut technolog haifa israel email erezcstechnionacil perfect statist comput let us denot correspond hierarchi pkcdelta skcdelta ckcdelta assum exist oneway function third hierarchi collaps name differ zero level comput knowledgecomplex extend maximum possibl anyhow rest paper interest two hierarchi previou work provid inform concern zero level hierar chi fortnow pioneer attempt investig comput complex perfectstatist zeroknowledg f follow aiello hastad ah result summar follow theorem bound comput complex languag zeroknowledg proof theorem f ah coam henc languag statist zeroknowledg must lie second level polynomialtim hierarchi needless say function k particular k j hand allow polynomi amount knowledg reveal everi languag ip proven theorem lfkn sh indic gp first equal properti adequ definit of knowledg complex rather result paper studi class languag interactiveproof logarithm knowledgecomplex particular bound comput complex languag show recogn probabilist polynomialtim machin access np oracl main theorem recal bpp np contain third level polynomialtim hierarchi ph believ ph proper subset pspace thu assum ph ae pspace result yield first proof exist languag pspace cannot proven interactiveproof yield olog n bit knowledg word exist languag interact proof interact proof superlogarithm knowledgecomplex prior work solid indic would contradict possibl languag pspace interactiveproof yield one bit knowledg ala one will assum languag pspace interact proof logarithm mani round assumpt consid unreason result bp would yield proof pspace contain skc provid again ph ae pspace attempt bound comput complex languag interact proof low knowledgecomplex done bellar petrank yet work refer languag interact proof round low knowledg complex bp specif show languag l rnround interactiveproof knowledgecomplex o log n languag recogn bpp np proof main theorem consist two part first part show procedur describ bellar petrank bp suffic recogn languag interact proof logarithm perfect knowledg complex end use care analysi one use bp second part proof transform interact proof statist knowledg complex kn interact proof perfect knowledg complex knlog n transform refer knowledgecomplex respect honest verifi suffic sinc first part proof appli knowledgecomplex respect honest verifi yet transform interest sake word place question whether statist zeroknowledg equal perfect zeroknowledg one better known open problem area question open also case zeroknowledg respect honest verifi show everi polytim comput function k nn and particular k j result may consid indic two hierarchi may collid techniqu use state abov first part proof consist present care analysi exist procedur name procedur suggest bellar petrank bp procedur turn culmin two sequenc work discuss bellow first sequenc origin fortnow definit simulatorbas prover f fortnow f consequ aiello hastad ah use simulatorbas prover order infer way contradict bound size specif set explicit usag simulatorbas prover introduc bellar micali ostrovski specif suggest use pspaceimplement simulatorbas prover instead use origin prover of unbound complex wit exist zeroknowledg interact proof system thu obtain bound complex prover requir zeroknowledg proof system ostrovski ost suggest use implement interact verifi simulationbas prover procedur decid languag furthermor assum oneway function exist use univers extrapol procedur ilu ile approxim behavior simulatorbas prover thu assum oneway function exist present effici procedur decid languag skc infer oneway function essenti nontrivi statist zeroknowledg bellar petrank distil decis procedur context oneway function show simulatorbas prover implement use perfect univers extrapol also known uniform gener procedur bp error implement directli relat deviat uniform gener procedur second sequenc work deal two relat problem approxim size set uniformli gener element them problem relat jerrum et al jvv procedur approxim size set invent sipser si stockmey st improv gs ah use hash paradigm hash techniqu basi univers extrapo lation procedur ilu ile howev output procedur deviat object ie uniform distribut target set nonneglig amount ie polyt run time hand jerrum et al also point perfect uniform gener done bpp sigma p bellar petrank combin hashingbas approxim method idea jvv obtain bpp np procedur uniform gener exponenti vanish error probabl bp actual procedur allow halt output constant or exponenti vanish probabl output distribut exactli uniform target set motiv studi kc addit selfevid fundament appeal knowledg complex wish point practic motiv consid knowledgecomplex greater zero particular cryptograph protocol releas small ie logarithm amount knowledg may practic valu especi appli one obtain subaddit bound knowledg complex repeat execut note typic singl applic a subprotocol leak logarithm mani bit of knowl edg compromis secur entir protocol reason logarithm mani bit guess nonneglig probabl turn mean attack due leak bit simul nonneglig probabl without them use low knowledgecomplex protocol one use zeroknowledg one see gmw gmw reason nonzeroknowledg protocol may effici andor may requir weaker comput assumpt see exampl ovi remark remark concern two definit throughout paper skckdelta pkckdelta denot class knowledgecomplex respect honest verifi note main theorem strengthen thi wherea transform mention abov inde weaker furthermor interact proof mean one error probabl neglig ie smaller polynomi fraction word justif appear section remark concern fortnow paper f cours research found proof skc coam appear f correct particular flaw amprotocol present f complement languag see appendix a howev paper aiello hastad provid necessari machineri prove fortnow result well ah h needless say basic approach present fortnow ie look simulatorbas prover valid inspir subsequ work eg ah bmo ost bp ow well current one preliminari let us state definit convent use paper throughout paper use n denot length input x function f call neglig everi polynomi p suffici larg ns pn interact proof let us recal concept interact proof present gmr formal definit motiv discuss reader refer gmr protocol comput unbound prover p probabilist polynomialtim verifi v constitut interact proof languag l exist neglig function ffl complet x l sound x l prover p remark usual definit interact proof robust sens set error probabl bound away chang express power sinc error probabl reduc repetit howev standard procedur applic knowledgecomplex measur sinc even sequenti repetit may increas knowledgecomplex question is thu right definit definit use quit standard natur certainli less arbitrari set error favorit constant eg function eg gamman yet techniqu yield nontrivi result also case one defin interact proof nonneglig error probabl eg constant error probabl exampl languag interact proof error probabl perfect knowledg complex also bpp np detail see appendix b also note allow twosid error probabl strengthen main result weaken statist perfect transform suppos transform onesid case then given twosid interact proof statist knowledg complex could transform onesid error proof knowledg complex cf gm appli transform onesid case would yield even better result knowledg complex throughout rest paper refer knowledgecomplex respect honest verifi name abil simul honest verifi view interact prover in stronger definit one consid abil simul point view effici verifi interact prover let denot random variabl repres v s view interact p common input x view contain verifi random tape well sequenc messag exchang parti begin briefli recal definit perfect statist zeroknowledg perfect zeroknowledg resp statist zeroknowledg languag l probabilist polynomi time simul everi x l random variabl mx distribut ident statist differ mx p v x neglig function jxj next present definit perfect resp statist knowledgecomplex use sequel definit extend definit perfect resp statist zero knowledg sens knowledgecomplex zero exactli zeroknowledg actual two altern formul knowledgecomplex call oracl version fraction version formul coincid zero level differ addit constant otherwis gp intuit motiv see gp conveni use definit paper oracl formul knowledgecomplex protocol number oracl bit queri need simul protocol effici definit knowledg complex oracl version let k n n say interact proof languag l perfect resp statist knowledg complex kn oracl sens exist probabilist polynomi time oracl machin oracl that input x l machin queri oracl kjxj bit x l machin produc output probabl least given halt output x ident distribut resp statist close fraction formul simul given explicit help instead one measur densiti largest subspac simul execut ie coin ident resp close definit knowledg complex fraction version let ae n say interact proof languag l perfect resp statist knowledgecomplex log aen fraction sens exist probabilist polynomialtim machin follow good subspac properti x l subset ms possibl random tape x that analysi bp procedur easier use fraction version wherea transform statist perfect easier use oracl version set x contain least aejxj fraction set possibl coin toss mx condit event mx coin fall x random variabl mx ident distribut resp statist close x name perfect case mean everi c mx denot output simul input x coin toss sequenc mention abov two measur almost equal theorem gp fraction measur oracl measur equal addit constant sinc none result sensit differ addit constant measur ignor differ subsequ definit well statement result definit knowledg complex class languag interact proof perfect knowledg complex kdelta languag interact proof statist knowledg complex kdelta simul base prover import ingredi proof notion simul base prover introduc fortnow f consid simul output convers interact prover p verifi v defin new prover p call simul base prover select messag accord condit probabl induc simul name partial histori h convers p output messag ff probabl denot distribut induc tlong prefix convers here length prefix mean number messag it import note behavior p necessarili close behavior origin prover p specif knowledg complex greater consid simul guarante fraction definit p p might quit differ behavior main object show even case p still behav manner benefit perfect case section prove main theorem hold special case perfect knowledg complex combin result transform theorem subsequ section get main theorem theorem pkcolog n bpp np proof follow procedur suggest bp turn follow approach f bmo ost introduc new uniform gener procedur build idea si st gs jvv see introduct suppos interact proof perfect knowledg complex olog n languag l let simul guarante fraction formul ie definit consid convers origin verifi v simulationbasedprov p see definit section go show probabl interact p accept neglig x l greater polynomi fraction x l proof differ bp analysi case x l and thu get stronger result although use procedur separ case x l x l amplifi sequenti repetit protocol p remain observ sampl p probabilist polynomialtim access np oracl observ origin bp justifi follow clearli v s part interact produc polynomialtim also uniform gener procedur bp implement probabilist polynomi time machin access np oracl actual implement may fail neglig probabl matter thu remain prove follow lemma lemma x l probabl p output accept convers least x l probabl p output accept convers neglig remark bp weaker lemma proven specif show probabl p output accept convers on x l relat gammak deltat number round protocol note proof could arbitrari polynomi number round proof second part lemma follow sound properti befor thu concentr first part fix arbitrari x l rest proof allow mention sequel discuss notat let q number coin toss made denot q set possibl coin toss good subspac ie densiti gammak inomega chosen uniformli simul output exactli distribut interact consid convers output simul s probabl get convers simul run uniformli select omegagamma least gammak claim probabl get convers interact p also least gammak obviou sinc distribut produc p ident distribut produc uniformli select omegagamma necessarili ident distribut produc uniformli select s howev prover move p distribut case simul select uniformli omegagamma wherea verifi move in p distribut case simul select uniformli s thu surpris claim proven howev need claim enough p convers origin s must accept well note obviou sinc simul interact proof may twosid error again densiti accept convers good subspac high ie need show case also p actual show probabl p convers accept ha origin least let us begin formal argument notat possibl histori interact h defin subset random tape simul ie subset omegagamma h set omega caus simul output convers prefix h h subset s inomega h also s h set s h also accept thu let denot tmessag long prefix output simul coin get h let c random variabl repres p indic convers c accept aim prove note c c express exactli expect valu jac j thu need show that expect possibl convers c produc interact equat proven done denot empti histori prove equat suffic prove sinc use ja j proof equat induct number round name round i show expect valu ja h j possibl histori h round ie length i greater equal expect valu express histori h round order show induct step consid two case current step prover ie p current step verifi ie v case show histori h expect possibl current move m given histori h produc interact p technic claim follow technic claim use deriv inequ case posit real then proof cauchyschwartz inequ assert i set sinc posit b rearrang term get desir inequ prover step denot ff given histori h prover p send ff next messag probabl thu ff ff inequ justifi use technic claim note verifi step denot fi perfect simul restrict good subspac s know given histori h verifi v send fi next messag probabl js hffifi j thu inequ justifi use technic claim note jomega h j proven equat case equat follow lemma transform section show transform statist knowledg complex perfect knowledg complex incur logarithm addit term transform combin theorem yield main theorem theorem everi polytim comput k n n stress knowledg complex class refer honest verifi know whether result hold analog knowledg complex class refer arbitrari polytim verifi proof use oracl formul knowledg complex see definit start overview proof suppos given simul produc output statist close real proververifi interact chang interact proof simul produc exactli distribut space take advantag fact prover interact proof oracl assist simul infinit power thu modif prover program augment oracl need effici comput stress modif simul effici comput also maintain origin verifi of interact proof thu result interact proof still sound furthermor result interact statist close origin one on x l therefor complet properti origin interact proof maintain although error probabl may increas neglig amount preliminari guarante interact proof without loss gener aliti may assum messag length messagelength convent mere matter encod recal definit guarante simul produc output probabl yet employ proposit gp get exist oracl machin ask kn log log n queri alway produc output output statist close interact p v let denot associ or acl let simulationbas prover verifi induc ie rest present fix gener input x l omit notat notat let a b random variabl repres imessag ibit long prefix interact b the common input x implicit notat denot ah random variabl repres messag sent interactionhistori h thu th messag sent a write a b denot fact random variabl x statist close use notat may write everi h f g oe f g similarli distribut induc p statist close distribut induc proof definit distribut produc statist close thu prove p statist close p induct length interact assum p wish prove distinguish two case case st move prover get use induct hypothesi case st move verifi get simulatorbas verifi defin analog simulatorbas prover fictiti entiti necessarili coincid v first justifi induct hypothesi two other eq stress sinc induct hypothesi use induct step statist distanc linear number induct step rather exponenti motiv discuss note statist differ interact p simul due sole differ proper verifi ie verifi induc simul ie v differ due v put much probabl weight certain move thu also littl weight sibl messag recal messag interact contain one bit follow deal two case first case differ behavior v induc behavior verifi v more tini case receiv attent go use oracl order move weight verifi messag fi get much weight after histori h sibl messag fi phi get littl weight after histori h simul specif new simul invok come convers h ffi fi prefix simul with help oracl output a differ convers prefix h ffi fi phi instead output origin convers simul probabl exactli compens differ v v leav one problem new simul come convers prefix h ffi fi phi cost let oracl suppli rest convers after known prefix hffifi phi high adopt brutal solut truncat convers prefix truncat take place interact p stop convers fi phi with special stop messag simul oracl recogn case simul output truncat convers chang make v behav exactli messag differ v v tini natur v immedi reject p stop interact abruptli make sure chang foil abil p convinc v input x l turn truncat happen neglig probabl sinc truncat need differ v v tini thu p convinc v x l almost probabl p doe second possibl case differ behavior v v tini case look full convers c get tini differ sum small differ probabl c distribut distribut correct differ lower probabl convers new simul probabl convers lower rel weight rel convers equal rel weight interact p technic done produc output certain case produc output technic remark oracl use allow simul toss bia coin simul know bia suppos simul need toss coin comesup head probabl n n integ simul suppli oracl uniformli chosen r f g oracl answer head r among first n string f g tail otherwis similar procedur applic implement lotteri two apriori known valu use procedur get extrem good approxim probabl space cost relat apriori known upper bound size support ie oracl answer logarithm size support ot number round interact ffl let h partial histori interact fi possibl next move verifi say fi weak respect h ffl convers respect igood note convers iweak th move verifi move ffl convers iweak jgood everi convers icocrit convers obtain c complement onli th bit icrit note convers icrit singl i yet may icocrit mani is ffl convers weak iweak i otherwis good convers neglig probabl proof recal p hold also prefix conver sation name t p us defin prefix h f g convers bad either ffl claim follow combin two fact fact probabl p output convers bad prefix neglig set bad prefix length i statist close get neglig fraction fl hand delta bound bellow definit b least thu fact follow fact convers contain bad prefix proof suppos fi bad prefix done otherwis hold use fact fi weak respect h get impli h ffi fi bad prefix c combin fact claim follow convers then probabl c output least gamma ffl dte delta probp igood everi proof see case write probabl step step condit histori far note prover step happen equal probabl side inequ therefor reduc sinc relev verifi step weak get mention inequ actual proof proce induct k gamma l clearli claim hold note k gamma l claim also hold sinc step k convers either prover step kgood verifi step show induct step use induct hypothesi name includ one prover messag one verifi messag assum without loss gener prover step k gamma sinc p simul base prover get sinc step k verifi good also have combin equat induct step follow done deal weak convers start modifi prover p result modifi prover denot p stop get verifi messag weak respect current histori otherwis name definit modifi prover p stop fi weak respect assum verifi v stop reject immedi upon receiv illeg messag prover and particular upon receiv stop messag next modifi simul output either good convers truncat convers origin icrit jump ahead stress truncat icrit convers gener icrit icocrit convers modifi simul denot proce follow first invok obtain convers queri augment oracl c oracl answer probabilist answer form i oe f tg oe f g probabl distribut specifi below point wish remark oracl return pair i oe one follow three condit hold c good good icocrit is oracl alway answer way c icrit c icocrit oe final new simul m halt output case prefix c note may smaller t case output truncat convers alway icrit otherwis output nontrunc convers note oracl messag contain log bit length interact p v remain specifi oracl answer distribut let us start consid two special case first case convers gener icrit i jcocrit j i case oracl alway answer i consequ simul alway output ibit long prefix howev prefix still output low probabl correct second case herebi describ second case convers c gener good icocrit singl i mean ibit long prefix given much probabl weight wherea prefix obtain compliment th bit get littl weight correct thi oracl output i probabl q t q specifi happen output icompli prefix higher probabl appear valu q determin follow denot then set q allow simul output prefix right probabl stress p necessarili simulatorbas prover gener case convers gener may icocrit mani is well jcritic singl j case jcritic icocrit us consid sequenc indic i l gener convers critic cocrit ie convers k cocrit k l either l critic l cocrit consid two case case q k s set exampl name q phi phi gener convers cocrit everi k l l critic case distribut oracl answer follow everi l pair i k return probabl pair appear probabl stress pair appear distribut gener convers cocrit everi k l case distribut oracl answer follow everi k l pair i return probabl pair t appear probabl appear distribut p convers p convers truncat ie critic one output probabl least fraction probabl appear p proof weak convers neglig output distribut p differ p origin differ behavior p weak convers specif p truncat p not yet distribut good convers remain unchang therefor distribut p statist close distribut p done part part let us start intuit discuss may help read formal proof follow first recal behavior simul prover step ident behavior interact p step follow simpli fact p simul base prover show properti still hold new interact p new simul note two differ case one case prover step conduct p exactli done p behav exactli second possibl case prover step contain special messag stop shall note occur exactli probabl distribut p distribut next consid verifi step construct p consid behavior v verifi step made chang differ tini call messag fi weak respect histori h simul assign messag fi after output h probabl smaller factor probabl verifi v output messag fi histori h inde reader easili verifi probabl sum make chang messag whose differ weight between simul interact smaller that proof consid two case first messag fi weak respect histori h clearli sibl messag fi phi get much weight simul definit made adjust move weight prefix h ffi fi phi prefix h ffi fi show transfer weight exactli cancel differ behavior v behavior name weak messag and sibl assign exactli probabl v thu show weak step involv behavior behavior exactli equival remain deal messag differ condit behavior v tini consid far case behav like howev sinc differ tini get even accumul differ throughout convers sum multipl factor state claim let us begin formal proof write probabl p c product condit probabl step name probabl output convers c show induct step convers produc least time probabl step p interact shown thi done clearli claim hold null prefix prove induct step consid two possibl parti make st step st step prover consid condit behavior given histori far show behavior ident behavior p partial histori delic point note may talk behavior prefix prefix appear posit probabl output distribut m howev induct hypothesi prefix output p appear posit probabl m partit analysi two case first consid case last messag verifi weak respect histori preced it name fi weak respect h case interact p simul next messag prover set stop probabl name possibl case last messag verifi weak respect preced histori case simul behav like prover note chang critic cocrit step appli verifi step thu summar condit behavior prover step condit behavior p exactli equal st step verifi again consid condit behavior given histori far let us recal second modif appli deriv modif chang condit probabl verifi step distribut order add weight step low probabl simul note modif made critic cocrit step verifi consid histori h might appear interact p possibl respons fi v h again induct hypothesi h posit probabl output simul therefor may consid condit behavior histori h three case consid correspond whether either fi fi phi none weak respect h start simplest case neither fi fi phi weak wrt h case behavior ident behavior sinc oracl never send messag i case howev fact fi weak get done simpl case turn case fi weak wrt h case given produc prefix h produc h ffifi whenev produc prefix h ffifi furthermor condit probabl q as defin abov produc prefix h ffi fi also case produc prefix h ffi fi phi abov defin simul m base verifi may also write also recal q defin pgammap use notat use equat get final turn case fi phi weak wrt h again mean fi cocrit c given produc prefix h produc h ffi fi produc prefix h ffi fi furthermor probabl q defin abov denot p p respect critic messag fi phi name thu recal complet proof claim lower probabl simul output handl differ p tini make last modif deal tini differ lower probabl simul output convers case output convers frequent appear p v modifi simul denot run obtain convers c note alway produc output use furtheraug oracl output c probabl c note p c hold due part claim produc output probabl output distribut ie case output ident distribut proof probabl produc output exactli part note probabl convers c output exactli simul halt output probabl exactli get given halt output output c probabl exactli done import point explicitli address far whether modif appli simul preserv abil implement probabilist polynomialtim bound access oracl clearli case respect at expens addit regard last modif subtl point need address specif need verifi definit implement name with help augment oracl siev convers exactli desir probabl note method present in technic remark may yield exponenti small deviat desir probabl get close perfect simul yet achiev it end modifi siev process suggest technic remark deal specif case here first modifi p make random choic in case ani flip polynomi number unbias coin round chang bit behavior p deviat made small assert specif claim still hold consid specif siev probabl need here cd observ c number coin toss lead output c ie use notat previou section j observ b size probabl space p use modif p rewrit p c ad c nonneg integ note oracl allow simul siev convers probabl e c follow way send oracl random tape toss oracl siev e possibl c random tape lead output c gener case p c f deal write c implement siev suppli oracl uniformli chosen fbit long string in addit oracl siev q randomtap of befor use extra bit order decid siev case equal specif differ randomtap combin claim part conclud p interact proof system perfect knowledg complex olog n l complet proof theorem implement p discuss explicitli possibl p use infinit number coin toss select next messag either howev infinit number coin toss realli need sinc round probabl polynomi number coin suffic caus exponenti small round error conclud remark consid main result first step toward classif languag accord knowledg complex interact proof system inde much known first mention two question seem ambiti first tri provid evid npcomplet languag cannot proven within low say logarithm even constant knowledg complex possibl avenu prove conjectur show languag logarithm knowledg complex coam rather bpp np recal np unlik coam see also bhz second suggest tri provid indic languag pspace interact proof linear rather logarithm knowledg complex reader easili envis moder ambiti challeng direct anoth interest question whether level greater zero knowledg complex hierarchi contain strictli languag previou level partial collaps occur exampl open whether constant even logarithm knowledg complex class collaps zero level regard transform statist knowledg complex perfect knowledg complex ie theorem interest question aris firstli cost transform reduc bellow olog n bit knowledg result special case statist zeroknowledg almost interest secondli one present analog transform preserv onesid error probabl interact proof note transform introduc neglig error probabl complet condit final one present analog transform appli knowledg complex respect arbitrari verifi our transform appli knowledg complex respect honest verifi acknowledg thank leonard shulman provid us simpler proof claim r true complex statist zeroknowledg make zeroknowledg prover effici complex perfect zeroknowledg interact proof system prover never fail random select proof yield noth valid methodolog cryptograph protocol design how play mental game complet theorem protocol honest major quantifi knowledg complex knowledg complex interact proof knowledg complex interact proof public coin interact proof system better way gener hard np instanc pick uniformli random direct minimumknowledg comput random gener combinatori structur uniform distribut algebra method interact proof system fair game allpow adversari complex theoret approach random complex approxim count tr ctr amo beimel paz carmi kobbi nissim enav weinreb privat approxim search problem proceed thirtyeighth annual acm symposium theori comput may seattl wa usa ode goldreich salil vadhan avi wigderson interact proof lacon prover comput complex v n p januari amit sahai salil vadhan complet problem statist zero knowledg journal acm jacm v n p march