t effici specificationbas compon retriev a paper present mechan make specificationbas compon retriev effici limit amount theorem prove requir queri time done use classif scheme reduc number specif match proof requir process queri compon classifi assign featur correspond necessari condit impli compon specif show method featur assign use approxim reusabl relationship queri librari compon set possibl classif featur formal defin permit autom classif process classif process made effici use special theorem prove tactic prove featur implic retriev mechan implement evalu experiment use librari list manipul compon result indic better respons time exist formal approach approach provid higher level consist autom inform method compar retriev perform b introduct concept compon reus fundament engin disciplin compon provid level abstract use effect construct increasingli complex system softwar engin except main focu provid languag methodolog help softwar design creat use reusabl abstract fact softwar reus recent describ mili et al onli realist approach meet need softwar industri potenti softwar reus limit sourc code includ algorithm architectur domain model design decis program transform document virtual everi possibl aspect softwar system addit benefit softwar reus extend beyond design phase analysi mainten phase develop articl focus function compon methodolog present compat softwar reus artifact refin order exist specif includ sourc code highlevel compon softwar architectur program transform note also compon retriev confin librari reus also consid context integr compon gener softwar architectur either static dynam potenti benefit softwar reus far reach practic softwar reus flourish manageri technic reason thi one major technic barrier provid tool autom reus process understand reason technic difficulti autom reus help decompos librari reus process three activ retriev specifi queri locat potenti reus candid within softwar librari evalu determin relationship retriev compon specif desir compon adapt make chang compon meet reus requir ideal reus tool provid autom assist three reus activ activ interdepend high reus potenti from retriev indic low reus effort dure evalu respect known adapt method howev autom difficult activ requir differ inform compon retriev benefit abstract classif compon function support effici comparison autom evalu use must provid design precis relationship high level assur therefor evalu depend precis detail descript compon behavior adapt requir knowledg structur compon function subcompon therefor choic compon represent scheme determin softwar reus activ autom effect sourc code reus main focu softwar reus effort howev autom reus process requir understand aspect compon describ sourc code sourc code provid descript compon perform function purpos retriev interest precis function is differ repres semant gap make difficult understand function code recogn potenti reusabl compon sourc code suffici represent support autom reus process therefor method requir repres addit inform necessari autom reus specificationbas reus formal specif languag provid express precis necessari captur function compon is specif match appli theorem prove evalu relationship specif given formal definit reusabl specif match use evalu reusabl compon respect requir specif addit autom reason use determin chang necessari reus compon guid compon adapt illustr potenti use formal method assist softwar reus present sampl scenario design interact specificationbas retriev system first design must develop specif desir compon use queri librari specif defin domain rang precondit postcondit desir compon specif abstract need complet exampl design look list decomposit method librari list manipul compon follow queri might use pre true post foral xe result submit queri compon retriev system list compon match necessari port substitut match condit formal relationship compon queri specif repres condit compon may reus match condit may associ set rule autom mechan adapt compon case exampl retriev system give follow result compon match substitut removefirst weak post rest output removelast weak post rest output split weak post left output split weak post right output weak post match defin formal c oc op indic compon provid solut part but all problem domain design would like find compon cover entir domain howev case obviou happen case empti input list design strengthen precondit queri elimin case respons new queri system provid follow result compon match substitut removefirst weak plugin rest output removelast weak plugin rest output split weakpost left output split weakpost right output weak plugin match one sever match give formal guarante compon provid valid solut legal input problem therefor removefirst removelast compon safe reus solv second queri technic overview due overhead autom theorem prove specif match comput expens test larg number compon accept amount time attain practic respons time specif match must limit evalu small number compon retriev separ mechan altern limit specif match limit express specif languag make retriev effici howev lower level assur evalu take account fewer aspect compon behavior approach distinguish retriev evalu either ineffici retriev weak evalu effect separ retriev evalu necessari maintain consist evalu criteria retriev goal specif classif scheme use retriev identifi compon match queri specif respect reusabl relationship evalu base compon semant classif scheme base upon syntact measur guarante consist evalu criteria paper present method make specificationbas retriev effici use semant inform provid specif figur depict flow design inform within retriev system diagram box repres data structur oval repres comput arrow repres data flow comput refer data structur system formal specif use model problem requir function librari compon specif base abstract data type defin algebra domain theori section present formal compon specif section explain specif match use determin compon reusabl compon retriev made effici layer classif scheme specif classif scheme consist collect formal definit repres possibl compon featur domain definit control classif process place human domain expert formal scheme permit autom classif specif semant classif scheme present section output classif phase set featur use queri compon librari librari retriev mechan return compon featur set similar queri featurebas retriev discuss section similar compon pass detail evalu use specif match determin compon precis relationship requir specif retriev system implement use ml program languag hol theorem prove system section evalu respons time retriev perform experiment compar retriev method section compar experiment result publish result section discuss perform semant classif term effect retriev system discuss relat work conclud compon specif softwar system repres architectur level collect interconnect compon compon system constitu subsystem encapsul part system classif scheme specif match classif retriev theori domain requir specif compon librari compon retriev system similar compon featur match compon domain model design figur overview specificationbas retriev semant classif recordlist includ record listrec introduc defin assert llistrec rrec kkey r containslr krkey rkey firstlkey assum totalorderkey introduc assert rec partit key prepend first rest last contain assert list partit empti first rest append prepend figur larch share languag specif list record function subsystem is turn compos collect subsystem result hierarch system structur decomposit continu manner reach compon implement compon composit actual sourc code formal specif provid benefit inform specif sourc code descript first specif formal provid precis unambigu descript compon function second descript declar oppos oper natur mean describ compon without refer it import issu reus depend upon unspecifi unintend function caus problem context evolv requir implement formal specif broken two level abstract domain theori interfac specif domain theori defin vocabulari use specif provid model data type oper use domain interest interfac specif defin behavior system compon term domain theori domain theori use algebra specif build domain theori algebra specif defin set abstract data type oper exampl figur contain larch share languag specif list record recordlist specif call trait larch includ record specif parameter list specif list specif oper defin append compon search import recordlist end search figur exampl interfac specif prepend concaten comput list membership list length gener claus defin oper use recurs construct valu type partit claus identifi set oper evalu deduc equival two valu type domain theori develop certain problem domain data type oper referenc interfac specif interfac specif interfac specif defin behavior compon term domain rang precondit postcondit exampl figur show interfac specif search compon domain rang defin input output type compon respect precondit specifi set input compon oper defin over call legal input postcondit defin relationship must hold input valid output precondit true compon begin execut compon guarante termin state postcondit true restrict guarante behavior compon precondit hold formal compon specif p translat follow predic logic axiom dp rp domain rang compon p x op x z precondit postcondit respect reusabl use formal specif evalu reusabl requir formal definit relationship must exist compon reus solv new problem stress point exist literatur specificationbas compon retriev consist choic evalu condit first consid case compon complet satisfi problem queri specif discuss relationship may indic compon adapt reus compon complet solv problem result one problem valid output problem legal input formal compon specif c satisfi problem specif p follow condit hold first conjunct state compon accept legal input problem second conjunct state valid output compon legal problem input valid output problem behavior compon outsid legal problem input concern determin abil solv problem assum ignor potenti subtyp substitut subtyp support implicitli use predic integerx realx explicitli effici reason plugin weak plugin gammapsi plugin post r satisfi gammapsi weak post c oc op r gammapsi stronger weaker figur lattic specif match use evalu reusabl alway case compon complet satisfi problem exist librari therefor desir queri match compon adapt combin solv problem zaremski wing identifi collect specif match use compar specif figur show subset match think interest determin reusabl addit satisfi match follow zaremski wing match arrang lattic arrow two match indic match base arrow stronger logic impli match head arrow formal notat abbrevi drop quantifi variabl argument predic three match leftmost path requir precondit problem stronger precondit compon differ set input requir valid output postcondit relat compon plugin match check whole domain weak plugin restrict check legal compon input satisfi restrict legal input problem logic relationship match compon match plugin weak plugin match satisfi howev plugin weak plugin caus disregard use compon use retriev condit plugin post weak post match differ other requir legal problem input legal compon input compon match problem one way could problem input caus unspecifi behavior compon howev know legal problem input also legal compon input compon provid valid problem output therefor compon match way use partial solut problem collect compon compos provid complet solut problem match also use find compon nontrivi precondit without specifi precondit queri specif match formal defin check use autom theorem prover howev due complex autom theorem prove specif match comput expens test larg number compon practic specificationbas retriev requir effici way identifi compon match queri specif respect reusabl relationship next section present method classifi compon use semant specif semant classif effici requir specificationbas retriev achiev use featurebas classif scheme featurebas retriev effici reli syntact match attributevalu pair featur similar two compon measur number featur common appli featurebas classif hand librari compon assign set featur domain expert retriev set potenti use compon design translat classifi problem requir set featur correspond class compon retriev librari queri gener relax featur set compar potenti problem featurebas classif maintain consist classif process effect retriev requir domain expert develop common understand intend semant featur would desir systemat autom classif increas confid classif consist among domain expert develop automat index base semant practic code reus standpoint would requir massiv reengin effort howev formal compon specif provid explicit semant represent use foundat compon classif autom featurebas classif requir answer two question automat gener featur specif possibl featur compon have answer first question describ framework assign featur compon way assist search reusabl compon discuss defin set possibl featur use classifi compon featur set gener classif scheme use retriev identifi compon match queri specif respect reus match identifi section inspect specif match reveal gener pattern case part one specif logic impli part anoth specif p search situat guid use necessari condit necessari condit predic p anoth predic phi logic weaker p ie p phi two predic p q p q everi necessari condit q necessari condit therefor commonli describ p q fact logic impli phi necessari condit use way assist search reusabl compon specif identifi compon cannot match specif therefor undergo detail analysi compon queri specif classifi base given set necessari condit classif scheme associ featur necessari condit featur assign compon associ necessari condit logic impli compon specif gener result semant classif method compon featur set similar queri potenti reus match hold compon queri convers compon featur common less like reusabl therefor syntact comparison featur set use effici approxim semant relationship compon gener semant classif cannot guarante elimin nonmatch compon behavior system depend upon set necessari condit use classif scheme reus match approxim effect approxim reason base featur set unsound incomplet howev consid critic flaw clear effect practic perform system impact unsound incomplet classif evalu experiment measur effect retriev perform section featur definit classif process control collect featur definit determin set necessari conditionfeatur pair use featur definit captur knowledg domain expert would use classifi compon hand formal defin classif featur featur assign process classif fulli autom filtert figur sampl featur definit dataflow abstract character aspect interfac specif featur must repres abstract relationship compon input output featur definit link featur name valu logic predic specifi associ concept featur definit follow format featur name provid syntact label concept featur valu type type repres data type paramet instanti base domain rang specif two compon perform similar function differ data type featur name differ valu variabl x actual metavari rang set input output variabl compon isio predic either isinput isoutput determin set metavari rang associ type variabl featur valu paramet condit predic necessari condit associ featur featur definit instanti substitut combin input output variabl compon classifi instanti restrict type check oper use specifi condit set featur use classifi reus librari domain depend necessari condit featur definit specifi term formal domain theori allow specif abstract made oper provid similar function differ type domain exampl contain oper contain use describ contain mani differ situat referenc oper featur definit draw similar compon whose function specifi term contain figur show subset featur current defin provid dataflow style abstract list process domain exampl select featur repres case output element input variabl definit parameter datatyp select possibl featur whenev contain oper exist input output type set featur definit use follow exampl classif exampl figur show classif search compon figur base first two featur definit figur first domain rang interfac specif substitut featur definit creat set featurenecessari condit use classif exampl domain theori instanti featurego pair definit featur proof tactic special featur assign requir specif figur exampl featurebas classif search compon select nonmemb featur definit instanti input variabl type domain input rec specif give second fourth instanti definit elimin due type check constraint bool defin domain theori next special proof tactic use check necessari condit impli specifi cation exampl follow proof oblig gener first instanti definit exampl proof term containsinput item succe therefor associ featur selectlistrec rec assign compon retriev given featur set represent problem wish retriev compon match problem term formal specif match featur assign compon base necessari condit less featur compon common queri less like one reusabl match hold two therefor interest compon featur common queri ident specif ident featur set initi queri compon ident featur set problem compon queri gener loosen featur comparison constraint includ larger class compon prototyp queri gener autom continu number retriev compon reach usersuppli threshold first step gener weaken requir featur valu equival featur valu repres type compon oper over identifi compon perform similar oper differ type second step reduc number problem featur compon must contain allow retriev compon may partial solut problem final two type gener combin find compon featur common queri follow sampl retriev session provid exampl type queri gener figur show two problem specif set compon specif associ featur set specif classifi use featur definit figur result featur set list specif compon display beneath problem specif retriev exhibit relationship featur set specif match strongest match exist problem compon list compon specif first exampl wish find record specifi key within list compon expect perform correctli record list two compon retriev ident featur set find first search match plugin and therefor satisfi mean use solv problem second binarysearch match plugin post requir input sort possibl input list known sort design includ inform queri therefor binarysearch possibl use solv problem third compon treesearch retriev weaken constraint featur valu must equal treesearch compon select build featur howev differ type valu compon may use substitut listrec tree rec bucket second exampl problem specifi abstractli first design look compon take list return smaller list compos element first list manner select element new list unspecifi queri use find exist option decompos list first two compon return removefirst removelast match queri weak plugin precondit compon emptyinput requir true ensur output list smaller input list technic two compon queri weak plugin satisfi equival match precondit logic equival third compon split match weak post compon precondit stronger queri precondit split compon provid valid solut problem except case lengthinput empir evalu compon retriev base brute forc specif match attempt match queri everi compon librari therefor involv mani individu proof attempt fail goal semant classif elimin compon lead unsuccess proof attempt evalu save time effort number match andor nonmatch compon elimin depend upon perform retriev system sever experi perform evalu retriev system perform implement semant classif system implement use ml program languag hol theorem prove system sever precaut taken reduc overhead autom reason classif first featur set librari compon calcul beforehand store index second special purpos proof tactic construct hol solv theorem form featur implic proof proof tactic parameter set domain axiom appli make domain independ final speed infer induct proof elimin buri induct proof lemma ad lemma domain theori precau problem specif compon find import recordlist end find featur selectlistrecrecbuildkeyrec compon specif compon subset post foral xrec import recordlist end subset featur filterlistrecrec compon search import recordlist end search featur selectlistrecrecbuildkeyrec compon binarysearch import recordlist end find featur selectlistrecrecbuildkeyrec compon treesearch import buckettre end find featur compon removefirst first rec import recordlist end removefirst featur selectlistrecrecfilterlistrecrec compon removelast last import recordlist end removelast featur selectlistrecrecfilterlistrecrec compon split post isemptyleft isemptyright import recordlist end split featur splitlistrecrecfilterlistrecrec figur exampl problem specif compon specif featur set tion result incomplet proof procedur one goal experi evalu impact incomplet retriev perform librari compon retriev evalu done use librari specif list manipul compon librari use experi specificationbas compon retriev system provid opportun direct comparison result librari design test whether specificationbas retriev handl variat way compon specifi way queri pose system exampl differ specif head compon take list return list contain first element origin list evalu method two tradit measur compon retriev perform recal precis recal ratio number relev item retriev total number relev item librari high recal indic rel relev compon overlook precis ratio number relev item retriev total number item retriev high precis mean rel irrelev compon retriev gener tradeoff precis retriev goal find practic balanc two relev condit fundament evalu retriev system discuss below experi conduct two differ relev condit also inform observ number compon retriev system number help estim load would place design interpret result queri interact system similarli search space would face adapt system consid compon composit respons time system also measur determin practic method measur quantiti minimum maximum median calcul scenario experi design experi experi design compar way sever factor affect perform retriev system first foremost abil autom classif system deriv classif featur second interest perform retriev context exact retriev approxim retriev final natur librari rais question determin appropri queri set experiment therefor two differ queri set use featur gener retriev system whole separ classif scheme as defin featur definit classif mechan the special proof tactic domain theorem sens mechan attempt implement scheme aspect retriev system affect precis recal classif scheme affect precis size consist compon cluster affect recal scheme may alway contain featur infer relev compon incomplet classif mechan the special proof tactic incomplet could caus gener fewer featur subsequ retriev fewer compon intend miss compon relev lower recal precis classif mechan sound it implement term sound construct hol deriv impli featur experi three scenario test signatur match retriev base compon signatur expect featur retriev base featur would assign complet proof procedur deriv featur retriev base featur assign implement system signatur match retriev compon ident signatur librari compon ident signatur list list therefor perform signatur match provid profil composit librari term relev compon expect featur determin perform classif scheme implement perfectli would allow expect featur determin inspect aid lattic specif librari implement retriev mechan ie domain theori axiom togeth featur deriv tactic use gener deriv featur result evalu see close come implement classif scheme relev condit choic relev condit fundament determin signific precis recal measur experi evalu perform system respect two relev condit first use satisfi match consist standard specificationbas retriev experi second consid relev compon one match queri specif respect reus match identifi section relev condit import context adapt relev compon one potenti adapt system queri set follow experi done schumann fischer librari compon use set queri test perform system use compon queri set make two assumpt compon specif repres good sampl queri may ask queri probabl pose system get result would predict perform tool realist set would necessari distribut queri repres tool would use studi compon retriev literatur would provid inform librari use experi sever group function equival specif would practic point one compon rais question defin uniqu queri experi specif compon potenti mani specif therefor experi run duplic specif queri set without differ result two case neglig indic system favor compon multipl specif present result experi includ equival queri here experiment result experi involv librari list manipul compon signatur list list librari contain specif function uniqu compon experi divid two part first part classif scheme figur use due limit signatur follow featur appli filtert second part experi classif scheme extend extens scheme guid place librari compon lattic base satisfi match condit domain theori theorem use paramet classif mechan shown figur theorem select observ fail proof expect featur determin normal rule normal implic rewrit rule expans rule figur domain theori list librari experi tabl retriev satisfi match use initi classif scheme scenario retriev precis recal signatur match expect featur exact match relax match deriv featur exact match relax match theorem necessari make proof succeed theorem mainli deal reason contain which use defin featur definit term list type constructor con append satisfi match result initi part experi satisfi match shown tabl tabl entri denot averag valu minimum maximum parenthesi retriev mechan come close implement classif scheme expect featur set deriv specif fail classif due use three way condit specif support directli domain theori domain theori could extend support condit howev effort made overspeci domain theori toward support classif applic therefor extens made distribut expect featur set librari show tabl show classif scheme question job cluster compon librari nearli half compon assign filter featur fact featur independ repres gener hierarchi rout permut filter use featur special featur would also use orthogon featur provid better coverag librari tabl distribut featur set initi classif scheme featur set no specif no compon ffilterg some_tot last_tot tail swap id_seg id_front run_max_eq segment_ne_tot id segment_front id_singl segment swap_out swap_outer_tot swap_tot perm_r run_max_bracket run_eq run_bracket lead_tot lead segment_rear segment_n perm_lr id_nil elim_dup_lr rot_r rot_r_tot rot_l_tot rotate_tot rotat rot_l tail_tot elim_dup_unique_l elim_dup_r last head id_rear elim_dup_unique_r perm_l elim_dup_l no_dup elim_dup_unique_lr filter figur lattic specif list compon librari partialord lattic induc satisfi match librari use aid discov potenti featur lattic shown figur area cover filter permut rout featur shown dash line hope featur tend group compon relat lattic lattic use identifi group compon close relat specif may inspect identifi logic featur share exampl compon root tree contain last head total last total head total compon follow specif post existsirec mem mem specif similar definit select featur select look element output singleton list therefor definit select modifi identifi singleton list expect featur compon use featur identifi use lattic exampl associ featur id nil compon descend provid coverag id segment tree also divid compon filter featur roughli half fairli orthogon manner complementari featur idnil featur nonil could defin state compon accept empti input intent compon could impli featur three featur formal follow ad featur definit experi rerun inspect deriv featur set immedi obviou two problem featur never deriv mani compon assign idnil nonil intent scheme sourc first problem proof tactic fail handl existenti goal problem solv extend tactic attempt solv goal substitut free variabl goal existenti variabl addit expect result wrong defin featur hold total descend compon name total total function map empti input list empti output list case output contain element therefor specif impli featur second problem extend scheme idnil nonil complementari thought fact nonil impli idnil becaus case input empti assum empti which first step prove idnil allow proof idnil succeed trivial result coverag idnil featur nearli ident filter featur make useless extens taken togeth experi indic need tool support construct classif scheme discuss futur work section tabl distribut featur set extend classif scheme featur set no specif no compon tabl retriev satisfi match use extend scheme scenario retriev precis recal signatur match expect featur exact match relax match deriv featur exact match relax match tabl approxim retriev use initi classif scheme scenario retriev precis recal signatur match expect featur exact match relax match deriv featur exact match relax match experi run again time without idnil featur expect result throughli evalu distribut featur set shown tabl extend scheme better job break compon cluster nearli compon initi assign filter featur assign addit featur result evalu system extend classif scheme shown tabl compar result previou classif scheme notic drop averag number compon retriev along increas precis accompani slight decreas recal again classif mechan came close implement classif scheme approxim retriev experi repeat consid relev compon one match queri specif respect reus match identifi section relev condit logic weaker satisfi match it disjunct satisfi weak post relev compon queri superset relev satisfi tabl approxim retriev use extend scheme scenario retriev precis recal signatur match expect featur exact match relax match deriv featur exact match relax match result experi use initi classif scheme shown tabl precis experi higher retriev compon relev recal remain indic percentag new relev compon retriev implement classif scheme continu come close perform complet consist implement result experi use extend classif scheme shown tabl exact match increas precis initi scheme compar increas seen satisfi match experi howev larger drop recal caus exact match retriev mani new relev compon mean exact featur match use extend scheme approxim relev condit well term recal relax match result remain consist experi result indic relax featur match appropri approxim retriev exact featur match respons time respons time classif system experi rang second averag second mhz pentiumpro processor run linux databas access account second averag therefor bulk time spent classifi queri well within accept respons time interact system comparison result specificationbas retriev specificationbas compon retriev system proof concept stage therefor evalu sizabl compon librari notabl except norahammr system fischer schumann norahammr retriev system set chain filter initi filter signatur match becom restrict progress final filter chain full scale specif match norahammr system evalu use librari experi use specif with duplic queri set intermedi filter use mace model checker sever configur select subset compon librari undergo specif match use second time limit model check comput observ averag recal rate precis compar result achiev initi classif scheme experi howev respons time second worst case experi sever autom theorem prover specif match final stage retriev exampl use setheo prover time limit second result recal rate precis high precis due fact setheo proof procedur sound loss recal due lack complet come techniqu approxim induct restrict set axiom avail infer second time limit lower time limit second caus recal drop use semant classif filter prior specif match could reduc load specif match allow time limit rais increas recal inform retriev method major compon retriev tool use practic base inform retriev method frake pole conduct extens studi represent method reusabl compon comparison retriev perform attributevalu enumer facet keyword base represent relev determin made two domain expert mention manual method use classifi compon recal precis measur rang respect method statist analysi show signific differ among method retriev result consist number benefit semant classif provid method consist autom classif process use familiar specif languag familiar organ compon librari addit specificationbas retriev provid precis relationship exist retriev compon queri increas util retriev result achiev similar perform result girardi ibrahim evalu method base syntact semant analysi natur languag descript rosa use normal version precis recal formula system return rank result use librari gener purpos unix command queri deriv user descript frequent use command report recal valu rang precis valu rang howev state relev condit make result rather noninform select queri set also import evalu method less frequent case discuss system wide effect retriev perform semant classif must consid context role retriev system result retriev pass evalu phase base specif match perfect precis recal assum sound complet proof procedur use point relev compon cannot ad remov specif match mean semant classif act filter set upper bound recal combin retrievalevalu system limit recal shrink design space search potenti lower qualiti design creat system contrast precis retriev phase effect precis combin system precis effect number proof must attempt specif match therefor effect system respons time therefor recallprecis tradeoff featurebas retriev phase translat design qualityrespons time tradeoff context entir retriev system limit experi major reason featur gener failur due specif broken case base condit support rule domain theori specif postcondit form prove featur impli specif form requir proof case approach facilit thi must axiom domain theori form rule domain theori support specif case decomposit use specif featur proof cannot succeed fix either guid user specif use set condit support domain theori allow condit featur assign featur hold rather all condit specifi featur deriv run similar problem case partial specif compon behavior defin legal input featur assign compon deriv term behavior compon everi legal input valu partial specif logic weak allow featur deriv case undefin behavior fix disallow partial specif strengthen postcondit purpos featur gener allow condit featur describ abov also problem two compon specifi way specif caus nontermin rewrit exampl head compon input l output specifi as statement use lefttoright rewrit rule rewrit system termin one possibl solut build timeout option rewrit system similar use schuman fischer final note that gener specificationbas compon retriev suscept loss recal due semant gap compon specif compon associ specif compon correctli implement specif howev gap queri may fall into possibl compon may satisfi queri specif satisfi effect situat cannot evalu experi work specif howev note potenti limit method build classif scheme discov featur easi process formal abstract concept share among sever compon difficult pick collect use one even harder sever time investig intuit concept featur disprov system recogn util hierarch complementari featur good start toward build better scheme howev tool support would necessari scale method larger librari sophist classif scheme sever way formal classif framework provid foundat autom tool formal definit necessari condit support analysi scheme exampl set featur proven mutual exclus disjunct tautolog therefor everi compon would assign exactli one featur featur would provid coverag similar facet facet classif also possibl provid support extend classif scheme within framework exampl two distinguish compon classifi ident may possibl identifi part specif distinguish automat deriv new featur repres differ signatur vs semant specificationbas compon retriev system first filter use reduc librari signatur match signatur match use type compon interfac determin compat queri guid assumpt type match reason examin compon behavior believ two case semant classif potenti greater recal signaturebas approach retriev perform signatur match degrad consid relev compon could combin adapt satisfi queri standard signatur match elimin relev compon partial match interfac allow partial match would allow mani compon match greatli decreas retriev precis signatur match featur definit requir constrain input output compon semant classif problem fact compon retriev provid slice appropri behavior independ type use type inform the featur valu use identifi type substitut evalu use signatur suggest discov combin compon librari match queri signatur take semant approach problem combin compon classif assist approach retriev compon provid piec appropri behavior therefor locat partial solut even remaind solut librari relat work use formal specif assist softwar compon retriev wide propos project zaremski wing provid foundat studi gener activ specif match verif logic relationship specif mani approach make specificationbas compon retriev effici howev method make use semant provid formal specif norahammr deduct retriev tool built fischer schumann use seri filter identifi reusabl compon tool novel use model check one search filter run theorem prover check match condit condit check search model small part specif theori sinc necessari model exist condit hold compon pass model check stage need check entir theori also use variou techniqu improv perform theorem prover specif match reduc set axiom use parallel proof attempt evalu prototyp implement librari list manipul function show encourag result howev recal retriev componentsus compon prototyp limit signatur match notion use filter restrict search space consist use necessari condit elimin nonmatch compon semanticbas classif scheme provid better recal signatur match could use preliminari filter potenti increas recal inquir retriev mechan within inscap environ support retriev base compon specif precondit postcondit compon formul term given set formal defin logic predic infer mechan use retriev process retriev compon provid variou predic formal predic definit use unambigu descript predic vocabulari prototyp implement report work well restrict specif languag restrict languag reduc infer power necessari compon retriev methodolog present use revers approach inscap interfac specif defin full firstord logic formal defin featur predic assign specif logic impli specif case predic complet specif compon repres variou aspect compon function featur predic use specif predic abstract allow flexibl type similar repres addit express specif languag allow precis evalu reusabl deduct program synthesi also make use formal method autom softwar reus exampl amphion system success use deduct synthesi construct softwar subroutin librari solar system geometri system compon languag primit sub routin repres mathemat function behavior specifi via axiom program synthes prove that valid input exist output satisfi specif occurr primit function proof construct deduct synthesi correspond call associ subroutin therefor compon effect retriev correspond axiom use proof process mean domain theori axiom tactic use decompos proof determin compon use ongo research explor integr architectur decomposit tactic current compon retriev system support autom compon adapt integr conclus softwar reus formal specif two methodolog show high potenti impact softwar product reliabl use togeth permit increas autom assur reus process present compon reusabl similar describ formal logic relationship problem specif compon specif howev comput expens formal verifi relationship quantiti requir practic compon retriev therefor specificationbas retriev would benefit method approxim relationship identifi subset librari undergo verif paper describ method classifi compon base formal specif featur assign compon base specif necessari condit impli compon specif logic form specif match determin reusabl ensur compon similar featur set like match collect necessari condit control classif scheme defin formal allow autom classif theorem prove requir classif appli way complex compon classif much less appli multipl specif match classifi compon retriev via syntact comparison featur set result empir evalu librari list compon show method provid retriev perform compar exist method benefit faster respons time formal approach method improv upon inform method provid higher level consist autom futur work focu integr specificationbas compon retriev support autom compon adapt integr longterm goal develop support runtim compon integr highassur componentbas system also investig tool support develop mainten formal classif scheme acknowledg would like thank bernd fischer gari leaven ami moormann zaremski ali mili santo lazzeri dale martin help comment develop evalu research also thank anonym review current earlier version work suggest present evalu work support work provid part advanc research project agenc monitor wright lab raasp technolog program contract number f c ceenss technolog program contract number fc note use zaremski wing method identifi reus match base syntact pattern select match base formal intuit notion reusabl util compon retriev oppos free text index sourc code andor comment would satisfi high level assur requir applic note distanc lattic meaningless lattic arrang hand minim cross link gener overview compon retriev method assist softwar reus see survey mili et al r valid compon composit softwar system gener perli editor softwar reusabl concept model program develop formal activ two these knowledg represent languag restrict norahammr make deductionbas softwar compon retriev practic empir studi represent method reusabl softwar compon formal foundat specif softwar architectur automat index softwar artifact use english retriev softwar hol proof gener system higherord logic scienc program languag tool formal specif gener behaviorbas retriev use formal method construct softwar librari formal approach domainori softwar design environ fundament deduct program synthesi refin base system survey softwar reus librari reus softwar issu research direct anoth nail coffin facat controlledvocabulari compon classif retriev definit standard ml correct architectur refin autom compon retriev adapt use formal specif toward autom compon adapt declar specif softwar architectur inscap environ ruben prieto ruben prieto specif search key softwar librari autom deduct formal method norahammr make deductionbas softwar compon retriev practic softwar architectur perspect emerg disciplin deriv precondit use program synthesi deduct composit astronom softwar subroutin librari algebra specif softwar engin introduct signatur specif match signatur match specif match softwar compon tr ctr david hemer semiautom componentbas develop formal verifi softwar electron note theoret comput scienc entc p juli robert g bartholet david c brogan paul f reynold jr comput complex compon select simul reus proceed th confer winter simul decemb orlando florida sofien khemakhem khalil drira moham jmaiel sec search engin compon base softwar develop proceed acm symposium appli comput april dijon franc brandon morel perri alexand spartaca autom compon reus adapt ieee transact softwar engin v n p septemb