t heterogen cpu servic use differenti admiss control a present adapt ratecontrol schedul heterogen applic run gener purpos comput schedul effect support divers applic requir employ uniform ratebas share applic heterogen satisfi partit cpu capac servic class differ criterion admiss control result abl provid guarante perform flexibl alloc rate excel scalabl intermedi servic class offer tradeoff reserv rate util strength guarante schedul implement solari run exist applic without modif present experiment result show scalabl effici guarante perform overload perform aspect schedul demonstr import prioriti inherit implement schedul stabl system perform b introduct emerg continu media cm applic well defin qualiti servic qo constraint applic stringent resourc requir benefit noninterfer possibl run close embed system environ instead mani continu run gener purpos machin applic divers characterist run concurr qo requir applic open gener purpos comput environ requir research appropri admiss control schedul polici must investig avoid long term resourc overload provid form progress guarante resourc care schedul cpu time one bottleneck resourc consid processor requir applic like softwar media code design implement cpu schedul framework conform follow servic object cpu schedul satisfi divers class applic requir one extrem applic stringent progress constraint miss deadlin significantli degrad perceiv qualiti audio process teleconferenc system exampl extrem besteffort applic specif realtim properti nonzero progress rate desir flexibl form proport share cpu time among applic provid network file transfer email process belong type applic two extrem applic well defin qo requir toler period system overload grace d yau support part nation scienc foundat grant number eia ccr career b bhargava support part nation scienc foundat grant number ccr ccr part ceria earlier version paper appear proc ieee intern confer multimedia comput system florenc itali june load shed video playback exampl system busi user video applic may happi settl lower frame rate long video maintain good continu cpu schedul provid suitabl firewal protect among servic class well among thread within servic class progress guarante given servic class thread independ servic class thread make schedul request applic stringent qo requir must protect other applic servic class class besteffort applic protect demand servic class ensur accept level progress rate counterproduct howev strong firewal protect besteffort applic themselv system scalabl want cpu schedul limit factor mani besteffort applic admit system impli actual progress rate exist besteffort applic becom lower applic join system becom higher applic leav system certain servic class requir cpu reserv prevent long term system overload sinc actual resourc requir applic may known apriori may depend current context execut system provid feedback applic actual resourc demand inform reserv dynam renegoti applic system reflect actual resourc need cpu schedul unnecessarili restrict progress rate admit applic particular reserv unus cpu cycl left idl made avail ondemand applic competit exist round robin schedul cpu schedul provid divers servic class littl extra overhead sinc differ organ may differ characterist workload system administr allow configur servic class accord need organ schedul framework evolv earlier work adapt ratecontrol arc schedul retain arc central featur ratebas share firewal protect provis system feedback resourc renegoti improv arc provid improv scalabl besteffort applic offer explicit tradeoff reserv rate util strength guarante adapt applic paper present design innov discuss experi evolut arc schedul addit provid extens perform result illustr salient aspect current prototyp result demonstr sound practic util approach contribut relat work cpu schedul multimedia applic activ area research solut design embed realtim system applic gener purpos comput use static prioriti gener suscept runaway applic ratebas resourc share wide use mani ratebas system howev target flexibl resourc alloc consid guarante qo admiss control lack system feedback applic perform make difficult determin suitabl ratesa highli flexibl resourc model propos offer probabilist perform resourc model specif protocol process propos yield guarante perform without use thread approach immedi extend gener comput hierarch schedul advanc support heterogen applic employ leaf schedul divers type classic realtim schedul like ratemonoton earliestdeadlinefirst lack firewal properti adapt dynam applic behavior certain schedul algorithm requir close applic particip sophist schedul test system appeal polic mechan extern schedul algorithm prioriti depress propos solut uniformli appli well proven techniqu ratebas schedul divers applic requir consid schedul algorithm provabl firewal properti offer protect among applic without resort complic machineri heterogen applic handl configur servic class differ criteria admiss control result system achiev guarante perform flexibl resourc alloc excel scalabl intermedi servic offer tradeoff reserv rate util strength guarante new ratebas schedul algorithm suitabl use framework defin addit present system implement gener purpos oper system introduc use proxi schedul account inexact rate control real system provid perform evalu use real multimedia workload paper organ section discuss arc ratebas share firewal protect basi research discuss issu progress fair defin new cpu schedul algorithm good fair properti extend arc accommod heterogen servic framework present section section discuss import prioriti invers cpu schedul use proxi class achiev predict perform real system environ given section present perform evalu prototyp implement use real multimedia workload section schedul section summar main featur arc schedul detail arc defin famili schedul follow three properti i reserv rate negoti ii qo guarante condit upon thread behavior iii firewal protect among thread provid firewal protect effect period rate control henc execut ratebas schedul algorithm certain reschedul point follow current run thread exit becom block algorithm execut a block event system event occur caus one thread becom runnabl algorithm execut thread becom runnabl an unblock event period clock tick occur system algorithm execut current run thread a clock tick event initi rc schedul algorithm figur a chose proofofconcept experi arc framework simpl effici use rc thread say i request cpu reserv rate r period figur a event denot one three reschedul event trigger algorithm q thread rc execut rq pq denot qs reserv rate period respect curtim real time rc begin execut finishq expect finish time previou comput perform q valq rc valu q system schedul thread nondecreas order rc valu assumpt ideal execut environ theorem guarante progress punctual thread say j system gener least k second work time interv kp j theorem thread j punctual r j schedul rc run least k time notic p j smaller rate guarante provid finer time interv concomit increas context switch overhead convers p j larger number context switch becom smaller rate guarante provid coarser time interv henc p j rc allow tradeoff context switch overhead time granular rate guarante specifi applic accord need perform experi valid theorem actual system run exist multimedia applic show cm applic video audio meet deadlin use arc compet varieti besteffort applic see exampl fig simultan besteffort applic abl achiev satisfactori progress despit demand cm applic firewal protect among applic achiev without significantli degrad cpu effici util a b interfram time ms frame interfram time ms frame figur time pictur sent applic run a unix ts b arc presenc compet computeintens applic start frame algorithm rcq event l event unblock l finishq maxfinishq curtim els l runtim time q run sinc rc last execut it l finishq finishq l event block l valq startq algorithm frcq event l event unblock l vtime l finishq maxfinishq vtime l els l runtim time q run sinc frc last execut it l event block l fqg figur specif a algorithm rc b algorithm frc progress fair show rc exhibit punish phenomenon thread overrun resourc reserv later punish ie schedul extend time period thread littl resourc overrun join system show rate adapt use longrun cm applic avoid punish phenomenon care match reserv rate actual execut rate have howev explicitli design arc framework highli modular flexibl result abl incorpor schedul algorithm divers fair properti prototyp system particular design fair ratecontrol algorithm improv fair rc frc allow thread reserv guarante cpu rate rc frc calcul thread finish valu give time previou comput thread would finish progress reserv rate system schedul runnabl thread nondecreas finish valu order frc outlin figur b observ rc thread say r overrun reserv rate finishr may increas much beyond real time henc new thread say s later join system finish set current real time l figur a may take unbound time finish catch finishr solv problem fig b line l use virtual time valu vtime calcul l close match finish valu exist runnabl thread determin finish valu newli runnabl thread addit algorithm use initi empti keep track current set runnabl thread system discuss progress properti frc notat conveni adopt follow exposit denot finish valu thread i q in s denot period system clock tick first prove lemma bound differ finish valu two runnabl thread schedul frc bound impli progress fair limit long thread run anoth runnabl thread given chanc use cpu lemma follow invari j runnabl f f j qr proof invari true first thread becom runnabl show invari preserv reschedul point proof f denot set runnabl thread finish valu thread i respect reschedul point f denot set runnabl thread finish valu thread respect reschedul point system clock tick occur thread i sinc chosen run f f j j l thread k becom block affect finish valu runnabl thread henc trivial thread becom runnabl consid two case case case j finish valu thread j last block notic f moreov sinc last inequ follow fact invari hold reschedul point theorem prove guarante throughput frc schedul theorem time interv t continu runnabl throughout interv schedul frc run least time set thread ever runnabl t proof let w j denot total amount time j run interv t denot finish valu j j first becom runnabl t f j finish valu j time lemma fact f nondecreas l l j i fact continu runnabl sinc continu runnabl cpu busi throughout t henc follow corollari immedi state guarante progress cpu time overbook ie r notic becom larg continu runnabl thread cpu rate converg reserv rate corollari time interv t continu runnabl throughout interv j r j schedul frc run least time set thread ever runnabl t arc schedul heterogen servic experi arc perform well guarante progress divers applic suffer practic problem one observ accommod besteffort applic give applic low rate say approach reason scalabl sinc low rate add slowli admit good number besteffort applic reject admiss control howev cpu schedul use arc still impos artifici limit number besteffort applic admit time moreov besteffort realtim applic compet pool reserv rate may alway desir arc heterogen servic arch extens arc overcom practic limit major departur arc lie explicit recognit divers class applic discuss section arch still retain use integr schedul algorithm such rc frc describ section heterogen applic support differenti admiss control arch system administr partit total cpu capac rate servic class ie servic class k alloc rate r k m r k r m overbook paramet thread j request servic class k reserv specifi two paramet nomin rate r j period request grant c k denot subset thread alreadi admit servic class k thread j admit receiv effect rate given c k subset thread admit servic class k includ thread j effect rate n total number thread arch use thread rate section notic effect rate thread depend nomin rate also nomin rate thread admit servic class howev shown henc corollari provid hard guarante effect rate r thread i overbook paramet use specifi differ level servic b thread servic class k get hard guarante reserv rate servic class call guarante rate gr suitabl applic stringent time constraint b class k use flexibl rate alloc excel scalabl but thread class receiv guarante besid nonzero progress servic class call flexibl rate fr suitabl convent best effort applic valu b k lead servic class statist guarante differ strength servic class call overbook obn n percentag overbook suitabl adapt multimedia applic grace shed work accommod control period system overload multiprocessor oper system like solari thread contend insid kernel synchron resourc mutex lock semaphor condit variabl readerswrit lock system prioriti invers insid kernel becom import problem solv problem arch leverag exist mechan solari provid prioriti inherit thread arch inherit finish valu anoth thread block inherit finish valu rate control ie increas clock tick howev origin finish valu inherit thread is cpu usag inherit prioriti account for principl possibl two thread say p q conspir hoard resourc exampl p run acquir lock say l give up later p preempt q get schedul q attempt acquir l p block q inherit qs finish valu p run inherit prioriti without ever give l system prioriti inherit implement synchron resourc manag kernel code sinc kernel code trust reason assum conspiraci cannot occur section demonstr practic util prioriti inherit system besid synchron primit prioriti invers also occur differ applic request servic system server major problem use tradit rpc server thread run prioriti unrel prioriti client tackl problem implement train abstract solari train allow thread control access servic multipl process carri resourc schedul state intact abil achiev decoupl thread which view pure schedul entiti associ process which provid resourc context albeit nonperman thread henc thread still home process ie process creat free leav process enter new one welldefin stop export latter stop export secur entri point server code server offer servic time servic invoc server addit provid stack execut new client request plan incorpor train real applic report perform later paper avoid effect prioriti invers due interrupt process schedul design work best process reduc minimum protocol process system migrat socket exampl minim use interrupt handl packet arriv network howev small amount perform critic activ period system clock tick cpu rate control still allow take place interrupt prioriti higher prioriti arch thread proxi class frc use singl level cpu schedul theorem say runnabl thread effect rate r may get schedul time interv length n q number thread admit system sinc q nonneglig real system we expect valu ms ms time interv becom excess n larg presenc besteffort applic particular concern sinc servic class explicitli design highli scalabl solv thi system allow servic class configur proxi class proxi class introduc twolevel schedul arch system level class level system level proxi class repres proxi thread join arch system dispatch queue henc compet system cpu time class level proxi class maintain privat dispatch queue runnabl thread class increas finish valu order proxi thread consid run thread class run run runnabl least one thread class runnabl otherwis block effect rate equal configur algorithm l event unblock l vtime l finishq maxfinishq vtime l l call frccproxi unblock l c c els l runtim time q run sinc privat frc last execut it l finishq finishq l event block l c c fqg l l call frccproxi block els l call frccproxi tick els l call frccproxi tick figur specif algorithm privat frc proxi schedul class rate schedul state finish valu like usual thread proxi thread select execut becaus current highest prioriti howev dispatch instead select highest prioriti thread privat runnabl queue class dispatch it specifi algorithm privat frc figur proxi class schedul algorithm use conjunct algorithm frc figur b nonproxi proxi thread ie schedul system level privat frc call reschedul event occur thread proxi class the proxi thread algorithm q proxi thread c proxi class q belong event specifi reschedul event trigger algorithm proxi class c c denot set thread c runnabl cproxi denot proxi thread repres c system level schedul notic privat frc invok c may call frc cproxi suitabl reschedul event paramet exampl thread q c becom block frc call block event q last runnabl thread c tick event otherwis see benefit proxi schedul consid video thread rate r v compet thread fr class cpu time fr class configur proxi class theorem time interv length q video thread may schedul all fr class proxi howev time interv reduc q experiment result present perform result show differ aspect arch schedul includ guarante perfor manc overload perform suitabl heterogen servic scalabl flexibl proport rate share stabil effici arch schedul use run part solari sun ultrasparc workstat five applic repres multimedia workload use inour experi measur perform first four applic variou condit fifth radio xmit ran comput differ measur platform use send network audio packet read radio recv perform data taken radio xmit list applic follow greedi computeintens applic alway enabl repeatedli round ms comput print timestamp period applic wake everi perform ms comput output timestamp mpegplay cm applic play mpeg encod video fp video content play ipppp encod second segment tenni instruct radio recv cm applic receiv pcmencod audio sampl everi ms network radio xmit audio applic captur pcmencod audio microphon send audio sampl network sampl gener ms interv read radio recv experiment determin cpu requir mpegplay thi ran one four copi mpegplay with minim compet load solari ts note achiev frame rate one two applic frame rate full per second three applic frame rate becam respect four applic frame rate went respect conclud full cpu capac support three mpegplay frame per second unless note otherwis experiment cpu configur fr rate gr rate system clock tick interv use ms fr configur proxi class wherea gr not flexibl rate high util perform perform experi demonstr arch achiev flexibl alloc rate grace manner cpu configur gr rate experi five copi greedi six copi period applic run rate gr class figur plot timestamp valu rel first timestamp applic timestamp number applic figur b closeup view first second greedi applic graph show execut rate grace adapt applic start finish differ time henc chang offer cpu load examin system perform high util say period greedi applic experi time complet least one round comput everi ms sinc round comput take ms rate requir applic time ms total applic run system aggreg cpu rate requir applic time see perform period applic rate requir the actual cpu load throughout experi refer figur for clariti three applic shown profil repres refer line show period applic mostli time experiment setup demonstr differenti rate share fr ran ten greedi applic servic class six nomin rate two nomin rate remain two nomin rate figur show execut profil applic figur show applic activ greedi rate achiev roundssecond respect achiev ratio close expect ratio set experi demonstr arch abl provid heterogen servic firewal protect among servic class ran two differ experi first ran five greedi applic nomin rate fr class togeth two mpegplay rate gr class second increas number greedi applic thirteen figur show execut profil applic first experi figur b show correspond profil second experi shown figur a greedi applic ran slope mpegplay still run slope increas mpegplay finish execut equal slope show greedi applic receiv share cpu figur b note that increas number greedi achiev lower execut rate notic one greedi applic start earlier rest mpegplay howev unaffect show greedi fr share among resourc figur a closeup view figur second mpegplay affect start greedi time ms round greedi greedi greedi period time ms round greedi greedi greedi figur a execut profil five greedi six period applic equal rate topmost line show coincid period applic line variou greedi b execut profil greedi applic first round graph show grace adapt execut rate offer cpu load increas time ms round period figur magnifi view three period applic round number time second greedi greedi greedi greedi greedi figur applic run fr class show differenti rate share top line repres coincid profil two applic rate middl line two applic rate lowest line six applic rate greedi greedi greedi mpeg round number time second greedi greedi greedi greedi greedi mpeg mpeg figur execut profil two mpegplay gr run concurr a five greedi applic fr b thirteen greedi applic fr a b shorter straight line two mpegplay coincid profil a b round number time second greedi greedi greedi greedi mpeg mpeg interfram time ms pictur number mpeg figur a closeup view two mpegplay five greedi applic first second thin straight line show coincid mpegplay b plot interfram time mpegplay run five greedi applic applic figur b show repres plot interfram time mpegplay expect frame rate per second achiev grace load shed show certain cm applic grace adapt cpu overload henc run overbook servic class purpos configur ob servic class overbook fraction cpu partit fr rate gr rate ob rate experi ran three copi mpegplay nomin rate ob obtain execut profil throughout experi two greedi applic run gr fr class respect figur show execut profil applic mpegplay achiev frame rate frame per second experi figur b give plot interfram time repres mpegplay applic plot show good pictur continu achiev despit reduc frame rate greedyfr greedygr mpeg_ob interfram time ms pictur number mpeg figur a execut profil three mpegplay run ob class togeth two greedi applic gr fr class respect slant line greedi gr flat one greedi fr middl one show coincid mpegplay b plot interfram time first second repres mpegplay prioriti inherit demonstr practic signific prioriti inherit turn set experiment run set experi use two mpegplay each gr rate one radio recv gr rate two greedi applic each fr rate observ case execut profil one shown figur obtain shown instanc occur greedi applic complet domin cpu applic abl make progress greedi applic complet execut case figur a occur second understand problem collect trace inform insid kernel trace show second clock tick occur domin greedi applic henc applic never preempt sinc prioriti never reduc rate control kernel sourc code could occur clock thread solari handl period clock interrupt block synchron primit happen subsequ clock process defer clock thread return collect trace inform confirm case figur a clock thread inde block from second mutex lock attempt process high prioriti timer activ system data show one mpegplay applic hold mutex lock question prioriti inherit mpegplay applic hold timer lock requir clock thread inherit latter prioriti interrupt thread solari clock thread strictli higher prioriti arch thread henc block mpegplay quickli schedul preempt run greedi applic necessari abl quickli releas timer lock result turn ensur clock thread complet task without delay subsequ clock process prioriti inherit incorpor therefor kind gap shown figur longer observ figur b show repres execut profil mix applic use preced paragraph implement effici compar effici prototyp schedul solari ts ran n copi greedi concurr gr fr solari ts respect note averag complet time per applic vari n solari ts use standard quantum size gr fr preemption quantum ms use figur show three schedul essenti perform gr fr slightli lower time applic slightli higher time applic see effect fine versu coarsegrain rate control vari preemption time quantum ms gr fr figur notic servic class number offer true multithread insid kernel process clock interrupt one kernel thread certain system clock activ may handl interrupt handler cannot block unavail resourc radio_recvplot round number time second mpeg mpeg greedi greedi figur a unstabl system perform without prioriti inherit top two line initi coincid show two greedi b stabl system perform prioriti inherit top line show coincid greedi a b flat line radio recv middl line show coincid mpegplay averag complet time number applic solari gr fr figur averag time complet one greedi applic use gr fr solari ts figur averag time in second complet greedi applic compet applic preemption quantum size ms a gr class b proxi fr class applic larg complet time drop somewhat preemption quantum increas ms chang significantli increas quantum size conclus present cpu schedul framework suitabl heterogen applic run gener purpos com puter discuss present system evolv arc schedul particular retain arc central featur ratebas share firewal protect provis system feedback rate renegoti major design innov arc definit heterogen servic architectur base uniform ratebas share servic class differ admiss control criteria algorithm rc adapt virtualclock use expect complet time previou comput instead comput schedul schedul frc solut fair problem similar sever approach virtual clock reset timeshift schedul leap forward virtual clock ratebas algorithm suitabl firewal protect also use framework system integr gener purpos os environ discuss issu prioriti inherit proxi schedul divers experiment result demonstr sound practic util approach acknowledg author wish thank sanghamitra sinha conduct measur develop arch result report paper r eventbas fair share schedul cpu inherit schedul effici user space protocol implement qo guarante use realtim upcal hierarch cpu schedul multimedia oper system fair share schedul experi processor reserv dynam qo realtim mach schedul algorithm multiprogram hard real time environ qnx softwar system ltd processor capac reserv oper system support multimedia applic design analyz multimedia oper system leap forward virtual clock new fair queue scheme guarante delay throughput fair lotteri schedul flexibl proportionalshar resourc manag stride schedul determinist proportionalshar resourc manag delay guarante virtual clock server migrat socket end system support network qualiti servic guarante arch uniform cpu schedul heterogen servic adapt ratecontrol schedul multimedia applic new traffic control algorithm packet switch network tr