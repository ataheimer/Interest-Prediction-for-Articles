t reduc virtual call overhead java vm justintim compil a java objectori languag use virtual method support extens reus class unfortun virtual method call affect perform thu requir effici implement especi justintim jit compil done inlin cach type feedback solut use compil dynamicallytyp objectori languag self virtual call overhead much critic perform java inlin cach virtual call would otherwis translat indirect jump two load translat simpler direct jump singl compar type feedback combin adapt compil virtual method inlin use check code verifi target method equal inlin onethi paper evalu perform impact techniqu actual java virtual machin new open sourc java vm jit compil call latt also discuss engin issu implement techniquesour experiment result specjvm benchhmark indic monomoprh inlin cach polymorph inlin cach achiev speedup much geometr mean respect type feedback cannot improv polymorph inlin cach even degrad perform program b introduct java recent creat objectori program languag objectori program languag support virtual method allow differ code execut object dierent type call virtual method call java incur perform penalti target call determin runtim base actual type object requir runtim type resolut exam ple extra code need gener justintim jit compil mani java jit compil like kae cacao latt virtual method call translat sequenc load follow indirect jump rather direct jump static method call dynamicallytyp objectori languag self howev virtual call cannot implement use simpl sequenc load follow indirect jump like java furthermor virtual call much frequent java so two aggress techniqu employ reduc virtual call overhead inlin cach type feedback techniqu virtual method call translat simpler sequenc compar direct jump even inlin type check code although techniqu certainli applic java littl known perform impact sinc virtual method call less frequent less costli java techniqu involv addit translat overhead import evalu technqu separ sinc result self may appli paper evalu techniqu actual java jit compil compil includ open sourc java virtual machin call although implement techniqu straightforward trade os optim opportun want discuss paper also provid detail analysi perform impact java program rest paper organ follow chapter review method call java summar virtual method call mechan use jvm chapter describ implement inlin cach type feedback latt chapter show experiment result relat work describ section summari follow section background method invoc java java program languag provid two type method instanc method class method class method invok base class declar via invokestat bound static jit compil know method invok compil time instanc method hand alway invok respect object sometim call receiv via invokevirtu actual type object known runtim ie bound dynam jit compil cannot gener determin target compil time instanc method bound static though exampl nal method privat meth od method nal class instanc method call invokespeci bytecod eg instanc method special handl superclass pri vate instanc initi gener method invoc incur overhead creat new activ record pass ar gument on case dynam bind addit overhead nding target method which call method dispatch over head latt jit compil virtual method tabl latt virtual machin abl execut java bytecod includ novel jit compil target risc machin specic ul trasparc jit compil gener code good qualiti clever map java stack operand regist neglig overhead also perform tradit optim common subexpress elimin loop invari code motion addit runtim compon latt includ thread synchron except handl garbag collect optim result perform latt competit sun hotspot sun jdk product releas maintain virtual method tabl vmt load class tabl contain start address method dene class inherit superclass due use singl inherit java start address method place oset n virtual method tabl class also place oset n virtual method tabl subclass class consequ oset n translationtim constant sinc object includ pointer method tabl correspond class virtual method invoc translat indirect function call two load load virtual tabl index tabl obtain start ad dress indirect call staticallybound method call latt gener direct jump call site inlin target method unless bytecod size huge where invoc overhead would neglig inlin depth larg to prevent recurs call inlin innit inlin cach type feedback section review techniqu inlin cach type feedback describ implemen tation use exampl class hierarchi figur throughout section class b c subclass addit eld well one inherit class a class b inherit method getfield class a class c overrid it assembl code section sparc assembl class int field int getfield return field class b extend int field int getfield return field class c extend int field int getfield return int getfield return field figur exampl class hierachi inlin cach monomorph inlin cach jit compil translat objgetfield figur a cannot know version getfield actual call obj object class c well class b even class c exist jit compil cannot sure whether as getfield call class c dynam load later vmt call translat sequenc loadloadindirect jump shown figur b index mean oset vmt denot translationtim constant void dummi contain object obj ld o g index vmt ld gindex g a b figur exampl virtual call java correspond vmt sequenc inlin cach total dierent method dispatch mechan inlin address last dispatch method call site figur a show translat code use monomorph inlin cach mic call site jump system lookup routin call method dispatch via stub stub code set regist g index thu method dispatch determin call method call empti inlin cach histori target method yet call execut rst time method dispatch nd target method base type receiv translat translat yet updat call site point translat method prepend type check code figur b show state inlin cach rst encount receiv object class a now inlin cach includ histori one method invoc target method detail type check code shown gure call trampoline_cod mov o g mov indix g trampolin code translat method method_dispatch call dispatch translat method fail_handl typecheck code bne fail_handl cmp g avmt ld o g a empti inlin cach b monomorph inlin cach call agetfield figur monomorph inlin cach receiv dierent type encoun tere state inlin cach chang receiv encount fail handler oper like method dispatch nd target method translat translat yet updat call site polymorph inlin cach polymorph inlin cach pic dier mic deal failur type check instead updat call site repeatedli creat pic stub code make call site point stub code pic stub code compos sequenc com pare branch direct jump instruct previous encount receiv type correspond method address inlin figur a show statu call site correspond pic stub code call site encount object class class c detail pic stub code shown figur possibl method multipl type check code due inherit type check code separ correspond method bodi avmtvmt pointer class a translationtim constant sethi hiavmt g load bit constant valu g loavmt g cmp g g compar two vmt pointer bne fail_handl branch fail_handl code two vmt equal mov o g delay slot instruct check code locat front method bodi code requir jump_to_target call address agetfield mov g o prevent return back implement fail_handl locat front code fail_handl index call method vmt translationtim constant call fail_handl call fail_handl mov index g delay slot instructoin index valu pass fixup function via g regist figur detail type check code translat method call picstub pic stub code ld o g ld gindexg nop a polymorph inlin cach translat method call vmt code vmt code b handl megamorph site figur polymorph inlin cach practic pic stub code grow without limit number entri pic stub code exce predetermin valu correspond call site call megamorph site use vmt style code instead sinc code depend index valu vmt share among mani call site figur b explain megamorph site handl although mic use self megamorph site vmtstyle mechan cannot use self think vmtstyle code appropri megamorph site mic sinc latter may caus frequent updat call site frequent icach ush result sever variat pic space tight pic stub share among ident call site type pic call share pic former type call nonshar pic distinct requir pic stub code contain count code type test hit reorder base frequenc reduc number type test need nd target reorder perform onc pic stub reorder without count code use call count pic also possibl reorder perform period pic stub alway possibl set target method same call call site ident mov o g save return address g regist avmtvmt pointer class a translationtim constant sethi hiavmt g load bit constant valu g loavmt g cmp g g compar two vmt pointer bne next nop delay slot instruct call address agetfield jump agetfield two vmt equal mov g o set correct return address cvmtvmt pointer class c translationtim constant next g locvmt g cmp g g bne next nop call address cgetfield mov g o next call fixupfailedcheckfromp call fixup function nop figur detail pic stub code count code type pic call period pic vmt vs inlin cach inlin cach favor vmt two reason first vmt mechan requir indirect jump easili schedul modern superscalar microprocessor wherea inlin cach faster modern microprocessor branch predict second vmt provid inform call site inlin cach get inform receiv encoun tere though mic give last one inform use optim method inlin type feedback although inlin cach reduc method dispatch overhead virtual call site call overhead cost indirect jump higher ultrasparc due lack btb branch target buer still remain order reduc call overhead need inlin method idea type feedback extract type inform virtual call previou run feed back compil optim type feed back virtual call inlin guard veri target method equal inlin method we call condit inlin framework type feedback implement type feedback base pic sinc provid accur inform call site mic vmt type feedback also requir adapt compil framework implement adapt version latt select method aggress optim base method run count method call rst time translat regist alloc tradit optim virtual method call optim even initi translat isol perform impact inlin fair comparison congur experi see section within handl pic number time method call exce certain threshold retransl condit inlin also done condit inlin compil decid whether call site inlin base statu inlin cach exampl call site gure b remain monomorph site retransl time inlin type check code follow objvmt avmt els call site point pic stub code one target method stub code condit inlin except time comparison base address receiv type exampl pic stub code figur a compos type check class class b not class class c address getfield ident so inlin method type check replac address check includ access vmt two load follow objvtmindex method getfield address agetfield loadload els frequenc inform type method avail use count pic improv allornoth strategi even though multipl receiv multipl target method inlin call site type test address test one case domin among case pic stub current criteria valu decid whether case domin count type test hit pic stub exce total count pic stub inlin type check code static type predict call site locat untaken execut path initi run inform probabl receiv type but collect even retransl howev class object virtual call made subclass translat time easili predict receiv type would class runtim althouth java allow dynam class load found predict quit accur program follow case exampl inlin call site even inform inlin cach retransl inlin heurist singl vs multipl previou section inlin method virtual call site possibl call site two target method neither domin case might lose inlin opportun restrict number inlin method call site howev found case java program use test program virtual call site call singl calle enabl inlin multipl method call site increas number inlin virtual call signicantli experiment result section evalu perform impact inlin cach type feedback experiment environ benchmark compos specjvm benchmark suit tabl show list program short descript each benchmark descript byte compress compress util jess expert shell system javac java compil mpegaudio mp decompressor jack parser gener tabl java benchmark descript translat bytecod size tabl list congur use experi ment lattevmt lattem lattep except handl virtual call use vmt mic pic respect lattetf inlin virtual call use type feedback adapt version latt initi translat ident lattep describ section variat pic denot variat surround check exclud sinc correct test onli bracket exampl share pic denot pic count pic picc period pic picp default version pic denot pic distinct need system descript virtual call handl vmt virtual call handl mic virtual call handl pic virtual call inlin use type feedback retransl time tabl system use benchmark test machin sun ultra mhz mb memori run solari test singleus mode ran benchmark time took minimum run time includ jit compil overhead garbag collect time characterist virtual call tabl show characterist virtual call tabl vcall mean total count virtual call mcall mean total count monomorph call starget mean total count virtual call target method one runtim virtual call monomoph call virtual call one target method program like javac mtrt jack mani call site target method one even though multipl receiv tyep thu expect address check inlin may eec tive program also expect compress much aect virtual call implement sinc number virtual call extrem small analysi monomorph inlin cach tabl show characterist mic tabl vcall mean total count virtual call pcall mean total count call call polymorph call site miss mean total count type check miss trend miss ratio program db jack low miss ratio compar v call type check miss common jess javac sinc type check miss requir invalid part icach miss ratio greatli specjvm benchmark total elaps run time compar specjvm metric aect overal perform expect perform jess javac may wors monomorph inlin cach analysi polymorph inlin cach tabl show averag number type check pic stub congur pic column tabl divid maximum number possibl entri pic stub threshold valu determin reorder take place valu appli picc picp although reorder take place former take place period latter threshold valu zero mean count rst glanc nd number averag type check small even though monomorph site includ number averag number calcul everi inlin cach includ monomorph site number even closer howev count enabl number less everi case tabl clear count pic eectiv reduc number type check pic stub except jack although number gener reduc threshold valu increas unchang even increas program seem satur certain valu simpli increas threshold guarante improv jack dierent characterist program come singl polymorph site account half total polymorph call exhibit strang behavior call site switch polymorph inlin cach monomorph inlin cach newli encount type receiv repetit thousand time thereaft former type use repetit million time default pic scheme without count better count case also see eect inaccuraci caus share pic stub tabl although seem natur nonshar version would accur share version dierenc appar noncount version congu ration number tabl better tabl except javac pic stub chang vmtstyle code share increas number entri howev dierenc lower case call site indexof method javautilvector class call equal method benchmark vcall mcall starget mcallvcal stargetvcal compress jess mpegaudio jack geomean tabl characterist virtual call benchmark vcall pcall miss missvcal misspcal compress jess mpegaudio tabl characterist monomorph inlin cach tabl shown comparison tabl although period reorder pic hard use real implement alway incur count overhead involv loadaddstor sequenc seen somewhat ideal cong urat term number type check dierenc period version nonperiod version lower program thu qualiti count pic quit accept tabl show space overhead pic nonshar share version tabl n mean number pic stub max mean possibl maximum number entri pic stub overhead seem small program except javac share version greatli reduc overhead sinc share pic stub degrad perform sever program share pic use space tight analysi type feedback tabl show eect type feedback term number inlin virtual call base system four dierent pic variat pic picsc pic picc use main purpos pic provid prole inform larger number maximum entri pic use threshold count pic set order aect accuraci much gener number inlin virtual call reduc retransl threshold increas although accur prole inform avail high retransl threshold low re translat threshold opportun miss delay retransl seem high addit number inlin call mani program constant regardless type pic two rea son one possibl method big inlin case inlin method relat inlin heurist beyond scope paper possiblil singl method domin call site howev case specjvm benchmark shown follow section program like javac mtrt aect type pic use count version prefer noncount version call site multipl receiv type thu inlin address check inlin type check count inform avail one receiv type domin call site involv two target method thu cannot inlin implement inlin one method domin javac uenc eect ie amount type check inlin address check inlin increas sinc pic reus call site method inlin done valu larg benchmark pic compress jess mpegaudio jack tabl averag number type check nonshar count pic lattepicc benchmark pic compress jess mpegaudio jack tabl averag number type check share count pic lattepicsc former eect domin mtrt increas amount type check inlin almost decreas address check inlin analysi inlin heurist tabl show total number inlin virtual call dierent inlin heurist inlin singl method call site inlin possibl method call site number column singl method inlin sum type check inlin address check inlin tabl previou section number column method inlin obtain inlin method encount initi run inlin inlin rule size depth expect fact virtual call site one target method littl improv term number inlin virtual call even though possibl method permit inlin javac op portunit improv inlin multipl method call site so think inlin method call site sucient program mani call site still remain inlin due factor like method size inlin depth count version exclud sinc dierenc noncount version possibl method inlin share version also exclud sinc caus code explos javac perform impact inlin cach type feedback tabl show total run time tot program congur latt translat overhead tr also includ total run time sinc littl dierenc run time dierent congur pic tf one instanc list here exact congur like thi pic nonshar count pic maximum number entri reorder threshold tf base nonshar count pic maximum number entri reorder threshold retransl threshold whole mic improv perform latt geometr mean pic type feedback compar latt vmt point previou section mic exhibit poor perform jess javac high ratio type check miss pic expect solv problem experienc mic expos program without sever degrad program improv perform almost program compar vmt howev type feedback seem eectiv mtrt number inlin virtual call much larger program number benchmark pic compress jess mpegaudio jack tabl averag number type check nonshar period pic lattepicp benchmark pic compress jess mpegaudio jack tabl averag number type check share period pic lattepicsp inlin virtual call program seem low compens retransl overhead in creas translat time inlin overhead in creas code size regist pressur on sinc perform type feedback depend inlin heurist well retransl framework care implement measur eect type feedback correctli implement could improv point howev result mtrt give us expect eect type feedback mtrt getter method getx geti getz frequent perform benchmark greatli improv inlin meth od common code style use accessor method are eectiv type feedback could be relat work work base polymorph inlin cach type feedback polymorph inlin cach studi ur holzl et al self compil achiev median speedup monomorph inlin cach type feedback propos ur holzl david ungar implement type feedback self compil use pic improv perform factor compar nonfeedback compil sinc virtual call frequent self also sinc default dispatch overhead much larger vmt use java achiev larger speedup our furthermor measur compar execut time exclud translat time overhead relev studi done david detlef ole agesen also target java use condit inlin propos method test ident address test howev mainli concentr inlin rather inlin cach use prole inform inlin virtual call gerald aigner ur holzl implement op timiza sourcetosourc c compil use static prole inform inlin virtual call improv perform median reduc number virtual function call median factor ve karel driesen et al extens studi variou dynam dispatch mechan sever modern architectur mainli compar inlin cach mechan tablebas mechan employ indirect branch show latter perform well current hardwar also expect tablebas approach may perform well futur hardwar olver zendra et al implement polymorph smalleiel compil also elimin use vmt use static variat pic inlin monomorph call site howev reli static type infer use runtim feedback benchmark nonshar share compress jess mpegaudio jack tabl size pic stub code benchmark typecheck inlin addresscheck inlin jess tabl inlin call type feedback retransl threshold base experi c program brad caler dirk grunwald propos use if con version similiar type feedback except use static prole inform conclus futur work implement inlin cach type feedback latt jit compil evalu techniqu although program suer frequent cach miss mic achiev speedup geometr mean vmt polymorph inlin cach solv problem experienc mic without incur overhead elsewher achiev speedup geometr mean vmt use count pic also test sever variat pic shown characterist pic java program count pic reduc averag number type check pic stub compar noncount version achiev averag number type check close period version within program memori matter concern share pic save space reason degrad perform eect type feedback fulli shown studi overal perform even wors count pic although true program littl opportun improv term virtual call result partli cannot appli optim select bene cial howev perform mtrt mani virtual call small method greatli improv type feedback give us insight perform impact type feedback code style use abstract make call becom domin java program type feedback eectiv studi type feedback also expos prob lem adapt compil method inlin avoid degrad due type feedback import estim cost incur retransl inlin appli condit inlin hotspot r latt fast ecient java vm justintim com piler java languag speci kemal ebcio java virtual machin speci kemal ebcio kemal ebcio kemal ebcio java hotspot perform engin httpwww inlin virtual method gerald aigner ur h reduc indirect function call overhead c tr