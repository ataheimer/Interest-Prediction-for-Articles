t determinist parallel backtrack search a backtrack search problem involv visit node arbitrari binari tree given pointer root subject constraint children node reveal parent visit present fast determinist backtrack search algorithm pprocessor common crcwpram visit nnode tree height h time onphlogloglogp upper bound compar favour natur ohgrnph lower bound problem approach embodi novel effici techniqu dynam assign treenod processor ensur work share equit among them b introduct sever algorithm techniqu employ solv mani optim problem base systemat explor tree whose intern node correspond partial solut grow progress rene increas depth whose leav correspond feasibl solut paper concern implement tree explor research support part ec esprit iii basic research project geppcom cnr itali grant cnrct murst itali project mosaico result paper appear preliminari form proceed rd intern colloquium automata languag program paderborn germani juli preprint submit elsevi preprint januari sharedmemori parallel machin specic consid backtrack search problem involv visit node tree subject constraint initi root known processor children node made known node visit moreov structur size n height h unknown processor assum node visit and children reveal constant time sinc n work need visit n node sinc tree height h contain path h node whose visit time must form strictli increas sequenc follow algorithm backtrack search problem requir time pprocessor machin number work parallel backtrack search appear litera ture random algorithm develop completelyconnect network processor kzlab butter network ran run optim onph step high probabl note howev butter algorithm focus number nodevisit step fulli account overhead due manipul local data structur determinist algorithm given kp run o ph time p p op clear whether latter algorithm extend work larger tree size relationship comput commun explor tree aris irregular divideandconqu comput studi wk number relat problem also address liter atur branchandbound rankzlabkphppahppb dynam tree embed albglllnr paper present determinist pram algorithm backtrack search whose run time within triplylogarithm factor natur lower bound discuss abov main result summar follow theorem theorem determinist algorithm run pprocessor common crcwpram perform backtrack search nnode boundeddegre tree height h np hlog log log p time worst case rst ecient determinist pram algorithm place restrict structur size height boundeddegre tree appli whose run time faith account cost algorithm perform optim number onp step olog log log p multipl factor run time captur averag overhead per step requir ensur workload equit distribut among processor consequ algorithm would becom optim cost node visit e like case typic applic backtrack search everi node repres complex subproblem solv rest paper organ follow section provid number basic denit discuss simpl direct approach backtrack search algorithm use combin sophist strategi attain ecienc highlevel structur algorithm describ section section provid detail descript key routin perform node visit load balanc section argu gener approach discuss adapt schedul straightlin comput repres boundeddegre dag section close paper nal remark preliminari algorithm design common crcw pram model com putat consist p processor share memori unbound size singl step processor either perform constant amount local comput access arbitrari cell share memori common crcw variant pram concurr read permit concurr write provid compet processor write valu jaj let tree visit simplic assum tree binari although result immedi extend gener class boundeddegre tree concret suppos node repres memori mean descriptor initi descriptor root avail share memori pram design locat descriptor node gener access descriptor node father visit node involv access descriptor gener store descriptor children if ani mention befor node visit assum take constant time straightforward strategi solv backtrack search problem visit tree breadthrst levelbylevel fashion algorithm base strategi would proceed phase phase visit node certain level evenli redistribut children among processor guarante overal number parallel visit step nph here term parallel visit step refer ktupl k p simultan visit distinct tree node perform distinct pram processor perfectli balanc redistribut tree node among processor success parallel visit step accomplish determinist use simpl parallel prex sum jaj yield onph log p overal run time backtrack search note strategi also work weaker erew pram variant concurr readwrit access allow fact asymptot optim number np visit step still achiev without perfect balanc requir node level tree approxim redistribut among processor is node processor given must constant factor would receiv perfect balanc approxim redistribut attain use follow result goldberg zwick fact gz arbitrari sequenc p integ valu approxim prex sum b determin olog log p worstcas time pprocessor common crcwpram employ approxim prex sum implement node redistribut visit level tree get determinist onph log log p time algorithm backtrack search problem pprocessor common crcwpram valu n h p next section devis sophist strategi outperform simpl one tree log log plog log log p asymptot improv result near optim perform care loadbalanc techniqu without excess global commun highlevel view algorithm algorithm proce quasibreadthrst fashion let tree node partit h level node one level distanc root explor process split stage visit stratum tree consist consecut level begin stage node top level stratum approxim distribut among processor note previous mention straightforward strategi base approxim prex sum visit stratum size therefor focu techniqu cope ecient smaller strata consid stage visit stratum node conveni number level stratum top bottom stage explor node level point explor set node whose descriptor gener yet visit call frontier the initi frontier contain node top level stratum let f j denot frontier node level j denot entir frontier order evalu progress algorithm make dene weight function frontier f follow ie node level j weight j note contribut frontier node wf exponenti decreas level within stratum also visit frontier node level j involv replac node frontier children if ani whose combin weight constant factor less parent henc node visit decreas frontier weight visit node lower number level rather node stratum result substanti decreas weight function order avoid frequent expens balanc step explor strategi necessarili proceed regular breadthrst man ner nonetheless make use certain cheaper weightdriven loadbalanc techniqu ensur frontier weight decreas predict rate pictori represent explor process shown fig stage consist two part rst part sequenc parallel visit step perform explor node stratum frontier weight less equal p order detect end rst part visit a stratum h fig weightdriven explor process tree height h a portion within thin solid line enclos visit node belong previou strata thick solid line enclos visitedgener node within current stratum level frontier node lie along thick spline dash line enclos node still gener b frontier weight reduct induc visit node level j stratum j step execut batch weight estim comput execut batch use approxim prex sum algorithm whose olog log p complex domin visit step second part stage complet explor stratum follow first everi j cluster j distinct processor assign node f j mean approxim prex sum olog log p time sinc assign feasibl next descend node f visit correspond cluster processor o time specic consid frontier node x level j let fp cluster processor assign it explor proce j round round k k j descend x distanc k visit round zero p visit x give children if ani p p thereaft round p take node if ani given previou round visit it give children processor p p i on end stage children node last level stratum make initi frontier next stage evenli distribut among processor employ approxim prex sum algorithm highlevel procedur descript new strategi visit small strata op node given fig summari stratum visit stage procedur stage visit rst altern parallel visit step procedur visit step approxim count frontier weight procedur approxim count latter goe p then visit stratum complet rst alloc processor cluster residu unexplor node procedur alloc cluster visit subtre within stratum use simpl techniqu illustr procedur complet visit nalli redistribut initi frontier next stage p processor procedur redistribut node note three proce procedur stage visit wf p repeat time repeat fig overal structur algorithm visit small strata dure node implement mean simpl variat approxim prex sum algorithm gz order determin total run time stage need give bound number visit step perform let f frontier begin tth visit step step call full visit p node f call reduc visit least half node rang section show perform visit step time olog log log p ensur alway either full reduc see theorem clearli stratum node omp full visit step stage wherea number reduc step bound follow lemma lemma reduc visit step sucient reduc frontier weight p proof proof base follow properti claim let x two sequenc nonneg integ proof claim proof induct n case suppos properti hold n consid sequenc assum x n n sinc otherwis induct step immedi easi see note therefor appli induct hypothesi which combin previou inequ prove claim consid reduc visit step let f frontier prior execut step let n j number node f j visit step visit step reduc i claim show jf jj thu visit node account least half total frontier weight sinc combin weight children node two third weight parent follow weight reduct must least one third total weight visit node ie least one sixth frontier weight wf prior execut visit step thu new frontier weight follow complet step wf sinc frontier begin stage contain op node level initi frontier weight op impli frontier weight less equal p o reduc step prove lemma from discuss conclud new strategi employ visit stratum size visit step strata size visit omp time use straightforward breadthrst strategi outlin section suitabl interleav two strategi obtain algorithm visit stratum time omp valu m immedi yield backtrack search algorithm run time stipul theorem note number visit step requir onp h all implement visit step section describ implement visit step enforc properti step alway either full reduc key idea heaplik data structur hold frontier node node extract prior begin visit step children insert end step conceptu compos p array tree ring also regard p pram processor conceptu arrang row begin visit step tree ring ith row contain current frontier node level i tree ring structur forest complet binari tree dierent size leaf vertic tree ring node tree visit intern vertex contain pointer children root tree tree ring organ doublylink list order tree size thi data structur broadli similar one use cv previou section assum stratum visit size op use k denot upper bound size ie number node descriptor store tree ring execut stage later show henc height tree tree ring alway olog note tree ring notion associ particular processor sinc store share pram memori access all visit step consist two substep visit balanc describ follow paragraph visit substep execut parallel column processor let total number node held tree ring column let c constant speci later processor column select minf cg topmost node union tree ring distribut node evenli among themselv then processor visit node receiv final children justvisit node insert appropri tree ring within column balanc substep execut parallel row processor aim partial balanc node store tree ring row dene degre processor number tree node contain tree ring let f sum degre processor row i ie number frontier node level stratum balanc redistribut node among tree ring way upon complet minff processor degre larger cdf qe row i moreov balanc never increas maximum processor degre row actual implement balanc substep rather involv discuss separ subsect avoid confus discuss element tree visit tree employ tree ring use term node exclus connect former reserv term vertex latter have lemma visit step alway either full reduc proof let f frontier begin visit step then minfjf jj qgk processor row j degre larger cdjf jjqe j j ensur either balanc substep execut end preced visit step or visit step consider rst stage approxim even distribut frontier node guarante start stage call tree node maintain overload processor bad node other good node sinc k upper bound degre processor total number bad node rst level frontier minfjf jj qg thu bad node level lower account half total number frontier node level suppos jf j p let r q number column hold fewer node sinc column hold node number good node bound follow which follow tediou simpl arithmet manipul impli r q c sinc c constant greater one conclud column hold least node thu visit step visit node henc step full consid case jf j p sinc number good node column cjf jq c follow total number node visit step least equal total number good node observ made abov know visit good node would visit least half frontier node level lower henc step would reduc sinc column select topmost node avail good node visit least number node higher level visit place maintain reduc properti order implement visit step describ abov need ecient primit oper tree ring consid stage visit stratum note begin stage degre processor o visit substep degre increas o addit term each o node visit processor column gener two children singl visit step sinc balanc substep increas maximum degre processor omp visit step execut overal conclud maximum processor degre alway o consequ throughout stage tree ring contain olog tree o size olog height each shown cv that given k node evenli distribut among k processor tree ring whose tree contain node leav construct processor olog two tree ring size ok merg one tree ring olog time singl processor number k leav extract ok processor tree ring time proport maximum height tree tree ring extract tree ring structur restor within time bound easili argu visit substep implement straightforward fashion within column use standard techniqu prex aforement primit manipul tree ring discuss conclud lemma strata size op visit execut olog olog log log p time implement balanc mention befor use denot upper bound degre processor stratum size op explor an exact valu k deriv analysi assum k known processor prior begin entir algorithm sinc balanc execut parallel independ row concentr oper perform arbitrari row say row k let f k denot total number tree node maintain processor row begin balanc substep purpos substep redistribut node among processor way that redistribut number processor degre greater cdf k qe minff k qgk it note valu f k known processor substep also ensur maximum processor degre increas crucial featur implement balanc node physic exchang processor would costli purpos instead move manipul correspond tree ring cost logarithm number node move balanc base balanc strategi introduc broder et al bfsu make use special kind expand dene below denit bfsu undirect graph e a b extrovert graph a b a b set v jsj ajv j least bjsj vertic strictli neighbour v s exist regular extrovert graph constant degre prove probabilist method bfsu row identifi q processor vertic regular a b extrovert graph e odd degre d a b constant let consist phase number phase tree node maintain row processor mark dormant particip subsequ phase remain node said activ begin phase frontier node activ phase perform follow action processor k activ node tree ring declar congest built direct version subgraph g construct proce perform step follow type bfsu initi empti step everi congest processor yet check whether least d neighbour either noncongest alreadi and so enter acquir edg d neighbour also enter d comment construct fact odd guarante dag congest processor outdegre greater indegre non congest processor dag outdegre moreov depth subdag identi compris congest processor k activ node descend congest processor k activ node mark k activ node dormant j k note k j processor extract direct successor tree contain j distinct activ node tree ring send pointer tree successor question processor merg tree receiv tree ring pictori represent construct dag perform phase balanc given fig r r c r r b a d fig dag construct process perform balanc a extrovert graph g connect processor row white node repres uncongest processor black shade node repres respect heavili congest processor more k activ node lightli congest processor more k k activ node bc twostep construct dag d d nal subdag contain heavili congest node descend d follow show end phase number processor degre cdf k qe minff k qgk maximum processor degre increas lemma begin phase processor hold k activ node k node moreov phase increas maximum processor degre proof proceed induct i case suppos properti hold index i induct processor start phase k activ node k node overal congest processor make dag involv movement node phase processor begin k node k activ k dormant end phase k node remain activ rest becom or remain dormant moreov processor degre chang subdag empti congest processor k activ node k k node sinc case exchang pointer take place properti index instead empti is least one congest processor k activ node note case maximum processor degre greater k congest processor transmit activ node successor sinc outdegre congest processor greater indegre repres net loss least node therefor processor number activ node end phase overal degre decreas moreov number dormant node processor stay unchang name k final noncongest processor begin phase k activ node receiv j dk new activ node add less maximum processor degre previou case number dormant node processor stay unchang less k refer processor maintain dormant node rogu let rj denot set rogu begin phase j cj set processor declar congest phase dene r c log ka have lemma proof proceed induct j case clearli true sinc suppos properti hold index j consid index j note rogu begin phase j given set plu set c cj contain congest processor make dag phase j let us give upper bound j note c j minff k qg aq sinc otherwis congest processor would account activ node imposs extrovert graph g rst step dag construct number congest processor c j impli jc j c j b henc number rogu begin phase j lemma end balanc procedur number processor degre cdf k qe minff k qgk suitabl choic constant c moreov procedur execut time olog log log p common crcwpram proof let us rst consid case begin phase processor maintain k activ node by lemma number rogu by lemma choic moreov lemma show maximum degre processor rogu end phase increas cdf k qe threshold subsequ phase consid case case c d moreov sinc r j increas j total number rogu indic equat evalu run time consid phase balanc step clearli take o time everi dag construct step accomplish constant time henc construct step take time o sinc depth easi see step accomplish time o well cost remain step domin cost extract merg oper perform tree ring take olog note number phase conclud overal run time o log follow theorem combin contribut section establish result announc section upon analysi backtrack strategi base theorem visit step within stratum size op implement olog log log p time pprocessor common crcwpram ensur step either full reduc evalu boundeddegre dag section show idea involv backtrack search algorithm may use solv dag evalu problem comput dag node zero indegre regard input node repres oper whose operand valu comput predecessor ie node adjac respect incom edg node zero outdegre regard output node evalu operand evalu dag evalu problem consist evalu output node dene layer dag obviou way input layer zero layer everi node one plu maximum layer among predecessor parallel set assum dag constant degre store share memori pprocessor commoncrcw pram dag node repres descriptor contain follow inform eld speci type oper associ node eld store valu two eld operand ie incom edg processor write valu operand timestamp record time pointer node successor d initi pointer descriptor dag input known evenli distribut among processor notic similar dag evalu backtrack search problem comput dag necessarili tree nevertheless still visit ie evalu proceed quasi breadthrst stratumbystratum fashion backtrack search algorithm precis recal backtrack search problem node reveal processor visit uniqu parent dag evalu prob lem visit node entail comput node valu write valu node descriptor and togeth timestamp appropri eld successor descriptor node reveal henc readi evaluatedvisit itself last predecessor evalu node regard child predecessor with tie broken arbitrarili fashion span forest dag implicitli identi dag evalu regard visit forest note backtrack search algorithm employ visit forest boundeddegre tree onp total number node h maximum treeheight forest conclud dag evalu problem solv within time bound conclus work devis ecient determinist strategi perform parallel backtrack search share memori machin specic strategi attain run time tripli logarithm factor away natur lower bound problem previou studi investig mainli focus run time hand overal space requir algorithm grow larg tree size n wherea space requir random scheme propos kzlabran bound minfn phg latter quantiti howev close n larg valu p andor highli unbalanc tree remain challeng open problem devis fast space ecient backtrack search algorithm and gener studi timespac tradeo parallel backtrack search r code theori tight bound onlin tree embed approxim parallel schedul optim determinist approxim parallel pre fast determinist parallel branch bound determinist branch bound distributedmemori machin parallel algorithm backtrack search branch bound comput atom model messagepass dynam tree embed butter i hypercub simpler analysi karpzhang parallel branchand bound method optim speedup backtrack search butter network commun complex parallel divid andconqu tr approxim parallel schedul part i basic techniqu applic optim parallel list rank logarithm time code theori hypercub embed fault toler commun complex parallel divideandconqu tight bound onlin tree embed introduct parallel algorithm dynam tree embed butterfli hypercub atom model messagepass random parallel algorithm backtrack search branchandbound comput branchandbound backtrack search meshconnect array processor optim speedup backtrack search butterfli network nearperfect token distribut optim determinist approxim parallel prefix sum applic simpler analysi karpzhang parallel branchandbound method