t accur worst case time analysi risc processor a accur safe estim task worst case execut time wcet crucial reason time properti realtim system risc processor execut time program construct eg statement affect variou factor cach hitsmiss pipelin hazard factor impos seriou problem analyz wcet task analyz time effect risc pipelin execut cach memori propos extens origin time schema time inform associ program construct simpl timebound approach associ program construct worst case time abstract wcta contain detail time inform everi execut path might worst case execut path program construct extens lead revis time schema similar origin time schema except concaten prune oper wcta newli defin replac add max oper timebound origin timingschema revis time schema accur account time effect pipelin execut cach memori within also across program construct paper also report preliminari result wcet analysi risc processor result show tight wcet bound within maximum overestim obtain use revis time schema approach b introduct realtim comput system task time requir ie deadlin must met correct oper thu utmost import guarante task finish deadlin variou schedul techniqu static dynam propos ensur guarante schedul algorithm gener requir wcet worst case execut time task system known priori therefor surpris consider research focus estim wcet task nonpipelin processor without cach memori rel easi obtain tight bound wcet sequenc instruct one simpli sum individu execut time usual given tabl wcet program calcul travers program syntax tree bottomup appli formula calcul wcet variou languag construct howev risc processor simpl analysi may appropri pipelin execut cach memori risc processor instruct execut time vari wide depend mani factor pipelin stall due hazard cach hitsmiss one still obtain safe wcet bound assum worst case execut scenario eg instruct suffer everi kind hazard everi memori access result cach miss howev pessimist approach would yield extrem loos wcet bound result sever underutil machin resourc goal predict tight safe wcet bound task risc processor achiev goal would permit risc processor wide use realtim system approach base extens time schema time schema set formula comput execut time bound languag construct origin time schema time inform associ program construct simpl timebound choic time inform facilit simpl accur time analysi processor fix execut time howev risc processor time inform suffici accur account time variat result pipelin execut cach memori paper propos extens origin time schema rectifi problem associ program construct call worst case time abstract program construct contain time inform everi execut path might worst case execut path program construct time inform includ inform factor may affect time succeed program construct also includ inform need refin execut time program construct time inform preced program construct becom avail later stage wcet analysi extens lead revis time schema accur account time variat result histori sensit natur pipelin execut cach memori assum task sequenti form cach partit use prevent task affect other time behavior without assumpt would possibl elimin unpredict due task interact exampl consid realtim system preemptiv schedul polici use cach partit system burst cach miss usual occur previous preempt task resum execut increas task execut time result burst cach miss cannot bound analyz task isol paper organ follow section ii survey relat work section iii focus problem associ accur estim wcet task pipelin processor present method solv problem section iv describ accur time analysi techniqu instruct cach memori explain techniqu combin pipelin time analysi techniqu given section iii section v identifi differ wcet analysi instruct cach data cach explain address issu result differ section vi report preliminari result wcet analys risc processor final conclus given section vii ii relat work time predict method realtim system abl give safe accur wcet bound task measurementbas analyt techniqu use obtain bound measurementbas techniqu are mani case inadequ produc time estim realtim system sinc predict usual guarante enorm cost need due limit analyt approach becom popular mani analyt studi howev consid simpl machin model thu larg ignor time effect pipelin execut cach memori a time analysi pipelin execut time effect pipelin execut recent studi harmon baker whalley harcourt mauney cook narasimhan nilsen choi lee kang studi execut time sequenc instruct estim model pipelin processor set resourc repres instruct process acquir consum subset resourc time order mechan process calcul execut time use variou techniqu pattern match scc synchron calculu commun system retarget pipelin simul acsr algebra commun share resourc although approach advantag formal machin independ applic current limit calcul execut time sequenc instruct given sequenc basic block therefor reli ad hoc method calcul wcet program pipelin time analysi techniqu zhang burn nicholson mechan calcul wcet program pipelin processor analysi techniqu base mathemat model pipelin intel c processor model take account overlap instruct execut opcod prefetch c approach wcet basic block program individu calcul base mathemat model wcet program calcul use wcet constitu basic block time formula calcul wcet variou languag construct although approach repres signific progress previou scheme consid time effect pipelin execut still suffer two ineffici first pipelin effect across basic block accur account for gener due data depend resourc conflict within execut pipelin basic block execut time differ depend surround basic block are howev sinc approach requir wcet basic block independ calcul make worst case assumpt preced basic block eg last instruct everi basic block preced basic block analyz data memori access prevent opcod prefetch first instruct basic block analyz assumpt reason target processor sinc pipelin two stage howev complet ignor pipelin effect across basic block may yield loos wcet estim deepli pipelin processor second although mathemat model effect intel c processor model gener enough applic pipelin processor due mani machin specif assumpt made model difficult gener basic block sequenc consecut instruct flow control enter begin leav end without halt possibl branch except end b time analysi cach memori cach memori wide use bridg speed gap processor main memori howev design hard realtim system wari use cach system sinc perform cach consid unpredict concern stem follow two sourc intertask interfer intratask interfer intertask interfer caus task preemption task preempt cach block displac newli schedul task task schedul thereaft preempt task resum execut make refer previous displac block experi burst cach miss type cach miss cannot avoid realtim system preemptiv schedul task result wide variat task execut time execut time variat elimin partit cach dedic one partit realtim task cach partit approach elimin intertask interfer caus task preemption intratask interfer cach occur one memori block task compet cach block interfer result two type cach miss capac miss conflict miss capac miss due finit cach size conflict miss hand caus limit set associ type cach miss cannot avoid cach limit size andor set associ among analyt wcet predict scheme awar of four scheme take account time variat result intratask cach interfer three instruct cach one data cach static cach simul approach static predict hit miss instruct refer due arnold mueller whalley harmon approach instruct classifi follow four categori base data flow analysi ffl alwayshit instruct alway cach ffl alwaysmiss instruct never cach ffl firsthit first refer instruct hit cach howev subsequ refer miss cach block minimum unit inform either present present cachemain memori hierarchi cond elsek fig sampl c program fragment ffl firstmiss first refer instruct miss cach howev subsequ refer hit cach approach simpl number limit one limit analysi conserv exampl consid program fragment given fig assum instruct memori block correspond ie map cach block instruct memori block map cach block assum execut time much longer j assumpt worst case execut scenario program fragment repeatedli execut within loop worst case scenario first access b miss cach subsequ access within loop hit cach howev classifi alwaysmiss refer b treat cach miss approach lead loos estim loop wcet anoth limit approach approach address issu regard pipelin execut use data cach commonli found risc processor niehau et al discuss potenti benefit identifi instruct refer correspond alwayshit firstmiss static cach simul approach howev state analysi rather abstract gener method analyz worst case time behavior program given liu lee propos techniqu deriv wcet bound cach program base transit diagram cach state wcet analysi use exhaust search techniqu state transit diagram exponenti time complex reduc time complex approach propos number approxim analysi method make differ tradeoff analysi complex tight result wcet bound although paper mention method equal applic data cach main focu instruct cach sinc issu pertin data cach handl write refer refer unknown address cf section v consid also clear one incorpor analysi pipelin execut framework rawat perform static analysi data cach approach similar graph color approach regist alloc analysi proce follow first live rang variabl memori block comput second interfer graph construct cach block edg interfer graph connect two memori block map cach block live rang overlap other third live rang memori block split overlap other live rang memori block overlap memori block memori block never get replac cach execut within live rang therefor number cach miss due memori block calcul frequenc count live rang ie mani time program control flow live rang final total number data cach miss estim sum frequenc live rang memori block use program although analysi method step forward analysi method everi data refer treat cach miss still suffer follow three limit first analysi allow function call global variabl sever limit applic second analysi lead overestim data cach miss result assumpt everi possibl execut path worst case execut path limit similar first limit static cach simul approach third limit approach address issu locat worst case execut path calcul wcet limit applic live rang variabl memori block set basic block whose execut variabl memori potenti resid cach rd alu md mult nop lw nop lw fig sampl mip assembl code correspond reserv tabl iii pipelin effect pipelin processor variou execut step instruct simultan overlap due overlap execut instruct execut time differ depend surround instruct are howev time variat could accur account origin time schema sinc time inform associ program construct simpl timebound section extend time schema rectifi problem extend time schema time inform program construct set reserv tabl rather timebound reserv tabl origin propos describ analyz activ within pipelin reserv tabl vertic dimens repres stage pipelin horizont dimens repres time fig show sampl basic block mip assembl languag correspond reserv tabl figur x reserv tabl specifi use correspond stage indic time slot propos approach analyz time interact among instruct within basic block build reserv tabl reserv tabl conflict use pipelin stage also data depend among instruct consid program construct statement may one execut path moreov pipelin processor alway possibl determin one execut path worst case execut path analyz program construct alon exampl suppos statement two execut path correspond two reserv tabl shown fig worst case execut path depend instruct preced program construct exampl one instruct near end preced program construct use md stage execut path correspond r becom worst case execut path hand instruct use div stage instead execut path correspond r becom worst case execut path therefor keep alu rd md fig two reserv tabl equal struct pipelin time inform f time max reserv tabl headffi head reserv tabl tailffi tail md rd head tail fig reserv tabl data structur reserv tabl time inform preced program construct known fig show data structur reserv tabl use approach textual graphic form data structur max worst case execut time reserv tabl determin number column reserv tabl implement column reserv tabl maintain instead maintain first ie column last ie ffi tail column larger ffi head ffi tail are tighter result wcet estim sinc execut overlap program construct model see later correspond case full reserv tabl maintain explain earlier associ program construct set reserv tabl reserv tabl contain time inform execut path might worst case execut path program construct call set wcta worst case time abstract program construct wcta correspond timebound origin time schema element wcta denot t framework time schema extend time interact across alu rd md alu rd md alu rd md fig exampl applic phi oper program construct accur account for extend time schema time formula sequenti statement s wcta s respect oper two wcta defin reserv tabl phi oper concaten two reserv tabl result anoth reserv tabl concaten oper model pipelin execut sequenc instruct follow anoth sequenc instruct semant oper target processor deduc data book fig show applic phi oper figur one note column maintain head tail overlap adjac program construct model and therefor tighter wcet estim obtain time formula s effect enumer possibl candid worst case execut path howev instanti time formula check made see whether result wcta prune element wcta remov wcta guarante element wcet worst case scenario shorter best case scenario wcet element wcta prune condit formal specifi follow reserv tabl w wcta w prune without affect predict worst case time behavior w condit wt max ws execut time assum worst case scenario w ie part ws head tail overlap surround program construct hand w tail execut time w assum best case scenario w ie head complet overlap tail preced program construct tail complet overlap head succeed program construct time formula statement s exp els given wcta s exp respect set union oper previou time formula prune perform instanti time formula function call process like sequenti statement approach function process revers topolog order call graph sinc wcta function calcul function call process call graph contain inform function call exampl f call g arc connect f s vertex g call graph final time formula loop statement s exp given n loop bound provid extern mean eg user input time formula effect enumer possibl candid worst case execut scenario loop statement approach exact comput intract larg n follow provid approxim method loop time analysi approxim loop time analysi problem find worst case execut scenario loop statement loop bound n formul problem find longest weight path not necessarili simpl contain exactli n arc weight direct graph thu approxim loop time analysi method explain use graph theoret formul weight direct graph set execut path loop bodi might worst case execut path ie associ arc weight w ij execut time path execut immedi preced path p defin ij weight longest path not necessarili simpl p p j g contain exactli arc definit max loop worst case execut scenario start path p end path p j given p t max dn gammaij p t max max path p wcta worst case execut scenario inherit p s head sinc start p likewis inherit p j s tail these loop worst case execut scenario start path p end path p j denot wctawp n ij given p t sinc actual worst case execut scenario loop depend program construct surround loop statement know path actual worst case execut scenario start end analyz loop statement therefor one consid possibl correspond wcta loop statement given exp remain problem determin dn gammaij determin valu solv follow equat pk p comput ij use dynam program take on thetajp time larg n time complex still unaccept follow describ faster techniqu give tight upper bound ij techniqu base calcul maximum cycl mean g maximum cycl mean weight direct graph g rang direct cycl g mc mean weight c maximum cycl mean calcul ojp j theta jaj time independ n use algorithm due karp let maximum cycl mean g ij safe approxim prove follow proposit proposit ij maximum weight path not necessarili simpl p p j contain exactli arc complet weight direct graph maximum cycl mean g ij proof assum sake contradict ij greater theta m m gamma w ji construct cycl contain ad arc p j p path ij calcul arc exist sinc g complet graph result cycl mean weight greater sinc ij w ji m impli exist cycl g whose mean weight greater m contradict hypothesi maximum cycl mean g thu ij theta moreov shown ij gamma ij indic loos approx imat bound theta m gamma wmin wmin minimum weight arc expect bound tight sinc wmin rememb p consist path w exp cannot prune other interfer now assum task execut without preemption howev bb content cach cach cach fig sampl instruct block refer program construct real system task may preempt variou reason preemptiv schedul extern inter rupt resourc content on task preemption interfer break task execut flow problem regard interfer adjust predict made assumpt interfer predict applic environ interfer fortun addit perpreempt delay introduc pipelin execut bound maximum number cycl instruct remain pipelin in mip r cycl case div instruct inform avail adjust predict reflect interfer done use techniqu explain iv instruct cach effect processor instruct cach execut time program construct differ depend execut path taken prior program construct result histori sensit natur instruct cach exampl consid program construct access instruct block b b b b sequenc given cf fig assum instruct cach two block directmap directmap cach instruct block place exactli one cach block whose index given instruct block number modulo number block cach exampl second refer b alway hit cach first refer b bring b cach cach block replac mean time regard sequenc consecut refer instruct block singl refer instruct block without loss accuraci analysi struct pipelin cach time inform f time max reserv tabl headffi head reserv tabl tailffi tail block address first referencen block block address last referencen block fig structur element hand refer b alway miss cach even b previous cach prior program construct first refer b replac b s copi cach note b b map cach block assum cach configur unlik two refer whose hit miss determin local analysi hit miss first refer b cannot determin local depend cach content immedi execut program construct similarli hit miss refer b depend previou cach content hit miss two refer affect worst case execut time program construct moreov cach content execut program construct will turn affect execut time succeed program construct similar way time variat again cannot accur repres simpl timebound origin time schema situat similar case pipelin execut discuss previou section and therefor adopt strategi simpli extend time inform element wcta leav time formula intact element wcta two set instruct block address addit max head tail use time analysi pipelin execut fig give data structur element wcta new set n block denot number block cach given data structur first set instruct block address ie first refer maintain instruct block address refer whose hit miss depend cach content prior program construct word set maintain cach block instruct block address first refer cach block second set ie last refer maintain address instruct block remain cach execut program construct word set maintain cach block head tail bb firstrefer lastreferencex x alu rd md rd alu md fig content element correspond exampl fig instruct block address last refer cach block cach content determin hit miss instruct block refer first refer succeed program construct calcul max accur account hit miss local determin second refer b refer b previou exampl howev instruct block refer whose hit miss known ie first refer conserv assum miss cach initi estim max initi estim later refin inform hit miss refer becom avail later stage analysi fig show time inform maintain program construct given previou exampl extens time formula s time formula structur ident one given previou section sequenti statement differ structur element wcta semant phi oper revis semant phi oper procedur defin fig function concaten given figur concaten two input element put result w thu implement phi oper line function concaten first refer correspond cach block access w cach block access w first refer cach block w phi w w therefor struct pipelin cach time inform concatenatestruct pipelin cach time inform w struct pipelin cach time inform w struct pipelin cach time inform w w first referencei null first referencei els first referencei last referencei null last referencei els last last referencei last referencei w first referencei head w g fig semant phi oper would inherit w s first refer likewis line w inherit w s last refer correspond cach block access w w s last refer otherwis compar first refer w s last refer line determin mani memori refer w s first refer hit cach cach hit use refin w s rememb memori refer w s first refer previous assum miss cach initi estim w s max line w inherit w s head take account pipelin execut across w w cach hit determin line calcul phi pipelin oper phi oper defin previou section time analysi pipelin execut miss penalti time need servic cach miss befor element wcta safe elimin ie prune wcta guarante element wcet alway shorter element regardless surround program construct are condit prune procedur specifi fig function prune given figur check whether either one struct pipelin cach time inform prunestruct pipelin cach time inform w struct pipelin cach time inform w w first referencei w first referencei n diff last referencei w last referencei els els return null fig semant prune oper two execut path correspond two input element prune return prune element prune success null neither prune function prune line determin mani entri w s first refer last refer differ correspond entri w s first refer last refer differ bound cach memori relat execut time variat check whether w prune w prune w w made w s wcet assum worst case scenario w shorter w s wcet assum best case scenario likewis line check whether w prune w befor time formula s exp els given previou section problem calcul w s loop statement s exp formul graph theoret problem here wctawp n ij given first refer p j last refer calcul wctawp n comput follow loop time analysi discuss previou section assum loop iter benefit immedi preced loop iter calcul w ij consid execut time reduct p j due execut overlap p assumpt hold case pipelin execut sinc execut time iter head affect tail immedi preced iter case cach memori howev assumpt hold gener exampl instruct memori refer may hit cach block load cach iter immedi preced one nevertheless sinc assumpt conserv result worst case time analysi safe sens result underestim wcet loop statement degrad accuraci result conserv assumpt reduc analyz sequenc k k iter time rather one iter case vertex repres execut sequenc k iter w ij execut time sequenc j execut immedi preced execut sequenc analysi correspond analysi loop unrol k time trade increas analysi complex accur a set associ cach consid simplest cach organ call directmap cach instruct block place exactli one cach block gener cach organ call nway set associ cach instruct block place one n block map set set associ cach need polici decid block replac among block set make room block fetch cach miss lru least recent use polici typic use purpos replac polici given assum random straightforward implement phi prune oper need analysi method set associ cach index map set given instruct block number modulo number set cach time analysi data cach analog instruct cach howev former differ latter sever import way first unlik instruct refer actual address data refer known compiletim complic time analysi data cach sinc calcul first refer last refer import aspect cach time analysi assum actual address everi memori refer known compiletim complic howev avoid complet simpl hardwar support form one bit loadstor instruct avail bit call alloc bit decid whether memori block fetch miss load cach data refer whose address cannot determin compiletim alloc bit set zero prevent memori block fetch miss load cach refer bit set one allow fetch block load cach hardwar support worst case time analysi data cach perform much like instruct cach ie treat refer whose address known compiletim miss complet ignor calcul first refer last refer even hardwar support avail worst case time analysi data cach still possibl take two cach miss penalti data refer whose address cannot determin compiletim ignor refer analysi one cach miss penalti due fact refer may miss cach due fact refer may replac cach block contribut cach hit analysi second differ stem access local variabl gener data area local variabl function call activ record function push pop runtim stack associ function call return implement special design regist call sp stack pointer mark top stack local variabl address offset rel sp offset local variabl determin compil time howev sp valu function differ depend function call howev number distinct sp valu function may bound therefor function comput sp valu function may have sp valu calcul activ record size function call graph final differ due write access unlik instruct refer readonli data refer may read write memori data cach either writethrough writeback polici use handl write access writethrough polici effect write reflect block cach block main memori hand writeback polici effect reflect block cach dirti bit set indic block modifi block whose dirti bit set replac cach block content written back main memori time analysi data cach writethrough polici rel simpl one simpli add delay write access account accompani write access main memori howev time analysi data cach writeback polici slightli complic writeback cach sequenc write access cach memori block without replac inbetween call write run requir one writeback main memori attribut writeback overhead ie delay last write write run call tail write run set one determin whether given write access tail accur estim delay due writeback case local analysi determin whether write access tail case hitmiss analysi memori refer howev local analysi suffici determin whether write access tail everi case henc possibl conserv assum write access tail add writeback delay max howev later analysi program syntax tree reveal write access tail subtract incorrectli attribut writeback delay max global analysi perform provid bit block first refer last refer augment phi prune oper vi experiment result test whether extend time schema approach could produc use wcet bound build time tool base approach compar wcet bound predict time tool measur time time tool consist compil time analyz cf fig compil modifi version ansi c compil call lcc modifi compil accept c sourc program gener assembl code along program syntax inform call graph time analyz use assembl code program syntax wcet wcep modifi inform userprovid graph call inform program code assembl program analyz time fig overview time tool inform along userprovid inform eg loop bound comput wcet program chose idtr board time tool target machin target machin cpu mhz r processor typic risc processor r processor fivestag integ pipelin interfac offchip instruct data cach also interfac offchip floatingpoint unit fpu idtr board contain instruct data cach kbyte each cach directmap block size byte data cach use writethrough polici oneentri deep write buffer cach miss servic time instruct data cach cycl fpu use board mip r although board timer chip provid userprogramm timer resolut low measur purpos facilit measur program execut time machin cycl built daughter board consist simpl decod circuit counter chip provid one userprogrammer timer timer start stop write specif memori locat resolut one machin cycl ns three simpl benchmark program chosen clock sort mm clock benchmark program use implement period timer program period check linkedlist timer and expir call correspond handler function sort benchmark sort array integ number mm program multipli two theta floatingpoint matric tabl compar wcet bound predict time tool measur execut time three benchmark program three case tool give fairli tight wcet bound within maximum overestim closer inspect result reveal clock sort mm predict measur unit machin cycl tabl predict measur execut time benchmark program overestim due data refer whose address known compiletim rememb account two cach miss penalti data refer program execut time heavili depend program execut path logic program sever limit set possibl execut path howev intent chose benchmark program suffer overestim due infeas path rational behind select predict tighter wcet bound elimin infeas path use dynam path analysi issu orthogon approach analysi introduc exist time tool without modifi extend time schema framework fact method analyz dynam program behavior elimin infeas path program within origin time schema framework given feel time tool equal benefit propos method view experiment work report initi step toward valid extend time schema approach clearli much experiment work especi program use real system need follow demonstr approach practic realist system vii conclus paper describ techniqu aim accur estim wcet task risc processor propos techniqu two kind time inform associ program construct first type inform factor may affect time succeed program construct second type inform factor need refin execut time program construct first type time inform preced program construct becom avail later stage wcet analysi extend exist time schema use two kind time inform accur account time variat result histori sensit natur pipelin execut cach memori also describ optim minim overhead propos techniqu prune time inform associ execut path cannot part worst case execut path also built time analyz base propos techniqu compar wcet bound sampl program predict time analyz measur execut time time analyz gave fairli tight predict within maximum overestim benchmark program use sourc overestim identifi propos techniqu follow advantag first propos techniqu make possibl accur analysi combin time effect pipelin execut cach memori which previous possibl second time analysi use propos techniqu accur techniqu awar of third propos techniqu applic risc processor inord issu singlelevel cach memori final propos techniqu extens gener rule may use model machin featur histori sensit time behavior exampl use underli gener rule model time variat due write buffer one direct futur research investig whether propos techniqu appli advanc processor outoford issu andor multilevel cach hierarchi anoth research direct develop theori method design retarget time analyz initi investig issu made result indic machinedepend compon time analyz routin implement concaten prune oper extend time schema automat gener architectur descript target processor detail approach repeat interest reader refer r reason time higherlevel languag softwar smart strateg memori alloc realtim cach design softwarebas cach partit realtim applic time analysi superscalar processor program use acsr highlevel time specif instructionlevel parallel processor a retarget techniqu predict execut time determinist upperbound worstcas execut time cach program evalu tight execut time bound program annot predict realtim cach spring system bound worstcas instruct cach perform portabl execut time analysi risc processor experi program time tool base sourcelevel time schema calcul maximumexecut time realtim program static analysi cach perform realtim program pipelin processor worstcas execut time comput architectur quantit approach aspect cach memori instruct buffer perform regist alloc prioritybas color architectur pipelin comput englewood cliff craft compil c a character minimum cycl mean digraph instruct cach pipelin analysi techniqu realtim system predict determinist execut time realtim program data cach analysi techniqu realtim system a code gener interfac ansi c predict program execut time analyz static dynam program path lookahead processor retarget time analyz risc processor tr ctr hassan aljifri alexand pon moiez tapia estim wcet superscalar realtim system realtim system secur nova scienc publish inc commack ny jan staschulat rolf ernst scalabl precis cach analysi preemptiv schedul acm sigplan notic v n juli minsoo ryu jungkeun park kimoon kim yangmin seo seongsoo hong perform reengin embed realtim system acm sigplan notic v n p juli dongkun shin jihong kim seongsoo lee lowenergi intratask voltag schedul use static time analysi proceed th confer design autom p june la vega nevada unit state xianfeng li abhik roychoudhuri tulika mitra model outoford processor wcet analysi realtim system v n p novemb jurgen schnerr oliv bringmann wolfgang rosenstiel cycl accur binari translat simul acceler rapid prototyp soc proceed confer design autom test europ p march dongkun shin jihong kim seongsoo lee intratask voltag schedul lowenergi hard realtim applic ieee design test v n p march jrn schneider christian ferdinand pipelin behavior predict superscalar processor abstract interpret acm sigplan notic v n p juli sheayun lee sang lyul min chong sang kim changgun lee minsuk lee cacheconsci limit preemptiv schedul realtim system v n p nov henrik theil gener decis tree decod binari acm sigplan notic v n p aug joosun hahn rhan ha sang lyul min jane ws liu analysi worst case dma respons time fixedprior bu arbitr protocol realtim system v n p novemb tobia schuel klau schneider abstract assembl program symbol worst case execut time analysi proceed st annual confer design autom june san diego ca usa thoma lundqvist per stenstrm integr path time analysi method base oncyclelevel symbol execut realtim system v n p nov daniel kstner stephan these cach awar preruntim schedul realtim system v n p nov colin fidg peter kearney mark ut formal method build concurr realtim softwar ieee softwar v n p march henrik theil christian ferdinand reinhard wilhelm fast precis wcet predict separ cach andpath analys realtim system v n p may joan krone william f ogden murali sitaraman perform analysi base upon complet profil proceed confer specif verif componentbas system novemb portland oregon jungkeun park minsoo ryu seongsoo hong lucia lo bello rapid perform reengin distribut embed system via latenc analysi klevel diagon search journal parallel distribut comput v n p januari andrea ermedahl friedhelm stappert jakob engblom cluster worstcas executiontim calcul ieee transact comput v n p septemb xianfeng li tulika mitra abhik roychoudhuri model control specul time analysi realtim system v n p januari friedhelm stappert andrea ermedahl jakob engblom effici longest execut path search program complex flow pipelin effect proceed intern confer compil architectur synthesi embed system novemb atlanta georgia usa andrea ermedahl friedhelm stappert jakob engblom cluster calcul worstcas execut time proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa sheayun lee jaejin lee chang yun park sang lyul min select code transform dual instruct set processor acm transact embed comput system tec v n pe may gustavo gmez yanhong a liu automat timebound analysi higherord languag acm sigplan notic v n p march ian j hay procedur paramet realtim program refin calculu scienc comput program v n p februari karl lermer colin j fidg ian j hay theori executiontim deriv realtim program theoret comput scienc v n p novemb y a liu g gmez automat accur costbound analysi highlevel languag ieee transact comput v n p decemb c j fidg realtim schedul test preemptiv multitask realtim system v n p jan christian ferdinand reinhard wilhelm effici precis cach behavior predict realtimesystem realtim system v n p nov vasanth venkatachalam michael franz power reduct techniqu microprocessor system acm comput survey csur v n p septemb