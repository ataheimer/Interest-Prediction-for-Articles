t compilerdirect cach polymorph a classic compil optim assum fix cach architectur modifi program take best advantag it case may best strategi loop nest might work best differ cach configur transform nest given fix cach configur may possibl due data depend work fix cach configur also increas energi consumpt loop best requir configur smaller default fix one paper take altern approach modifi cach configur nest depend access pattern exhibit nest call techniqu compilerdirect cach polymorph cdcp specif paper make follow contribut first present approach analyz data reus properti loop nest second give algorithm simul footprint array refer reus space third base reus analysi present optim algorithm comput cach configur nest experiment result show cdcp effect find nearoptim data cach configur differ nest arrayintens applic b introduct today microprocessor system includ sever special architectur featur eg larg onchip cach use signific fraction onchip transistor complex energyhungri featur meant applic across differ applic domain howev effect wast applic cannot fulli util them implement rigid manner exampl loop given arraybas embed applic take advantag larg onchip cach also work fix cach configur increas energi consumpt loop best requir configur from perform angl smaller default fix one larger cach result larg per access energi convent approach address local problem cach that is problem maxim number cach hit employ compil optim techniqu current compil techniqu gener work assumpt fix cach memori architectur tri modifi program behavior new behavior becom compat underli cach configur howev sever problem method first compilerdirect modif sometim effect data depend prevent necessari program transform second avail cach space sometim cannot util effici static configur cach match differ requir differ program andor differ portion program third current compil techniqu adapt scientif compil domain take energi issu account gener altern approach local problem use reconfigur cach structur dynam tailor cach configur meet execut profil applic hand approach potenti address local problem case optim applic code alon fail howev previou research area mainli focus implement employ mechan design lack softwarebas techniqu direct dynam cach reconfigur recent compilerdirect scheme adapt cach assist propos work focus cach oppos cach assist paper propos strategi optim compil decid best cach configur nest applic code specif paper make follow contribut first present techniqu analyz data reus properti given loop nest construct formal express reus pattern second develop algorithm simul footprint array refer simul approach much effici classic cyclebas simul techniqu simul data reus space third develop optim algorithm comput optim cach configur loop nest also provid program level algorithm select dynam cach configur focu behavior array refer loop nest loop nest import part arrayintens media signal process applic program case comput perform loop nest domin execut time program thu behavior loop nest determin perform energi behavior applic previou research show perform loop nest directli influenc cach behavior array refer also recent energi consumpt becom import issu embed system cons quentli determin suitabl combin cach memori configur optim softwar challeng problem embed design world rest paper organ follow section review basic concept notion represent arraybas code section concept relat cach behavior cach miss interfer data reus data local analyz section introduc compilerdirect cach polymorph techniqu present complet set algorithm implement it present experiment result section show effect techniqu final section conclud paper summari discuss futur work topic arraybas code paper particularli target arraybas code sinc perform loop nest domin overal perform arraybas code optim nest particularli import achiev best perform mani embed signal video process applic optim data local so major data refer satisfi cach instead main memori improv perform energi effici loop nest follow way first significantli reduc number miss data cach thu avoid frequent access lower memori hierarchi second reduc number access lower memori hierarchi increas cach hit rate help promot energi effici entir memori system section discuss basic notion arraybas code loop nest array refer well assumpt made represent program assum applic code optim format shown figur assumpt array applic code optim declar global declar section program array declar global section referenc loop code assumpt necessari algorithm discuss follow section optim stage comput cach configur loop nest assumpt ensur exploit rel base address array involv global declar section array mainint argc char argv f loop nest no loop nest no loop nest no l figur format program f figur format loop nest sinc loop nest main structur arraybas pro gram program code loop nest neglect also assum nest independ oth er is shown figur applic contain number independ nest interloopnest data reus account for assumpt relax achiev potenti effect util reconfigur cach one futur research note sever compil optim loop fusion fission code sink use bring given applic code format assumpt loop nest program lexic level global level internest two differ loop nest assumpt nest code perfectlynest ie array oper array refer occur innermost loop assumpt vital analysi make implement easier plan relax futur work represent loop nest work loop nest form boundari dynam cach reconfigur occur figur show format loop nest format stand loop index vector correspond lower bound upper bound stride loop index differ instanc array refer nest note may differ refer array differ refer differ array function f jk i subscript express function of i th subscript j th array refer dk number dimens correspond array represent array refer loop nest loop index vector i refer ar j array dimens express as assum subscript express function f jk i affin function loop indic loopinvari con stant rowmajor storag layout assum array c languag assum loop index vector n depth vector is number loop nest array refer repres vector left side equat call array refer subscript vector f matrix defin access matrix a rightmost vector known constant offset vector c thu equat also written cach behavior section review basic concept cach behavior note earlier arrayintens applic cach behavior larg determin footprint data manipul loop nest paper first propos algorithm analyz cach behavior differ array differ array refer given loop nest base inform gather analysi propos anoth algorithm comput cach memori demand order achiev perfect cach behavior loop nest analyz suggest cach configur cach miss three type cach miss compulsori cold miss capac miss conflict interfer miss differ type miss influenc perform program differ way note that data cach use current embed system implement setassoci cach directmap cach order achiev high speed low power low implement cost thu cach interfer miss domin cach behavior particularli arraybas code stress sinc cach interfer occur highli irregular manner difficult captur accur ghosh et al propos cach miss equat analyt framework comput potenti cach miss direct code optim cach behavior data reus data local data reus data local concept discuss detail basic two type data reus tempor reus spatial reus given loop nest refer access memori locat across differ loop iter ation term tempor reus refer access cach block not necessarili memori locat call spatial reus consid tempor reus special case spatial reus differ refer access memori locat say grouptempor reus exist wherea differ refer access cach block term groupspati reus note group reus occur among differ refer array loop nest reus data item found cach say refer exhibit local mean data reus guarante data local convert data reus local catch reus item cach classic loopori compil techniqu tri achiev modifi loop access pattern algorithmsforcachepolymor perform energi behavior loop nest larg determin cach behavior thu optim cach behavior loop nest utmost import satisfi highperform energi effici demand arraybas code least two kind approach perform optim cach behavior convent way compil algorithm transform loop use interchang re versal skew tile transform transform data layout match array access pattern mention earlier altern approach modifi underli cach architectur depend program access pattern recent research work explor potenti benefit second approach strategi present base exhaust simul main drawback simulationbas strategi extrem time consum consid fix set configur typic simul nest possibl cach configur make approach unsuit practic section present altern way determin suitabl cach configur differ section nest given code compilerdirect cach polymorph exist cach interfer main factor degrad perform loop nest cach interfer disrupt data reus loop nest prevent data reus convert local note self interfer crossinterfer prevent data item use still cach object determin cach configur help reduc interfer basic idea behind compilerdirect cach polymorph cdcp analyz sourc code arraybas program determin data reus characterist loop nest compil time comput suitabl nearoptim cach configur loop nest exploit data local impli reus nearoptim cach configur determin nest elimin interfer miss keep cach size associ control way optim execut time energi time fact increas either cach capac associ increas energi consumpt approach sourc code modifi obvious optim be f figur exampl code loop nest fore algorithm run mean code modif sake cach morphism high level approach describ follow first use compil transform sourc code intermedi format second step loop nest process basic element cach configur loop nest refer array assign differ uniform refer set uniform set analyz determin reus exhibit differ loop level then array algorithm use simul footprint reus space within layout space array follow thi loop nest level algorithm optim cach configur ensur data local final code gener dynam cach configur activ runtim in appropri point applic code array refer uniform refer set everi array refer express equat f subscript vector access matrix loop index vector c constant vector inform store array refer leaf array node parent loopnest node intermedi code consid piec code figur loop nest first refer array repres follow access matrix aa constant offset vector gamma ca refer array b also repres access matrix b constant offset vector gamma c b definit uniform refer set similar uniformli gener set two refer array access matrix differ constant offset vector two refer said belong uniform refer set construct uniform refer set array provid effici way analyz data reus said array refer uniform refer set data access pattern data reus characterist also identifi uniform refer set allow us captur group reus easili algorithm reus analysi follow section use bottomup approach introduc algorithm implement compil input access matrix amlambdan uniform refer set array node loopnest node given cach block size bk sz output selfreus pattern vector gammagammagamma srpn uniform set begin initi selfreus pattern vector gammagammagamma current loop level clp innermost loop current dimens level cdn highest dimens set index occur flag iof element access matrix acdn clp break go next lower dimens level cdn lowest dimens iof fals set refer tempor reus level els cdn acdn clp set refer spatial reus level go next higher loop level clp outermost loop level end figur algorithm selfreus analysi direct cach polymorph techniqu first algorithm analyz data reus includ selfreus groupreus provid uniform refer set subsect selfreus analysi reus analysi refer array loop nest first construct sever uniform refer set selfreus both tempor spatial analyz level uniform set algorithm work access matrix detail algorithm shown figur algorithm check loop index variabl innermost loop outermost loop see whether occur subscript express refer j th loop index variabl j occur subscript expr sion reflect access matrix element j th column mean iter th loop chang memori locat access ie array refer selftempor reus j th loop index variabl occur lowest the fastest dimens ie th dimens distanc contigu loop iter check al gorithm sclp stride clp th loop bk sz given cach block size elmt sz size array element distanc acdn clp sclp two contigu iter refer within cach block spatial reus loop level groupreus analysi group reus exist among refer uniform refer set grouptempor reus occur differ refer access data locat across loop iter groupspati reus exist differ refer access cach block differ loop iter algorithm figur exploit simplifi version group reus exist one loop level groupspati reus found particular loop level algorithm figur first check whether level input uniform refer set cs array node loopnest node given cach block size bk sz output groupreus pattern vector gammagammagammagamma grpn uniform set begin initi groupreus pattern vector gammagammagammagamma pair constant vector c c c differ j th element check j th row access matrix find first occur loop index variabl nonzero element start innermost loop say continu els check k th column access matrix occur j th dimens lowest dimens array init distakm els grpk els init distakm end figur algorithm groupreus analysi grouptempor reus pair refer reus level set group spatial reus otherwis omit current reus found grouptempor reus found loop level element correspond level groupreus vector gammagammagamma grpn directli set grouptempor reus now array uniform refer set particular loop nest use algorithm algorithm reus inform loop level collect exampl code subsect refer array selfspati reus loop level l selftempor reus loop level j group reus loop level j refer array b selfspati reus loop level i note that contrast previou work reus analysi eg approach simpl comput reus inform without solv system equat simul footprint reus space next step approach transform data reus real data local straightforward idea make data cach larg enough hold data reus space array note data reus space necessari kept cach first refer sinc reus data discuss earlier cach interfer significantli affect overal perform nest thu object techniqu find nearoptim cach configur reduc elimin major cach interfer within nest inform definit nearoptim cach configur follow definit nearoptim cach configur possibl smallest cach size associ achiev nearoptim number cach miss and increas either cach size associ configur deliv signific improv order figur nearoptim cach configur would contain entir reus space loop nest real cach behavior reus space must made avail potenti optim section provid algorithm simul exact footprint memori address array refer reus space suppos given loop index vector i array refer particular valu express follow here sa start address array refer differ base address the memori address first array element array constant part equat suppos data type size array element elmt sz depth dimens m dimension bound vector gamma constant offset vector deriv follow equat ae integr coeffici loop index variabl suppos access matrix amlambdan cof j deriv follow ddk lj ae note that equat address array refer particular loop iter calcul offset layout space array algorithm provid section use formul simul footprint array refer loop iter within reus space follow two observ give basi simul reus space observ order realiz reus carri innermost loop one cach block need array refer observ order realiz reus carri noninnermost loop minimum number cach block need array refer number cach block visit loop inner it sinc assum subscript function affin array refer pattern reus space differ iter loop level reus exactli same thu need simul first iter loop reus current ex ploit exampl loop level j loop vector reus exploit simul space defin kj vari lower bound l k upper bound uk algorithm shown figur first call algorithm then simul footprint signific reus space array particular loop nest footprint mark array bitmap comput optim cach configur loop nest input array node loopnest node given cach block size bk sz output arraylevel bitmap footprint begin initi array size ar sz number cach block alloc arraylevel bitmap abm size ar sz initi abm zero initi highest reus level rs n depth loop nest uniform refer set call algorithm selfreus analysi call algorithm groupreus analysi highest reus level set rs lev ur lev rs lev n refer array lonli use lower bound appli equat get refer address f i transfer block id bk set array bitmap abm bk els loop index vari valu j lower bound upper bound refer array appli equat get refer address f i transfer block id bk set array bitmap abm bk end figur algorithm simul footprint reus space previou subsect reus space array particular loop nest determin footprint also simul layout space array array bitmap indic cach block visit iter reus space appli algorithm discuss earlier phenomena cach interfer disturb reus prevent array refer realiz data local across loop iter thu algorithm reduc cach interfer result better data local within reus space crucial subsect provid loopnest level algorithm explicitli figur display cach interfer among differ array access within loop nest main point approach map reus space array real memori space time degre conflict number interfer among differ array cach block store loopnest level bitmap sinc selfinterfer array alreadi solv algorithm use array bitmap algorithm mainli focus reduc groupinterfer might occur among differ array wellknown one effect way avoid interfer increas associ data cach use algorithm base definit nearoptim cach configur algorithm tri find smallest data cach smallest associ achiev significantli reduc cach interfer nearli perfect perform loop nest figur show detail algorithm algorithm comput optim cach configur given loop nest algorithm start cach block size bk sz lower bound eg byte goe upper bound eg byte particular bk sz first appli algorithm obtain array bitmap abm array alloc loopnest level bitmap input loopnest node global list array declar lower bound block size bk sz lb upper bound block size bk sz ub output optim cach configur diff bk sz begin array loop nest call algorithm get array bitmap abm creat initi loopnest level bitmap lbm size smallest n size largest array in block lbm size array bitmap abm map abm loopnest bitmap lbm rel baseaddress array base addr indic degre conflict block block id array size base addrlbm abm block id set largest degre conflict lbm set cach set optim cach conf current cach conf assoc assoc upper bound half number set current cach set highest valu lbm i lbm size set cach size assoc lbm size assoc assoc upper bound cach size optim cach size set optim cach conf current cach conf give optim cach conf bk sz doubl bk sz end figur algorithm comput optim cach configur loop nest lbm array within nest whose size smallest valu power greater equal largest array size abm remap lbm rel array base address valu bit lbm indic conflict particular cach block follow thi optim carri halv size lbm remap lbm largest valu bit lbm also show smallest cach associ need avoid interfer correspond cach block process end upper bound associavit met nearoptim cach configur block size bk sz comput one smallest cach size well smallest associ global level cach polymorph compilerdirect cach polymorph techniqu make chang sourc code instead use compil sourc code pars gener intern code intermedi format local algorithm global program level algorithm algorithm in figur present subsect obtain direct cach configur nest program cach reconfigur mechan algorithm first gener intermedi format origin code collect global inform array sourc code that appli algorithm loop nest obtain nearoptim cach configur them configur store cach configur list ccl loop nest correspond input sourc codespd output perform data cach configur loop nest begin initi cacheconfigur list ccl use one suif pass gener intermedi code format construct global list array declar rel base address loop nest array loop nest construct uniform refer set refer call algorithm optim cach configur loop nest store configur ccl block size activ reconfigur mechan loop nest use configur ccl output perform data well cach configur loop nest end figur algorithm global level cach polymorph defin n int annn bnnn f int i j k l f figur exampl arraybas code node ccl nearoptim cach configur differ block size nestlevel optim done algorithm activ cach reconfigur mech anism modifi version shade simul use simul shade direct use nearoptim cach configur ccl loop nest execut perform data loop nest differ cach configur gener output sinc current cach reconfigur mechan vari cach size cach way fix cach block size cach optim done differ fix cach block size mean algorithm paper suggest nearoptim cach configur loop nest given block size follow section experiment result verifi effect techniqu present exampl subsect focu exampl code figur illustr compilerdirect cach polymorph techniqu work simplic code contain one nest algorithm start one suif pass convert sourc code intermedi code program node one loopnest node loopnest node repres index vector index lower bound vector gamma upper bound vector gamma stride vector gamma within nest array b refer ar ar ar ar b repres access matric constant vector follow also global array list gener a b then array a refer ar ar group one uniform refer set ar put anoth one array b hand one uniform refer set then algorithm invok start smallest cach block size bk sz say byte use algorithm obtain array bitmap abma array abm b array b bk sz within algorithm first call algorithm algorithm analyz reus characterist given array exampl first uniform set array selfspati reus level l grouptempor reus level j second uniform set selfspati reus level l selftempor reus level j refer array b selfspati reus level i highest level reus use array algorithm gener abm footprint reus space assum integ byte size case abma abm b bit shown follow two abm pass algorithm algorithm turn algorithm creat loopnest bitmap lbm size equal largest array size max abm remap abma abm b lbm sinc array rel base address byte array b determin lbm follow name array nest brief descript altern direct integr apsc mesoscal hydro model bmcmc molecular dynam water comput tomcatc mesh gener arraybas comput vpentac nasa ame fortran kernel molecular dynam water tabl arraybas benchmark use experi maximum valu bit lbm indic number interfer among differ array nest thu least associ requir avoid interfer exampl algorithm start cach associ comput nearoptim cach configur time size lbm halv lbm remap result associ reach upper bound eg output smallest cach size smallest associ nearoptim configur block size bk sz exampl nearoptim cach configur kb way associ cach lbm optim shown follow follow thi algorithm continu comput nearoptim cach configur larger cach block size doubl previou block size block size reach upper bound eg byte algorithm stop pass nearoptim configur differ block size algorithm receiv configur algorithm activ shade simul exampl code execut cach configur perform data gener output algorithm experi simul framework section present simul result verifi effect cdcp techniqu techniqu implement use suif compil shade eight arraybas benchmark use simul work benchmark loop nest domin overal execut time benchmark number array for benchmark number loop nest for list tabl first object see cach configur return cdcp scheme scheme base exhaust simul use shade consid three differ block line size byte note work particularli target l onchip cach select cach configur subsect first appli exhaust simul method use shade simul method origin program code divid set small program program singl nest shade simul loop nest individu possibl l data cach configur within follow rang cach size k k setassoci way way block size byte number data cach miss use metric compar perform optim cach configur certain cach block size smallest one term cach size set associ achiev perform the number miss cannot improv the number miss cannot reduc increas cach size andor set associa tiviti left portion tabl show optim cach configur as select shade loop nest differ benchmark well differ cach block size compilerdirect cach polymorph techniqu directli take origin sourc code suif spd format appli algorithm gener nearoptim cach configur loop nest sourc code instruct simul configur op timiz thu expect fast find nearoptim cach configur execut engin a modifi version shade cdcp directli appli cach configur activ reconfigur mechan dynam cach configur determin shown right part tabl sum up tabl loop nest given benchmark optim cach configur shade nearoptim cach configur cdcp techniqu block size byte given notat ks use indic k byte way set associ cach block size byte tabl b mean byte k denot kilobyt indic megabyt tabl observ cdcp abil determin cach capac byte granular case cach configur determin cdcp less equal one determin exhaust simul simul result two set cach configur loop nest given tabl simul program level configur cdcp cach size less k simul k cach size paramet unmodifi best comparison perform shown cach hit rate instead miss rate figur give perform comparison shade exhaust simul cdcp use block size byte figur perform comparison cach configur block size shade vs cdcp see figur that benchmark adic apsc bmcmc wssc result obtain shade cdcp close hand shade outperform cdcp benchmark ef luxc tomcatc vpentac cdcp code shade cdcp adi ap ks ks ks ks ks ks bmcm eflux ks ks ks ks ks ks ks ks ks ks ks ks tomcat ks ks ks ks ks ks ks ks ks bs bs bs ks ks ks ks ks ks tsf ks ks ks ks ks ks vpenta ks ks ks bs bs ks ks ks ks bs bs ks ks ks ks bs bs bs ks ks ks bs bs bs wss ks ks ks bs bs bs ks ks ks bs bs bs tabl cach configur loop nest benchmark shade vs cdcp outperform shade tsfc figur show result block size byte separ note that benchmark perform differ shade cdcp decreas block size increas byte especi benchmark adic apsc bmcmc wssc perform two approach almost same benchmark tsfc vpentac cdcp strategi consist outperform shade block size byte exhaust shade simul search rang for cach size k k explain earlier cdcp constraint that is come nonstandard cach size too obvious use much larger andor much finer granular cach size exhaust simul but would drastic increas simul time suitabl practic contrast figur perform comparison cach configur block size shade vs cdcp cdcp strategi determin nearoptim cach configur without much increas search time figur perform comparison cach configur block size shade vs cdcp detail studi break perform comparison loop nest level benchmark apsc figur show comparison loop nest benchmark differ cach block size figur loopnest level perform comparison cach configur aspc shade vs cdcp result loop nest level comparison show cdcp techniqu effect find nearoptim cach configur loop nest benchmark especi block size byte the common block size use embed processor sinc cdcp analysisbas simulationbas expect even desir code larg input size energi perspect cacti power model use comput energi consumpt l data cach loop nest benchmark differ cach configur list tabl use micron technolog cach configur detail energi consumpt figur given tabl code shade cdcp adi ap bmcm eflux tomcat tsf vpenta wss tabl energi consumpt microjoul l data cach loop nest benchmark configur tabl shade vs cdcp experiment result conclud i strategi gener competit perform result exhaust simul ii gener result much lower power consumpt configur select exhaust simul consequ approach strike balanc perform power consumpt conclus futur work paper propos new techniqu compilerdirect cach polymorph optim data local arraybas embed applic keep energi consumpt control contrast mani previou tech energi estim avail cacti due small cach configur niqu modifi given code fix cach architec ture techniqu base modifi reconfigur cach architectur dynam loop nest present set algorithm collect allow us select nearoptim cach configur nest given applic experiment result obtain use set arrayintens applic reveal approach gener competit perform result consum much less energi when compar exhaust simul base framework plan extend work sever direc tion first would like perform experi differ set applic second intend use cach polymorph granular smaller loop nest final would like combin cdcp loopdata base compil optim optim hardwar softwar coordin manner r select cach way ondemand cach resourc alloc shade fast instructionset simul execut profil strategi cach local memori manag global program transform cach miss equat analyt represent cach miss stanford compil group morphabl cach architectur potenti benefit improv data local loop transform reconfigur cach applic media process integr cach time power model cach interfer phenomena data local optim algorithm tr strategi cach local memori manag global program transform data local optim algorithm shade fast instructionset simul execut profil cach interfer phenomena improv data local loop transform cach miss equat select cach way reconfigur cach applic media process morphabl cach architectur ctr min zhao bruce childer mari lou soffa predict impact optim embed system acm sigplan notic v n juli min zhao bruce r childer mari lou soffa modelbas framework approach profitdriven optim proceed intern symposium code gener optim p march min zhao bruce r childer mari lou soffa approach toward profitdriven optim acm transact architectur code optim taco v n p septemb