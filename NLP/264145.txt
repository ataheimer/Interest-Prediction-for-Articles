t softwar reus special gener procedur view a abstracta gener procedur special compil view oper directli concret data view comput map describ concret type implement abstract type cluster relat view need special gener procedur involv sever type sever view singl type user interfac reason relationship concret type abstract type allow view cluster creat easili techniqu allow rapid special gener procedur applic b introduct reus softwar potenti reduc cost increas speed softwar product increas reliabl facilit reus softwar could therefor great benefit g s novak jr depart comput scienc univers texa austin automat program server demonstr softwar avail world wide web via httpwwwcsutexaseduusersnovak run demo requir x window rigid treatment type match present barrier reus languag type argument procedur call must match type paramet procedur reason reus often found type compat occur natur ie type basic made compat languag eg array number truli gener procedur reusabl reason implement abstract type develop gener abl advertis my program work data without know user data represent be seek reus without conform rigid standard envis two class user develop understand detail abstract type gener procedur user programm reus gener need less expertis understand detail develop produc librari abstract type gener special gener user obtain program modul applic view provid map concret type abstract type term gener algorithm written fig illustr schemat view act interfac adapt make concret type appear abstract type view provid clean separ semant data as repres abstract type implement implement minim constrain view made gener procedur associ abstract type automat special concret type shown fig implement special procedur lisp function desir mechan translat anoth languag tool exist make easi creat view programm obtain special procedur insert record avl tree line c minut data procedur data view procedur figur interfac strong type view consid abstract type set basi variabl set gener procedur written term basi variabl goguen other use similar analog diagram concret type view compil gener procedur special procedur figur special gener procedur view approach reus sever advantag provid freedom select implement data data need design ab initio match algorithm sever view data structur correspond differ aspect data sever languag support lisp c c java pascal gener singl version gener algorithm tool simplifi specif view reduc learn requir reus softwar view use automat a special gener procedur librari b instanti program framework compon c translat data one represent anoth d gener method objectori program e interfac program tool data display edit paper describ principl view special gener algorithm well implement techniqu use glisp languag compil glisp lispbas languag abstract data type section describ conceptu term view provid map concret type abstract type section describ glisp compil view use special gener algorithm section discuss cluster relat view need reus gener algorithm involv sever type sever view type section describ program viewa reason relat concret type abstract type make easi creat view cluster section describ higherord code gener algorithm find convex hull use gener use sever view singl data structur section describ use view objectori program section survey relat work section present conclus comput isomorph use think comput simul or formal isomorph idea long histori exampl isomorph basi denot semant goguen describ view isomorph map unari binari oper view allow broader map concret abstract type includ algorithm well oper use isomorph introduc use view preparata yeh give definit diagram isomorph semigroup given two semigroup g invert function said isomorph g g if everi b s a a lambda b a oe gammapsi gammapsi sinc invert comput relationship ffi b difficult obtain directli valu comput encod b use perform comput a lambda b decod interpret result use diagram said commut result obtain regardless path two point follow shown diagram abov view isomorph reus gener algorithm view correspond comput isomorph concret type correspond lefthand side isomorph diagram view map concret type abstract type gener algorithm correspond oper abstract type map concret type abstract type perform oper abstract type map back result perform algorithm concret type obtain howev instead perform view map explicitli concret concret type abstract gener algorithm abstract type view view oe compil optim concret concret type special algorithm figur special gener materi abstract data map fold gener algorithm produc special version oper directli concret data fig exampl let concret type pizza contain valu repres diamet circular pizza suppos abstract type circl assum radiu valu r view pizza circl specifi r correspond d simpl gener procedur calcul area circl special compil view view map fold gener algorithm optim special algorithm oper directli origin data and case extra comput fig code refer data structur pizza includ special code area pizza area circl compil optim area pizza figur exampl special abstract data type view abstract type abstract set concret type assum abstract record contain set basi variabl set name gener procedur written term basi variabl data structur contain basi variabl name type implement abstract type maxim reus constraint implement must minim possibl special gener procedur legitim implement abstract type diamet radiu pizzaascircl pizza figur encapsul concret type view view encapsul concret type present extern interfac consist basi variabl abstract type fig illustr view type pizzaascircl encapsul pizza present interfac consist radiu abstract type circl radiu implement divid field diamet pizza field pizza hidden code exampl shown follow section gener case interfac provid abil read write basi variabl read write may implement access variabl concret record procedur emul read write use concret record storag view implement abstract type emul record contain basi variabl emul express two properti storag valu z store basi variabl v refer v yield z although requir abstract type usual specifi concret record contain basi variabl use exampl test gener procedur definit abstract type differ algebra descript abstract type collect abstract sort procedur signatur axiom algebra approach abstract type describ without regard implement approach abstract implement assum abstract type gener procedur implement oper view implement objectori system adapt wrapper object wrapper contain concret data present interfac abstract type translat messag abstract concret type view give effect wrapper without creat them independ refer basi variabl v yield valu z valu store basi variabl w refer v still yield z properti express behavior expect record store valu retriev store one field chang valu other view implement abstract type exactli describ storag independ properti gener procedur oper way produc output side effect oper concret data view oper record consist basi variabl is isomorph hold abstract type concret type diagram commut criterion satisfi follow variat data record structur may use contain variabl name variabl may differ abstract type view provid name translat name space concret abstract type distinct gener use subset basi variabl use must defin view attempt use undefin basi variabl detect error view effect defin function comput basi variabl concret variabl gener procedur store into basi variabl function must invert simpl function invert automat compil complex case procedur defin effect store basi variabl procedur requir mathemat view may somewhat complex case polar vector r abstract type cartesian vector x y assign basi variabl x must updat r x new valu unchang program mkv make view allow user specifi mathemat view graphic connect correspond part concret type diagram associ abstract type mkv use symbol algebra deriv view procedur correspond wider reus storag independ properti must relax slightli even simpl chang represent divis diamet valu pizza exampl chang point numer overflow occur could also roundoff error signific chang represent allow repres vector polar coordin r basi variabl cartesian coordin x y polar vector view cartesian vector use transform sin map exact due roundoff error onetoon howev suffici accur mani applic ultim user system must ensur chosen represent suffici accur case user might want specifi content type let system defin record use it eg avl tree contain string easili done substitut content type prototyp record definit view map predefin next section describ view implement compil glisp could includ array subrecord reach fix sequenc pointer travers glisp languag compil glisp gener lisp highlevel languag abstract data type compil lisp languag describ data lisp languag glisp describ briefli here detail see dataindepend code glisp type analog class objectori program oop specifi data structur set method method name selector definit express function oop hierarchi type method inherit ancestor type method abstract type gener procedur languag syntax program code depend data structur use prevent reus code altern implement data glisp use singl lisplik syntax lisp function call written insid parenthes sqrt x similar syntax featur object use glisp access featur data structur featur name field type object data access compil featur method name selector type object method call compil featur name view type object type object local chang view type featur function name code left unchang otherwis warn messag issu featur undefin typedepend compil allow variat data represent code use data store one type comput anoth type exampl type circl assum radiu basi variabl pizza object store diamet comput radiu glisp compil perform type infer compil express type object known compil time refer featur compil inlin code call special gener special code depend type argument gener compil inlin expans special recurs compil time propag type recurs import featur recurs expans allow small amount sourc code expand larg output code allow gener procedur use gener subroutin allow higherord procedur expand sever level abstract oper data reach symbol optim fold oper constant perform partial evalu mathemat optim remov dead code combin oper improv effici provid condit compil sinc condit elimin test evalu compil time optim often elimin oper associ view use view littl cost compil view glisp view express glisp type whose record concret type abstract type superclass view type allow gener inherit view type encapsul concret type defin method comput basi variabl abstract type special version gener compil compil cach view type exampl abstract type circl concret type pizza view type pizzaascircl shown below give name type follow data structur follow method prop view superclass specif circl list center vector radiu real pizza con diamet real top symbol view circl pizzaascircl pizzaascircl p pizza super circl pizzaascircl encapsul pizza make appear circl record name p type pizza defin basi variabl radiu diamet p divid specifi circl superclass hide data method pizza follow exampl show area defin circl compil view glisp function shown follow compil code lisp gldefun pzpizza area circl pz result type real code circl pz chang type pz view type pizzaascircl area method inherit circl expand inlin basi variabl radiu expand use diamet becom data access car pz view defin basi variabl term concret type gener procedur abstract type use view compil glisp recurs gener procedur written use gener subroutin method inherit data structur therefor state variabl not pizzaascircl fail defin basi variabl center allow attempt refer undefin basi variabl detect error long recurs termin compil time view type may redefin method gener abstract type may improv effici exampl cartesian vector defin magnitud gener valu store r polar r vector basi variabl assign valu compil produc code follow basi variabl correspond field concret type store gener basi variabl defin express invert algebra compil so exampl assign valu r radiu pizzaascircl caus r store diamet record pizza procedur defin view type accomplish assign basi variabl maintain storag independ properti mkv produc procedur automat view defin procedur creat instanc concret type set basi variabl abstract type need gener creat new data eg two vector ad produc new vector sever point view worth note gener case object view rather view repres aspect object object may data involv view view provid name translat remov necess concret data use particular name elimin name conflict view specifi represent transform sever way view concret type given abstract type exampl record might sort sever way differ purpos cluster view sever languag eg ada modula ml c provid form abstract data type like macro instanc form substitut concret type it eg make link list whose content user type techniqu allow limit softwar reus seek extend principl gener reusabl reason implement data gener involv sever abstract type data structur might regard singl concept link list involv sever type link list record type pointer type mani languag finess need two type provid pointer type deriv record recurs beyond certain depth trap treat compil error type gener howev pointer data uniqu denot record memori memori address disk address array index employe number etc maxim gener record pointer must treat distinct type view map singl concret type singl abstract type cluster collect set view relat use gener algorithm exampl polygon repres sequenc point point could cartesian polar type could view point eg citi sequenc could link list array etc differ gener combin type singl gener usabl combin cluster collect view use gener algorithm singl place allow inherit special gener view use type infer cluster set role name correspond view type exampl cluster linkedlist role name record pointer cluster may superclust view type fill role specifi superclass type fill role superclust allow inherit method it view type also defin method constant need gener procedur exampl cluster sortedlinkedlist requir specif field properti record sort whether sort ascend descend exampl cluster sort link list section give exampl record show cluster made use viewa show gener special begin show user interact viewa emphas eas use later section explain viewa work c structur exampl record myrec correspond glisp type shown below struct myrecord int char name int struct myrecord next myrec crecord myrec color integ name string next constant specifi method return constant valu glisp type could deriv automat c declar implement suppos user wish view myrec sortedlinkedlist obtain special version gener applic user invok viewa make view cluster viewa sortedlinkedlist myrec viewa determin concret type match abstract type make choic automat ask user choic choic specifi choic sortvalu choic are color name size name specifi choic sortdirect choic are ascend descend ascend viewa choos field next link linkedlist record sinc possibl ask user field sort direct sort viewa requir simpl choic user result cluster myrecassl two view type shown fig cluster myrecassl role name pointer record fill correspond view type myrecassl list cluster sll sort link list superclust view type myrecassllpoint pointer view type myrecassllrecord correspond type sllpointer cluster sll superclass gener sll defin method sllpointer view type myrecassllrecord data name z type myrec list type sllrecord superclass defin link make view cluster user obtain special version gener expect user would read code gener special deriv them present gener special illustr process fig show gener sllinsert use gener rest defin linkedlist the valu field link sortbefor notat ptr short derefer pointer ptr sortdirect test code howev sinc constant compil time compil elimin keep one sortbefor test expand depend type sortvalu convert symbol uppercas uppercas lowercas represent symbol equival gener user input shown lowercas lisp output symbol uppercas name numer suffix new uniqu name gener system uniqu name z encapsul myrec prevent name conflict view type featur myrec access via name glclusterdef role pointer myrecassllpoint record myrecassllrecord view type myrecassllpoint glcluster myrecassl view type myrecassllrecord result lst els new figur gener insert sort link list use cluster cluster serv sever goal cluster allow independ specif sever view use gener gener perform given function written onc gener reus gener possibl cluster allow gener inherit cluster use deriv correct view type gener special inherit cluster desir inherit reus gener possibl case cluster consid special anoth cluster eg sortedlinkedlist special linkedlist gener defin linkedlist also work sortedlinkedlist length linkedlist whether sort not gener defin highest possibl level abstract facilit reus cluster specifi superclust fig show inherit among cluster myrecassl exampl cluster inherit gener cluster abov mechan inherit cluster simpli inherit type type fill role cluster list superclass type fill correspond myrec sllinsert lst new myrec lst new myrec ptr prev ptr strcmpptrname newnam prev return lst els return new figur special procedur c role superclust inherit path specifi manual abstract type viewa set inherit path creat view cluster inherit provid default gener procedur constant exampl gener sortedlinkedlist use predic sortbefor compar record gener sortbefor defin appli sortvalu record predic turn depend type sortvalu eg string comparison use string minim specif sortedlinkedlist use default sort predic arbitrari sortbefor predic specifi record view type desir case inherit gener superclust prevent exampl nrevers destruct revers order element link list defin linkedlist avail sortedlinkedlist sinc destroy sort order prevent inherit accomplish defin method error case attempt use method treat compil error recordwithpoint linkedlist sll sortedlinkedlist figur inherit cluster type map cluster specifi set relat type gener procedur specifi term abstract type special correspond view type must sub stitut exampl abstract level linkedlistrecord contain field link whose type linkedlistpoint derefer linkedlistpoint yield linkedlistrecord gener defin linkedlist special type must replac correspond view type cluster care requir defin gener view type ensur oper produc result correct type otherwis gener compil correctli special gener gener function f abstract argument result type special concret type use view v special function must signatur f smith use term theori morphism similar notion dijkstra use term coordin transform similar notion variabl replac other gri use term coupl invari predic describ relat between abstract type variabl concret counterpart maintain function consid follow gener gldefun genericcddr llinkedlist rest rest l genericcddr follow link linkedlist record twice rest link valu suppos concret record two pointer field two distinct linkedlist cluster made use two pointer field special genericcddr both rest must produc view type defin correct link rather concret type fig abstractli illustr type map use genericcddr exampl figur show concret type view abstract type view v suppos rest or cdr cddr lisp function use lisp name linkedlist gener similar f figur cluster view type famili compos function g correspond special function f view virtual oper actual perform concret data compil code perform g howev result function f seen compil must function g defin abstract type inherit undefin concret type role cluster use within gener specifi type relat known view type view type pointer cluster cluster role likewis point view type therefor possibl find cluster view type find view type correspond given role cluster glisp construct clustertyp role code return compil time type fill role cluster type code belong construct use type specifi gener allow use view type cluster exampl gener result type declar view type fill specifi role cluster argument gener belong clustertyp also use declar local variabl type creat new data concret type view thu type signatur type use within gener map abstract level view level special gener perform correctli view cluster construct viewa view cluster may complex detail knowledg gener procedur need specifi one correctli expect abstract type view cluster defin expert howev simpl programm reus gener viewa make easi creat view cluster without detail understand abstract type gener input name view cluster concret type viewa determin correspond abstract type cluster concret type ask question need creat view cluster view type gldefviewspec sortedlinkedlist sortedsequ sll record anyth type pointer record prop link partof record pointer result pointer prop copycontentsnam namesexcept record link prop sortvalu choosepropexcept record link prop sortdirect oneof ascend descend pointer pointer record record prop link copycontentsnam sortvalu figur view specif use viewa fig show view specif sort link list record anyth list formal paramet correspond type given call viewa argument record type match anyth next list name specif match concret type follow pattern output cluster instanti substitut valu determin first part final list superclust cluster creat sll previou exampl viewa sortedlinkedlist myrec specifi name target cluster concret type myrec match viewa first match record myrec argument process match specif order type pointer record first thing determin type pointer record pointer default standard pointer record differ kind pointer array index use defin prop link partof record pointer result pointer link must field record type pointer type filter restrict possibl match one select automat prop copycontentsnam namesexcept record link name field record link name use gener copi content record prop sortvalu choosepropexcept record link sortvalu compar sort chosen either field comput method valu defin record type exclud field link menu choic present user prop sortdirect oneof ascend descend must ascend descend user ask choos item match concret type result substitut pattern form view type cluster fig show cluster myrecassl view type myrecassllpoint myrecassllrecord produc viewa properti need gener sortedlinkedlist sortvalu defin term concret type gener defin sortedlinkedlist explicitli test sortdirect sinc valu constant code select direct kept illustr switch valu view type select option featur gener weid note option reusabl procedur essenti avoid combinator set version exampl booch compon set contain compon batori identifi combin fewer design decis linkedlist librari procedur one view cluster allow special them viewa requir minim input present sensibl choic user need understand abstract type detail effect view specif use specialpurpos languag guid type match languag necessarili complet suffici varieti view cluster specif prevent type error often allow choic made automat case link field other eg copycontentsnam perform bookkeep reduc user input specif sortvalu heurist elimin choic addit restrict might help eg sortvalu could requir type order viewa power type matcher tend selfdocu elimin opportun error effect minim input assum user understand concret type understand abstract type well enough make choic present viewa intend view data structur companion program mkv use graphic interfac algebra manipul equat make mathemat view also investig creation program connect diagram repres physic mathemat model higherord code compound structur abstract type may use larger structur exampl sever kind queue made linkedlist frontpointerqueu pointer front link list twopointerqueu pointer front last record endpointerqueu pointer last record circularli link list sequenc queue turn use priorityqueu gener compound structur often small eleg exampl insert prioriti queue is gldefun priorityqueueinsert qpriorityqueu ninteg new insert index q n new code index q n index sequenc prioriti n yield queue insert interpret rel type queue small function expand larger code oper expand oper compon structur expand singl definit gener cover combinator set compon type gener loop macro languag abstract type must provid loop collect data alphard clu allow iter concret type interlisp provid flexibl loop construct lisp list setl provid set map compil loop them implement chosen compil gener procedur need loop independ data structur eg array link list tree done loop macro expans gener procedur obey strict hierarchi involv independ name space expand loop howev code specifi loop statement must interspers code iter iter must introduc new variabl lexic level macro use reason name use macro chang necessari avoid name conflict glisp provid gener loop statement form for item sequenc when pitem verb fitem statement compil iter macro defin verb type sequenc expand inlin exampl consid gldefun rmyrec for x sortedlinkedlist r sum size x loop iter sequenc r use sortedlinkedlist view inherit linkedlist iter sum size element x link list macro provid loop summat max min averag statist collect macro collect data specifi form make possibl convert one kind collect anoth eg array link list data structur may sever level structur exampl symbol tabl might construct use array bucket array index first charact symbol array element pointer bucket ie sort link list symbol doubleiter macro defin compos two iter allow loop compound structur gldefun ssymbolt for sym sum name sym concaten name symbol loop expand nest loop first array bucket link list return string sinc name string concaten string compil code line lisp copi represent chang glisp compil recurs expand code level abstract oper data reach interpret code rel type appli lisp funcal use call function determin runtim glisp funcal whose function argument constant compil time treat like function call ie interpret rel argument type make possibl write higherord code implement composit view content linkedlist record may consist sever item differ type gener copylist make new record copi content field it requir sever assign accomplish loop copycontentsnam defin view type name copycontentsnam funcal name destin record assign valu funcal name sourc record for name copycontentsnam l funcal name implement l funcal name implement m sinc list name constant loop unrol funcal constant name interpret field method refer result sequenc assign sinc function call side assign statement interpret rel type appli higherord code transfer data differ record type chang represent transfer eg convert radiu circl one represent area anoth represent convert data reflect differ represent unit measur exampl consid two differ type cira cirb color list circl superclass cira con color symbol con nxt cira radiu super circl cirb list diamet roman color next cirb prop radiu diamet super circl type differ record cira contain integ radiu cirb contain diamet repres roman numer view type linkedlist possibl copi list either represent other illustr higherord code expand first loop unrol two assign statement transfer color diamet sourc record destin record diamet inherit circl sourc record encod roman numer destin record gldefun ucira option vcirb copylistto linkedlist u linkedlist v t red green blue nil sever view view concret data conceptu entiti may involv sever view eg polygon repres sequenc point view concret type polygon requir view concret type sequenc type view vector fig view element concret sequenc vector specifi declar give name view view name use funcal insid polygon procedur act type chang function chang type sequenc element view point effect implement composit view singl gener special varieti polygon represent exampl string charact view polygon map charact posit keyboard string car contain charact d keyboard vector iter iter figur polygon sequenc vector applic languag lisp output system mechan transform languag includ c c java pascal glisp allow target languag record type access record compil lisp code transform target languag syntax code also run within lisp creat access simul record allow interact lisp environ program datadisplay tool use rapid prototyp convers lisp target languag done stage pattern use transform idiom correspond target idiom transform certain lisp construct eg return valu statement construct legal target languag lisptolisp transform appli repeatedli transform appli second set pattern transform code nicelyformat target languag syntax result may substanti restructur c procedur sllinsert shown fig code readabl depend lisp version gener procedur contain hundr line code creat c c java pascal c version convex hull program describ below run time faster lisp version larger exampl convex hull convex hull set point smallest convex polygon enclos them kant studi highli qualifi human subject wrote algorithm task subject took consider time fail produc ineffici solut although convex hull algorithm describ textbook literatur get algorithm sourc difficult necessari understand algorithm publish descript may omit detail algorithm even contain error handcod version publish algorithm requir test verif fig illustr execut gener convex hull algorithm describ algorithm figur convex hull point illustr use citi view point algorithm use sever view data reus gener similar quickhul algorithm convex hull repres circularli link list vertex point clockwis order fig edg form vertex successor associ vertex list point may outsid edg edg split fig find point farthest left edg point must convex hull edg split two edg origin vertex new point new point end vertex splice new point circularli link list subset point left new edg collect store correspond vertex point edg split again algorithm initi make point minimum maximum x valu twopoint polygon input point associ edg edg split final vertic collect noncircular link list fig show success split algorithm rapidli elimin point consider fig show type cluster use convex hull line form point successor declar virtual lineseg anoth way specifi view allow polygon treat simultan sequenc vertic sequenc edg vertic repres algorithm deal edg well internalrecord specifi circularlinkedlist properti viewspec caus viewa call automat make circularlinkedlist view gamma au xy figur convex hull circular link list point phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi au figur split edg procedur splicein iter view use fig show gener procedur convexhul procedur initi algorithm find two start point use iter min max simplifi code next initi circularli link list made link togeth start point function split call each final vertex point collect noncircular list fig show gener cvhsplit use iter max sign leftofdist lineseg point gener inherit sinc line associ vertex virtual lineseg leftofdist expand inlin code oper directli link list vertex record think vertex successor lineseg without materi one oper specifi push list collect point cvhsplit also use procedur splicein circularlinkedlist view point split algorithm view data three differ way vertex point edg lineseg circularli link list believ use sever view common must support reus technolog programm understand algorithm reus it concret gldefclusterc convexhullclust sourcepoint convexhullsourcepoint vector sourcecollect convexhullsourcecollect listof convexhullsourcepoint prop hull convexhul special t internalrecord convexhullinternalrecord list pt convexhullsourcepoint next convexhullinternalrecord point listof convexhullsourcepoint prop line virtual lineseg msg split cvhsplit special t viewspec figur data might point per se might attribut find convex hull use tradit algorithm would requir make new data set requir form find convex hull make version hull term origin data special gener effici exampl consid find convex hull set citi latitud longitud fig show citi data structur handwritten view point use mercat project viewa use make convex hull view cityaspoint data use view special version convex hull algorithm line lisp produc in second oper origin data exampl illustr benefit approach reus gener procedur rel small easi understand reus gener reus gener procedur applic high payoff gener code much larger complex line enter creat view test verif user must confid reus program behav intend programm apprentic produc ada code user would read code modifi necessari believ programm read output reus system system inlin code expans symbol optim make output code difficult read relat origin code sourc read someon els code difficult less someon els machin gldefun convexhul origpointslistof vector let xminpt xmaxpt hullp hullp if lengthupto origpoint xminpt for p origpoint min x p next hullp hullp link circularli next hullp hullp split hullp split hullp for p circularlinkedlist hullp collect pt p figur gener convex hull procedur believ reus system reduc error error reus softwar compon might aris sever sourc compon might error compon might use improperli special compon might correct algorithm reus justifi care develop test mani applic unnot error unlik human introduc error code algorithm sedgewick note quicksort fragil simpl mistak implement go unnot caus perform badli file reus care develop gener like produc better program hand code viewa mkv guid user present correct choic view written hand type check usual catch error although glisp strongli type becaus lisp ancestri mani error check catch nearli type error experi system good reus gener new applic eg gener distanc line point reus test whether mous posit close line ultim must verifi softwar meet specif also user realli want rapid prototyp base reus develop gldefun cvhsplit cpcvhpoint let maxpt pt newcp pt point cp point cp nil if pt null maxpt for p pt p p line cp p p line cp leftofdist line cp p if maxpt leftof line cp maxpt newcp a typeof cp splicein circularlinkedlist cp circularlinkedlist newcp for p pt if leftof line cp p point cp p els if leftof line newcp p point newcp p split cp figur address program perform practic make modif easili system allow signific represent chang accomplish easili recompil formal verif might appli special gener gri prin suggest stratifi proof program obtain transform gener correct implement abstract type correct transform algorithm correct morgan extend techniqu proof data refin morri provid calcul law refin program written term abstract type bag set relat method might use proof refin system our librari proven lemma gener compon would greatli simplifi task prove softwar system correct view oop view use gener method allow concret data use oop softwar use reus oop softwar use runtim messag interfac divers kind object glisp compil automat compil cach special version method base definit given type exampl method comput area pizzaascircl gener automat citi list name symbol latitud unit real degre popul integ longitud unit real degre view point cityaspoint cityaspoint z citi prop x let radunit real radian rad longitud z y signum latitud z log tan pi ab latitud z super vector figur citi mercat project implement directmanipul graphic editor linkedlist array display method editor record made interact use program dispm allow select properti display display method use posit given display method record gener display edit structur data contain record use concret data figur show data display gener linkedlist editor user move forward backward display list excis select list element user also zoom element display detail edit content techniqu allow singl gener editor handl kind linkedlist display omit detail content link field show data easili understood form figur link list display relat work review close relat work alway possibl say an equival program could written languag x howev system softwar reus must satisfi sever criteria simultan effect claim system describ satisfi criteria wide applic mani kind softwar express reusabl gener easi use amount user input learn requir small produc effici code sever languag minim constrain represent data gener special use exist data program brook contend no silver bullet softwar develop system describ silver bullet suggest signific improv softwar develop possibl softwar reus krueger excel survey softwar reus criteria practic effect biggerstaff perli contain paper theori applic reus artifici intellig approach describ mili extens survey softwar reus emphas technic challeng softwar compon programm apprentic base reus clich somewhat analog gener project produc good idea limit success kbemac knowledgebas editor integr emac help user transform clich code unfortun kbemac rather slow user read understand lowlevel output code assum user treat output system black box need read modifi code rich describ plan calculu repres program data abstract overlay relat program data plan analog view weid propos softwar compon industri base formal specifi unchang compon compon would verifi unchang error would prevent howev rigid compon might make harder reus approach adapt compon fit applic zaremski wing describ retriev reusabl ml compon base signatur match function modul relat techniqu could use gener batori describ data structur precompil construct softwar system layer plugcompat compon standard interfac use layer whose interfac care specifi allow develop ensur layer interfac correctli focus adapt interfac gener reus independ design data languag gener procedur ada modula c allow modul parameter abstract type stacktyp book gener procedur contain procedur provid system ada modula collect limit valu code easi write small part applic class templat virtual function featur c allow reus gener howev stroustrup exampl show declar requir complex subtl declar also complex viewa hide complex guid user creat correct view idea viewa might adapt languag function set languag ml like strongli type lisp includ polymorph function eg function oper list arbitrari type functor function map structur type function structur ml also includ refer pointer allow imper program ml functor instanti gener modul contain type system allow store data structur view composit view miranda stronglytyp function languag higherord function allow gener often hard write function program good perform provid set set oper describ attempt automat choos data structur setl improv effici kruchten et al say slow beauti emphas eas construct program ineffici implement make even small problem intract transform system transform system repeatedli replac part abstract algorithm specif code closer implement execut code reach view specifi transform featur abstract type implement kant et al describ sinaps gener program simul spatial differenti equat eg seismic analysi sinaps transform small specif much larger program fortran c written use mathematica appear work well within domain setliff elf system automat gener data structur algorithm wire rout integr circuit print circuit board rule use select refin transform base characterist rout task kid transform problem statement firstord logic program highli effici certain combinatori problem user must select transform use must suppli formal domain theori applic system interest power user must mathemat sophist gri prin propos use syntact transform specifi implement abstract algorithm volpano gri describ system user specifi transform variabl express pattern statement pattern perform substitut algorithm differ version algorithm obtain method allow user specifi detail transform particular special algorithm wherea reli typebas transform gener optim pattern abil specifi individu transform gri system give flexibl possibl cost write pattern intent program project microsoft base intent similar algorithm fragment express abstract syntax tree intent transform enzym abstract syntax tree level pars unpars variou surfac syntax method store inherit intent work progress result date impress berlin weis use partial evalu improv effici scientif program given certain featur problem constant compil perform mani constant calcul possibl compil time yield special program run faster system includ partial evalu inlin symbol optim consel danvi survey work partial evalu view goguen propos librari interconnect languag lil propos much common approach goguen use term view similarli lil stronger focu mathemat descript axiom obj languag famili goguen et al view formal type map oper map strict isomorph tracz describ lileanna implement lil construct ada packag view lileanna map type oper except theori system view comput transform type gener procedur well oper reus garlan kaiser use view allow tool program develop environ access common set data meld system combin featur collect class method allow addit construct system select featur meyer discuss problem consist among program develop tool survey approach includ use file databas view develop garlan hailpern ossher describ view subset method class restrict certain method particular client harrison ossher argu oop restrict applic need view object propos subject analog class hierarchi data translat idl interfac descript languag translat represent possibl structur share exchang data part compil base precis data specif herlihi liskov describ transmiss data network represent translat share structur user write procedur encod decod data transmiss common object request broker architectur corba includ interfac definit languag automat gener stub allow interoper object across distribut system across languag machin architectur arpa knowledgeshar project address problem share knowledg base develop use differ ontolog purtilo atle describ system translat call sequenc produc small interfac modul reorder translat paramet necessari call procedur rerepresent data allow reus exist procedur requir space execut time although found small cost compil paper describ method data translat handl share structur guttag horn describ formal languag specifi procedur interfac signatur properti yellin strom describ semiautomat synthesi protocol convert allow interfac client server objectori program describ view use gener method oop oop messag interpret convert procedur call depend type receiv object method inherit superclass close connect class requir user understand great deal class method mani oop system class must includ data superclass reus oop restrict implement data name data messag must consist must conflict holland use contract specifi data behavior oblig compos object contract somewhat like cluster requir special includ certain instanc data implement data way gener special separ contract len construct use disambigu name conflict view provid encapsul prevent name conflict view allow reus benefit oop flexibl implement data oop system ineffici sinc method small messag interpret overhead larg especi layer system c restrict oop effici method dispatch opac object prevent optim across messag boundari unless messag compil inlin c allow inlin compil reus oop may requir creat new object reus method class view allow object thought anoth type without materi type conclus approach base reus program knowledg gener procedur abstract type view descript envis librari abstract type gener develop expert could adapt quickli applic programm ordinari skill abl reus gener viewa facilit make view easili use interfac oppos verbos textual specif precis syntax essenti success reus system like viewa might reduc complex specif requir languag view also support data translat runtim messag interpret singl directmanipul editor handl implement abstract type techniqu provid high payoff gener code rel size complex input specif requir modest understand detail librari procedur success reus techniqu allow restructur data meet new requir improv effici tradit languag reflect data implement code make chang costli system deriv code data definit design decis state singl place distribut compil rather hand code abil produc code differ languag decoupl choic program tool choic applic languag allow new tool extend old system write part system without commit use tool everyth comput becom commod user longer care kind cpu chip insid box may look forward time today highlevel languag becom implement detail acknowledg comput equip use research furnish hewlett packard ibm thank david gri hamilton richard ben kuiper anonym review suggest improv paper r ieee tran functor categor imper a year perspect automat program the design implement hierarch softwar system reusabl compon scalabl softwar librari reengin complex applic use scalabl data structur compil compil scientif code use partial eval uation softwar reusabl vol softwar compon ada no silver bullet essenc accid softwar engin introduct data type tutori note partial evalu the common object request broker architectur specif program languag disciplin program design pattern element reusabl objectori softwar view tool integr environ reus interconnect softwar compon principl parameter program denot descript program languag a new notion encapsul the transform new languag construct introduct lcl larchc interfac languag extend object support multipl interfac access control subjectori program critiqu pure object a valu transmiss method abstract data type data abstract program develop use modula specifi reusabl compon use contract xerox palo alto research center synthes program environ reusabl featur understand autom algorithm design scientif program autom synthesi softwar reus softwar prototyp use setl languag idl share intermedi represent modula softwar compon librari autom softwar design difficulti integr multiview develop system reus softwar issu research direct data refin miracl law data refin ada gener librari enabl technolog knowledg share glisp lispbas program system data abstract data abstract glisp negoti interfac softwar reus softwar reus view type cluster gener program connect physic model compos reusabl softwar compon view convers unit measur creation view reus softwar differ data represent ml work programm introduct discret structur comput geometri modul reus interfac adapt a formal represent plan programm apprentic read artifici intellig softwar engin programm apprentic mathemat theori global program optim an automat techniqu select data represent setl program on automat select data structur algorithm abstract verif alphard defin specifi iter gener intent program innov legaci age kid semiautomat program develop system lileanna parameter program languag an overview miranda the templat approach softwar reus reusabl softwar compon mathematica system mathemat comput interfac protocol semiautomat construct softwar adaptor signatur match key reus tr ctr heinz pozewaunig dominik raunerreithmay support semant recoveri code scaveng use repositori classif proceed symposium softwar reusabl p may lo angel california unit state hai zhuge componentbas workflow system develop decis support system v n p juli sanjay bhansali tim j hoar autom softwar synthesi applic mechan cad ieee transact softwar engin v n p octob batori gang chen eric robertson tao wang design wizard visual program environ genvoca gener ieee transact softwar engin v n p may fabio casati silvana castano mariagrazia fugini isabel mirbel barbara pernici use pattern design rule workflow ieee transact softwar engin v n p august richard w selbi enabl reusebas softwar develop largescal system ieee transact softwar engin v n p june