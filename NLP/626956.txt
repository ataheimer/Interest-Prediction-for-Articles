t faster numer algorithm via except handl a attract paradigm build fast numer algorithm follow tri fast occasion unstabl algorithm test accuraci comput answer recomput answer slowli accur unlik event necessari especi attract parallel machin fastest algorithm may less stabl best serial algorithm sinc unstabl algorithm overflow caus except except handl need implement paradigm safe implement effici except handl cannot slow illustr paradigm numer linear algebra algorithm lapack librari b introduct wide accept design paradigm comput hardwar execut common instruct quickli possibl replac rarer instruct sequenc common one paper explor use paradigm design numer algorithm exploit fact numer algorithm run quickli usual give right answer well other slower algorithm alway right right answer mean algorithm stabl comput exact answer problem slight perturb input reason ask algorithm take advantag faster occasion unstabl algorithm use follow paradigm use fast algorithm comput answer usual done stabli quickli reliabl assess accuraci comput answer unlik event answer accur enough recomput slowli accur success approach depend larg differ speed fast slow algorithm abl measur accuraci answer quickli reliabl and import us float point except caus unstabl algorithm abort run slowli last requir mean system must either continu past except later permit program determin whether except occur els support userlevel trap handl paper assum first respons except avail correspond default behavior ieee standard float point arithmet numer method drawn lapack librari numer linear algebra routin high perform comput particular consid condit estim error bound linear system comput eigenvector gener complex matric symmetr tridiagon eigenvalu problem singular valu decomposi tion first two algorithm common need solv triangular system linear equat possibl illcondit triangular system solv one matrix oper found basic linear algebra subroutin bla bla includ relat oper like dot product matrixvector multipl matrixmatrix multipl occur frequent scientif comput led standard widespread implement particular high perform machin highli optim implement bla good way write portabl high perform code express one algorithm sequenc call bla done systemat lapack numer linear algebra lead signific speedup highli pipelin parallel machin howev linear system aris condit estim eigenvector comput often illcondit mean overunderflow complet unlik sinc first distribut lapack portabl mani machin possibl includ except fatal could take advantag speed optim bla instead use test scale inner loop avoid comput might caus except paper present algorithm condit estim eigenvector comput use optim bla test flag detect except occur recov except occur report perform result fast decstat slow decstat both mip r chip cpu sun which sparc chip cpu dec alpha crayc sparcstat vike microprocessor slow dec correctli implement ieee arithmet arithmet nan time slower normal arithmet fast dec implement ieee arithmet incorrectli operand involv denorm nan speed normal arithmet otherwis two dec workstat equal fast cray except handl still compar speed common case except occur see speedup could except handl avail measur speedup ratio time spent old lapack routin time spent new routin speedup obtain condit estim common case except occur follow speedup rang either dec sun dec alpha cray result comput eigenvector quit attract speedup would even higher machin optim bla parallel slower scale code not rare case except occur speed depend strongli whether except occur earli late triangular solv speed subsequ arithmet nan notanumb argument exampl speedup high fast dec time slower slow dec illustr price implement ieee nan arithmet slowli discuss bisect algorithm find eigenvalu symmetr tridiagon matric lapack sstebz routin take special care inner loop avoid overflow divis zero wherea algorithm take advantag infin arithmet defin ieee standard report perform result sparcstat ipx which weitek chip fpu well distribut memori multiprocessor cm speedup rang also discuss singular valu decomposit algorithm use lapack routin sbdsqr care scale code avoid use except handl speedup obtain cray ymp el rest paper organ follow section describ model except handl detail section describ algorithm solv triangular system normal buggi workstat would annoy case permit us run experi speed except handl vari without except handl section describ condit estim algorithm without except handl give time result section eigenvector comput section compar bisect algorithm solv symmetr tridiagon eigenvalu problem without except handl section describ benefit except handl comput singular valu matrix section draw lesson valu fast except handl fast arithmet nan infin symbol section suggest futur research except handl section review ieee standard arithmet handl except discuss rel speed except handl mechan affect algorithm design state assumpt made speed paper also briefli describ except handl interfac decstat ieee standard classifi except five categori overflow underflow divis zero invalid oper inexact associ except statu flag trap five except signal detect signal entail set statu flag take trap possibl both flag sticki mean rais remain set explicitli clear flag test save restor alter explicitli softwar trap come user control sens user abl specifi handler it although capabl seldom implement current system default respons except proceed without trap deliv destin appropri default valu standard provid clearlydefin default result possibl except default valu condit produc summar tabl produc ieee default behavior sigma nan propag comput without produc except accord standard trap sticki flag provid two differ except except rais default valu condit overflow underflow sigma e min denorm e e min divis zero sigma x finit x invalid nan gamma theta etc inexact roundx true result represent tabl ieee standard except default valu handl mechan util depend quickli flexibl permit except handl sinc modern machin heavili pipelin typic expens imposs precis interrupt except oper branch execut code later resum comput even without pipelin oper system overhead may make trap handl expens even though branch strictli need mere test sticki flag may somewhat expens sinc pipelin may requir synchron event order updat them thu appear fastest use sticki flag instead trap test sticki flag seldom possibl hand infrequ test sticki flag mean possibl long stretch arithmet sigma nan argument default ieee arithmet slow compar arithmet normal float point number clearli inadvis wait long test sticki flag decid whether altern comput perform summari fastest algorithm depend rel speed convent unexcept float point arithmet arithmet nan sigma argument test sticki flag trap handl extrem case everyth except convent unexcept float point arithmet terribl slow forc test scale avoid except cpu denorm nan measur mip r cc slow correct x slower full speed x slower fast buggi full speed full speed full speed mip r x slower full speed x slower cc full speed x slower f full speed x slower f full speed full speed full speed f parisc x slower full speed x slower cc rs full speed full speed full speed cc full speed full speed full speed manual pentium full speed full speed full speed manual x slower x slower x slower cc full speed full speed full speed manual dec alpha x slower x slower x slower cc crayc na abort abort manual non ieee machin tabl speed arithmet denorm nan argument compar convent arithmet unfortun situat introduct except handl would unpleas ironi except handl render unattract use slow implement paper design algorithm assum userdefin trap handler avail test sticki flag expens enough done infrequ arithmet nan sigma reason fast code fact suppli way measur benefit one get make nan arithmet fast tabl show speed arithmet denorm number nan compar convent arithmet machin tabl entri measur fortran c other architectur manual dec alpha implement ieee default includ infin nan denorm precis interrupt caus signific loss speed compar normal arithmet interfac sticki flag via subroutin call without special compil support return first argument binari oper statu flag set illustr interfac briefli one test machin decstat mip r chip cpu decstat r floatingpoint acceler oper coprocessor r processor chip extend rs instruct set perform float point arithmet oper fpa contain bit controlstatu regist fcr design except handl readwritten instruct run user mode fcr contain five nonsticki except bit one except tabl appropri set clear everi float point oper five correspond trapen bit use enabl user level trap except occur five correspond sticki bit hold accru except bit requir ieee standard trap disabl oper unlik nonsticki except bit sticki bit never clear sideeffect float point oper clear write new valu controlstatu regist nonsticki except bit might use applic requir finer grain except handl parallel prefix algorithm develop paper need manipul trap enabl bit set zero disabl softwar trap sticki bit procedur exceptionreset clear sticki flag associ overflow divis zero invalid oper suppress except accordingli function except return true overflow divis zero invalid sticki flag rais triangular system solv discuss two algorithm solv triangular system equat first one simpler faster two disregard possibl overunderflow second scale care avoid overunderflow one current use lapack condit estim eigenvector comput solv lower triangular nbyn matrix use notat indic submatrix l lie row j column k l l similarli li l follow algorithm access l column algorithm solv lower triangular system endfor common oper standard subroutin strsv one bla algorithm easili overflow even matrix l wellscal ie row column equal moder length exampl c gamma c gamma c gamma overflow ieee singl precis even though row column l largest entri magnitud terribl small entri similarli let l n c analog nbyn matrix second st element along main diagon mean l n c second algorithm scale care avoid overflow algorithm algorithm work choos scale factor solv chosen whenev solut x would overflow case x would overflow even smallest posit float point number set zero for exampl consid singl precis exampl li exactli l singular algorithm set comput nonzero vector x satisfi brief outlin scale algorithm see detail coars bound solut size comput follow algorithm begin comput c lower bound g valu x step algorithm final lower bound g reciproc largest intermedi final valu comput anywher algorithm in lower bound x gamma comput instead upper bound x j avoid possibl overflow upper bound smallest float point number safe invert g un mean solut comput without danger overflow simpli call bla otherwis algorithm make complic seri test scale algorithm compar cost algorithm algorithm cost n flop float point oper half addit half multipli also n divis insignific larg n first step algorithm comput c cost much algorithm applic expect solv sever system coeffici matrix reus c amort cost sever call best case g un simpli call strsv make overal oper count n or n amort worst and rare case inner loop algorithm scale step increas oper count n again total n or n amort updat x max cost anoth data access comparison may may cheaper number float point oper import oper count algorithm mani data depend branch make harder optim pipelin parallel architectur much simpler algorithm born result later section algorithm avail lapack subroutin slatr code handl upper lower triangular matric permit solv input matrix transpos handl either gener unit triangular matric line long exclud comment fortran implement bla routin strsv handl input option line long exclud comment detail slatr see algorithm solv lower triangular system comput describ g un call bla routin strsv els els els li comput null vector x els jxij jxij endif endfor endif condit estim section discuss ieee except handl use design faster condit estim algorithm compar first theoret practic old algorithm use lapack new algorithm algorithm solv nbyn linear system wish comput bound error true measur error use either onenorm jjxjj infin norm jjxjj j usual error bound pn slowli grow function n usual n ffl machin precis condit number a ae pivot growth factor condit number defin comput gamma cost solv prefer estim jja gamma jj inexpens as lu factor call condit estim sinc jjajj easi comput focu estim jja pivot growth may defin jju jj other definit possibl close uniti except patholog case lapack librari set routin develop estim reciproc condit number k a estim reciproc k a call rcond avoid overflow k a input routin includ factor l u factor modif hager method use estim jja gamma jj algorithm deriv convex optim approach base observ maxim valu function attain one vector e j jth column nbyn ident matrix algorithm algorithm comput lower bound fl jja choos x repeat solv solv use algorithm solv solv u use algorithm quit els x e j j jz algorithm involv repeatedli solv upper lower triangular system certain stop criterion met due possibl overflow divis zero invalid except caus illcondit bad scale linear system lapack routin sgecon use algorithm instead algorithm solv triangular system like discuss section detail use scale factor return algorithm shown see routin sgecon slacon lapack goal avoid slower algorithm use except handl deal illcondit badli scale matric algorithm call bla routin strsv properti overflow occur matrix extrem illcondit case detect use sticki except flag immedi termin welldeserv estim rcond mere replac triangular solver use algorithm strsv insert test overflow work seen choos moder illcondit matrix norm near underflow threshold caus overflow solv though moder illcondit therefor modifi logic algorithm follow comment indic guarante lower bound k a except lead earli termin algorithm algorithm estim reciproc rcond estim reciproc condit number call exceptionreset choos x repeat solv call strsv except rcond quit solv call strsv except rcond quit els delta ff except rcond quit endif els solv call strsv except rcond quit endif els solv call strsv except rcond quit endif solv u call strsv except rcond quit els solv l call strsv except rcond quit endif els x e j jz endif behavior algorithm describ follow lemma algorithm stop earli except true round reciproc condit number satisfi rcond maxn ae pivot growth factor proof algorithm seven place except may occur analyz one one note x chosen jjxjj except occur comput l gamma x therefor except occur comput u rcond ov except occur comput ff rcond ov except occur comput u ff except occur comput u except occur comput u gammat ff therefor ov except occur comput l gammat u gammat ff therefor rcond n ov combin seven case shown rcond maxn ae ov except occur practic rcond ffl signal system illcondit make error bound larg solut larger mean comput solut digit guarante correct sinc maxn ae ov ae enorm both also mean error bound enorm loss inform stop earli algorithm lemma applic linear system partial complet pivot gaussian elimin exampl lapack routin sgecon sgbcon strcon see section descript routin complex counterpart symmetr posit definit matric pivot necessari analog algorithm eg spocon develop analyz though omit paper due limit length machin matrix dimens n sgecon spocon strcon sun sgbcon sgecon spocon strcon dec alpha sgbcon sgecon spocon strcon crayc sgecon tabl speedup dec sun dec alphacrayc except scale occur sbw stand semibandwidth numer result compar effici algorithm rewrot sever condit estim routin lapack use algorithm includ sgecon gener dens matric spocon dens symmetr posit definit matric sgbcon gener band matric strcon triangular matric ieee singl precis compar speed robust algorithm gener variou input matric yield unexcept execut without invoc scale insid algorithm well except execut unexcept input tell us speedup common case machin like cray measur perform lost lack except handl first ran algorithm suit wellcondit random matric except occur scale necessari algorithm far common case practic experi carri decstat sun dec alpha singl processor crayc perform result present tabl number tabl ratio time spent old routin use algorithm time spent new routin use algorithm ratio measur speedup attain via except handl estim condit number output two algorithm alway same dens matric matric larg bandwidth matrix dimens n increas time servic cach miss constitut larger portion execut time result decreas speedup ran sgbcon matric small bandwidth whole matrix fit cach observ even better speedup second compar algorithm sever intent illscal linear system scale insid algorithm invok whose condit number still finit sgecon alon matric size obtain speedup decstat dec alpha third studi behavior perform two algorithm except occur gener suit illcondit matric caus possibl except path algorithm execut algorithm consist deliv zero reciproc condit number algorithm insid triangular solv comput involv number nan sigma inde overflow produc sigma common situat subtract two infin shortli thereaft result nan propag succeed oper word one except oper common situat long success oper nan compar perform fast slow decstat set problem recal fast decstat nan arithmet incorrectli speed convent argument wherea slow decstat comput correctli time slower tabl give speed decstat slow dec goe test matric togeth softwar obtain via anonym ftp exampl exampl exampl fast dec speedup slow dec slowdown sparcstat tabl speed exampl except matrix dimens time slower fast dec exampl infin nan occur speedup rang machin tabl also show speedup observ sparcstat nan arithmet implement correctli full speed eigenvector comput consid anoth opportun exploit ieee except handl problem comput eigenvector gener complex matric exampl contrast earli one requir recomput answer slowli except occur paradigm let nbyn complex matrix nonzero vector v u scalar satisfi conjug transpos call eigenvalu v u call right left eigenvector associ eigenvalu respect lapack task comput eigenvalu associ eigenvector perform follow stage as routin cgeev reduc upper hessenberg form h zero first subdiagon reduct written h reduc schur form reduct written upper triangular matrix unitari eigenvalu diagon ctrevc comput eigenvector let v matrix whose column right eigenvector delta v right eigenvector h q right eigenvector a similarli comput left eigenvector let us first examin import stage calcul eigenvector upper triangular matrix eigenvalu find right eigenvector v associ eigenvalu ii need solv homogen equat partit block form backward substitut v satisfi equat therefor problem reduc solv upper triangular system dimens find n eigenvector need solv triangular system scalar multipl v also eigenvector alway expect obtain answer scale solut vector matter illcondit badli scale triangular system is purpos ctrevc call triangular solv routin clatr instead call triangular solver ctrsv bla clatr complex counterpart slatr discuss section use algorithm common case howev scale unnecessarili introduc overhead reimplement part ctrevc contain triangular solv solv equat first call ctrsv test except flag except occur go back call clatr studi effici modifi ctrevc ran old code new one random upper triangular matric variou size observ speedup decstat sun case overflow triangular solv invok twice first use ctrsv yet throw away solut second use clatr sinc ctrsv twice fast clatr see section perform loss rare except occur see perform attain ctrevc alon effect perform whole process comput eigenvector gener complex matric time ctrevc context cgeev turn ctrevc amount total execut time cgeev therefor expect speed whole process increas symmetr tridiagon eigenvalu problem section consid problem find eigenvalu real symmetr tridiagon matrix let nbyn symmetr tridiagon matrix form b b bisect method accur inexpens paralleliz procedur calcul eigenvalu inner loop method base integervalu function counto real argument oe defin function counto endfor return c thu count function count number nonposit ts iter known number equal number eigenvalu less equal oe suppos wish find eigenvalu a b use bisect first evalu counta countb differ two count valu number eigenvalu a b let b midpoint interv evalu counto deduc mani eigenvalu lie interv a oe oe b recurs bisect two interv interv contain singl eigenvalu bisect repeat eigenvalu determin suffici precis divis involv recurr may caus divis zero overflow again prevent occurr except care scheme first develop w kahan later use lapack sstebz routin there algorithm first comput threshold pivmin smallest number divid b overflow insid inner loop divisor compar pivmin chang gammapivmin close zero algorithm give detail method algorithm comput number eigenvalu less equal oe endfor return c machin ieee floatingpoint arithmet may rewrit count function algorithm even though b may overflow whenev occur default valu sigma use continu comput algorithm comput number eigenvalu less equal oe endfor return c signbitx extract sign bit floatingpoint number x repres ieee format return valu either depend whether x posit neg signbitx comput quickli logic shift sign bit x rightmost bit posit regist leav zero bit correct algorithm reli fact arithmet sigma sign zero sigma obey certain rule defin ieee standard merit algorithm replac two explicit condit branch singl straightlin statement make better use floatingpoint pipelin hardwar requir algorithm attain good speed speed infin arithmet sparcstat ipx infin arithmet fast convent arithmet measur speed algorithm variou matric size rang algorithm achiev speedup rang algorithm also compar two bisect algorithm use algorithm inner loop respect find eigenvalu abl get speedup rang due domin role count function bisect algorithm also comparison distribut memori multiprocessor think machin cm cm configur contain mhz sparc processor interconnect fattre network process node mbyte local memori coordin synchron among process node achiev via explicitli pass matrix size ts lapack bisect tabl speedup parallel bisect algorithm cm ing messag floatingpoint arithmet cm conform ieee standard infin arithmet fast convent arithmet inderjit dhillon et al design parallel bisect algorithm cm whole spectrum divid subinterv process node respons find eigenvalu within one subinterv dynam load balanc scheme incorpor eigenvalu evenli distribut tabl report three type speedup number experi algo stand run time algo singl node cm p algo stand run time algo node cm thu tsalgo repres parallel speedup algo two algorithm compar are lapack bisect use algorithm get count valu ieee bisect use algorithm get count valu last column demonstr speedup parallel ieee bisect parallel bisect see speedup attain use ieee arithmet rang singular valu decomposit section discuss use except handl speed comput singular valu decomposit matrix import linear algebra comput mani applic consist two phase phase reduct bidiagon form ie nonzero diagon first superdiagon onli cost on oper n matrix dimens phase comput singular valu bidiagon matrix cost phase take much longer phase machin like crayc phase readili vector or parallel wherea phase consist nonlinear recurr run scalar speed exampl phase float point oper speed megaflop time second wherea phase float point oper speed megaflop time second phase take longer phase n section discuss use except handl acceler phase phase implement slight modif lapack subroutin sbdsqr describ below suffic consid one main loop sbdsqr other similar addit multipli addit two use oper call rotf r take f g input return gr output simpl formula subject failur inaccuraci either f g greater squar root overflow threshold littl larger squar root underflow threshold therefor sbdsqr current seri test scale avoid failur the differ sbdsqr routin routin inlin rot use slightli differ move accur scale algo rithm almost time test indic scale need imposs determin without run whole loop compar perform two version sbdsqr one test scale abov anoth call sbdsqr unsaf use simpl singl line formula r cs sn test two routin cray ymp el speedup depend somewhat matrix test bidiagon matrix entri form dimens rang speedup half speedup lesson system architect import lesson welldesign except handl permit common case except occur implement much quickli alon make except handl worth implement well trickier question fast except handl must implement three speed issu speed nan infin arithmet speed test sticki flag speed trap handl principl reason nan infin arithmet fast convent arithmet exampl section show slowdown nan arithmet factor convent arithmet slow condit estim factor sinc except reason rare slowdown gener affect worst case behavior algorithm depend applic may may import worst case import import system design provid method fast except handl either nan infin arithmet test sticki flag trap handl make three slow forc user code avoid except first place origin unpleas situat except handl design avoid particularli import fast except handl parallel comput follow reason run time parallel algorithm run time slowest processor probabl except occur least one processor p time great one processor p number processor futur work design paradigm numer algorithm propos paper quit gener use develop numer algorithm includ rewrit bla routin snrm comput euclidean norm vector lapack routin shsein which call slatr comput eigenvector real upper hessenberg matrix complex divis gradual underflow instead flush zero guarante accur result see requir fast arithmet denorm number float point parallel prefix use oper variou linear algebra problem robust implement protect overunderflow requir fine grain detect handl except final comment concern tradeoff speed nan infin arithmet granular test except current approach use larg granular sinc test except complet call strsv approach fast nan infin arithmet must fast hand fine grain approach would test except insid inner loop avoid useless nan infin arithmet howev frequent test clearli expens compromis would test except one sever complet iter inner loop strsv would requir reimplement strsv medium grain approach less sensit speed nan infin arithmet effect granular perform worth explor softwar describ report avail author acknowledg author wish thank w kahan detail critic comment also wish thank inderjit dhillon provid us perform result bisect algorithm run cm r robust triangular solv use condit estim underflow reliabl numer softwar specif robust parallel prefix oper faster numer algorithm via except handl parallel algorithm symmetr tridiagon eigenproblem implement cm set level basic linear algebra subprogram extend set fortran basic linear algebra subroutin site editor alpha architectur refer manual matrix comput condit estim algorithm fortran code estim onenorm real complex matrix sparc intern inc accur eigenvalu symmetr tridiagon matrix mip risc architectur basic linear algebra subprogram fortran usag connect machin cm technic summari tr extend set fortran basic linear algebra subprogram mip risc architectur set level basic linear algebra subprogram sparc architectur manual alpha architectur refer manual lapack user guid fortran code estim onenorm real complex matrix applic condit estim matrix comput rd ed basic linear algebra subprogram fortran usag accur eigenvalu symmetr tridiagon matrix work note no robust triangular solv use condit estim ctr technic report floatingpoint except handl acm sigplan fortran forum v n p dec david bindel jame demmel william kahan osni marqu comput given rotat reliabl effici acm transact mathemat softwar tom v n p june inderjit s dhillon beresford n parlett christof vmel design implement mrrr algorithm acm transact mathemat softwar tom v n p decemb xiaoy s li jame w demmel david h bailey greg henri yozo hida jimmi iskandar william kahan suh y kang anil kapur michael c martin brandon j thompson teresa tung daniel j yoo design implement test extend mix precis bla acm transact mathemat softwar tom v n p june john r hauser handl floatingpoint except numer program acm transact program languag system topla v n p march