t loop almost linear time a loop identif essenti step perform variou loop optim transform classic algorithm identifi loop tarjan intervalfind algorithm restrict reduc graph recent server peopl propos extens tarjan algortihm deal irreduc graph havlak present one extens construct loopnest forest arbitrari flow graph show run time algorithm quadrat worstcas almost linear claim show modifi algorithm make run almost linear time next consid quadrat algorithm present sreedhar et al construct loopnest forest differ one construct havlak algorithm show algorithm adapt run almost linear time final consid algorithm due steensgaard construct yet antoh loopnest forest show algorithm made effici borrow idea algorithm discuss earlier b introduct loop identif interest control flow analysi problem sever applic classic algorithm identifi loop tarjan interv find algorithm tarjan restrict reduc graph re centli sever peopl propos extens tarjan algorithm deal irreduc graph paper studi improv three recent propos algorithm identifi loop irreduc graph first algorithm studi due havlak show run time algorithm quadrat worstcas almostlinear claim show modifi algorithm make run almost author address g ramalingam ibm tj watson research center po box yorktown height ny usa email ramawatsonibmcom permiss make digitalhard copi part materi without fee grant provid copi made distribut profit commerci advantag acm copyrightserv notic titl public date appear notic given copi permiss associ comput machineri inc acm copi otherwis republish post server redistribut list requir prior specif permiss andor fee c g ramalingam linear time next consid quadrat algorithm present sreedhar et al construct loop nest forest differ one construct havlak algorithm show algorithm adapt run almost linear time final section present yet anoth loop nest forest defin steensgaard discuss aspect sreedhar et al algorithm combin steensgaard algorithm improv effici steensgaard algorithm terminolog notat flowgraph connect direct graph v e startend consist set vertic v set edg e distinguish start end vertic assum without loss gener start predecessor denot number vertic given graph n number edg given graph m assum reader familiar depth first search hopcroft tarjan abbrevi df depth first search tree see cormen et al exampl edg x graph said df tree edg x parent df tree df forward edg x ancestor parent df tree df backedg x descend df tree df cross edg otherwis we omit prefix df confus like straightforward augment df comput inform help answer ancestor relat queri of form is u ancestor v df tree constant time see havlak exampl refer order vertic visit df df order also assum reader familiar concept reduc irreduc flowgraph see aho et al discuss concept denot invers ackermann function ffi j invers ackermann function slow grow function may consid constant practic purpos see cormen et al discuss function appear singl wellaccept definit loop is certain irreduc flowgraph three algorithm consid paper identifi differ set loop suitabl algorithm depend intend applic howev follow fact hold true three algorithm loop correspond set vertic flowgraph l x l two loop identifi one algorithm either l x l mutual disjoint one complet contain other henc nest or contain relat loop repres forest refer loop nest forest identifi correspond algorithm vertex belong loop said entri vertex loop predecessor outsid loop given flowgraph algorithm describ paper conceptu modifi flowgraph execut proce thu refer flowgraph worth rememb mean fix input flowgraph flowgraph constantli chang cours execut chang identifi loop almost linear time delta flowgraph howev explicitli repres instead unionfind data structur use implicitli repres chang flowgraph tarjan algorithm reduc graph begin brief descript tarjan loop nest forest algorithm construct it consid reduc graph everi vertex w target backedg identifi loop lw w header let bw set backedgeg loop lw consist w vertic graph reach vertex bw without go w two loop l x l either l x l must disjoint one must complet contain other henc nest or contain relat loop repres forest yield loop nest forest provid definit tarjan loop nest forest for reduc graph let us see forest construct effici tarjan algorithm perform bottom travers depthfirst search tree identifi inner nest loop first identifi loop algorithm col laps singl vertex if x set vertic collaps x mean replac set vertic x singl repres vertex r x graph vertex successor predecessor r x collaps graph iff successor predecessor vertex x origin graph vertex w visit travers determin loop header incom backedg explain abov let bw set fzjz w backedgeg children w loop nest forest identifi perform backward travers collaps graph identifi vertic reach vertex bw without go w children w identifi w children merg collaps togeth singl vertex identifi newli construct loop lw travers continu next vertex implement collaps vertic achiev use classic unionfind data structur see tarjan cormen et al thu outermost loop identifi far maintain set find oper vertex x return header outermost loop contain x or vertex x loop set vertic collaps perform union oper vertic set complet descript algorithm pseudocod appear figur let us analyz complex algorithm procedur findloop invok exactli everi vertex henc line execut everi vertex line execut everi vertex y innermost loop contain identifi result total cost execut line perform one find oper per edg origin graph similarli line execut everi vertex z cost union oper whole algorithm perform n union oper find oper n denot number vertic graph denot number edg graph henc whole algorithm run strictli speak mean children node repres loop lw howev simplifi matter somewhat use header vertex w repres loop lw loop nest forest sinc vertex header one loop g ramalingam procedur collapseloopbodi loophead everi z loopbodi loopparentz loophead lpunionz loophead use loophead repres merg set end procedur findlooppotentialhead potentialhead backedg worklist empti remov arbitrari element worklist add loopbodi everi predecessor z z backedg lpfindz loopbodi fpotentialheaderg worklist add lpfindz worklist end end end loopbodi empti collaps loopbodi potentialhead procedur tarjansalgorithm g everi vertex x g loopparentx null lpaddx end everi vertex x g reversedfsord findloopx end fig tarjan algorithm construct loop nest forest reduc graph lp partit vertic graph function lpaddz initi place z equival class itself function lpunionu v merg us vs class one use v repres element merg class function lpfindz return repres element zs equival class time omnffmnn unionfind implement use standard path compress unionbyrank techniqu tarjan cormen et al havlak algorithm havlak recent present extens tarjan algorithm handl irreduc graph well show algorithm potenti quadrat even though havlak describ algorithm almostlinear precis show algorithm worstcas may take n time even graph number edg on havlak extens tarjan algorithm modifi loop bodi identif step follow given vertex potentialhead children potentialhead in loop nest forest identifi perform backward travers collaps graph befor travers restrict set descend potentialhead df tree particular line tarjan algorithm figur modifi line execut z descend potentialhead df tree z descend potentialhead df tree edg z ignor replac edg z potentialhead in collaps flowgraph note reduc graph z identifi loop almost linear time delta h e end k fig counterexampl illustr havlak algorithm may perform quadrat number unionfind oper solid line indic df tree edg dash line indic remain graph edg guarante descend potentialhead df tree last step describ precis sourc problem possibl singl edg z process multipl time time edg header loop contain y exampl shown figur thi note vertic h k h target backedg and henc identifi loop header order loop bodi also construct order edg k h k process replac success edg k h everi k similarli everi edg process time thu algorithm end perform oper exampl exampl present lower bound complex havlak al gorithm also upper bound havlak algorithm particular modifi loop line perform n find oper sinc line may perform everi vertex whole algorithm perform on union oper on find oper impli upper bound run time algorithm sinc ffn n o see tarjan upper bound simplifi on delta g ramalingam z j k fig modifi havlak algorithm run almost linear time edg flowgraph delta delta delta k shown bold vertic ancestor df tree identifi loop header havlak algorithm z least common ancestor in df tree j proper descend z descend j havlak algorithm edg use construct bodi loop header j use construct loop bodi j almost linear time version havlak algorithm describ modif havlak algorithm run almost linear time given vertex control flow graph consid s ancestor havlak loop nest forest see figur particular everi let i denot header innermost loop contain in havlak loop nest forest thu delta delta delta sequenc loop contain innermost outermost identifi header note i must ancestor tree now consid edg consid largest j descend j df tree word descend j j df tree consid havlak algorithm process edg everi bodi loop header construct edg consid sinc sourc edg descend edg replac edg final bodi loop header j construct edg j appear proper edg vertex ad loop bodi would desir replac edg edg j one step instead j step turn thi let z denot least common ancestor df tree note z must lie j j in df tree consid moment havlak algorithm visit z bottom travers df tree point loop header j identifi loop header j yet identifi loop almost linear time delta procedur markirreducibleloopsz t null mark u irreducibleloophead end procedur processcrossfwdedgesx everi edg z crossfwdedgesx add edg findi findz graph end procedur modifedhavlakalgorithm g everi vertex x g loopparentx null crossfwdedgesx fg end everi forward edg cross edg x g remov x g add crossfwdedgesleastcommonancestoryx end everi vertex x g reversedfsord processcrossfwdedgesx findloopx procedur findloop figur end fig modifi version havlak algorithm rlh second unionfind data structur use map loop header header innermost reduc loop contain them construct find oper return j stage suggest follow algorithm initi pass remov everi cross edg forward edg x graph attach list associ least common ancestor x almostlinear time see tarjan cormen et al problem run havlak algorithm modifi follow whenev main bottomup travers visit vertex w process list crossforward edg associ by first pass add edg f indi f indx graph it immateri whether add edg f indx edg f indi f indx graph modifi algorithm appear figur note modif impli use procedur findloop tarjan algorithm unchang modifi algorithm run almost linear time construct loop loop nest forest havlak algorithm howev quit complet yet addit construct loop nest forest havlak algorithm also mark loop reduc irreduc straightforward distinguish reduc loop irreduc loop modifi algorithm describ abov show extra piec inform comput desir consid exampl figur presenc edg mean g ramalingam loop header j irreduc henc algorithm replac edg edg f indi j explain abov need mark loop header j irreduc procedur markirr ducibleloop figur walk loopnest tree contain naiv explain algorithm end quadrat again avoid quadrat behavior use standard path compress techniqu particular consid line mark vertex u irreduc loop header travers parent t let us say step scan looptre edg t util second unionfind datastructur scan everi looptre edg onc particular union oper line ensur tree edg never scan again sinc find oper line skip past previous scan edg safe sinc reason mark vertex as irreduc alreadi mark result algorithm run almost linear time sreedhargaole algorithm sreedhar et al present differ algorithm construct loop nest forest algorithm util dj graph essenti combin control flow graph domin tree one structur will howev simplifi discuss algorithm use control flow graph domin tree instead dj graph let levelu denot depth node u root domin tree root level let v denot set vertic level ie set vertic u maximum level domin tree sreedhar et al algorithm process vertic domin tree bottom up particular level l p process follow first step identifi reduc loop level l vertic level l scan vertex n one incom backedg whose sourc domin n identifi header reduc loop bodi reduc loop identifi tarjan algorithm travers graph backward sourc backedg identifi vertic reach backedg without go n reduc loop collaps singl vertex tarjan algorithm vertex n level l one incom backedg whose sourc domin n n one entri irreduc loop vertic level l process identifi reduc loop construct irreduc loop level l we vertex n level l one incom backedg whose sourc domin n requir process subgraph collaps flowgraph consist vertic level greater equal current level l that is set vertic identifi strongli connect compon scc nontrivi strongli connect compon graph irreduc loop level l collaps singl vertex nontrivi scc mean scc consist one vertex establish properti loop identifi algorithm use subsequ identifi loop almost linear time delta lemma vertex entri vertex one irreduc loop proof note two irreduc loop identifi level l mutual disjoint henc two loop cannot common entri vertex let l irreduc loop identifi level l show entri vertex l must also vertex level l immedi impli irreduc loop belong differ level cannot share common entri vertex either lemma follow let f denot subgraph domin tree consist vertic level greater equal l thu f forest consist subtre domin tree first note loop l must consist vertic least two differ tree f loop consist vertic one tree must reduc loop level l loop level greater l let u v vertic belong differ tree f let w root tree contain v then path in flowgraph u v must pass w otherwis w would domin v henc loop l contain vertex v must also contain root tree f contain v let v vertex loop l let w root tree contain v assum v w then predecessor x v in flowgraph must also tree root w straightforward properti domin tree follow x must also loop l sinc path x vertex loop name v path vertex loop name w x establish vertex loop l predecessor outsid l must root tree f root tree f precis vertic level l result follow sreedhar et al show algorithm describ run time omffm n km k number level strongli connect compon algorithm invok worst case k on result quadrat algorithm exampl figur illustr sourc quadrat behavior algorithm repeat applic scc algorithm consid process done level exampl level contain irreduc loop consist vertic b c d e construct irreduc loop requir identifi scc graph consist vertic k b c d e vertic notic vertic k f f k visit belong nontrivi scc similarli appli scc algorithm level or lower level may end visit vertic k f f k again worst case may end visit vertic time result quadrat complex show care implement scc identif phase ensur algorithm run almost linear time observ vertic b c d e collaps singl vertex say l repres irreduc loop vertic never visit again it true edg k b may visit later on howev edg actual repres edg collaps graph cost visit edg attribut cost visit vertex l g ramalingam k k f ff c e level i x level fig exampl illustr sourc quadrat behavior sreedhar et al algo rithm solid edg belong control flow graph domin tree dash edg control flow graph edg domin tree goal perform irreduc loop construct level vertex x level j visit x belong irreduc loop level i follow consid strongli connect compon consid vertex u compon visit first depth first search clearli vertic compon descend vertex df tree thu start set incom backedg u travers graph backward restrict travers vertic descend u df tree identifi vertic belong us strongli connect compon without visit vertic us scc process similar one use havlak algorithm and tarjansalgorithm identifi loop bodi correspond potenti header vertex howev note appli process start vertex first one scc visit df identifi complet scc thu havlak tarjan algorithm visit potenti header vertic revers df order want visit vertic order instead perform irreduc loop construct level l visit set vertic level l df order visit vertex u belong irreduc loop of level l alreadi construct skip vertex continu next vertex otherwis incom backedg belong irreduc loop bodi loop identifi travers backward sourc backedg restrict travers descend u df tree modifi algorithm appear figur word explan tarjan algorithm havlak algorithm identifi one loop per header vertex allow us repres loop header vertex loop nest forest howev sreedhargaole algorithm may identifi two loop per header vertex reduc loop irreduc loop consequ use header vertex repres loop loop nest forest instead identifi loop almost linear time delta procedur findloophead worklist worklist empti creat new vertex looprep predecessor header worklist empti remov arbitrari element worklist add loopbodi processedi true everi predecessor z lpfindz descend header df tree looprep graph elsif lpfindz loopbodi worklist add lpfindz worklist end end collaps loopbodylooprep end procedur modifiedsreedhargaoleealgorithm g everi vertex x g end everi x leve x backedg x domin y end everi x leve dfsorder not processedx x backedg x domin y end end fig modifi version sreedhargaole algorithm use new repres vertex thi further algorithm explicitli identifi loop consist singl vertex modifi desir note construct level list vertic level df order easili enough initi list empti visit vertic df order append visit vertex end list correspond level let us analyz complex algorithm observ line get execut everi vertex y line perform indegreey find oper howev line execut vertic exist origin graph also vertic creat line vertic creat line repres loop collaps graph henc complex algorithm depend number g ramalingam end fig exampl illustr sreedhar et al algorithm identifi loop identifi steensgaard algorithm repres creat indegre creat vertic fall two categori reduc loop repres irreduc loop repres everi vertex h origin graph header one reduc loop result creation one reduc loop repres r h whose indegre bound indegre h everi irreduc loop two entri vertic which vertic origin graph indegre repres irreduc loop bound sum indegre entri vertic vertex in origin entri vertex one irreduc loop henc sum indegre irreduc loop repres bound m number edg origin graph result whole algorithm perform on union oper om find oper result complex omffm n steensgaard loop nest forest section consid yet anoth loop nest forest defin steensgaard outlin steensgaard algorithm construct forest also serv construct definit structur steensgaard identifi loop graph top fashion identifi outer loop first nontrivi strongli connect compon given graph constitut outermost loop vertex loop said gener entri node loop predecessor outsid strongli connect compon edg vertex insid loop one gener entri node said gener backedg inner loopscontain given loop determin identifi strongli connect compon subgraph induc given loop gener backedg elimin iter process yield loop nest forest let us briefli consid differ forest creat steensgaard algorithm forest creat sreedhargaole algorithm one differ enc explain sreedhar et al sreedhargaole algorithm identifi loop almost linear time delta may identifi reduc loop steensgaard algorithm extra step sreedhargaole algorithm construct reduc loop elimin differ disappear howev also possibl sreedhargaole algorithm identifi fewer loop steensgaard algorithm doe problem possibl sreedhargaole forest one irreduc loop nest insid anoth irreduc loop entri vertic level domin tree exampl shown figur illustr thi exampl steensgaard algorithm identifi outer loop consist vertic u v w x inner loop consist vertic w x contrast sreedhargaole algorithm identifi one loop consist u v w x show steensgaard loop nest forest construct effici borrow idea describ section sreedhar et al simpli modifi irreduc loop construct phase algorithm describ section follow instead stop identifi strongli connect compon use steensgaardlik algorithm iter find loop nest insid irreduc loop word instead appli strongli connect compon algorithm subgraph of vertic level greater equal current level appli steensgaard algorithm subgraph symmetr also possibl modifi steensgaard algorithm replac use strongli connect compon algorithm algorithm present section result algorithm asymptot worstcas complex steen gaard origin algorithm quadrat size graph howev practic potenti effici steensgaard origin algorithm sinc number iter steensgaard algorithm perform within singl irreduc loop identifi sreedhar et al algorithm like much smaller number iter would perform whole graph conclus paper examin three algorithm identifi loop irreduc flowgraph shown algorithm made effici three algorithm construct potenti differ loop nest forest question aris rel advantag differ algorithm are havlak approach disadvantag set loop found loop nest forest construct depend depthfirst span tree depend order outgo edg everi vertex particular repres singl irreduc loop k entri vertic sreedhar gaole forest may repres k irreduc loop nest within arbitrari order havlak forest henc believ sreedhar gaole loop nest forest natur havlak loop nest forest howev the modifi version of havlak algorithm simpler implement modifi version the sreedhargaole algorithm sinc requir construct domin tree would worthwhil exercis adapt havlak algorithm directli construct sreedhargaole loop nest forest think done formal establish yet hand sreedhargaole loop nest forest steensgaard delta g ramalingam loop nest forest somewhat incompar explain section idea behind approach combin construct loop nest forest refin either one result algorithm expens almost linear time variat present construct sreedhar gaole forest whether refin forest worth increas algorithm complex depend intend applic acknowledg thank john field v sreedhar anonym refere help comment r introduct algorithm nest reduc irreduc loop effici algorithm graph manipul loop use dj graph sequenti program depend graph irreduc program test flow graph reduc applic path compress balanc tree data structur network algorithm revis septemb tr data structur network algorithm compil principl techniqu tool introduct algorithm loop use dj graph nest reduc irreduc loop applic path compress balanc tree algorithm effici algorithm graph manipul ctr fang liu jacob j flomenberg devaka v yasaratn sule ozev hierarch varianc analysi analog circuit base graph model correl loop trace proceed confer design autom test europ p march g ramalingam loop domin domin frontier acm sigplan notic v n p may domin analysi irreduc cfg reduct acm sigplan notic v n april loop domin domin frontier acm transact program languag system topla v n p septemb sebastian unger frank mueller handl irreduc loop optim node split versu djgraph acm transact program languag system topla v n p juli gregor snelt torsten robschink jen krink effici path condit depend graph softwar safeti analysi acm transact softwar engin methodolog tosem v n p octob