t compon base design multitoler system a abstractth concept multitoler abstract problem system depend provid basi improv design depend system abstract sourc undepend system repres class fault correspond abil system deal undepend sourc repres type toler multitoler thu refer abil system toler multipl faultclass possibl differ way paper present compon base method design multitoler two type compon employ method name detector corrector theori detector corrector interferencefre composit intoler program develop enabl stepwis addit compon provid toler new faultclass preserv toler previous ad faultclass illustr method design fulli distribut multitoler program token ring b introduct depend increasingli relev systemlevel requir encompass abil system deliv servic desir manner spite occurr fault secur intrus safeti hazard configur chang load variat etc achiev abil difficult essenti engin system sake one depend properti say avail presenc fault often interfer anoth desir depend properti say secur presenc intrus paper effect reason multipl depend properti introduc concept multitoler sourc undepend treat class fault depend properti treat type toler thu multitoler refer abil system toler multipl class fault possibl differ way although mani exampl multitoler system practic gamma exist grow bodi research present instanc multitoler system gamma awar previou work consid systemat design multitoler toward redress defici present paper formal method design multitoler system deal difficulti interfer multipl type toler method base use compon specif multitoler system design use method consist intoler system set compon one desir type toler thu method reduc complex design design compon correctli ad intoler system moreov enabl reason type toler interfer differ type toler level compon themselv oppos involv whole system method reduc complex ad multipl compon intoler system ad compon stepwis fashion word method consid fault class intoler system subject fix total order say f fn compon ad intoler system toler f desir manner result system augment anoth compon toler f desir manner toler f preserv process ad new toler preserv old toler repeat n faultclass account for follow final system multitoler respect f fn compon use method built two build block name detector corrector occur albeit implicitli faulttoler system intuit detector detect whether predic satisfi system state corrector detect whether predic satisfi system state also correct system state order satisfi predic whenev predic satisfi detector use ensur step system safe respect problem specif corrector use ensur system eventu reach state problem specif resatisfi thu paper also abl show compon built detector suffici design failsaf toler program compon built corrector suffici design nonmask toler program compon built detector corrector suffici design mask toler program we formal defin term shortli rest paper organ follow section give formal definit program problem specif fault faulttoler section defin detector corrector discuss role design faulttoler system illustr design hierarch effici section present theori noninterfer compos detector corrector intoler program section defin multitoler present formal method design multitoler section illustr method design multitoler token ring program final discuss issu rais methodolog section make conclud remark section preliminari section give formal definit program problem specif fault fault toler formal program standard one specif adapt alpern schneider fault faulttoler adapt earlier work first author moham gouda with except portion failsaf toler new program program set variabl finit set action variabl predefin nonempti domain action uniqu name form guard action boolean express program variabl statement action execut atom instantan updat zero program variabl notat conveni write action restrict anoth action use notat hname defin action hname whose guard obtain restrict guard action hnamei hguard i whose statement ident statement action hnamei oper speak hname execut guard hnamei guard hguard true likewis conveni write program restrict anoth program use notat defin program consist set action hguardi ac action ac hprogrami let p program definit state state p defin valu variabl p chosen predefin domain variabl definit state predic state predic p boolean express variabl p note state predic may character set state boolean express of state predic true definit enabl action p enabl state iff guard which state predic true state definit comput comput p fair maxim sequenc state j j j obtain state j gamma execut action p enabl state j gamma fair sequenc mean action p continu enabl along state sequenc eventu chosen execut maxim sequenc mean sequenc finit guard action p fals final state ie sequenc cannot extend execut enabl action final state problem specif problem specif set sequenc state suffix close fusion close suffix closur set mean state sequenc oe set suffix oe fusion closur set mean state sequenc hff x fli hfi x ffii set state sequenc hff x ffii hfi x fli ff fi finit prefix state sequenc fl ffi suffix state sequenc x program state note state sequenc problem specif may finit infinit follow alpern schneider shown problem specif intersect safeti specif suffix close fusion close live specif defin next definit safeti safeti specif set state sequenc meet follow condit state sequenc oe set exist prefix ff oe state sequenc fi fffi set where fffi denot concaten ff fi definit live live specif set state sequenc meet follow condit finit state sequenc ff exist state sequenc fi fffi set defin exampl problem specif name gener pair closur converg to let r state predic definit gener pair gener pair fsg frg set state sequenc j j true j r true j definit closur closur s set state sequenc true j k k j true k definit converg to converg r set state sequenc intersect r true exist k k i r true k note fsg converg s program correct respect problem specif let spec problem specif definit satisfi p satisfi spec iff comput p start state true spec definit violat p violat spec iff case p satisfi spec exist comput p start state true spec conveni reason program satisfi special case problem specif introduc follow notat abbrevi definit gener hoaretripl fsg p frg iff p satisfi gener pair fsg frg true definit close p close p iff p satisfi true note trivial true state predic true fals close p definit converg p converg r p iff p satisfi converg r true inform speak prove correct p respect spec involv show p satisfi spec state predic s of cours use predic fals now sinc problem specif suffix close may without loss gener restrict attent prove p satisfi problem specif close state predic s call state predic invari p invari enabl proof program correct eschew oper argument long subsequ state thu methodolog advantag definit invari invari p spec iff close p p satisfi spec s notat remark henceforth whenev problem specif clear context omit it thu s invari p abbrevi s invari p spec one way calcul invari p character set state reachabl execut p start design initi state experi show howev eas proof program correct one may prefer use invari p properli includ reachabl set state key reason includ initi state definit program techniqu design invari articul dijkstra use notion auxiliari variabl gri use heurist state predic balloon shrink techniqu mechan calcul invari discuss alpern schneider fault fault program subject systemat repres action whose execut perturb program state emphas represent possibl notwithstand type fault be stuckat crash failstop omiss time perform byzantin natur fault be perman transient intermitt abil program observ effect fault be detect undetect definit faultclass faultclass p set action variabl p let state predic invari p f faultclass p definit preserv action ac preserv state predic iff execut ac state true result state true f span p iff close p action f preserv thu state invari p true f span p also true also like s also close p moreov action f execut state true result state also one true follow comput p start state true boundari state space p but beyond which state p may perturb occurr action f notat remark henceforth ambigu abbrevi phrase each action f preserv t close f and whenev program p clear context omit it thu s invari abbrevi s invari p f faultclass abbrevi f faultclass p faulttoler readi defin mean program p invari toler faultclass f definit toler s p f toler iff exist state predic satisfi follow three condit ffl state true also true in word ffl start state true action p f execut result state also one true in word close p action f preserv ffl start state true everi comput p alon eventu reach state true in word sinc close p converg p definit may understood follow state predic f span p s boundari state space p but beyond which state p may perturb occurr fault f fault f continu occur state p remain within boundari fault f stop occur p converg boundari stricter boundari state space invari true import note may multipl state predic p meet three requir multipl state predic captur potenti differ type faulttoler p exploit multipl section order defin multitoler type faulttoler classifi three type faulttoler program exhibit name mask nonmask failsaf toler use definit f toler inform speak classif base upon extent program satisfi problem specif presenc fault three mask strictest type toler presenc fault program alway satisfi safeti specif execut p execut action f yield comput safeti live specif p ie comput problem specif p nonmask less strict mask presenc fault program need satisfi safeti specif but fault stop occur program eventu resum satisfi safeti live specif ie comput suffix problem specif failsaf also less strict mask presenc fault program alway satisfi safeti specif but fault stop occur program need resum satisfi live specif ie comput safeti specif but necessarili live specif p formal three type toler may express term definit f toler follow definit mask toler p mask toler f iff p f toler close f in word fault f occur state true p continu state true definit nonmask toler p nonmask toler f iff p f toler close f in word fault f occur state true p may perturb state violat howev p recov state true definit failsaf toler p failsaf toler f iff exist state predic r p f toler r r close p f p satisfi safeti specif of problem specif r in word fault f occur state true p may perturb state r true latter case subsequ execut p yield comput safeti specif p necessarili live specif notat sequel whenev faultclass f invari clear context omit them thu mask toler abbrevi mask toler f s on detector section defin first two build block suffici design faulttoler program name detector also present properti detector show construct hierarch effici manner discuss role design faulttoler mention introduct intuit detector program detect whether given state predic true current system state implement detector abound practic wellknown exampl includ compar error detect code consist checker watchdog program snooper alarm snapshot procedur accept test except condit z state predic program u state predic close d say z detect x u iff follow three condit hold ffl safe state u true z true x also true in word u ffl progress start state u x true everi comput either reach state z true state x fals ffl stabil start state u z true falsifi z also falsifi x in word fu zg fz xg safe condit impli detector never let predic z wit detect predic x incorrectli execut state u true progress condit impli comput start state u true x true continu eventu detect x truthifi z stabil condit impli z truthifi continu true unless x falsifi remark detect predic x close d definit detect relat reduc one given chandi misra consid gener definit accommod case which occur instanc nonmask toler x denot someth bad happen case x suppos close sinc subsequ correct end remark sequel implicitli assum specif detector dn z detect x u respect zn detect xn dn un also implicitli assum u un close respect dn properti detect relat reflex antisymmetr transit first two argument lemma let x z state predic u state predic close d follow statement hold detect x u ffl z detect x u x detect z u u ffl z detect u detect x u z detect x u lemma let v state predic u v close d follow statement hold ffl z detect x u z detect x uv ffl z detect x u v x zv detect x u ffl z detect x u z z detect xv u composit regard construct detector case detect predic x cannot wit atom ie execut one action detector program detect predic give composit small detector yield larg detector hierarch effici manner particular given two detector d compos two way i parallel ii sequenc parallel composit detector parallel composit d denot dd execut interleav fashion formal parallel composit union variabl action of program d observ commut ddd distribut g theorem let z detect x u z detect x u variabl mutual exclus zz detect xx dd u proof safe condit dd follow trivial safe d progress condit consid two case i comput dd falsifi x x ii comput dd never falsifi x x first case progress satisfi trivial second case eventu z truthifi stabil d z continu true execut d moreov sinc variabl disjoint z continu true d likewis z eventu truthifi continu true thu progress satisfi final stabil condit satisfi sinc zz falsifi x x violat dd sinc perform detect concurr time requir detect xx maximum time taken detect x detect x we assum unit measur time allow attempt execut action each also space complex dd sum space complex d sinc state space dd union state space d sequenti composit detector sequenti composit d denot d d execut complet detect ie wit predic z true formal sequenti composit program whose set variabl union variabl whose set action union action zd postul axiom leftassoci d d observ commut distribut d distribut g d suppos again variabl mutual exclus case start state xx true continu eventu truthifi z z truthifi action execut action eventu truthifi z sinc z truthifi z and henc x x true also follow u assum u theorem let z detect x u z detect x ux variabl mutual exclus u z detect xx d u d d time respect space taken detect xx sum time respect space taken detect x detect x extra time taken d compar dd warrant case wit predic z wit atom zz cannot exampl memori access let us consid simpl memori access program obtain valu store given address cf figur program subject two faultclass first consist protect fault caus given address corrupt fall outsid valid address space second consist page fault remov address valu memori toler first faultclass detector use page tabl tbl detect whether address addr valid x toler second faultclass anoth detector use memori mem detect whether given address memori x mem addr figur memori access formal detector follow for simplic assum tbl set valid address mem set object form haddr vali thu may observ ffl z detect x u ffl z detect x u x note appropri choic initi state u would one z z fals note also that u z truthifi x true z truthifi x x true detect xx may compos sequenti would first detect x would detect x theorem get ffl z detect x x d u applic design faulttoler detector suffic ensur program satisfi safeti specif see thi recal safeti specif essenti rule certain finit prefix program comput now consid prefix comput rule safeti specif execut program action start prefix violat safeti specif iff elong prefix rule safeti specif word program action ac exist set comput prefix execut ac violat safeti specif follow exist detect state predic execut ac state state predic true violat safeti specif from fusion closur safeti specif suffic state predic character set state state st yield upon execut ac successor state st state sequenc safeti specif st st occur consecut order now detector ad program program action ac detect predic ac wit program action restrict execut correspond wit predic true result program satisfi safeti specif design failsaf toler f s need ensur upon start state true execut p presenc f alway yield comput safeti specif p follow detector suffic design failsaf toler likewis design mask toler f s need ensur upon start state true execut p presenc f never violat safeti specif execut p execut action f alway yield comput safeti live specif p ie comput problem specif p from fusion closur problem specif follow comput p safeti specif suffix problem specif problem specif now regard safeti suffic detector ad p regard live suffic corrector ad p discuss next section detector also play role design nonmask toler may use detect whether program perturb state invari fals discuss next section detector systemat compos corrector restor program state invari true section discuss second set build block name corrector manner analog discuss detector mention introduct intuit corrector detector also correct program state whenev detect detect predic fals current system state implement corrector also abound practic wellknown exampl includ voter error correct code reset procedur rollback recoveri rollforward recoveri constraint resatisfact except handler altern procedur recoveri block z state predic program c u close c say z correct x c u iff follow four condit hold ffl safe state u true z true x also true in word u ffl converg start state u true everi comput c eventu reach state x true subsequ x continu true thereaft in word u converg x c start state u x true everi comput c either reach state z true state x fals ffl stabil start state u z true c falsifi z also falsifi x in word fu zg c fz xg definit follow z correct x c u z detect x c u also follow u x close c cf converg consequ start state u x true everi comput c reach state z true cf progress moreov u z close c cf stabil remark wit predic z ident correct predic x definit correct relat reduc one given arora gouda consid gener definit accommod case which occur instanc mask toler wit predic z check atom correct predic x cannot end remark properti correct relat antisymmetr transit first two argument lemma let x z state predic c u state predic close c follow statement hold ffl z correct x c u x correct z c u u ffl z correct c u correct x c u z correct x c u lemma let v state predic u v close c follow statement hold ffl z correct x c u z correct x c u v ffl z correct x c u v x zv correct x c u composit analog detect predic cannot wit atom exist case correct predic x cannot correct atom ie execut one step action corrector correct predic construct larg corrector small corrector detector parallel composit corrector parallel composit two corrector c c denot cc union variabl action of program c c theorem let z correct x c u z correct x c u variabl c c mutual exclus zz correct xx cc u time taken cc correct xx maximum time taken correct x correct x space taken correspond sum sequenti composit corrector sequenti composit corrector c c denot c c program whose set variabl union variabl c c whose set action union action c z c theorem let z correct x c u z correct x c u x variabl c c mutual exclus u z correct xx c c u time respect space taken c c correct xx sum time respect space taken correct x correct x mention previou section one way design corrector x sequenti composit detector corrector detector first detect whether x true and use wit corrector establish x theorem let z detect x u z x correct x c u z x close d fu zg c fz xg x correct x z d c u c atom ie c satisfi progress converg one step follow corollari hold corollari let z detect x u z x correct x c u z x close d c atom x correct x d c u anoth way design corrector x sequenti composit corrector detector corrector first satisfi correct predic x detector satisfi desir wit predic z theorem let x correct x c u z detect x u x close z correct x x c u again atom follow corollari hold corollari let x correct x c u z detect x u x close c atom z correct x c u exampl memori access continu given address valid memori object form haddr gammai ad memori we omit detail object obtain eg disk remot memori network thu corrector c formal specifi follow addr c figur memori access thu may observ ffl x correct x c true ffl x correct x c u ffl x correct x c u x detector wit valu address memori corrector c execut henc compos c sequenti corollari have ffl z correct x c u x moreov detector wit address valid either corrector c detector execut henc compos c sequenti recal section z detect x u also x close d henc start state satisfi u x eventu satisfi z follow z correct x u x therefor theorem have ffl z correct x x d c d u x applic design faulttoler corrector suffic ensur comput program suffix problem specif see thi observ correct predic corrector chosen invari program corrector ensur program eventu reach state invari true henceforth program comput problem specif design nonmask toler f invari s need ensur upon start state true execut p will execut action f alway yield comput suffix problem specif follow corrector whose correct predic invari suffic design nonmask toler likewis design mask toler f s need ensur upon start state true execut p presenc f never violat safeti specif execut p execut action f alway yield comput problem specif p latter guarante suffic corrector ad p and former suffic detector ad p discuss previou section composit detectorcorrector compon program section discuss detectorcorrector compon correctli ad program result program satisfi specif compon far possibl proof preserv simpler explicitli prove specif satisfi result program achiev composit proof show program interfer compon ie program compon execut concurr violat specif compon composit proof interferencefreedom receiv substanti attent formal method commun gamma last two decad draw effort identifi sever simpl suffici condit ensur program p compos detector respect corrector q safeti specif q viz safe stabil live specif viz progress converg violat suffici condit satisfi safeti specif detector demonstr p interfer safe stabil straightforward suffici condit action p subset action q occur instanc program act detector anoth straightforward condit variabl p q disjoint gener condit p read but write variabl q case p said superpos q suffici condit satisfi live specif detector three condit given also suffic demonstr p interfer progress q provid action p q execut fairli yet anoth condit satisfi progress q requir q atom ie q achiev progress one step follow even p q execut concurr progress q satisfi altern requir p execut progress q achiev follow p cannot interfer progress q likewis requir p termin eventu follow p termin execut q isol satisfi progress gener requir exist variant function f whose rang wellfound set execut action p q reduc valu f progress q achiev follow even q execut concurr p progress q satisfi suffici condit outlin formal state tabl suffici condit case corrector similar follow theorem let z detect x q u let u close p theorem superposit q read write variabl written p read variabl written q z detect x qp u theorem contain action p subset q z detect x qp u theorem atom fu zg p fz xg q atom z detect x qp u theorem order execut fu zg p fz xg z detect x q p u theorem termin fu zg p fz xg u converg v pq z detect x v pq u theorem variant function fu f kg q ff z detect x qp u tabl suffici condit interferencefreedom discuss address prove program interfer compon compon interfer program standard composit techniqu suffic purpos practic detector snapshot procedur watchdog program snooper program typic read write state program ad thu detector interfer program likewis corrector reset rollback recoveri forward recoveri procedur typic restrict execut state invari hand fals thu corrector interfer program exampl memori access continu consid intoler program p memori access assum address valid current present memori eas exposit let p access one memori locat instead multipl locat thu p follow p interfer specif corrector d c d suffic p execut z wit predic d c d satisfi henc d c d p compos sequenc analogu theorem case corrector p interfer d c d ffl z correct x x d c d p u x design multitoler section first defin multitoler present method composit stepwis design multitoler program let p program invari s ffn n faultclass l l ln type toler ie mask nonmask failsaf say p multitoler ffn iff faultclass f j j n p ljtoler f j s definit may understood follow presenc fault class f j p perturb state f jspan predic s j true note exist potenti differ faultspan faultclass fault f j stop occur subsequ execut p alway yield comput problem specif prescrib type toler lj exampl lj failsaf comput p start state j true safeti specif exampl memori access continu observ memori access program d c d p discuss section multitoler class protect fault page fault failsaf toler former mask toler latter particular presenc page fault alway obtain correct data memori presenc protect fault obtain data valu composit stepwis design method outlin introduct method start faultintoler program and stepwis manner consid faultclass fix total order say ffn first step intoler program augment detector andor corrector compon ltoler f result program augment detectorcorrector compon second step ltoler f ltoler f preserv until nth step lntoler fn ad preserv llngammatoler ffngamma multitoler program design thu structur shown figur detector andor corrector fn faultintoler program detector andor corrector f detector andor corrector f figur structur multitoler program design use method first step let p intoler program invari s calcul f span p s detector corrector compon design satisfi ltoler f discuss section suffic add detector design failsaf toler f corrector design nonmask toler f detector corrector design mask toler f toler program nonmask program failsaf corrector detector corrector intoler program mask toler program detector toler figur compon suffic design variou toler note detector corrector ad p also subject f henc toler f necessari mask toler f specif suffic detector ad design failsaf toler failsaf toler f detector satisfi live specif presenc f result program made satisfi live specif p presenc f likewis suffic corrector ad design nonmask toler nonmask toler f long comput corrector suffix safeti live specif comput result program made suffix safeti live specif p lastli expect suffic detector corrector ad design mask toler mask toler f see figur practic detector corrector ad p often possess desir toler f trivial not one way design toler f analog addit detector corrector anoth way design self toler without use detector corrector compon exemplifi selfcheck selfstabil inher faulttoler design toler program nonmask compon toler program intoler program failsaf mask toler program nonmask mask compon figur toler requir compon addit detector andor corrector compon p remain show that result program p compon interfer p p interfer compon note p may contain variabl action p and henc invari faultspan p may differ p therefor let invari p f span p s show follow absenc f ie state true compon interfer p ie comput p problem specif even execut concurr new compon presenc f ie state true p interfer compon ie comput compon compon specif in sens prescrib type toler even execut concurr p addit detector corrector may simplifi use stepwis instanc design mask toler may first augment program detector augment result failsaf toler program corrector altern may first augment program corrector augment result nonmask toler program detector see figur reason space refer interest reader formal detail twostag approach design mask tolerancetoler mask toler program intoler program corrector detector program corrector program detector failsaf nonmask toler figur two approach stepwis design mask toler second step step add ltoler f preserv ltoler f add l toler f first step add new detector corrector compon p then account possibl interfer execut ad compon p specif let invari result program p f span p s denot f span p s show follow absenc f f ie state true newli ad compon interfer p ie comput p problem specif even execut concurr new compon presenc f ie state true p interfer new com ponent ie comput new compon new compon specif in sens prescrib type toler even execut concurr p presenc f ie state true newli ad compon interfer ltoler p f ie comput p specif ltoler f even p execut concurr new compon remain step remain step design add toler ffn procedur second step gener accordingli case studi multitoler design token ring recal mutual exclus problem multipl process may access critic section provid time one process access critic section moreov process wait forev access critic section assum process leav critic section finit time mutual exclus readili achiev circul token among process let process enter critic section token token ring program particular process organ ring token circul along ring fix direct case studi design multitoler token ring program program mask toler number k fault corrupt state process detect toler continu sens k state corrupt occur correct state within thetak time thu quantit uniqu measur toler provid fk fk fault class caus k state corrupt process detect corrupt state process mean corrupt state detect process action inadvert access state state immedi corrupt may howev lost for purpos irrelev caus corrupt ie whether due loss messag duplic messag time fault crash subsequ restart process etc proceed follow first describ simpl token ring program intoler detect state corrupt then add detector corrector achiev mask toler fault corrupt state one process progress add detector corrector achiev mask toler faultclass corrupt process state k k time faultintoler binari token ring process n organ ring token circul along ring process j token successor j in section gamma modulo n process j maintain binari variabl xj process j j n token iff xj differ successor xj process n token iff xn successor x program tr consist two action process j formal action follow where invari consid state process j token state sinc process token x valu process j ident x valu process jn ident let x denot string binari valu x x xn x satisfi regular express l ngammal l ngammal denot sequenc length n consist zero follow one one follow zero thu invari program tr ad toler state corrupt base assumpt state corrupt detect introduc special valu process j detect state ie valu xj corrupt reset xj readili design mask toler singl corrupt state process j ensur i valu xj eventu correct longer ii interim process in particular j inadvert get token result corrupt xj i add corrector process j correct xj valu either corrector j j copi xj gamma corrector corrector action j statement action tr j merg corrector tr action ii add detector process detect predic action wit predic detector which case detect predic itself use restrict action program tr j henc action tr j execut result execut action tr alway safe ie action cannot inadvert gener token augment program ptr fault action state xj corrupt xj set henc fault action proof interferencefreedom start state tr true presenc fault set x valu process string x alway satisfi regular express l ngammal l ngammal thu invari ptr sptr consid detector j detect wit predic xj gamma sinc detect relat trivial reflex first two argument follow ptr word detector interf action consid corrector j correct wit predic xj sinc program action ident corrector action theorem corrector action interf action tr also sinc detector action detector process j interfer corrector j moreov sinc one x valu set xj thu corrector j enabl wit predic detector j true henc corrector j interf detector j consid program action tr safeti follow safeti detector describ abov and progress follow progress corrector ensur start state sptr true process state corrupt everi comput ptr reach state tr true progress detector ensur action tr indefinit block execut observ proof mutual interferencefreedom illustr reprov correct tr new invari observ also state process j corrupt within theta time corrector j correct state j ad toler n state corrupt proof noninterfer program ptr gener show ptr also mask toler faultclass twice corrupt process state gener selfevid case state corrupt separ time first one correct second one occur case state corrupt occur concurr say process j k need show corrector j k truthifi interfer action program let us consid two subcas i j k nonneighbor ii j k neighbor first subcas j k correct xj xk predecessor jgamma kgamma respect execut equival parallel composit corrector j k theorem ptr reach state xj xk second subcas let j predessor k j correct xj predecessor truthifi xj termin sinc corrector j read variabl written corrector k thu analogu theorem case corrector corrector j interf corrector k xj truthifi corrector k correct xk predecessor j theorem corrector k interf corrector j sinc corrector j k interfer other follow program reach state xj xk fact long number fault n exist least one process j xj ptr ensur state j eventu caus j correct state xj correct continu process x valu set henc ptr toler n fault time requir converg tr thetak k number fault ad toler n state corrupt unfortun n fault occur program ptr deadlock iff reach state x valu process mask toler faultclass corrupt state process n time corrector need detect whether state process and so correct program state x valu process say equal sinc x valu process cannot access simultan corrector detect sequenti manner whether x valu process let detector ad purpos process j denot dj sequenti compos detector detect whether x valu process corrupt dn design dj add valu domain xj dn detect xn equal set xn likewis dj detect xj equal set xj note sinc dj part sequenti composit restrict execut j complet detect ie xj equal follow j complet detect x valu process jn corrupt particular complet detect x valu process corrupt henc x set suffic corrector reset x ensur corrector execut process inadvert get token result corrupt xj add detector restrict action ptr j execut state xj true action program ftr consist five action process j like ptr first two action ftr ftr pass token j j restrict trivial detector execut xj gamma neither action ftr dn let process n chang xn action ftr dj j n action ftr corrector action process let process correct x formal action follow invari start state sptr true detector chang trail valu x thu ftr may reach state x satisfi regular express l subsequ state corrupt may perturb x form l ngammalgammam l ngammalgammam sinc action preserv last predic invari ftr proof interferencefreedom design ftr ad corrector action ftr gamma program ptr ensur j xj corrupt ie correct predic corrector v corrector form dn dngamma d c dj atom detector process j c atom corrector process detect predic dn v wit predic x show detector isol satisfi specif observ xn detect dn sftr sftr theorem xn gamma detect use argument x detect dn now observ sftr converg v dn violat execut eventu truthifi x execut c truthifi v thu v correct v dn corrector interf action ftr ftr follow fact ftr ftr interfer dj c by use theorem program ftr also ad detector process j detect xjgamma describ for fault case detector interfer action interf action final consid action program ptr safeti follow safeti detector describ abov also start state sftr program reach state x valu process corrupt start state program ptr eventu program reach state tr truthifi ie action ptr perman block thu progress action follow theorem program ftr mask toler invari sftr faultclass fk k fk detect corrupt process state k time moreov sftr converg tr ftr within thetak time remark emphas program ftr mask toler faultclass fk invari sftr tr thu presenc fault fk sftr continu true although tr may violat process j j n token iff xj differ xj neither xj xj corrupt process n token iff xn x neither xn x corrupt thu state sftr true one process token also start state eventu program reach state tr true start state process get token thu start state sftr comput ftr problem specif token ring section address issu method design multitoler rais also discuss motiv design decis made work formal concept multitoler use abstract closur converg abstract use formal multitoler advantag use closur converg principl one formul concept multitoler use abstract closur converg point john rushbi approach formul faulttoler classifi two specif approach calcul approach specif approach system regard composit sever subsystem standard specif one failur specif system faulttoler satisfi standard specif compon do one failur specif compon depart standard specif one exampl approach due herlihi wing thu formul grace degrad special case multitoler calcul approach set comput permiss presenc fault calcul system said faulttoler set satisfi specif system or accept degrad version it approach calcul sinc comput set state potenti reachabl presenc fault faultspan approach may use formul design multitoler awar formal method design multitoler use them moreov experi structur impos abstract closur converg proven benefici sever way enabl us discov role detector corrector design toler properti cf section yield simpl theorem compos toler action underli action interferencefre manner cf section facilit design novel complex distribut program whose toler exceed compar program design otherwis repres fault state perturb represent readili handl transient fault also handl perman fault intermitt fault detect fault undetect fault inde repres state perturb token ring case studi illustr use state perturb variou class transient fault extend version paper present case studi treebas mutual exclus illustr analog represent perman fault detect undetect fault worth point repres perman intermitt fault byzantin fault failstop repair fault may requir introduct auxiliari variabl exampl repres byzantin fault affect process j may introduc auxiliari boolean variabl byzj true iff j byzantin j byzantin execut normal action otherwis execut abnorm action byzantin fault occur byzj truthifi thu permit j execut abnorm action similarli repres failstop repair fault affect process j may introduc auxiliari boolean variabl downj true iff j failstop action j restrict execut downj fals failstop fault occur downj truthifi thu prevent j execut action repair occur downj falsifi assum problem specif suffix close fusion close assumpt exploit design method assumpt restrict applic method use assumpt three place suffix closur problem specif impli exist invari state predic fusion closur problem specif impli exist correct state predic suffix closur fusion closur problem specif impli correspond safeti specif fusion close which turn impli exist detect state predic assumpt restrict follow sens let l set state sequenc suffix close andor fusion close let p program then shown ad histori variabl variabl p exist problem specif l follow condit hold comput p start state initi state predic true l iff p satisfi l state predic thu languag problem specif restrict would method consid faultclass oneatatim compar method consid altogeth sens oneatatim altogeth method equival program design one method also design method justifi inform let us consid program p design use altogeth method toler faultclass f f fn program p also design use oneatatim method follow let p subprogram p toler f program design first stage oneatatim method likewis let p subprogram p toler f f program design second stage oneatatim method on p design complet argument equival remain observ program design oneatatim nstage method trivial design altogeth method term softwar engin practic howev two method would exhibit differ toward identifi differ address three issu i structur program design use two method ii complex use them iii complex program design use them first issu stepwis method may yield program better structur exemplifi hierarch token ring program consist three layer basic program transmit token corrector case least one process corrupt corrector case process corrupt second issu sinc consid one faultclass time complex step less complex altogeth program exampl token ring program first handl case state process corrupt then handl case state process corrupt thu step simpler case would need consid case simultan third issu possibl consid faultclass time may yield program whose complex in sens optim respect faultclass wherea oneat atim approach may yield program optim some all faultclass suggest two consider use method one order faultclass consid chosen care again principl program design one order design order but practic differ order may yield differ program complex program may differ and two choos design toler particular faultclass lookahead may warrant impact design choic design toler remain faultclass composit method affect tradeoff depend properti method make possibl reason tradeoff local ie focus attent compon correspond depend properti oppos global ie consid entir program thu method facilit reason tradeoff depend properti moreov expect desir depend properti imposs cosatisfi follow exist compon ad program compli interferencefreedom requir method composit design method compar exist method design faulttoler program composit design method rich sens subsum variou exist faulttoler design method replic checkpoint recoveri schneider state machin approach except handl randel recoveri block the interest reader refer detail discuss properti replic agreement order design interferencefre composit within method faultclass deriv method use difficult character fault system subject to deriv faultclass applic specif begin identif fault program may subject to fault formal character use state perturb as mention abov auxiliari variabl may introduc formal desir type toler fault specifi final fault group possibl overlap faultclass base characterist fault correspond type toler difficult character fault applic user method oblig guess larg enough faultclass would accommod possibl fault often reason design choos weak model selfstabil where state may perturb arbitrarili byzantin failur where program may behav arbitrarili conclud remark futur work paper formal notion multitoler abstract varieti problem de pendabl worthwhil point multitoler relat applic well one reason grace degrad respect progress increas faultclass anoth guarante differ qualiti servic qo respect differ user requir traffic third one reason adapt system respect differ mode environ behavior also present simpl composit method design multitoler program ad detector corrector compon provid desir type toler addit multipl compon intoler program made tractabl ad toler fault class one time avoid reprov correct program everi step provid theori ensur mutual interferencefreedom composit detector corrector intoler program knowledg first formal method design multitoler program method effect design quantit well qualit toler exampl quantit toler present token ring protocol recov upto k fault time exampl qualit toler refer interest reader design multitoler program barrier comput repetit byzantin agreement mutual exclus tree mainten leader elect boundedspac distribut reset termin detect appli design method practic current develop siefast simul implement environ enabl stepwis implement valid multitoler distribut program also studi mechan synthesi multitoler concurr program acknowledg indebt anonym refere detail construct comment earlier version paper significantli improv present thank also lauri dillon help review process r reliabl comput system design evalu att case galileo case foundat faulttoler comput superstabilz protocol dynam distribut system maxim flow rout highli safe selfstabil mutual exclus algorithm defin live closur converg foundat faulttoler comput disciplin program scienc program prove boolean combin determinist properti parallel program design foundat exist refin map proof techniqu commun sequenti process stepwis refin parallel program proof network process axiomat proof techniqu parallel program design mask faulttoler via nonmask faulttoler critic system properti survey taxonomi specifi grace degrad multitoler distribut reset multitoler design constraint satisfact basi design nonmask faulttoler multitoler barrier synchron composit design multitoler repetit byzantin agreement tr ctr anil hanumantharaya purnendu sinha anjali agarw componentbas design composit verif faulttoler multimedia commun protocol realtim imag v n p decemb orna raz mari shaw approach preserv suffici correct open resourc coalit proceed th intern workshop softwar specif design p novemb anish arora sandeep kulkarni murat demirba resett vector clock proceed nineteenth annual acm symposium principl distribut comput p juli portland oregon unit state anish arora sandeep s kulkarni murat demirba resett vector clock journal parallel distribut comput v n p februari paul c atti anish arora e allen emerson synthesi faulttoler concurr program acm transact program languag system topla v n p januari robyn r lutz softwar engin safeti roadmap proceed confer futur softwar engin p june limerick ireland anish arora marvin theimer model toler incorrect softwar journal high speed network v n p april ile yen farokh b bastani david j taylor design multiinvari data structur robust share access multiprocessor system ieee transact softwar engin v n p march anish arora paul c atti e allen emerson synthesi faulttoler concurr program proceed seventeenth annual acm symposium principl distribut comput p june juli puerto vallarta mexico axel van lamsweerd emmanuel letier handl obstacl goalori requir engin ieee transact softwar engin v n p octob vina ermagan junichi mizutani kentaro oguchi david weir toward modelbas failuremanag automot softwar proceed th intern workshop softwar engin automot system p may felix c grtner fundament faulttoler distribut comput asynchron environ acm comput survey csur v n p march anish arora sandeep s kulkarni design mask faulttoler via nonmask faulttoler ieee transact softwar engin v n p june