t reduc branch cost via branch align a sever research propos algorithm basic block reorder call branch align algorithm primari emphasi algorithm improv instruct cach local studi concern branch predict report small minim improv wideissu architectur becom increasingli popular import reduc branch cost increas branch align one mechan effect reduc costsin paper propos improv branch align algorithm take consider architectur cost model branch predict architectur perform basic block reorder show branch align algorithm improv broad rang static dynam branch predict architectur also show program perform improv approxim even use recent propos highli accur branch predict architectur program compil exist compil transform via binari transform implement algorithm alpha axp reduct total execut time achiev b introduct convent processor architectur particularli modern superscalar design extrem sensit control flow chang chang control flow condit uncondit branch direct indirect function call return detect instruct decod keep pipelin fulli util processor typic fetch address follow appear th intern confer architectur support program languag oper system asplosvi san jose california octob recent address decod instruct break control flow previous fetch instruct use new instruct must fetch introduc pipelin bubbl unus pipelin step call instruct misfetch penalti final destin condit branch indirect function call return typic avail latter stage pipelin point branch complet eval uat processor may elect fetch decod instruct assumpt eventu branch target accur predict processor mispredict branch destin instruct fetch incorrect instruct stream must discard lead sever pipelin bubbl caus mispredict penalti practic pipelin bubbl due mispredict break control flow degrad program perform misfetch penalti exampl combin branch mispredict penalti digit alpha axp processor ten instruct comparison axp would lose two instruct instruct misfetch almost modern architectur use form branch pre diction reduc number misfetch mispredict penalti increasingli import wideissu architec ture paper examin algorithm reorder structur program improv accuraci branch fetch predict architectur code transform reduc number mispredict branch number misfetch instruct essenti method thi restructur control flow graph fallthrough branch occur fre quentli use profil inform direct transform architectur cost model decid transform warrant transform includ rearrang placement basic block chang sens condit oper move uncondit branch frequent execut path occasion insert uncondit branch show static dynam branch predict mechan examin benefit transform static branch architectur benefit dynam implement branch align binari transform algorithm dec alpha axp measur total execut time improv consider work profiledriven program opti mizat section weconsid relev work onoptim instruct cach branch mechan optim memori hierarchi due expens memori earli comput much earli work focus reduc page virtual memori system sever research explor way group relat subroutin basic block onto virtual memori page research extend work lower level memori hierarchi optim perform instruct cach mcfarl describ algorithm reduc instruct cach conflict particular class program hwu chang describ gener effect techniqu use compil time analysi impacti compil system use profilebas transform impacti compil inlin subroutinesand perform trace anal ysi subroutin instruct pack use frequent execut trace move infrequ execut trace end function follow thi global analysi arrang function reduc interfunct cach conflict similar transform appli petti hansen program hp parisc optim control flow mcfarl hennessi describ number method reduc branch mispredict instruct fetch penalti includ profiledriven static branch predict delay slot aform branch align variant branch align consid ifthenels construct later bray flynn extend work mcfarl et al examin variou branch target buffer btb architectur yet also examin ifthenels construct yeh et al comment trace schedul taken branch could reduc execut condit branch execut condit branch earlier studi hwu chang show fallthrough rate branch align paper mcfarl hen nessi bray flynn petti hansen report chang percentag taken branch branch align reorder algorithm propos hwu et al gener mcfarl bray hwu chang examin basic block rearrang achiev better branch align abl handl branch form ifthenels structur work petti hansen describ greedi algorithm branch align similar hwu chang sinc look basic block petti hansen greedi algorithm gener hwu chang algorithm perform better term reduc cost branch paper describ algorithm extens petti hansen algorithm compar result greedi algorithm also improv upon analysi effect branch align mcfarl bray flynn hwu chang petti hansen describ effici appli branch align variou static dynam predict architectur measur effect branch align architectur techniqu similar method mcfarl bray flynn hwu chang petti hansen howev inlin function perform global analysi duplic code perform analysi use object code postprocessor rather compil simplifi analysi avoid recompil full program simpl transform also allow us appli branch align full program includ portion normal compil user program librari process mani program gener number differ compil postprocessor tool branch align would normal one sever optim appli program branch predict architectur branch architectur donot includ abtb incur misfetch penalti branch decod architectur use branch delay slot mechan avoid penalti paper assum fallthrough instruct fetch branch decod except branch target buffer architectur thu taken branch alway incur misfetch penalti model three static branch predict architectur two dynam predict architectur static branch predict architectur fallthrough model assum fallthrough execut path alway execut btfnt backwardtaken forward taken assumesback ward branch alway taken forward branch taken branch model fairli common variant implement hp parisc alpha axp like model assum encod inform branch instruct indic whether branch like taken taken branch model use sever architectur includ tera likelyunlik flag set either use compiletim estim profil inform use profil inform sinc much accur simpl gather appropri tool program transform help branch predict architectur reduc misfetch mispredict delay fallthrough architectur fallthrough path execut frequent reduc misfetch improv predict btfnt architectur use fallthrough common path that possibl costeffect branch target place condit branch backward branch predict sinc branch mispredict penalti larger misfetch penalti may better correctli predict backwardsbranch even result misfetch like model compil specifi like branch out come therefor code transform elimin mi fetch penalti make fallthrough frequent execut path expect opportun optim fallthrough method btfnt model taken branch mispredict fallthrough method likewis would expect optim opportun btfnt model like model sinc improv misfetch rate transform program use like model figur show code transform help static a origin code b transform code figur benefit code transform elim lower espresso darken edg fallthrough dot edg taken node repres basic block predict model figur show portion control flow graph routin elim lower espresso bench mark node label number number parenthesi indic number instruct basic block edg label frequenc execut edg label execut edg transit subroutin unlabel edg execut less time fallthrough edg darken taken edg dot origin code figur a like architectur correctli predict like target misfetch penalti edg comparison fallthrough architectur mispredict edg sinc taken branch btfnt architectur also mispredict edg correctli predict edg sinc target branch instruct result backward branch transform code figur b effici layout term branch cost static predict architectur sinc node fallthrough node architectur correctli predict edg penalti sinc laid btfnt accur predict edg misfetch penalti also sinc node laid branch accur predict transform program give optim layout btfnt sinc predict like figur routin input hidden alvinn architectur also good layout fallthrough ar chitectur though still suffer mispredict edg predict less like execut edg notic transform code two taken edg come node sinc one edg fallthrough need add uncondit branch fallthrough turn jump correct destin node transform code figur b give effici transform static architectur gener singl branch align transform alway give optim align differ architectur code transform reduc branch penalti consid underli branch model perform branch align later examin transform algorithm model underli branch architectur show perform better algorithm not mani optim unrol loop investig exampl trace alvinn pro gram neural net simul found time spent routin input hidden anoth spent hidden input figur show control flow graph input hidden nearli branch sub routin branch alvinn aris singl branch basic block unrol loop duplic instruct basic block could reduc misfetch penalti architectur improv branch predict fallthrough architectur normal loop unrol complex transform also attempt reduc total number execut branch within unrol code feel simpli duplic basic block invert align branch condit ad condit branch exampl would offer perform improv even optim offer loop unrol ignor dynam branch predict method static predict mechan particularli profilebas method accur predict condit branch mani current comput architectur use dynamicpredictionsuch branch target buffer btb pattern histori tabl pht accur predict branch origin btb use mechan branch pre diction effect predict prior behavior branch even small btb found effect intel pentium exampl current architectur use btb entri btb organ line fourway associ cach branch taken enter btb branch address appear btb store address use fetch futur instruct otherwis fallthrough address use btb entri pentium also use twobit satur counter predict direct condit branch condit branch predict use much simpler mechan method noth misfetch penal tie pattern histori tabl pht elimin site target address tabl tabl predict direct condit branch design use branch site address index tabl predict bit recent pan et al yeh patt investig branchcorrel twolevel branch predict mechan although number variant mechan gener combin histori sever recent branch predict outcom branch simplest exampl degeneratemethod pan et al use entri tabl processor maintain bit shift regist the global histori regist record outcom previou branch previou branch execut sequenc three taken branch six nontaken branch three taken branch tttnnnnnnttt regist might store valu valu use index entri pattern histori tabl provid contextu inform particular pattern branch simul two pht direct map pht degener twolevel correl pht use variant mcfarl found accur method perform exclusiveor branch address global histori regist use index pht pht simul contain satur updown counter total kbyte storag also simul two btb configur model entri way associ btb entri way btb latter configur use intel pentium btb simul store taken branch btb predict fallthrough btb miss btb entri contain bit satur updown counter use predict destin condit branch btb simul hold entri condit branch uncondit branch indirect jump procedur call return branch align algorithm implement branch align algorithm suggest petti hansen implement algorithm mcfarl hennessi bray flynn examin ifthenels construct limit effect uncondit branch instruct correctli predict fallthrough instruct correctli predict taken instruct mispredict tabl cost cycl differ branch ness sinc mani transform appli loop exampl algorithm would perform transform shown figur result perform branch align procedur program mainli concern reduc branch cost although instruct cach perform may also improv repres procedur direct control flow graph contain set basic block repres node edg node trace program execut record number time edg travers call execut weight edg e node n transform program look node degre one two uncondit branch basic block singl outgo edg taken edg condit basic block two edg taken fallthrough edg fall basic block outgo fallthrough edg edg given weight zero consid appli branch align thu ignor indirect branch procedur return subroutin call section discuss three branch align algorithm greedi petti hansen propos two heurist align branch describ bottomup greedi algorithm sinc better perform greedi algorithm direct toward btfnt architectur consid implic differ branch architectur terminolog chain contigu sequenc basic block thread head tail pointer first basic block chain null head pointer last basic block chain null tail pointer algorithm align procedur turn edg sourc destin largest weight select algorithm attempt posit node fallthrough node s alreadi fallthrough basic block alreadi head two basic block combin chain otherwis block cannot link basic block part exist chain two chain merg basic block link repeat edg examin chain longer merg petti hansen implement techniqu hp parisc architectur architectur use btfnt condit branch predict model edg procedur examin preced relat defin chain determin order chain would achiev best predict use btfnt model chain posit use preced relat insert uncondit branch need cost greedi algorithm consid underlin architectur construct chain includ underlin architectur cost algorithm order reduc cost branch beyond greedi algorithm architectur assumesspecif cost differ branch shown tabl cost transform algorithm tri minim cost branch procedur use simpl heurist hope local minim result global perform improv greedi algorithm cost algorithm start edg highest weight pick edg d determin fallthrough local benefit program use cost model tri link d examin predecessor see cost effect connect anoth node algorithm consid basic block one two exit edg consid two possibl align singleexit node examin cost align edg fall therebi avoid uncondit branch ad uncondit branch exampl singleexit node could either includ chain insert jump end s allow differ chain condit branch examin three possibl align assum anoth edg consid includ edg current chain ad jump end make jump fallthrough s latter transform may use cost effect fallthrough chain certain case align either edg condit branch canimprov performanceon fallthroughandbtfnt archi tectur exampl consid loop consist singl basic block shown figur use fallthrough model origin loop node incur five cycl penalti one cycl branch instruct four cycl mispredict penalti use costmodel costeffect invert sens condit end block follow block insert jump instruct combin take three cycl the correctli predict condit branch uncondit branch singl misfetch penalti loop structur way illustr point use singl block loop greedi algorithm would restructur loop occur frequent tri simul studi show cost heurist gave sizabl improv fallthrough architectur modest improv btfnt neglig improv like briefli consid use cost model assess cost everi possibl basic block align use exhaust search select minim cost order practic sound expens common case procedur contain basic block howev program procedur contain hundr block make exhaust search imposs procedur exampl gcc program contain procedur yypars contain basic block howev mani edg never execut larg procedur basic block contribut execut time devis heurist balanc time perform procedurew select frequent executededg attempt possibl align node select cdaa origin code b align figur exampl illustr tri reduc branch cost darken edg fallthrough dot edg taken node repres basic block next edg on allow us tri possibl combin group node possibl tri node similar describ cost algorithm singleexit node uncondit fall basic block two possibl make outgo edg either fall taken edg node twoexit edg condi tional branch tri align separ two outgo edgesa fallthrough tri neither outgo edg fallthrough call tri method heurist took time greedi cost heurist produc better result still ran minut consid node time gave slightli wors result tri program took less minut run still result better perform greedi algorithm improv perform algorithm examin edg executedmor onc elimin half edg consider program profil use combin program one could reduc execut time tri algorithm examin condit branch account execut branch branch align algorithm align loop difficult one case heurist perform better greedi algorithm figur a show fragment code loop greedi algorithm would modifi code assum choos align edg a wherea tri algorithm transform code shown figur b note transform code uncondit branch c remov use cost model tabl like btfnt architectur execut cost origin code edgeweightsshown cycl cost transform version cycl reduc branch execut cost ideal want like path loop singl chain greedi cost algorithm examin enough loop minim cost one main reason tri heurist abl produc better result algorithm tri heurist tri combin find correct place break loop experiment methodolog construct two tool studi branch align initi simul sever differ branch architectur use trace driven simul later implement differ branch align algorithm use om system linktim code tran format simul provid detail insight branch align use differ branch architectur implement illustr techniqu practic valu simul studi instrument program spec benchmark suit program includ objectori program written c use atom instrument program due structur atom need record trace could trace longrun program program compil dec use alpha processor use either dec c compil dec c compil system run standard osf v oper system program compil standard optim o construct sever simul analyz program simul run collect inform branch target second time use profil inform prior run spec program use largest input distribut spec suit tabl show basic statist program instru ment first column list number instruct trace second column give percentag instruct caus break control flow column label q q q q show number branch instruct site contribut execut condit branch program next column static show total number condit branch site program thu doduc three branch instruct constitut execut branch taken column show percentag condit branch taken execut last five column provid detail five type break control flow encount trace condit branch cbr indirect jump ij uncondit branch br procedur call call procedur return ret note dynam dispatch call implement indirect jump c therefor includ indirect jump metric other program includ cfront version att c languag preprocessor written c groff version ditroff text formatt written c idl c parser corba interfac descript languag db version deltablu constraint solut system written c format system select program found spec suit typifi behavior seen larg program c program altern program use sizabl input hope would exercis larg part program exampl e x program format page document result result rearrang basic block within proce dure perform procedur split procedur rearrang sinc branch align method add remov instruct program clear cut perform metric compar perform differ align simpl metric predict accuraci use one method may remov ad uncondit branch achiev particular branch align defin branch execut penalti bep execut penalti associ misfetch mispredict branch simul assum misfetch branch caus one cycl misfetch penalti mispredict branch caus four cycl mispredict penalti static branch pht architec ture uncondit branch correctli predict taken condit branch direct procedur call caus misfetch penalti wherea mispredict condit branch mispredict return indirect jump caus mispredict penalti sinc btb architectur tri predict type branch taken branch pro cedur call uncondit jump taken condit branch found btb necessarili caus misfetch penalti static dynam architectur simul simul entri return stack accur predict destin return instruct order evalu perform differ align architectur add bep number instruct execut align program divid number instruct execut origin program essenti defin cycl per instruct rel origin program also assum instruct take one cycl exampl origin program issu instruct encount cycl branch penalti would cpi modifi program issu instruct assum branch avoid incur cycl branch penalti would rel cpi cycl call rel cpi sinc divid cost align program number instruct origin program tabl show rel cpi program use variou align three static branch architectur tabl also show percent execut condit branch fallthrough align perform vari architectur percent fallthrough branch chang petti algorithm vari branch architec ture wherea fallthrough percentag tri algorithm chang architectur sinc cost model algorithm differ architectur tabl show rel cpi pht btb architectur arithmet averag shown group program specfp specint other orig column architectur show perform instrument trace origin program like architectur use profil use creat branch align order predict like branch direct given branch site architectur use input align program measur improv align branch align heurist use architectur cost model usual perform better simpler greedi algorithm insn condit branch percentag break trace program trace break q q q q static taken cbr ij br call ret doduc hydrod spice sucor compress espresso gcc li sc cfront groff tabl measur attribut trace program particularli notabl fallthrough architectur fallthrough architectur longer realist architectur consid use combin btb fallthrough predict btb miss improv perform occur tri heurist align either outgo edg condit branch instead uncondit branch ad one condit branch edg take advantag fallthrough predict cost model fact tri heurist convert seen tabl condit branch program fallthrough fallthrough model ad uncondit jump work especi well singl basic block loop end condit branch describ earlier alvinn mani fortran program btfnt architectur see reason improv branch align btfnt architectur difficult creat chain btfnt architectur form chain known taken branch locat final procedur chain form laid out destin taken branch could place current node affect final branch predict cost small benefit like architectur occur elimin misfetch penalti mani branch remov uncondit branch like execut path elimin instruct misfetch increasingli import superscalar architectur becom common fourissu superscalar architectur could encount branch everi two three cycl benefit architectur frequent fallthrough branch howev rel cpi metric shown reflect improv singl issu architectur cost model use static architectur differ dynam architectur examin cost align condit branch static architectur cost align condit branch clear cut mean one target condit branch predict must alway mispredict dynam architectur case order compens increas accuraci predict condit branch cost model pht architectur assum condit branch mispredict time similarli btb architectur also assum condit branch mispredict time addit assum btb architectur miss rate mean taken uncondit condit branch caus misfetch penalti time seen tabl branch align offer improv pht architectur littl improv btb architectur except small btb like architectur major improv perform pht architectur come move uncondit branch frequent execut path reduc misfetch penalti occur taken condit branch origin program perform btb architectur alreadi effici store predict indirect jump procedur call uncondit condit branch small btb architectur benefit branch align larger btb sinc taken branch store btb therefor remov uncondit branch make branch fallthrough caus align program use less entri btb import observ branch align reduc differ performancebetween variou branch architectur exampl align fallthroughandbtfnt architectur almost ident perform slightli slower like pht architectur btb architectur rel cycl per instruct fallthrough condit branch fallthrough btfnt like fallthrough btfnt like program orig greedi tri orig greedi tri orig greedi tri orig greedi tri tri tri alvinn doduc hydrod ora spice sucor tomcatv compress li sc cfront groff idl tex avg tabl rel cycl per instruct static predict architectur correspond fallthrough branch direct map pht correl pht entri way btb entri way btb program orig greedi tri orig greedi tri orig greedi tri orig greedi tri alvinn doduc hydrod spice sucor compress espresso gcc li sc cfront groff idl tex avg tabl rel cycl per instruct dynam predict architectur alvinn ear compress eqntott espresso gcc li screl execut time origin petti hansen figur total execut time improv dec alpha axp spec c program best overal perform compar static btfnt architectur perform entri correl pht align pht architectur perform better btfnt architectur align perform better btfnt architectur take averag cpi simul program lastli note signific differ differ program class specint other program see benefit branch align specfp program reason thi seen tabl specfp program instruct execut caus break control flow wherea specint other program instruct caus break control perform comparison implement greedi tri align algo rithm figur indic improv total execut time specc program dec alpha axp processor run osf v program show execut time origin program compil nativ compil transform program use petti hanson greedi algorithm transform program use tri algorithm scale execut time program time origin program program compil previous describ link use om link result object file standard librari use omful describ therefor origin program execut time shown figur use standard om link time optim modifi om produc desir branch align use link program alpha axp dual issu architectur use combin dynam static branch predict instruct onchip cach singl bit indic previou branch direct instruct cach line flush bit initi bit instruct sign displac locat thu perform expect architectur cross direct map pht tabl btfnt architectur surprisingli float point program alvinn ear see benefit branch align agre simul result believ benefit could gain singl loop basic block shown figur duplic gcc eqntott sc program benefit branch align difficult understand actual perform improv branch align come tool allow us instrument measur transform program trace simul complet model alpha axp architectur simul describ previou section two differ chain layout algorithm use greedi tri align one algorithm laid chain procedur start highest execut chain continu lowest execut chain algorithm laid chain use btfnt model describ implement chain layout om found algorithm laid chain highest execut lowest execut perform slightli better one laid chain use btfnt model believ perform come fact lay chain highest lowest execut satisfi mani branch prioriti btfnt model time allow better cach local therefor result shown figur use greedi align use simul except btfnt simul highest lowest chain order om also implement btfnt pht btb align tri use simul found align perform slightli better pht align better btfnt align recal creat pht align taken condit branch uncondit branch one cycl misfetch penalti associ cost model contrast btb cost model assum btb miss rate mean assum one cycl misfetch penalti occur taken branch alpha axp architectur misfetch penalti squash pipelin current wait stall there fore cost model would actual fit alpha axp architectur would assum taken branch squash rufe time result figur use align use btb simul shown tabl conclus simul number branch predict architectur show branch align use architectur simul result assum singl issu architectur wide issu architectur becom popular branch align algorithm larger impact perform program align algorithm implement saw improv execut time dual issu alpha axp architectur total reduct program execut time result combin reduct misfetch mispredict penalti instruct cach miss rate number instruct issu describ improvedalign algorithm also show branchesdetermin branch behavior manycommon benchmark program techniqu address broader class program structur anddo requir recompil need hwu chang petti hansen haveshownhow simpl object code transform take minut run even larg program improv program perform branch align benefit program integ program reason improv seen variou branch predict architectur acknowledg wed like thank alan eustac amitabh srivastava develop atom especi amitabh srivastava develop om wed also like thank keith farka denni lee anonym review use comment work fund part nsf grant no asc arpa fellowship decwrl summer internship work part continu effort make languag c suitabl scientif comput r perform enhanc page system program analysi tran format tera comput system branch predict free strategi branch target buffer st annual annual intern symposium comput architectur quantifi behavior differ c c branch fold crisp microprocessor reduc branch delay zero improv local critic work set predict condit branch direct previou run program program restructur virtual memori branch histori tabl predict move target branch due subroutin return optim sequenti partit graph branch predict strategi branch target buffer design program optim instruct cach combin branch predictor reduc cost branch hwu pohua p improvingth accuracyof dynam branch target buffer design optim profil guid code posit a studi system build custom program analysi tool practic system intermodul code optim linktim comprehens instruct fetch mechan processor support specul execut comparisonof dynam branchpred tor use two level branch histori tr reduc cost branch branch fold crisp microprocessor reduc branch delay zero compiletim program restructur multiprogram virtual memori system program optim instruct cach achiev high instruct cach perform optim compil profil guid code posit branch histori tabl predict move target branch due subroutin return strategi branch target buffer improv accuraci dynam branch predict use branch correl predict condit branch direct previou run program comprehens instruct fetch mechan processor support specul execut branch predict free comparison dynam branch predictor use two level branch histori linktim optim address calcul bit architectur atom fast accur instruct fetch branch predict tera comput system optim sequenti partit graph improv local critic work set branch target buffer design optim studi branch predict strategi ctr chunl hu john mccabe daniel a jimnez ulrich kremer camino compil infrastructur acm sigarch comput architectur new v n decemb steven wallac nader bagherzadeh model measur instruct fetch perform superscalar microprocessor ieee transact parallel distribut system v n p june nicola gloy michael d smith cliff young perform issu correl branch predict scheme proceed th annual intern symposium microarchitectur p novemb decemb ann arbor michigan unit state icheng k chen john t coffey trevor n mudg analysi branch predict via data compress acm sigplan notic v n p sept young david s johnson michael d smith david r karger nearoptim intraprocedur branch align acm sigplan notic v n p may robert cohn p geoffrey lowney hot cold optim larg windowsnt applic proceed th annual acmiee intern symposium microarchitectur p decemb pari franc brad calder dirk grunwald joel emer system level perspect branch architectur perform proceed th annual intern symposium microarchitectur p novemb decemb ann arbor michigan unit state gadi haber mosh klausner vadim eisenberg bilha mendelson maxim gurevich optim opportun creat global data reorder proceed intern symposium code gener optim feedbackdirect runtim optim march san francisco california m anton ertl david gregg optim indirect branch predict accuraci virtual machin interpret acm sigplan notic v n may brad calder dirk grunwald amitabh srivastava predict branch librari proceed th annual intern symposium microarchitectur p novemb decemb ann arbor michigan unit state alex ramirez oliverio j santana josep l larribapey mateo valero fetch instruct stream proceed th annual acmiee intern symposium microarchitectur novemb istanbul turkey minghui yang gangryung uh david b whalley improv perform branch reorder acm sigplan notic v n p may alex ramirez josep l larribapey mateo valero softwar trace cach ieee transact comput v n p januari daniel a jimnez code placement improv dynam branch predict accuraci acm sigplan notic v n june minghui yang gangryung uh david b whalley effici effect branch reorder use profil data acm transact program languag system topla v n p novemb amir h hashemi david r kaeli brad calder effici procedur map use cach line color acm sigplan notic v n p may bernard goossen david defour instruct regist file microarchitectur futur gener comput system v n p may paramjit s oberoi gurindar s sohi parallel frontend acm sigarch comput architectur new v n may nikola gloy michael d smith procedur placement use temporalord inform acm transact program languag system topla v n p sept glenn reinman brad calder todd austin optim enabl decoupl frontend architectur ieee transact comput v n p april matthew arnold david grove collect exploit highaccuraci call graph profil virtual machin proceed intern symposium code gener optim p march wankang zhao david whalley christoph heali frank mueller improv wcet appli wc codeposit optim acm transact architectur code optim taco v n p decemb ann gordonross frank vahid nikil dutt first look interplay code reorder configur cach proceed th acm great lake symposium vlsi april chicago illinoi usa brad calder dirk grunwald donald lindsay jame martin michael mozer benjamin zorn corpusbas static branch predict acm sigplan notic v n p june glenn reinman todd austin brad calder scalabl frontend architectur fast instruct deliveri acm sigarch comput architectur new v n p may mikko h lipasti william j schmidt steven r kunkel robert r roedig spaid softwar prefetch pointer callintens environ proceed th annual intern symposium microarchitectur p novemb decemb ann arbor michigan unit state brad calder dirk grunwald michael jone donald lindsay jame martin michael mozer benjamin zorn evidencebas static branch predict use machin learn acm transact program languag system topla v n p jan sangwook p kim gari s tyson analyz work set characterist branch execut proceed st annual acmiee intern symposium microarchitectur p novemb dalla texa unit state young michael d smith static correl branch predict acm transact program languag system topla v n p sept pierr michaud andr seznec stphan jourdan explor instruct fetch requir outoford superscalar processor intern journal parallel program v n p februari