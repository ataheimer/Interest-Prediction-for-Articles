t deriv simul input gener coverag metric formal specif a paper present novel use function interfac specif verifi rtl design demonstr simul environ correct checker function coverag metric creat automat singl specif addit process exploit structur specif written simpl style rule methodolog use verifi largescal io design stanford flash project b introduct motiv verif engin start simul rtl design must write three verif aid input testbench stimul design properti verifi behavior function coverag metric quantifi simul progress would much easier three automat deriv interfac protocol specif save great deal work also result fewer bug test input check properti mechan deriv verifi specif motiv advantag develop methodolog three aid automat gener specif furthermor demonstr specif structur certain style rule allow memori effici simul run primari contribut paper are permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee dac june new orlean louisiana usa present bu protocol specif use simul automat gener gener set legal input sequenc design produc properti check interfac protocol conform defin new function coverag metric bia input increas probabl hit uncov case new input gener scheme greatli reduc size bdd binari decis diagram use dynam select relev constraint cycl bycycl basi translat entir specif bdd extract pure constrain logic discard condit logic the guard build bdd report success applic methodolog verifi fabric work design descript new bug found background mani today digit circuit design depend tight integr multipl design compon compon often design differ engin may diverg interpret interfac protocol glue compon togeth consequ design may incompat behav incorrectli combin thu function interfac specif pivot success modul integr accordingli solid precis howev specif wide use today still written inform forfeit opportun autom analysi logic clariti mani case specif standard bu protocol buggi ambigu ou contradictori problem resolv formal specif develop advantag formal specif seem clear nonetheless avoid due perceiv costvalu problem often consid costli benefit promis specif ical critic lengthi develop time need formal verif train mani valu correct specif justifi cost preciou resourc alloc press design need thu counter disincent develop formal specif methodolog attack costvalu problem two angl cost side earlier paper project focu first half problem minim cost make specif process easier direct attent signallevel specif compil compil compil input gener coverag gener one specif correct checker design verif simul done three tool use togeth simul correct checker coverag input gener figur trio verif aid bu protocol descript aim sinc import challeng specifi use pci peripher compon bu protocol intel r itaniumtm processor bu protocol exampl develop specif style produc correct readabl complet specif less effort freeform ad hoc method syntact structur use methodolog languageindepend appli mani specif languag smv verilog reflect belief methodolog oppos tool languag develop key achiev state goal valu side latest work seri paper focus second angl costvalu problem increas valu formal specif beyond role document base idea correct wellstructur specif develop exploit way haphazard incomplet specif cannot be particular investig way use specif directli gener input check behavior monitor coverag goal verifi larg design common industri methodolog specif tailor simulationbas verif problem approach given hdl hardwar descript languag compon design verifi engin need variou addit machineri fig ure right input logic must logic drive input design one method use random sequenc guarante compli protocol consequ difficult gaug correct design input may in correct focus method direct test input sequenc manual written timeconsum write difficult get correct output check logic determin correct compon behavior need manual scrutini cumber some methodolog present here scope correct check limit interfac protocol conform cannot check higherlevel properti whether output data one port correctli correspond anoth port input data coverag metric complet coverag possibl input sequenc test possibl must metric quantifi progress verif coverag verif engin would like know whether function design thoroughli exercis interest case reach open area research current practition resort method littl theoret back approach foundat methodolog unifi framework approach three tool gener singl sourc specif figur possibl three fundament base interfac protocol con sequent interfac specif use automat creat three current practic verif aid written scratch requir tremend amount time effort write debug elimin step methodolog enhanc product shorten develop time also thoroughli debug solid specif invari lead correct input sequenc check properti coverag met ric correct core document guarante correct deriv contrast current method verif aid need individu debug advantag pronounc standard interfac correct effort concentr standard committe duplic among mani implementor furthermor chang made protocol a frequent occurr indu tri one chang protocol specif suffici reflect verif aid regener revis document otherwis engin would determin manual effect chang tool deriv behavior checker straightforward three checker onthefli simul flag error soon compon violat protocol address first paper specif written form close checker furthermor specif guarante execut style rule describ section translat hdl checker requir minim chang bulk current work address issu automat gener input sequenc method produc input gener dynam reactiv gener input depend previou cycl output design verif ad dition input alway obey protocol gener onepass process mechan reli solv boolean constraint build travers bdd structur everi clock cycl although input gener use constraint solver novel approach first use exploit complet structur specif final new simul coverag metric introduc automat input bias base metric also describ although experi need valid metric ef fectiv main advantag current specificationbas save time extra work need write metric pinpoint interest scenario glean directli specif document previou work clark et al also research problem specif gener methodolog close relat simgen project describ paper yuan et al simgen work focus practic method use exist complex design within framework mainli two featur differenti approach simgen first simgen softwar use staticallybuilt bdd repres entir input constraint logic contrast framework dynam build appropri bdd constraint everi clock cycl result dramat smaller bdd two reason one small percentag protocol logic relev cycl correspond bdd alway much smaller static bdd repres entir protocol two bdd contain design input variabl contain state variabl design output thu pci ex ampl instead bdd variabl bdd variabl order magnitud differ consequ input gener use exponenti less memori reduct base observ sole role state variabl design output determin part protocol relev and thu requir bdd particular cycl otherwis variabl need calcul input believ two reason smaller bdd would hold mani interfac therefor allow input gener larg interfac may otherwis hinder bdd blowup second differ simgen that unlik framework requir user provid input bias uniqu contribut work autom process determin bias note advantag possibl method exploit structur styliz specif wherea simgen applic gener specif methodolog specif style specif style introduc summar reader base use multipl constraint collect defin signal behavior interfac constraint short boolean formula follow certain syntact rule also independ other reli state variabl histor inform and togeth defin exactli correct behavior similar use linear branch time tempor logic describ behavior howev methodolog allow requir basic oper write constraint aim complet specif oppos ad hoc list properti hold true decomposit protocol multipl constraint mani advantag one specif easier maintain constraint ad remov independ modifi also believ easier write debug sinc exist naturallanguag specif alreadi written list rule translat type specif requir less effort result fewer opportun error debug symbol model checker easili use explor state allow constraint style rule first style rule requir constraint written follow form prevsign signal _ signal n logic symbol impli anteced express left boolean express contain interfac signal variabl auxiliari state variabl consequ express right contain interfac signal variabl allow oper and or negat prev construct allow valu signal or state state machin cycl ex press constraint written implic past express anteced current express con sequent essenc past histori satisfi anteced express requir current consequ express true otherwis constraint activ interfac signal obey consequ current cycl way activ logic constrain logic separ exampl pci protocol constraint prevtrdystop stop mean if signal trdi stop true previou cycl the activ logic stop must true current cycl the constrain logic true signal assert fals signal deassert separ identifi relev ieactiv constraint particular cycl also allow bdd express pure constrain logic as explain next section use gener use verifi to spec spec spec implemen tation implement verifi interfac three compon defin interfac input formula activ activ everi clock cycl activ a_ c_ anteced consequ step output compon time partial input compon find solut figur input gener algorithm style rule second style rule separ rule requir constraint constrain behavior one compon equival constrain part isol activ part due first style rule rule requir consequ contain output one compon style rule third rule requir specif dead state free rule effect guarante output satisfi constraint alway exist long output sequenc far violat constraint univers test verifi properti specif use model checker follow comput tree logic properti check constraint violat pinpoint dead state agal constraint true f ar exal constraint true although abid style rule may seem restrict promis mani benefit furthermor style still power enough specifi signallevel pci intel r itaniumtm processor bu protocol deriv input gener basic algorithm base follow algorithm input vector gener structur specif figur group constraint accord interfac compon specifi thi possibl style rule separ rule n interfac compon n group remov group whose constraint compon verif need now group constraint group constraint follow everi clock cycl simul run goal choos input assign next cycl a constraint evalu anteced half anteced valu determin intern state variabl observ interfac signal valu anteced evalu true correspond constraint mark activ b within group togeth consequ halv activ constraint form input for mula result one input formula interfac compon formula disjoint support becaus rule greatli reduc complex find satisfi assign c boolean satisfi solver use determin solut input formula bddbase solver use instead satbas one order control bias input variabl sinc specif nondeterminist allow rang behavior like multipl solut in section discuss solut chosen interest simul run gener chosen solut form input vector cycl d go back step a next clock cycl signific style rule becom clear al grotihm activ constrain divis key allow dramat smaller express just consequ halv solv rule separ rule also allow smaller express enforc strict orthogon specif along interfac compon rule final lack dead state guarante exist correct input vector assign everi clock cycl rule implement compil tool read specif output correspond input gener modul design im plement two part input gener verilog modul act frontend c modul backend figur verilog modul contain anteced constraint base input the compon output intern state variabl determin constraint activ clock cycl then indic activ constraint pass backend c modul c modul return input assign satisfi activ constraint verilog modul output compon verif choic verilog frontend allow mani design use framework c modul contain consequ halv constraint form conjunct and activ consequ solv result formula return assign verilog modul initi array bdd bdd correspond constraint consequ everi clock cycl activ inform pass it form one bdd per interfac compon perform repeat bdd oper activ consequ group result bdd repres aggreg constraint next state input one compon travers bdd true termin node reach assign found assign determin interfac compon complet input assign compon verif es tablish cudd colorado univers decis diagram packag version use bdd represent manipul verilogxl use simul setup bias input coverag metric use specif defin corner case scenario requir action complex state problemat compon implement thu simul drive compon scenario consequ whether verilog modul compon verif modul indic activ constraint assign input gener interfac specifi figur implement detail input gener corner case reach use measur simul progress miss corner case use determin direct simul first order approxim corner case anteced constraint use anteced claus true implement compli constraint claus exampl consid pci constraint master must rais irdi within cycl assert frame anteced the counter start count assert frame reach irdi still assert consequ irdi assert unless anteced condit happen simul complianc constraint cannot complet known simul run trigger anteced constraint check implement sens number anteced fire simul run rough coverag metric one major drawback use metric coverag problem intim relat gener relationship implement specif process design everi state design choos action choic offer nondeterminist specif creat determinist implement result implement cover full rang behavior allow specif thu anteced specif never true implement preclud path state unless verif engin familiar implement design cannot know whether anteced miss lack appropri simul vector structur imposs deriv bias miss corner case reach interest corner case verif engin often appli bias input gener problemat state caus certain input true often engin program random input gener set variabl true n instead neutral time exampl verifi compon react environ delay respons env respons engin set bias input env respons true time use may caus interfac deadlock prevail method user need provid bias number random input gener requir expert knowledg design bias must determin hand contrast target anteced interest bias deriv automat algorithm work follow gather constraint specifi output compon verifi goal anteced constraint becom true simul run set bias input signal neutral true input gener describ section exactli done explain follow subsect true b true c true bias zero one c figur bias bdd travers run simul number cycl determin anteced fire far pick one miss anteced use determin variabl bias if exampl anteced abc true set follow bias true time b c rerun simul repeat step continu anteced consid number interest conclus first although effort invest determin optim bia number exactli bias simpli allow signal true or fals often suffici empir interpret often time seem work well second anteced express contain interfac signal variabl also counter valu variabl cannot skew directli skew input variabl anteced primari bias refin secondari bias done depend analysi done manual exampl mani hardtoreach case state counter reach high valu depend analysi bias allow counter increment frequent without reset determin implement bias actual skew input variabl done bdd travers stage input gener input formula bdd compon built structur travers accord bias variabl b bias true time branch taken time figur choic branch forc express evalu fals ie travers inevit lead zero leaf algorithm backtrack els branch taken result even b bias true occurr protocol logic forc b fals time guarante bias scheme whenev b allow true constraint like true extra step ad input gener algorithm accommod bias variabl need reorder bias variabl top bdd truth valu determin variabl figur variabl c intend true time howev sinc c buri toward bottom bdd chosen c one zero c figur incorrect order forc fals satisfi constraint contrast c top bdd true branch taken long variabl set accordingli for exampl fortun sinc number bdd variabl kept small reorder purpos lead bdd blowup problem compar bias techniqu use simgen bias use framework coars simgen branch prob abil take account variabl order calcul desir bias contrast method directli use bias branch probabl requir calcul compens possibl distort reorder although implement simgen calcul difficult advantag achiev precis bias clear exampl attempt experiment result demonstr methodolog meaning design chose io compon stanford flash project verif io unit along rest project extens debug fabric test part work system oper method evalu pci interfac compon design describ line verilog contain variabl rang bit bit variabl complex render straightforward model check unsuit approxim model check use govindaraju et al verifi design bug found design input overli constrain small state space explor simpler flexibl simulationbas check prove effect find new bug setup formal pci specif use constrain input check output pci interfac design simul checker flag pci protocol violat gener specif use compil tool written ocaml compil tool modifi output constrain random simul gener control pci interfac input io unit io unit the design verif checker input gener connect simul togeth result view use vcd valu chang dump file input skew differ configur simul run order produc variou extrem environ stress io unit verif result use assert provid interfac specif nine previous unreport bug found io unit due incorrect state machin de sign exampl one bug manifest violat protocol constraint onc trdi assert must stay assert complet data phase incorrect path state machin case design would assert trdi then complet data phase deassert trdi deadlock bu counterparti infinit wait assert trdi bug easili correct remov problemat like unintend path setup make env design c c spec spec use use figur two type simul coverag metric effect verif process much easier process find signallevel bug nearli autom so effort focu reason bug found coverag result unfortun origin intend use coverag metric prove fruitless experi use anteced constraint specifi compon meaningless flash pci design conserv implement small subset specif exampl design initi singl data phase transact never initi multipl data phase transact thu anteced remain fals structur imposs becom true howev use metric ensur environ maxim flexibl prove much power motiv ensur design compat compon compli interfac protocol design stimul gener set input so use miss anteced constraint specifi environ in figur a a determin bias extrem fruit design bug unearth bias perform result perform issu speed memori usag pose problem so free focu gener interest simul input howev demonstr scalabl method larger design perform result tabul simul run processor sun ultra sparcii mhz system gbyte main memori specif provid constraint model environ constraint requir boolean variabl activ constrain logic separ techniqu need bdd consequ bdd use small peak number node simul peak amount memori use mbyte furthermor speed slightli sacrif order achiev space effici execut time differ set list tabl constraint solv input randomli set simul take s simul time step input gener use execut time increas s debilit increas input guarante correct tabl also indic progress ad signal valu dump correct checker modul coverag monitor modul add execut time futur work better coverag metric probabl deduc speci ficat straightforward extens would see whether pair anteced becom true simul exploit structur formal specif use also interest perhap incomplet design automat augment specif constraint simul purpos or use synthesi inform extract specif also experi determin whether design big simgentyp al number boolean var spec boolean var bdd constraint env assert design peak node bdd bdd memori use mbyte bug found design tabl interfac specif base gener detail flash exampl set user time system time total random s s s constrain s s s dump s s s monitor s s s coverag s s s tabl time perform methodolog flash exampl for simul time step gorithm handl would valid method olog furthermor extens experi quantifi speed penalti dynam bdd build done acknowledg research support gsrc contract sapg r synthesi synchron skeleton branch time tempor logic stanford flash multiprocessor specif methodolog collect compact properti appli intel itanium processor bu protocol model design constraint bias simul use bdd tr graphbas algorithm boolean function manipul stanford flash multiprocessor model design constraint bias simul use bdd counterexampleguid choic project approxim symbol model check execut protocol specif esl monitorbas formal specif pci specif methodolog collect compact properti appli intelmyampersand itaniumtm processor bu protocol design synthesi synchron skeleton use branchingtim tempor logic ctr serdar tasiran yuan yu brannon batson use formal specif model checker monitor direct simul proceed th confer design autom june anaheim ca usa yunshan zhu jame h kukula generatorbas verif proceed ieeeacm intern confer computeraid design p novemb youngsu kwon youngil kim chongmin kyung systemat function coverag metric synthesi hierarch tempor event relat graph proceed st annual confer design autom june san diego ca usa jun yuan ken albin adnan aziz carl pixley constraint synthesi environ model function verif proceed th confer design autom june anaheim ca usa serdar tasiran yuan yu brannon batson link simul formal verif higher level ieee design test v n p novemb ed cerni ashvin dsouza kevin harer peihsin ho toni ma support sequenti assumpt hybrid verif proceed confer asia south pacif design autom januari shanghai china ansuman banerje bhaskar pal sayantan da abhijeet kumar pallab dasgupta test gener game formal specif proceed rd annual confer design autom juli san francisco ca usa jun yuan carl pixley adnan aziz ken albin framework constrain function verif proceed ieeeacm intern confer computeraid design p novemb smitha shyam valeria bertacco distanceguid hybrid verif guido proceed confer design autom test europ proceed march munich germani shireesh verma ian g harri kiran ramineni interact present automat gener function coverag model behavior verilog descript proceed confer design autom test europ april nice franc alessandro pinto alvis bonivento allberto l sangiovannivincentelli roberto passeron marco sgroi system level design paradigm platformbas design commun synthesi acm transact design autom electron system toda v n p juli annett bunker ganesh gopalakrishnan salli a mckee formal hardwar specif languag protocol complianc verif acm transact design autom electron system toda v n p januari