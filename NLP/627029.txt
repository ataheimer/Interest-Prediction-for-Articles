t distribut memori compil design spars problem a abstractthi paper address issu compil concurr loop nest presenc complic array refer irregularli distribut array array access within loop may contain access make imposs precis determin refer pattern compil time paper propos run time support mechan use effect compil gener effici code situat compil accept input fortran program enhanc specif distribut data output messag pass program run node distribut memori machin runtim support compil consist librari primit design support irregular pattern distribut array access irregularli distribut array partit varieti perform result intel ipsc present b introduct modern scalabl multicomput wide recogn that addit detect exploit avail parallel reduc commun cost crucial achiev good perform exist system dino fortran superb commun optim presenc regular array refer pattern within loop messag block collect commun util messag coalesc aggreg parallel loop nest howev often contain array refer cannot analyz compil time array refer classifi irregular method describ deal parallel loop loop contain reduct type output depend method work loop contain cross processor loopcarri depend crossprocessor loopindepend depend crossprocessor depend one whose end point cross processor loopcarri depend involv write locat one iter follow read locat later iter loopindepend depend involv write locat follow read locat loop iter data parallel achiev partit array across node machin processor perform comput part array parallel achiev partit loop iter processor cross processor loop independ depend occur runtim optim techniqu develop design reduc commun cost irregular refer follow way judici partit data comput work ffl combin element messag larger messag therebi reduc number messag transmit elimin redund commun array element demonstr optim perform automat compil prototyp compil call arf arguabl fortran develop arf accept simplifi fortran program enhanc specif distribut data output program execut directli node distribut memori machin case intel ipsc compil partit comput analyz array refer classifi regular irregular irregular refer perform runtim optim reduc commun cost sinc develop arf signific amount work done standard extens fortran languag high perform fortran forum hpff joint effort academ commun industri agre preliminari set data parallel program languag extens heavili influenc experiment languag fortran vienna fortran crystal kali dino cm fortran hpff decid defer consider languag extens target irregular problem next year hpff plan consid possibl irregular problem languag extens overview parti arf runtim optim implement use parti parallel autom runtim toolkit icas runtim preprocess procedur embed com piler procedur support share name space provid infrastructur need implement nonuniform data map effici coordin interprocessor data movement manag storag of access to copi offprocessor data compil consist two distinct layer bottom layer librari parti runtim procedur design support irregular pattern distribut array access effici top layer compil carri program transform embed call parti primit origin program parti procedur support varieti oper global name distribut array indic distribut array partit nonuniform manner distribut array element assign arbitrari processor oper includ offprocessor data fetch data store accumul offprocessor memori locat multicomput program gener distribut memori access carri use embed procedur emphas goal project develop product qualiti compil demonstr run time optim gener automat effici compil complex system parti procedur parti procedur develop transform need emb appropri primit implement rel eas distribut memori compil paper begin descript languag accept relat fortran d outlin compil phase describ section section describ parti run time primit implement incorpor runtim system employ compil section provid detail code gener optim perform compil compil describ context two exampl code kernel kernel written arf translat compil messag pass code section report experiment perform measur code compil arf section describ relationship research relat project arf compil develop demonstr feasibl approach irregular problem compil consequ arf languag extens limit scope sake clariti better understand show languag extens relat real dataparallel languag like fortran d first describ syntax fortran languag extens provid function arf extens go describ correspond arf languag extens fortran languag fortran version fortran enhanc data decomposit specif section present brief descript featur fortran use support irregular problem align decomposit two key fortran data decomposit construct decomposit abstract problem domain align use map array respect decomposit align guarante element differ array map element decomposit resid processor simplest align occur array exactli map onto decomposit distribut statement specifi map decomposit physic machin distribut regular exampl consid block distribut nproc processor n element decomposit where nproc divid n block distribut divid decomposit contigu chunk size nnproc assign one block processor fortran also allow user specifi irregular distribut use map array typic di tribut map array contain processor number use specifi processor own individu decomposit element exampl specifi irregular partit fortran d set valu map array use map method align x irreg exampl array x data array map map array array map map onto decomposit reg statement s decomposit reg turn distribut block across processor statement s array x align decomposit irreg statement s final decomposit irreg irregularli partit across processor use distribut map array map statement s result statement array element xi yi assign processor mapi sometim conveni ignor certain array dimens map array decomposit array element unassign dimens collaps map index decomposit instanc align zij mapj mean second dimens z align map exampl mean map column j z processor mapj fortran also provid direct claus specifi processor execut iter loop instanc nproc processor in modinproc assign loop iter processor roundrobin fashion arf extens distribut array declar arf either partit processor regular manner eg equal size block contigu array element assign processor irregular manner arf extens explicitli specifi array partit processor arf make use decomposit statement like one found fortran d arf array irregularli partit across processor use distribut map array arf code fragment effect first code fragment present previou section irregular distribut specifi follow distribut regular use block integ map set valu map array use map method distribut irregular use map real xy statement declar integ array map state array distribut blockwis across processor statement declar real array x assign array element yi processor mapi arf array distribut singl dimens distribut dimens must last declar array dimens instanc arf statement distribut irregular use map real x would assign column x processor mapi arf also contain claus exampl distribut in partit mean work associ iter carri processor partitioni compil support irregular comput compil time analysi make possibl gener highli effici code compil gather enough inform analysi sourc code order gener effici code compil need tractabl represent array subscript func tion also need tractabl represent data comput work partit instanc consid fortran exampl align xy block i assum processor respons comput valu data own ie owner comput rule processor processor contigu chunk element array x y sinc subscript function xi ident owner comput rule impli three processor execut iter loop s exampl clear inspect nonloc access occur processor last two loop iter addit easi determin nonloc data must obtain instanc processor respons loop iter need first two valu store processor respons loop iter varieti research implement techniqu gener optim call messag pass routin given compiletim inform array subscript function array distribut distribut loop iter paper deal situat compil time analysi fail crucial inform avail program execut varieti applic array subscript function cannot known compil time mani case subscript function given integ array consid refer yiai code fragment below align xyia block ia get assign valu runtim i end compil time analysi difficult irregular array distribut irregular partit loop iter exampl below imposs predict compil time data need commun distribut x known runtim set valu map array use map method align x irreg i arf compil abl handl parallel loop mark distribut do array refer subscript given function of loop index scalar redefin loop bodi array index loop index exampl index function are assum index distribut ia could distribut regular irregular manner arf compil cannot gener handl loop refer pattern simpl form instanc compil present could deal follow loop distribut i partit end end one difficulti aris refer xcolj statement s valu subscript array colj comput statement s statement turn lie within loop whose upper bound determin valu taken array num da et al describ program slice techniqu use extend method describ broader set construct except one special case arf compil unabl handl loop loop carri depend special case involv accumul type depend decis includ special case greatli expand number irregular applic code method appli arf compil abl recogn accumul indirectli address array shown follow exampl distribut partit commut associ properti oper allow arf compil postpon accumul distribut array x end loop comput inspectorsexecutor inspector executor perform optim reduc commun cost nonloc access aris irregular array refer processor precomput data send receiv commun volum reduc prefetch singl copi offprocessor datum even referenc sever time number messag reduc prefetch larg quantiti offprocessor data singl messag inspector inspector loop carri preprocess need reduc volum commun number messag transmit figur illustr inspector gener arf compil parallel loop hash tabl call hashedcach use temporari storag run time primit initi hash cach store retriev data flush hash cach appropri program execut hash tabl record offprocessor fetch store enabl user recogn one refer made offprocessor distribut array element way one copi element must fetch store inspector phase carri set interprocessor commun allow us anticip exactli send receiv commun call processor must execut execut loop carri inspector loop describ abov must abl find owner distribut array element regular distribut compris requir simpl function comput processor local offset particular array element exampl one dimension array distribut block manner simpl function use comput processor local offset particular array element hand irregular distribut attempt partit way balanc follow two object processor perform approxim amount work minim commun overhead foreach processor p ffl gener clone partit loop nest ffl insert code perform follow foreach rh irregular array refer gener list offprocessor data fetch foreach lh irregular array refer gener list data store offprocessor exchang messag processor determin copi nonloc data sent receiv executor phase figur simplifi inspector singl loop nest typic possibl express result array partit simpl way allow arbitrari assign distribut array element processor take addit burden maintain data structur describ partit size data structur must size irregularli distribut array call data structur distribut translat tabl distribut translat tabl partit processor simpl manner describ section distribut translat tabl access inspector phase determin data element resid preprocess complet everi processor know exactli nonloc data element need send receiv processor finish posit carri necessari commun comput executor loop transform executor loop figur outlin step involv the natur distribut array distribut affect executor initi data exchang phase follow plan establish inspector processor obtain copi nonloc distribut array element copi written processor hash cach commun phase over processor carri comput processor use local store portion distribut array along nonloc distribut array element store hash cach insert code loop ffl commun local data referenc processor ffl receiv non local data referenc local insert code insid loop ffl obtain non local data hash cach ffl store non local write hash cach insert code loop ffl updat offprocessor store figur executor singl loop nest comput phase finish distribut array element store offprocessor obtain hash cach sent appropri offprocessor locat next section describ detail parti run time primit may invok inspector executor phase parti primit parti run time primit divid three categori primit may invok inspector phase executor phase inspector executor phase schedul primit invok inspector phase determin send receiv call need executor phase call may scatter data gather data perform reduct oper executor phase distribut translat tabl mention earlier use inspector phase hash cach primit use inspector executor phase next section describ detail schedul distribut translat tabl scatter gather reduct hash cach primit schedul primit use simpl exampl illustr preprocess carri schedul assum distribut array partit among three processor irregular fashion depict figur loop comput access local array offset global array processor p figur map global array processor pattern array shown figur processor store element distribut array local array a thu processor p need fetch array element a element local array processor p processor p p need fetch a element local array p recal task schedul anticip exactli send receiv commun must carri processor schedul first determin mani messag processor send receiv data exchang take place executor phase gather inform processor need know total number processor execut code defin processor p array nmsg processor set valu nmsg j need data processor j not schedul updat nmsg processor elementbyel sum nmsg j j oper use fanin tree find sum end fanin processor entri nmsg ident valu nmsgsj equal number messag processor p j must send exchang phase exampl scenario see end fan in valu nmsg processor figur thu p abl determin need send data two as yet unspecifi processor need send data one processor p need send data point processor transmit appropri processor list requir array element list contain local offset global array element irregular access pattern array local array global array processor p figur irregular access pattern exampl send messag p request element local array p send messag p request element local array processor inform requir set send receiv messag need carri schedul commun figur schedul gener schedul reus schedul also use carri ident pattern data exchang sever differ ident distribut array schedul reus carri particular pattern data exchang singl distribut array data exchang primit make use given schedul data exchang primit data exchang call processor to ffl gather data processor ffl scatter data processor ffl perform global reduct oper exchang use state inform store schedul describ previou section schedul determin send receiv call need carri data processor distribut sum tree output tree input sum data need data need data need figur comput number send messag exchang schedul given inform memori locat involv processor local indic processor p call data exchang pass exchang routin start address first local array element memori call address p exchang routin use p base address read write distribut array element translat tabl allow user assign global number distribut array element processor irregular pattern use distribut translat tabl recal schedul data exchang deal indic array local processor translat primit howev assum distribut array element assign global indic procedur buildtranslationt construct distribut translat tabl processor pass buildtranslationt set global number indic respons distribut translat tabl may stripe block across processor stripe translat tabl translat tabl entri global data sent processor local array messag sent processorssend receiv processor p processor p figur final messag pattern index store processor mod p p repres number processor block translat tabl translat tabl entri partit number equal size rang contigu integ rang place consecut number processor derefer access distribut translat tabl construct buildtranslationt given distribut array derefer pass set global indic need access distribut memori derefer return processor memori locat specifi global indic store illustr primit use simpl two processor exampl processor assign indic processor p assign indic exampl assum translat tabl partit two processor block depict translat tabl data structur tabl entri translat tabl assign processor local array index global index distribut array element exampl translat tabl inform global indic store processor inform global indic store processor continu exampl assum processor use derefer primit find assign processor local indic correspond particular global distribut tabl translat tabl entri global assign local index processor index processor processor tabl result obtain derefer processor global assign local number index processor index array indic tabl depict result obtain processor derefer global indic processor derefer global indic hash cach use parti primit describ section enhanc coupl primit hash tabl hash tabl record numer valu associ distribut array element hash tabl also record processor local index associ element derefer use hash tabl reduc volum interprocessor commun recal derefer return processor assign memori locat correspond given list distribut array indic distribut array index may appear sever time list pass derefer hash tabl use remov duplic list offprocessor distribut array element pass schedul may contain multipl refer element schedul use hash tabl identifi uniqu offprocessor data refer data exchang procedur use hash tabl store copi offprocessor distribut array element gatherexchang fetch copi offprocessor distribut array element place valu hash tabl similarli scatterexchang obtain copi offprocessor distribut array element hash tabl write valu obtain specifi local array element design processor primit support accumul nonloc memori use hash tabl way scatterexchang parti suppli number primit support read from well write accumul to hash tabl offprocessor accumul must perform first carri possibl accumul copi distribut array element hash tabl perform accumul data exchang use hash function hash cach size k mask lower k bit key key form concaten processorloc index pair correspond distribut array refer summari parti primit section summar parti primit describ present exampl use consid follow parti procedur call ttabl build translat tabledistributionmappingnum element call dereferencett idglob indic processorsloc indicesnum indic call setup hashedcachehashedcach processor local indic call scheduleridnhashedcacheloc indicesprocessor call gatherexchangeridhashedcachelocalarray exampl processor p arrang obtain copi specifi offprocessor data element copi place hash tabl hashedcach processor call build translat tabl function data map function return pointer structur store data layout p call derefer function find local address correspond global indic requir derefer call return processor number local address correspond global indic p call function setup hashedcach inform return derefer alloc hash tabl p pass schedul list offprocessor local array indic schedul build schedul make possibl p obtain data element p obtain data element i n processor processorsi local index local indicesi previous alloc hash tabl hashedcach use elimin duplic offprocessor indic irregular problem data access pattern loop data point referenc multipl time partit loop caus duplic offprocessor refer schedul return integ id use subsequ call gatherexchang processor call gatherexchang processor gatherexchang primit pass pointer schedul id gener previou call schedul pointer alloc hash tabl hashedcach base address portion array localarray execut gatherexchang call copi offprocessor element array localarray resid hash tabl hashedcach arf compil arf compil transform sourc program singl program multipl data spmd form data distribut specif use partit program gener appropri commun compil incorpor parti primit carri comput processor effici kernel present code fortran enhanc arf data distribut statement compil run ipsc section present perform data obtain kernel describ compil algorithm slightli gener algorithm actual use arf compil two algorithm produc equival code test data set code gener arf compil compil use distribut specif gener code set distribut translat tabl call build translat tabl embed sequenti code one call gener distribut translat tabl pointer array store symbol tabl array distribut regular manner translat tabl contain function evalu runtim find processor local index particular datum array irregularli distribut index processor local index store explicitli distribut translat tabl order describ algorithm use gener inspector executor figur simpl irregular loop loop descriptor must defin descriptor descriptor tupl give complet descript subscript consist follow compon where descriptor sd name array index subscript identifi array distribut block cyclic irregular etc type type refer subscript express use one exchang type gather scatter accumul list subscript express express use determin array in dex implement assum singl dimens access use type index function shown section figur array x y ia ib distribut array ia ib use index array x respect compil time possibl figur indic x access depend valu store array ia ib data access pattern becom avail runtim algorithm assum loop crossprocessor loop carri depend later section describ loop contain reduct handl first basic algorithm produc inspector executor given loop present loop l ffl find array refer loop figur array refer xiai yib ffl use refer subscript express form list descriptor oe sd loop shown figur two descriptor gener one refer xiai yibi gener list oe sd readi gener inspector executor code sd oe sd ffl gener declar statement temporari array temp store valu assign subscript correspond sd ie sd insid l note two descriptor gener exampl loop store refer trace temporari array skip array ia ib use directli dereferenc ffl gener clone loop l loop l l ffl bodi loop l consist statement record temp valu taken subscript express sd ffl gener call derefer pass array temp translat tabl pointer associ array sd exampl loop dereferenc done array ia ib ffl next gener call schedul use array pa la return derefer form schedul s ffl gather call gatherexchang gener use schedul s runtim obtain offprocessor data put data hash tabl exampl loop offprocessor valu gather call scatterexchang gener use schedul s call scatter exchang runtim take data hash tabl h send processor exampl loop data valu array x scatter accumul call scatterop exchang gener use schedul s call scatterop exchang runtim take data hash tabl h accumul processor figur irregular loop stage indirect index ffl replac subscript express index array sd insid loop l temporari array temp arf compil tailor recogn idiom use index distribut array mani irregular code see exampl figur programm assign express would otherwis use subscript array refer scalar s use array subscript type index pattern scalar defin insid loop use index distribut array precis ffl scalar defin iter loop definit may function of a loop index b scalar defin loop bodi c array index loop index ffl use index distribut dimens distribut array loop bodi one carri forward substitut subscript express loop written use idiom properti outlin section note forward substitut transform exampl figur exampl figur optim two main optim perform first optim reduc schedul overhead identifi set distribut array refer make use optim array distribut subscript type name express common schedul elimin match match care care common exchang match match match match elimin tabl optim pattern schedul second optim reduc data transfer cost identifi distribut array refer make use precis exchang invoc optim carri sort descriptor equival class sever distribut array refer share schedul long array question are ident distribut match subscript express set distribut array refer share exchang call refer ident descriptor tabl summar condit arf compil exampl section present two exampl use demonstr arf compil work section present arf use program distribut memori block spars matrix vector multipli kernel section present exampl comput fluid dynam spars block matrix vector multipli figur present arf program carri block spars matrix vector multipli kernel iter solver produc program design calcul fluid flow geometri defin unstructur mesh matrix assum size block nonzero entri statement loop sweep nonzero entri block assum array partit pass spars matrix vector multipli kernel gener elsewher figur present specif data decomposit spars block matrix vector multipl exampl written fortran d fortran use write exampl chang figur replac statement statement figur array map figur specifi map data array data array singl dimens distribut rest compress figur integ array partit local processor enumer list indic assign processor mention earlier current implement partit one dimens last dimens array parti primit howev support broader class array map thu partit describ partit last dimens array declar statement s arf compil use inform partit make call primit initi distribut translat tabl distribut translat tabl use describ map x y col ncol f statement s partit comput work specifi statement use claus exampl distribut array partit use specifi loop iter carri processor refer xmcolsji may requir off processor refer arf consequ gener inspector produc schedul hash tabl handl access distribut array x refer irregularli distribut array f occur statement s note distribut array f irregularli distribut use array partit partit also use claus partit loop iter s therefor deduc refer f statement onprocessor partit specifi distribut array element loop iter distribut processor separ partit routin gener partit arf compil gener inspector executor run processor code execut processor gener inspector shown figur statement show gener translat tabl use partit array statement show derefer call made figur address variou data element next two statement inspector code gener data commun schedul hash tabl structur executor gener arf processor p depict figur fortran notat use appropri enhanc readabl offprocessor element x gather place hash tabl h step i figur valu x obtain h local memori step iia figur array pa la use distinguish build translat tabl use map defin array partit call derefer find processor assign pa local indic la consecut refer xm colsj i employ partit call setup hashedcachehashedcach pa la call scheduleridnhashedcachelapa figur inspector gener arf spars block matrix vector multipli local offprocessor array access step iib accumul y note declar figur allow compil determin accumul local fluxro kernel kernel taken program comput convect flux use method base roe approxim riemann solver refer fluxro kernel paper fluxro comput flux across edg unstructur mesh fluxro access element array yold carri flux calcul accumul result array y case spars block matrix vector multipli kernel four section array distribut access ident manner figur depict outlin fluxro kernel indic two vertic compris edg note comput flux f luxk across ith edg access yoldk n yoldk n k part i figur flux comput add newli comput flux valu f luxk yk n subtract f luxk yk n part iii figur note array yold irregularli distribut use ypartit distribut array node irregularli distribut use edgepartit sinc claus distribut statement also use edgepartit specifi loop iter partit offprocessor refer made node part i figur inspector comput schedul n offprocessor addit yk n part iiia figur differ schedul n offprocessor subtract distribut irregular use partit real xn ynfmaxcolsn distribut irregular use partit integ colsn ncolsn initi local variabl distribut partit distribut enddo figur arf spars block matrix vector multipli align map reg align fijkl mapl align ncolsi mapi figur fortran data distribut statement spars block matrix vector mul i call gatherexchang use schedul obtain offprocessor element x gatherexchang place gather data hash tabl h ii row assign processor p k iia pacount p els use pacount lacount get vx hashtabl h endif m iib figur executor gener arf spars block matrix vector multipli distribut irregular use ypartit real yoldnumbernod ynumber node distribut irregular use edgepartit integ nodenumberedg initi local variabl distribut numberedg edgepartit i k ia ib ii calcul flux use vak vbk iii k iiia iiib distribut enddo figur arf kernel riemann solver build translat tabl use map defin array ypartit call derefer find processor assign pa n local indic la n consecut refer yk n employ ygammapartit call derefer find processor assign pa local indic la consecut refer yk n employ ygammapartit call setup hashedcachehash gamma cach n call setup hashedcachehash gamma cach call scheduleridnhash gamma cach figur inspector gener arf fluxro kernel figur parallel fluxro read well accumul offprocessor distribut array locat data exchang primit use schedul schedul n gather offprocessor refer yoldk n part ia figur use schedul use gather offprocessor refer yoldk n part ib figur inspector code gener arf compil fluxro kernel shown figur statement show call build translat tabl function store inform array partit statement call derefer function find address variou refer array derefer call use translat tabl setup statement s statement gener hash tabl structur last two statement code fragment show build commun schedul figur outlin executor produc arf processor p figur fortran notat use appropri enhanc readabl step ia ib two set offprocessor element yold gather use schedul n n step ii appropri element yold access either local memori appropri hash tabl step iii yold valu use calcul flux newli comput flux accumul local element distribut array y appropri addit subtract carri step iva ivc figur flux must accumul offprocessor element y accumul flux copi store hash tabl step ivb ivd figur flux calcul local accumul complet call scatteradd scattersubtract exchang exchang carri need offprocessor accumul current version arf compil attempt minim number schedul comput singl schedul offprocessor yold data access could produc comput singl schedul refer yold lead effici executor cost expens inspector memori util section overview memori requir exact method describ given suggest made way requir reduc mani spars unstructur program use larg integ array determin refer pattern respect kernel depict typic figur n element integ array col use purpos figur size array node employ executor depict figur figur replac col node local array store processor assign local indic refer irregularli distribut array kernel figur sum number element use processor store processor assign local indic larger n figur parallel code use total number gamma edg element amount addit storag need parallel code reduc follow simpl manner iter loop divid two disjoint set first set iter local memori refer local store array element second set offgammaprocessor iter contain off processor distribut array refer case list processor assign loop iter offgammaprocessor necessari sinc frequent possibl map problem memori refer local processor substanti memori save result scheme describ thu far would use larg quantiti extra memori attempt handl loop small number distribut array element access mani time instanc consid follow loop f function defin fi i ia call gatherexchang use schedul sn obtain first set offprocessor element yold gatherexchang place data hash tabl h n ib call gatherexchang use schedul sn obtain second set offprocessor element yold gatherexchang place data hash tabl h ii edg assign processor p inumb edg assign p pan count p els get va hash tabl h n endif pan count p els get vb hash tabl h endif iii calcul flux flux use va vb iv pan count p iva yoldla n els ivb accumul flux hash tabl h n endif pan count p ivc yoldla els ivd accumul flux hash tabl h endif va call scatteradd exchang use schedul n hash tabl h n vb call scattersubtract exchang use schedul hash tabl h figur executor gener arf fluxro kernel distribut irregular partit yfi refer pattern distribut array determin f two distinct element referenc loop loop sort handl use hash tabl store processor local index assign distinct memori refer exampl processor would store processor local index assign two refer distribut array y perform penalti use hash tabl find processor local index assign distribut array element examin varieti spars unstructur code decid implement method describ section arf compil see analysi time space tradeoff outlin section experiment result section present rang perform data summar effect preprocess measur overal effici also discuss perform effect problem irregular partit comput experi employ fluxro kernel block spars matrix vector multipli kernel kernel code arf parallel benchmark number obtain program gener arf compil note syntax accept arf compil differ minor way present previou section experi describ paper use either processor ipsc machin locat icas nasa langley research center processor ipsc machin locat oak ridg nation laboratori processor megabyt memori greenhil beta version c compil use gener code processor unstructur mesh data input data varieti unstructur mesh use includ actual unstructur mesh obtain aerodynam simul synthet gener mesh unstructur mesh aerodynam two unstructur mesh gener aerodynam simul use mesh a element mesh gener carri aerodynam simul involv multiel airfoil land configur mesh point mesh b element mesh gener simul circular arc airfoil channel mesh point mesh point associ x y coordin physic domain domain inform use partit mesh three differ way strip orthogon binari dissect algorithm anoth mesh partit algorithm jag partit partit mesh done sequenti map array gener distribut data structur synthet mesh templat finit differ templat link k point squar two dimension mesh connect pattern distort increment random edg introduc subject constraint new mesh point still requir inform k mesh point mesh gener make follow assumpt problem domain consist dimension squar mesh n point point initi connect k neighbor determin finit differ templat probabl q mesh link replac link randomli chosen mesh point note q equal mesh link modifi chang introduc q equal random graph gener two templat use one templat connect point four nearest neighbor k templat connect point four nearest neighbor four diagon neighbor k refer five point templat k templat nine point templat experi describ section point mesh employ overal perform data present give overview perform obtain ipsc arf compil output block distribut translat tabl use tabl present a inspector time time requir carri inspector preprocess phase b comput time time requir perform comput iter portion program c commun time time requir exchang messag within iter portion program inspector time includ time requir set need distribut translat tabl well time requir access distribut translat tabl carri preprocess unstructur mesh b partit use orthogon binari dissect experi ratio time requir carri inspector time requir singl iter commun time rang factor factor preprocess time repres set use distribut translat tabl instanc consid block matrix vector multipli processor use element mesh total preprocess cost millisecond millisecond repres work relat translat tabl parallel effici given number processor p defin sequenti time divid product execut time p processor time p sequenti time measur use separ sequenti version kernel run singl node ipsc algorithm sequenti code parallel code tabl column singl sweep effici depict parallel effici would obtain requir preprocess kernel time calcul carri out realiti preprocess time amort multipl mesh sweep time requir preprocess problem comput parallel effici neglect second set parallel effici measur obtain executor effici present tabl executor effici processor rang singl sweep effici rang experi depict tabl comput time least factor greater commun time executor effici effect fact comput parallel code carri less effici sequenti program parallel code spend time access hash cach also need perform indirect sequenti program tabl perform differ number processor nproc inspector comp comm singl sweep executor timem timem timem effici effici spars block matrix vector multipli mesh spars block matrix vector multipli mesh b tabl summar perform fluxro kernel mesh vari degre regular vari mesh map experi conduct use processor tabl depict synthet mesh deriv point stencil probabl edg move q equal either mesh map d strip d block one might expect synthet mesh commun cost increas dramat increas q dramat increas present volum commun requir number messag sent per node much higher larg q preprocess cost also increas q commun cost went least factor preprocess cost went factor tabl summar result mesh b partit three way strip orthogon binari dissect algorithm jag partit binari dissect jag partit algorithm break domain two dimension rectangular region two method produc similar perform result tabl perform processor differ mesh nproc inspector comp comm singl sweep executor timem timem timem effici effici point templat synthet mesh partit strip q point templat synthet mesh partit d block q point templat synthet mesh partit strip q point templat synthet mesh partit d block q mesh binari jag strip binari jag strip breakdown inspector overhead tabl summar cost dereferenc schedul fluxro kernel differ number processor use block translat tabl five point templat use mesh partit either d strip d block mesh partit strip derefer involv mostli local data access sinc domain data translat tabl ident partit strip partit use translat tabl initi involv commun measur present tabl defin follow manner ffl executor time comput commun time requir execut includ time requir preprocess ffl tabl initi time time need initi distribut translat tabl ffl derefer time time taken derefer parti primit ffl schedul time time requir produc commun schedul requir processor locat local indic found derefer major cost incur inspector due translat tabl initi derefer see tabl instanc consid case processor use carri sweep d block partit mesh point templat translat tabl initi derefer togeth requir executor time gener schedul requir executor time problem commun cost compris small fraction executor time consequ method use partit domain make signific perform impact executor time tabl cost translat tabl initi derefer strongli depend domain partit d block partit lead higher translat tabl relat cost almost certainli due increas commun requir need translat tabl initi derefer strip partit per se necessarili lead low translat tabl relat cost tabl note strip partit actual lead higher inspector cost mesh mesh b translat tabl partit block contigu number indic assign processor howev mesh mesh b mesh point number regular fashion indic correspond domain strip contigu number tabl cost dereferenc schedul differ number processor nproc executor tabl init derefer schedul time point templat synthet mesh partit strip point templat synthet mesh partit d block cost translat tabl section discuss two straightforward way map distribut translat tabl onto processor consid question distribut translat tabl minim cost associ translat tabl access tabl compar time requir carri derefer block stripe translat tabl depict ffl time requir carri particular call derefer ffl averag number nonloc access tabl entri requir derefer ffl averag number nonloc processor access call derefer result unstructur mesh b examin consist perform differ cost requir derefer block stripe translat tabl seen similar number offprocessor tabl entri need access either translat tabl distribut block translat tabl lead superior perform synthet mesh use reason describ section particularli good result obtain stripe partit block translat tabl use interest block translat tabl also prove superior synthet mesh partit d block use tabl cost derefer processor problem indirect block indirect stripe time nonloc nonloc time nonloc nonloc ms data proc ms data proc synthet point templat strip partit q q synthet point templat d block partit q mesh binari jag strip binari jag strip schedul data exchang perform quantifi commun cost incur parti schedul data exchang primit time requir carri schedul gatherexchang scatterexchang procedur call measur compar handcod version ipsc suppli send receiv send receiv commun amount data parti procedur experi conduct two processor repeatedli exchang w singl precis word inform exchang carri use gatherexchang scatterexchang ipsc suppli send receiv call tabl summar result experi present are time in millisecond requir carri requisit data exchang use send receiv messag ratio time taken schedul gatherexchang parti primit call time taken equival send receiv call scatter exchang call also time result virtual ident correspond gatherexchang call gatherexchang exceed explicitli code sendrec pair move w word inform two processor addit overhead requir schedul carri data exchang factor time tabl overhead parti schedul gatherexchang primit number send gather schedul data receiv exchang element timem ratio ratio cost use explicitli code sendrec pair move w word relat work program design carri rang irregular comput includ spars direct iter method requir mani optim describ paper sever research develop program environ target particular class irregular adapt problem william describ program environ dime calcul unstructur triangular mesh use distribut memori machin baden develop program environ target particl comput provid facil support dynam load balanc one key distinct present work baden william parti runtim support design use compil handl parallel loop irregular array refer addit use programm wide rang applic contrast program environ describ baden william highli custom use specif applic area varieti compil target distribut memori multiprocessor except kali project parti work describ compil attempt deal loop irregular refer effici work describ paper also relat scheme carri distribut memori runtim parallel scheme ambiti describ paper includ mechan carri runtim partit parallel chen suggest optim similar one describ here propos reduc schedul overhead identifi distribut array refer one employ ident schedul point hand code base time experi carri studi scheme propos prototyp compil describ abl gener code capabl effici handl kernel parallel loop contain irregular array refer procedur carri runtim optim coupl distribut memori compil via set compil transform compil describ test paper qualit differ effort cite number import respect mechan develop demonstr support irregularli distribut array make possibl map data comput work arbitrari manner irregularli distribut array support possibl compar perform effect differ problem map support arbitrari distribut propos first implement compilerbas distribut translat tabl mechan irregular scientif problem mani unstructur nasa code must carri data accumul offprocessor memori locat one demonstr kernel address thi primit compil design handl situat compil effort uniqu abil carri irregular pattern offprocessor data accumul effici primit augment hash tabl design elimin duplic data access addit hash tabl manag copi offprocessor array element research use differ data structur manag offprocessor data copi conclus paper describ experiment character compil runtim support procedur embodi method capabl handl import class irregular problem aris scientif comput examin number complet nasa code two kernel extract demonstr method kernel involv comput unstructur mesh kernel code arf dialect fortran gener code run node ipsc detail time carri kernel use unstructur mesh aerodynam along mesh gener use random number increment distort matric obtain fix finit differ templat benchmark suit stress commun capabl ipsc parti primit varieti way experi report section ratio time requir carri preprocess time requir singl iter either kernel rang factor factor section major preprocess cost aros need support irregularli distribut array section perform schedul data exchang parti primit quantifi dataexchang demonstr maximum increas analog send receiv call provid intel one virtu layer approach distribut compil design captur set critic optim runtim support primit primit henc optim migrat varieti compil target distribut memori multiprocessor intend implement primit parascop parallel program environ addit parti primit can are use directli programm applic code applic describ particularli noteworthi applic explicit multigrid unstructur euler solver employ comput flow full aircraft configura tion explicit unstructur euler solver achiev comput rate gflop processor intel touchston delta multigrid unstructur euler solver achiev comput rate gflop delta processor case cost inspector preprocess approxim equal cost singl iter euler solver amount less total time complex system parti procedur parti procedur develop transform need emb appropri primit implement rel eas distribut memori compil primit use implement runtim support includ commun procedur design support irregular pattern distribut array access procedur find locat irregularli map distribut array data use distribut translat tabl primit also support mainten hash tabl store copi offprocessor data acknowledg would like thank harri jordan bob voigt donna meisel care edit manuscript would also like thank advanc comput laboratori oak ridg nation laboratori na nasa ame provid access node intel ipsc hypercub wish thank dimitri mavripli david whitak suppli unstructur mesh david whitak p venkatkrishnan access code r pandor system manag data distribut program abstract dynam partit coordin local scientif calcul run multiprocessor experiment studi method parallel precondit krylov method partit strategi pde across multi processor execut time support adapt scientif algorithm distribut memori architectur design methodolog synthes parallel algorithm architec ture paragon multicomput environ first implement cm fortran refer manual design implement parallel unstructur euler solver use softwar primit slice analysi indirect access distribut array fortran languag specif solv problem concurr comput numer method comput inviscid transon flow shock wave gamm workshop updat distribut variabl local comput high perform fortran forum compil support machineindepend parallel program fortran compil optim fortran mimd distributedmemori machin compil program nonshar memori machin compil global namespac program distribut execut support share data structur distribut memori architectur gener explicit commun sharedmemori program refer comput model task schedul parallel spars choleski factor parallel loop indirect array refer pointer multigrid solut twodimension euler equat unstructur triangular mesh principl runtim support parallel processor scheme support automat data migrat multicomput process decomposit local refer overview dino new languag numer comput distribut memori multiprocessor express complex parallel algorithm dino massiv parallel process contract dino dino parallel program languag crystal runtim system perform effect irregular commun pattern massiv parallel multiprocessor parallel compil distribut memori parallel comput parallel precondit iter method compress navier stoke equat solut algorithm twodimension euler equat unstructur mesh distribut irregular finit element superb tool semiautomat mimdsimd parallel vienna fortran languag specif tr ctr manuel ujaldon emilio l zapata effici resolut spars indirect dataparallel compil proceed th intern confer supercomput p juli barcelona spain ayon basumallik rudolf eigenmann optim irregular sharedmemori applic distributedmemori system proceed eleventh acm sigplan symposium principl practic parallel program march new york new york usa rongguey chang tyngruey chuang jenq kuen lee effici support parallel spars comput array intrins function fortran proceed th intern confer supercomput p juli melbourn australia roxana e diaconescu distribut compon architectur scientif applic proceed fortieth intern confer tool pacif object internet mobil embed applic februari sydney australia vladimir kotlyar keshav pingali paul stodghil compil parallel code spars matrix applic proceed acmiee confer supercomput cdrom p novemb san jose ca kevin b theobald gagan agraw rishi kumar gerd heber guang r gao paul stodghil keshav pingali land cg earth case studi finegrain multithread evolutionari path proceed acmiee confer supercomput cdrom pe novemb dalla texa unit state renato ferreira gagan agraw joel saltz data parallel languag compil support data intens applic parallel comput v n p may gagan agraw joel saltz interprocedur compil irregular applic distribut memori machin proceed acmiee confer supercomput cdrom pe decemb san diego california unit state peizong lee zvi meir kedem automat data comput decomposit distribut memori parallel comput acm transact program languag system topla v n p januari