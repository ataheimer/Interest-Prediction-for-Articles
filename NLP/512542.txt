t profileguid code compress a comput increasingli use context amount avail memori limit becom import devis techniqu reduc memori footprint applic program leav execut form paper describ approach appli data compress techniqu reduc size infrequ execut portion program compress code decompress dynam via softwar need prior execut use data compress techniqu increas amount code size reduct achiev applic infrequ execut code limit runtim overhead due dynam decompress use softwar decompress render approach gener applic without requir special hardwar code size reduct obtain depend threshold use determin code infrequ execut henc compress low threshold see size reduct averag set embed applic without excess runtim overhead b introduct recent year increas trend toward incorpor comput wide varieti devic palmtop telephon embed control etc mani devic amount memori avail limit due consider space weight power consumpt price exampl wide use tmscx dsp processor texa instrument kword program memori execut code time increas desir use sophist softwar devic encrypt softwar telephon speechimag process softwar palmtop fault diagnosi softwar embed processor etc sinc devic typic secondari storag applic requir memori avail abl run make desir reduc applic runtim memori requir instruct data memori footprint possibl focu work reduc overal memori footprint reduc space requir instruct intuit underli work simpl program obey socal rule state essenc program execut time spent small portion code see corollari bulk program code gener execut infrequ work aim exploit aspect program use compress techniqu yield smaller compress represent may requir greater decompress effort runtim infrequ execut portion program expect increas compress infrequ execut code contribut signific improv overal size reduct achiev concomit increas decompress effort lead signific runtim penalti code affect infrequ execut appar simpl idea pose interest implement challeng requir nontrivi design decis includ manag memori use hold decompress function discuss section design effect com pressiondecompress scheme decompressor code small quick section identif appropri unit compress decompress section well optim improv overal perform system section work combin aspect profiledirect optim runtim code generationmodif program compress discuss relat work section call site a origin compress code decompressor call site function offset tabl f runtim buffer b compress figur code organ compress basic approach overview figur show basic organ code system consid program three infrequ execut function f h shown figur a structur code compress shown figur b code function replac stub a short sequenc instruc tion invok decompressor whose job decompress code function runtim buffer transfer control decompress code function offset tabl specifi locat within compress code code given function start stub compress function pass argument decompressor index tabl argument indic figur b label etc edg stub decompressor decompressor use argument index function offset tabl retriev start address compress code appropri func tion start gener uncompress execut code runtim buffer decompress stop decompressor encount sentinel an illeg instruct insert end code function decompressor flush instruct cach then transfer control code gener runtim buffer decompress function finish execut return caller usual way sinc control transfer stub decompressor decompressor runtim buffer alter return address transmit origin call site special action necessari return decompress function call site method partit origin program code two part infrequ execut function such f g h place compress code part frequent execut function remain nevercompress part stub code manag control transfer compress function must also lie never compress part import note compar space usag origin compress program latter must take account space occupi stub decompressor function offset tabl compress code runtim buffer never compress origin program code implement use notion function somewhat gener usual connot term sourc languag program discuss exactli constitut func tion section buffer manag scheme describ conceptu fairli straightforward fail mention sever issu whose resolut determin perform import issu function call compress code suppos figur code f contain call g sinc f compress call site runtim buffer call execut describ abov call stub g code g decompress execut expect happen g return return address point instruct follow call f problem instruct f overwritten g decompress return address point locat runtim buffer contain gs code question address therefor is function call execut runtim buffer guarante correct code execut call return answer question inextric link way choos manag runtim buffer follow option buffer manag may simpli avoid problem refus compress function whose bodi contain function call sinc may result function call within runtim buffer reject option sever limit amount code subject compress may choos ensur decompress code function never overwritten function call within bodi return simplest way never discard decompress code function case compress code function decompress onceth first time calledwith subsequ call bypass decompressor enter decompress code directli conceptu resembl behavior justintim compil translat interpret code nativ code altern discard decompress code function longer call stack sinc point certain function call return alreadi approach taken lucco though rather immedi discard function execut cach function hope might reexecut smalltalk system also extract execut version function intermedi represent procedur first invok cach bsr ra g return f offset instruct entrya origin entrystub decompress indexf nevercompress runtim stub list bsr ra decompress indexf return br g entri runtim buffer instruct offset b transform runtim createstub creat re figur manag function call runtim buffer execut code discard prevent system run memori main drawback approach runtim buffer must made larg enough hold decompress function possibl coexist call stack worst case entir program result memori footprint includ space need runtim buffer well stub decompressor function offset tabl therefor bigger origin program approach therefor suitabl limitedmemori devic decompress function f call function g within runtim buffer may choos allow decompressor overwrit fs code within buffer approach use implement benefit need runtim buffer larg enough hold code largest compress function point abov howev mean call g return runtim buffer may longer hold correct instruct return to problem solv ensur code f restor runtim buffer point calle g return point control transfer caller f discuss done suppos function f within runtim buffer call compress function g scheme caus decompressor overwrit fs code buffer gs code correct restor fs code buffer call g return control transfer appropri instruct within f sinc addit storag area fs code could cach restor fs code runtim buffer requir decompress again mean control return g must first divert decompressor decompress f transfer control it decompressor must also given addit argument specifi control transfer decompress function sinc program may reenter f instruct entri point one option creat stub compil time contain function call g follow code call decompressor restor f runtim buffer transfer control instruct fs call g stub obvious cannot place runtim buffer sinc may overwritten there must place nevercompress portion program sinc everi call compress function requir stub restor stub amount larg fraction final execut size eg compress code never execut profil creat restor stub occupi averag program nevercompress code compress code account instruct execut profil averag percentag rise rather creat restor stub compil time instead creat runtim g call temporari restor stub exist g return transfer g prefac code gener restor stub make return address origin call point stub uncondit jump branch made g everi control transfer compress code creat restor stub would effect maintain call stack call compress code compress code recurs could requir arbitrarili larg amount addit space instead creat one restor stub particular call site compress code maintain usag count restor stub determin stub longer need ask creat restor stub first check see stub call site alreadi exist and doe increas usag count use address return address otherwis creat new restor stub usag count equal effect implement simpl refer countbas garbag collect scheme restor stub text area memori program conceptu consist three part nevercompress code runtim stub list runtim decompress buffer figur b return g restor stub invok decompressor recogn call restor stub decrement stub usag count restor f runtim buffer transfer control appropri instruct runtim scheme never creat restor stub compiletim scheme though requir addit byte per stub order maintain count fact maximum number restor stub exist one time test suit aggress profil threshold code consid compress account total dynam instruct count profil program see section figur illustr done figur a show function f whose bodi contain function call callsit cs call g instruct bsr r label put address next instruct the return address regist r branch label callsit cs offset within bodi f rel begin fs code return address pass calle follow instruct offset figur b show result transform code decompressor call call g return function call g cs replac function call createstub use return address regist ra createstub creat restor stub call site or use exist restor stub call site exist chang ra contain stub address transfer control uncondit branch offset transfer control g note singl origin instruct bsr becom two instruct runtim buffer save space compress code two instruct creat decompressor singl bsr ra g fill runtim buffer g return instruct restor stub execut caus decompressor invok argument pair indexf indexf fs index within function offset tabl offset within fs code control transfer decompress overal effect control return function call fs code decompress control transfer instruct follow function call origin code import note that scheme describ abov call stack origin compress program exactli size point program execut fact need modifi return sequenc function function g may call either runtim buffer nevercompress code and gener may call site both call site nevercompress function createstub invok g return instruct follow call instruct usual way call site compress code return address pass g correspond restor stub control transfer stub g return hard see fact control transfer happen correctli regardless g use return address pass it exampl g may save address environ entri restor exit keep regist leaf function pass return address function tailcal optim carri out case control transfer longjmp function may return without correspond call mean usag count callsit restor stub may inaccur or even wors restor stub may longer exist reason function call setjmp compress decompressor interfac decompressor invok two argument index function offset tabl indic function decompress offset runtim buffer indic locat runtim buffer control transfer decom pression rather pass argument decompressor regist put dummi instruct call tag follow call decompressor low bit contain offset high bit function index sinc decompressor never return caller instead transfer control function decompress runtim buffer instruct never execut can howev access via return address set call decompressor variou regist may use return address regist call decompressor restor stub regist use origin call instruct use guarante free entri stub free regist do if regist free push valu regist ra use ra restor end decompressor decompressor howev must know regist contain return address call accomplish give decompressor multipl entri point one per possibl return address regist entri point regist r push r onto stack jump bodi decompressor decompressor know return address top stack decompressor save regist use stack place instruct start runtim buffer uncondit jump offset provid tag fill rest runtim buffer decompress function indic tag restor save regist uncondit jump start runtim buffer which immedi jump appropri offset creat uncondit jump instruct runtim buffer avoid need regist control transfer end decompressor offset within runtim buffer insert one instruct jump instruct set return regist address restor stub when creat stub restor ra when entri stub free regist note createstub decompress contain function save multipl entri point one per possibl return address regist two function easi determin return address whether function call insid runtim buffer when act cre atestub outsid when act decompress compress decompress primari consider choos compress scheme minim size compress function would like achiev good compress even short sequenc instruct sinc function may want compress small second consider size decompressor sinc becom part memori footprint program fi nalli decompressor must fast sinc invok everi time control transfer compress function alreadi runtim buffer sinc function choos compress low execut count expect invok decompressor often execut faster decompressor how ever mean toler compress frequent execut code which turn lead greater compress opportun compress techniqu use simplifi version split stream approach data compress consist sequenc machin code instruct instruct contain opcod field sever operand field classifi type exampl test platform branch instruct consist bit opcod field bit regist field bit displac field order compress sequenc instruc tion first split sequenc separ stream valu one per field type extract field type sequenc field valu type success instruct compress stream separ test platform split instruct stream note instruct contain field type reconstruct instruct sequenc decompress opcod opcod stream tell us field type instruct obtain field valu correspond stream repeat process opcod stream empti compress stream encod field valu stream use huffman code optim stream twopass process first pass calcul frequenc field valu construct huffman code second pass encod valu use code sinc huffman code design stream must store along encod stream order permit decompress use variant huffman encod call canon huffman encod permit fast decompress yet use littl memori like huffman code canon huffman code optim characterbas code the charact case field val ue fact length canon huffman codeword charact length huffman codeword charact thu number n i codeword length encod same codeword length canon huffman code n i ibit number b exampl n codeword notic codeword complet determin given number codeword length ie n is store n charact encod array order codeword valu advantag canon huffman code codeword rapidli decod use array n i dj v b n i return compress program consist codeword sequenc code represent the array n i valu list the array dj stream fact sinc everi instruct begin opcod complet specifi remain field in struction merg codeword sequenc individu stream one sequenc simpli interpret first bit codeword sequenc use huffman code opcod stream use decod opcod specifi appropri huffman code use remain field exampl decod branch instruct would read codeword sequenc use first opcod code regist code final displac code total space requir compress program approxim origin size achiev somewhat better compress stream use movetofront code prior huffman code undesir affect increas code size run time decompress algorithm approach decompress larger part instruct multipl instruct one decompress oper may result better faster decompr sion approach typic requir complex decompress algorithm one requir space data structur compress region function use unit compress decompress may agre function specifi program often case programspecifi function contain frequentlyexecut code compress infrequentlyexecut cold code compress unit compress programspecifi function entir function cannot compress contain code cannot consid compress result amount code avail compress may significantli less total amount cold code program addit runtim buffer must larg enough hold largest decompress function singl larg function may often account signific fraction cold code program runtim buffer larg enough contain function offset spacesav due compress address issu creat function arbitrari code region allow region compress decompress mean control transfer compress region code may longer follow callreturn model func tion exampl may contend condit branch goe one compress region code anoth differ compress region sinc runtim buffer hold code one region time branch one region anoth must go stub invok decom pressor terribl complic compress region might multipl entri point requir entri stub way origin function instanc function call within compress region still handl discuss section face problem choos region com press want region reason small runtim buffer small yet want control transfer differ region number entri stub small optim problem input control flow graph e program vertex b repres basic block size jbj equal number instruct block edg a b repres control transfer b addit input specifi subset u vertic compress output partit subset compress vertic u region follow cost minim nevercompress code offset tabl jbjg runtim buffer sr size region r compress set block requir entri stub ie r ig constant number word requir entri stub buffer size bound normal code size c c c c e e e e f f a buffer size bound normal code size c c c c c e e e f f f buffer size bound normal code size c c c c c e e e e e f c buffer size bound normal code mean key figur effect buffer size bound code size c number extern function call within r the decompressor creat addit instruct call note includ size restor stub list calculat ing size even given partit nphard problem practic cannot afford calcul sr possibl region r assum fix compress factor appli region ie br jbj unfortun result simplifi problem nphard partit reduc it resort simpl heurist choos compress region first decid basic block compress criteria decis discuss detail section also fix upper bound k size runtim buffer our current implement use empir chosen valu byte determin describ below creat initi set region perform depthfirst search control flow graph limit depthfirst search produc tree contain k instruct compos compress block singl function profit compress set block tree make tree compress region otherwis mark root tree never reiniti depthfirst search though might visit subsequ depthfirst search start differ block continu depthfirst search compress block visit decid region contain instruct profit compress compar i number instruct save compress region number instruct e ad entri stub e i region profit compress mention abov use empir determin upper bound k size runtim buffer guid partit function compress region choos small valu k get larg number small compress re gion correspondingli larg number entri stub function offset tabl entri tend offset space benefit small runtim buffer result larg overal memori footprint valu k larg get smaller number distinct compress region function offset tabl entri save offset space requir runtim buffer empir observ variat overal code size k vari shown figur three differ threshold cold code well mean threshold other valu yield similar curv seen that benchmark least smallest overal code size obtain prefer latter valu larger runtim buffer mean get somewhat larger region correspondingli fewer interregion control transfer result fewer call decompressor runtim yield somewhat better perform partit obtain depthfirst search practic typic contain mani small region partli due presenc small function user librari code partli due frag mentat incur overhead two sourc first compress region requir word function offset tabl second interregion control transfer requir addit code form entri restor stub invok decompressor overhead reduc pack sever small region singl larger one still contain k instruct pack region start set region creat depthfirst search repeatedli merg pair yield save without exceed instruct bound k pair exist pair region fr r g and r swap r follow save entri stub everi basic thresholdfract code cold code compress code figur amount cold compress code normal ize block region r incom edg r and possibl r region everi call region r r save restor stub may also save jump instruct everi fallthrough edg region r r principl pack region way involv spacetim tradeoff pack save space sinc region decompress entireti execut result larger region incur greater decompress cost runtim howev given infrequentlyexecut code subject runtim de compress actual increas runtim cost signific identifi cold code discuss far implicitli assum identifi portion program cold and therefor candid compress determin portion program cold carri follow start threshold specifi maximum fraction total number instruct execut runtim accord execut profil program cold code account for thu mean code identifi cold account total number instruct execut program runtim let weight basic block number instruct block multipli execut frequenc ie block contribut total number instruct execut runtim let tot instr ct total number instruct execut program given execut profil given valu consid basic block b program increas order execut frequenc determin largest execut frequenc n bfreqbn weightb tot instr ct basic block whose execut frequenc n consid cold figur show the geometr mean of rel amount cold compress code program differ threshold seen figur amount cold code vari total code averag threshold where code never execut consid cold cold code account total number instruct execut program runtim howev cold code compress amount compress code vari program reason cold code compress given threshold that discuss section region code may consid compress even cold profit so optim buffersaf function discuss earlier function call within compress code caus creation execut restor stub addit instruct runtim buffer overhead avoid calle buffersaf ie code might call invok decompressor calle buffersaf runtim buffer overwritten calle execut return address pass calle simpli address instruct follow call instruct runtim buffer need creat stub call decompress caller call return word call within compress region buffersaf function left unchang two benefit space cost associ restor stub addit runtim buffer instruct elimin time cost decompress caller return call avoid use straightforward iter analysi identifi buffersaf function first mark region clearli buffersaf ie identifi compress contain indirect function call whose possibl target may includ nonbuffersaf region inform propag iter region r region mark nonbuffersaf r region control enter reither function call via branch operationthen r also mark nonbuffersaf repeat new region mark way region left unmark end process buffersaf benchmark test analysi identifi averag compress region buffersaf gsm g enc benchmark largest proport buffersaf region littl respect compress region infer buffersaf unswitch code region contain indirect jump jump tabl necessari process code ensur runtim control transfer within decompress code runtim buffer carri correctli two choic either updat address jump tabl point runtim buffer locat correspond target would resid region decompress unswitch region use seri condit branch instead indirect jump tabl note either case know size jump tabl context binari rewrit implement our may alway possibl unabl determin extent jump tabl block contain indirect jump tabl set possibl target jump must exclud compress sake sim pliciti current implement use unswitch elimin indirect jump space jump tabl reclaim experiment result idea implement form binaryrewrit tool call squash base squeez compactor compaq alpha binari squeez base alto postlinktim code optim squeez alon compact binari alreadi program profil input time input file name size kb file name size kb adpcm clintonpcm mlk ihaveadreampcm clintonadpcm mlk ihaveadreamadpcm lenatif dec clintong mlk ihaveadreamg gsm clintonpcm mlk ihaveadreampcm jpeg dec testimgjpg rosesjpg jpeg end testimgppm rosesppm pgp compressionp tiusermanualp rasta ex cwav phonepcmlewav figur input use profil time run b c e f code size reduct threshold key figur reduct due profileguid code compress differ threshold space optim averag squash use runtim decompress scheme outlin paper compact squeez binari anoth averag evalu work use eleven embed applic mediabench benchmark suit avail wwwcsucla eduleecmediabench adpcm speech compress decompress epic imag data compress util dec g enc refer implement sun microsystem ccitt g voic compress decod encod gsm implement european gsm provision standard fullrat speech transcod jpeg dec jpeg enc implement jpeg imag decompress compress mpegdec mpegenc implement mpeg decod encod respect pgp popular cryptograph encryptiondecrypt program rasta speechanalysi program input use obtain execut profil use guid code compress well use evalu execut speed figur b describ figur profil input refer use obtain execut profil use carri compress time input refer input use gener execut time data uncompress compress code detail benchmark given appendix program compil use vendorsuppli c compil cc v invok cc o addit flag instruct linker retain reloc inform produc static link execut vendorsuppli compil cc produc compact code optim level o carri local optim recognit common subexpr sion global optim includ code motion strength reduc tion test replac split lifetim analysi code schedul requir static link execut result fact alto reli presenc reloc inform distinguish address data tru unix linker ld refus retain reloc inform execut static link adpcm epic geom code size reduct thresholdsa code size adpcm epic geom execut time normal thresholdsb execut time figur effect profileguid compress code size execut time ing sizeincreas optim inlin integ multipl divis expans use shift loop unrol code replic elimin branch program compact use squeez squeez elimin redund unreach dead code perform interprocedur strength reduct constant propag replac multipl similar program fragment function call singl repres function ie perform procedur abstract squeez effect compact code start execut produc cc o remov unreach code noop instruct squeez reduc number instruct remain approxim averag remain instruct given squash along profil inform obtain run origin execut sampl input obtain execut count program basic block squash produc execut contain nevercompress code entri stub function offset tabl runtim decompressor compress code buffer use hold dynam gener stub runtim buffer space includ code size measur squash execut figur show amount code size reduct obtain use profileguid compress vari cold code threshold code never execut consid cold case see size reduct rang g enc pgp mean reduct size reduct obtain increas increas make code avail compress thu reduct rang ad pcm pgp mean reduct extrem consid cold code size reduct rang adpcm pgp mean noteworthi much size reduct obtain use quit low threshold rate reduct code size increas quit small ex ampl increas five order magnitud yield addit benefit code size reduct howev increas runtim overhead associ repeat dynam decompress code quickli begin make felt experi set program and other indic beyond runtim overhead becom quit notic obtain reason balanc code size improv execut speed focu valu execut time data obtain workstat mhz compaq alpha ev processor split twoway setassoci primari cach kbyte instruct data cach mb main memori run tru unix case execut time obtain smallest run execut otherwis unload system figur examin perform program term size speed rang final set bar figur show mean valu code size reduct execut time respect rel squeez code number top bar give actual valu geometr mean case seen low coldcod threshold runtim overhead incur profileguid code compress small compress code speed averag code without compress incur averag execut time overhead averag overhead given correspond size reduct obtainedrang these overhead seem unreason high note reduct size top roughli code size reduct obtain use prior work code compact import note context execut speed compress code suffer dramat time input ie input use measur actual execut speed caus larg number call decompressor happen two rea son first code fragment cold profil may occur cycl either loop within procedur interprocedur cycl aris recurs second region partit algorithm describ section may split loop multipl region either case loop cycl execut repeatedli time input repeat code decompress signific advers effect execut speed exampl first situat occur specint benchmark li interprocedur cycl never execut pro file execut mani time time input exampl second situat occur benchmark mpegdec runtim buffer size bound k small eg relat work work combin aspect profiledirect optim runtim code generationmodif program compress dynam optim system dynamo collect profil inform use gener modifi code runtim system design minim memori footprint execut rather decreas execut time tend focu optim effort hot code wherea compress effort aggress cold code close relat work hoogerbrugg et al compil cold code interpret byte code stackbas machin contrast use huffman code compress cold code dynam uncompress compress code runtim need thu system incur memori cost bytecod interpret signific amount work architectur extens execut compress code exampl includ thumb arm processor codepack powerpc processor mip mip processor special hardwar support use expand compress instruct execut form prior execut approach advantag incur space overhead control stub time overhead softwar decompress requir special hardwar limit gener applic lefurgi et al describ hybrid system decompress carri mostli softwar assist special hardwar instruct allow direct manipul instruct cach decompress carri granular individu cach line previou work program compress explor compress wide rang program represent sourc program intermedi represent machin code etc result compress form either must decompress and perhap compil execut execut or interpret without decompress first method result smaller compress represent second requir time space overhead decompress execut avoid requir larg amount addit space place decompress code choos decompress small piec code demand use singl small runtim buffer similar techniqu partial decompress decompressiononthefli use similar situat techniqu requir alter runtim oper hardwar comput earlier work code compress yield smaller execut treat execut program simpl linear sequenc instruct use suffix tree construct identifi repeat code fragment could abstract function recent shown possibl obtain result good better use aggress interprocedur sizereduc compil optim appli control flow graph program instead use suffixtre construct linear sequenc instruct conclus futur work describ approach use execut profil guid code compress infrequ execut code compress use data compress techniqu produc compact represent decompress dynam prior execut need sever benefit use power compress techniqu allow signific improv amount code size reduct achiev low execut frequenc threshold runtim overhead small final special hardwar support need runtim decompress compress code experiment result indic that proper choic cold code threshold approach effect reduc memori footprint program without significantli compromis execut speed see code size reduct averag set embed ap plicat rel code size obtain use prior work code compact concomit effect execut time rang slight speedup slowdown averag current look number way enhanc work further includ algorithm compress decompress well algorithm construct compress region within program acknowledg grate acknowledg loan equip karen flat richard flower robert muth compaq corp r effect code gener justintim java compil alpha architectur handbook transpar runtim optim system manag gigabyt compress index document imag enhanc code compress embed risc processor compil techniqu code compact effici implement smalltalk system code compress adapt compress syntax tree iter dynam code optim two basic technolog mobileobject system binari custom instruct set code compress code compress system base pipelin interpret decompress core powerpc empir studi fortran program reduc code size runtim decompress optim ansi c interpret superoper overview ibm java justintim compil texa instrument inc code compact bibliographi tr optim ansi c interpret superoper code compress binari fast effect code gener justintim java compil enhanc code compress embed risc processor code compress system base pipelin interpret compil techniqu code compact dictionari program compress alto analyz compress assembl code manag gigabyt adapt compress syntax tree iter dynam code optim effici implement smalltalk system ctr saumya debray william s evan cold code decompress runtim commun acm v n august arvind krishnaswami rajiv gupta dynam coalesc bit instruct acm transact embed comput system tec v n p februari stacey shogan bruce r childer compact binari code compress softwar dynam translat proceed confer design autom test europ p februari yuan xie wayn wolf hari lekatsa profiledriven select code compress proceed confer design autom test europ p march karin heydemann francoi bodin henripierr charl softwareonli compress system tradingoff perform code size proceed workshop softwar compil embed system p septemb octob dalla texa e wanderley netto r azevedo p centoducatt g araujo multiprofil base code compress proceed st annual confer design autom june san diego ca usa shaoyang wang rongguey chang code size reduct compress repeat instruct sequenc journal supercomput v n p june israel waldman shlomit s pinter profiledriven compress scheme embed system proceed rd confer comput frontier may ischia itali john gilbert david m abrahamson adapt object code compress proceed intern confer compil architectur synthesi embed system octob seoul korea rajeev kumar amit gupta b s pankaj mrinmoy ghosh p p chakrabarti postcompil optim multipl gain pattern match acm sigplan notic v n decemb taweesup apiwattanapong mari jean harrold select path profil acm sigsoft softwar engin note v n januari jeremi lau stefan schoenmack timothi sherwood brad calder reduc code size echo instruct proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa shukang zhou bruce r childer mari lou soffa plan code buffer manag distribut virtual execut environ proceed st acmusenix intern confer virtual execut environ june chicago il usa mario latendress marc feeley gener fast interpret huffman compress bytecod proceed workshop interpret virtual machin emul p june san diego california hongxu cai zhong shao alexand vaynberg certifi selfmodifi code acm sigplan notic v n june haifeng john trimbl somu perianayagam saumya debray gregori andrew code compact oper system kernel proceed intern symposium code gener optim p march steve haga andrew webber yi zhang nghi nguyen rajeev barua reduc code size vliw instruct schedul journal embed comput v n p august mario latendress marc feeley gener fast interpret huffman compress bytecod scienc comput program v n p septemb bjorn de sutter bruno de bu koen de bosscher sift mud low level c code reus acm sigplan notic v n novemb o ozturk g chen m kandemir i kolcu compilerguid data compress reduc memori consumpt embed applic proceed confer asia south pacif design autom januari yokohama japan guilin chen mahmut kandemir optim address code gener arrayintens dsp applic proceed intern symposium code gener optim p march marc l corliss e christoph lewi amir roth implement evalu dynam code decompress use dise acm transact embed comput system tec v n p februari zhang chandra krintz design implement evalu adapt code unload resourceconstrain devic acm transact architectur code optim taco v n p june mari j irwin exploit frequent field valu java object reduc heap memori requir proceed st acmusenix intern confer virtual execut environ june chicago il usa bjorn de sutter bruno de bu koen de bosscher linktim binari rewrit techniqu program compact acm transact program languag system topla v n p septemb chang hong lin yuan xie wayn wolf code compress vliw embed system use selfgener tabl ieee transact larg scale integr vlsi system v n p octob