t vector softwar bessel function evalu a suit comput program evalu bessel function modifi bessel function order zero one vector real argument describ distinguish characterist program a portabl across wide rang machin b vector case multipl function evalu perform perform new program compar softwar fnlib collect fullerton new softwar base b introduct bessel function real argument integ order among commonli occur special function appli mathemat softwar librari contain routin evalu one success collect routin evalu special function fnlib packag develop wayn fullerton lo paper appear acm transact mathemat softwar volum pp contribut nation institut standard technolog nist subject copyright unit state identif commerci product paper impli recommend endors nist author address comput appli mathemat laboratori nation institut standard technolog gaithersburg md electron mail boisvertcamnistgov saun derscamnistgov respect alamo nation laboratori late one import featur fnlib portabl parameter port machin constant fnlib code regularli use machin ibm pc cray ymp version code found way sever wellknown librari imsl sfunlibrari slatec common math librari also avail netlib recent increas attent paid develop algorithm softwar take advantag vector processor machin exampl special version mani standard fortran math function avail compil vector loop follow abil vector loop crucial mani applic paper describ set fortrancal subprogram extend function bessel function done produc modifi version fnlib routin besi besi besj besj besk besk besi besi well doubl precis version new routin maintain portabl fnlib advantag vectoriz case multipl function evalu requir section review basic design fnlib routin section discuss variou issu involv vector algorithm follow short descript user interfac implement section final section describ test new softwar evalu perform variou scalar vector processor design fnlib fnlib substanti collect softwar includ fortran subprogram doubl precis version avail code primari design criteria develop packag portabl maintain case criteria speed accuraci relax slightli order maxim primari criteria exampl fnlib routin rare accur last bit although almost alway accur within factor time machin precis certainli suffici vast major applic fact routin remain popular year trivial port mani machin exist initi develop attest success basic design fnlib base upon approxim truncat chebyshev seri expans approxim mani wellknown properti wide applic nearli best minimax sens error easi estim provid variabl accuraci approxim stabl evalu convent polynomi properti approxim basi mani algorithm evalu special function basic formula construct routin fnlib paraphras follow recip construct fnlib routin store chebyshev coeffici statement coeffici requir chebyshev expans accur digit store singl precis routin digit doubl precis routin rang ensur suffici accuraci comput initi done first call routin a calcul legal argument bound illeg argument region function undefin result would overflow underflow rang reduct cannot perform accur enough port machin constant use determin bound applic current machin b determin correct number expans coeffici error commit truncat chebyshev seri bound sum absolut valu discard coeffici one use estim error commit use fewer fewer term way length seri select match precis machin check input argument valid function argument compar bound comput initi fatal error warn provid warn issu underflow result exampl fatal error issu case result return result overflow error issu use port error handler comput approxim basic comput evalu truncat chebyshev seri reason singl seri accur whole argument rang thu argument rang broken sever subinterv usual three four seri appropri subinterv determin comput proce follow a preprocess argument argument map interv b evalu chebyshev seri done use threeterm linear recurr due clenshaw c postprocess result seri valu final correct form interv necessari vector multipl argument section describ routin design may extend case evalu multipl argument three opportun improv perform exist reduct subprogram call overhead vector pre postprocess phase vector chebyshev seri evalu emphasi paper vector function evalu routin multipl argument seem quit simpl first one simpli appli scalar algorithm vector argument un fortun fail rang possibl input argument divid sever subinterv handl differ sinc cannot assum input argument sort way core algorithm proce follow argument rang gather argument rang temporari vector comput approxim argument vector mode scatter result back result vector clearli vector length depend upon distribut input argument and gener less total number argument exampl illustr transform consid follow statement fnlib routin y gt xsml and y le statement illustr one particular argument rang handl approxim case simpli plu chebyshev seri sum return util csevl bioc array chebyshev seri coeffici nti number coeffici correspond vector code complex n gt statement modifi slightli origin code simplifi present argument array function evalu result return array f wgtle return array indx n indic element vector xsml gather routin wgthr ycmp loop preprocess argument array wc evalu chebyshev seri csevl except vector n argument store array tcmp b b b work array length m loop postprocess result seri evalu wsctr put result appropri posit f preprocess postprocess phase trivial vectoriz remaind section investig vector indic subprogram vector multipl chebyshev seri evalu next consid evalu truncat chebyshev seri vector first review seri evalu scalar code given argument x set chebyshev coeffici c due clenshaw evalu recurr scalar version recurr seri last term result f vector argument x j clear done x ff fi fl f becom vector assign loop run done howev recurr loop two unnecessari vector copi elimin loop unrol level three illustr follow vector version algorithm note three temporari vector length requir addit input vector x output vector f recurr vector version recurr seri unrol last term cleanup n divis three endif loop repeatedli util four vector remain vector regist entir comput unrol loop way yield improv overal perform softwar cray ymp vector util oper algorithm form inner loop comput given argument rang perform vector store contigu memori quit desir sinc reduc possibl bank conflict memori refer howev argument correspond given rang need lie contigu input vector thu argument rang must gather togeth applic argument contigu vector comput requir function valu scatter back appropri locat output vector datahandl oper necessari thing signific term oper count lead signific perform degrad properli vector unfortun oper among like thwart vector compil none vector cyber compil exampl wish implement code standard fortran permit easi custom case code ineffici facilit encapsul oper subprogram replac effici version avail next describ util detail case implement quit straightfor ward although vector compil convex c cray ymp effici implement util necessarili systemdepend see exampl discuss gather scatter isol loop subprogram wgtmxanindx wlemxbnindx wgtlemxabnindx correspond oper abov respect gatherscatt result index compress array indic j gather oper collect element vector x j indic contigu vector scatter invers thi x place simpl gather scatter loop subprogram wgthrnxindxi wsctrnyindxx respect outofrang test appli algorithm must determin whether element input vector rang ie greater or less than given scalar so would like provid index first occur diagnost one attempt combin oper singl loop one get someth is gener vectoriz eg ifxj gt go instead first check error condit use simpler vectoriz loop eg ifxj gt tabl usercal vfnlib subprogram singl doubl descript singl doubl vi dvi evalu vector argument besi dbesi vi dvi evalu vector argument besi dbesi vj dvj evalu j vector argument besj dbesj vj dvj evalu j vector argument besj dbesj vk dvk evalu k vector argument besk dbesk vk dvk evalu k vector argument besk dbesk vy dvi evalu vector argument besi dbesi vy dvi evalu vector argument besi dbesi key done otherwis comput first index loop like one number abov way slow loop execut immedi error return follow oper repres subprogram wngtmxakey vector softwar use techniqu describ section abov produc portabl vector routin evalu follow bessel function real argument order zero one code employ basic algorithm fnlib retool vector environ call collect code vfnlib although produc new usercal version small portion origin fnlib techniqu use readili appli mani fnlib routin vfnlib includ usercal fortran subprogram list tabl ident call sequenc call name m x f work iwork info x array contain argument function evalu result return correspond posit array f work iwork workspac array iwork length m work length m info return code singl precis doubl precis version subprogram provid routin actual driver partit work array call lowerlevel routin perform actual comput list subsidiari routin includ vfnlib given tabl code standard fortran elect provid error return code paramet rather issu error messag error handler done fnlib error condit indic nonzero return code info fatal error indic info warn argument lead fatal error result return fatal error tabl intern vfnlib subprogram singl doubl descript singl doubl wi dwi perform comput dvi wi dwi perform comput dvi wj dwj perform comput dvj wj dwj perform comput dvj wk dwk perform comput dvk wk dwk perform comput dvk wy dwi perform comput dvi wy dwi perform comput dvi wc dwc evalu chebyshev seri vector argument csevl dcsevl iwc idwc find number term need comput chebyshev seri given accuraci init initd wngt dwngt outofrang test x j a wnle dwnle outofrang test x j b wgthr dwgthr vector gather wsctr dwsctr vector scatter wferr process fatal error messag seteru imach imach return integ machin constant imach imach rmach dmach return real machin constant rmach dmach condit are function undefin argument result overflow argument larg accur argument reduct possibl last three case index first offend argument return iwork warn issu result underflow correspond function valu set zero case use separ procedur handl error detect lowerlevel routin exampl nterm chebyshev seri evalu n error caus improp user input never occur normal use routin the except array work short code overwrit data reason thing case issu fatal error messag halt program done call simpl errorhandl routin wferr evalu section evalu vfnlib respect three criteria accuraci effici portabl accuraci assess pure experiment mean ie comparison exist softwar problem set effici evalu seri experi cray ymp convex c sun sparcstat final portabl verifi success port code system use appropri compil option flag nonansi construct portabl accuraci sinc vfnlib repres vector subset fnlib first goal assur vfnlib routin return result compar correspond fnlib routin test program distribut packag compar function fnlib counterpart approxim argument verifi two differ five time machin epsilon rel differ use function valu greater one absolut differ less one code run three separ comput system sun sparcstat sun mhz weitek base fpu use sun fortran option fast o convex c convex unix releas use convex fc version v option o cray ymp unico use cf case avail option use check conform ansi x fortran addit test done verifi set routin inde produc correct function valu ideal function routin return result rel error near machin precis rare case practic accuraci vfnlib routin assess evalu function four five thousand argument cray ymp fnlib vfnlib compar result comput extend precis use mathematica case result return fnlib vfnlib rel error less time machin epsilon singl precis theta gamma doubl precis two notabl except behavior occur function j describ below behavior near function zero cancel error evalu chebyshev seri lead loss rel accuraci neighborhood zero function except j case absolut error remain less time machin epsilon problem avoid function routin eg cosin accur comput nearbi zero recast comput term y present case infinit number zero appar period make strategi impract behavior larg argument larg argument function comput axgx given chebyshev seri g sine cosin sinc x size x sine cosin larg argument must comput x larg even one round error off larg magnitud tabl asymptot perform chebyshev seri evalu megaflop machin term scalar vector sun sparc cray ymp cannot repres accur enough assur result return axgi small rel error occur even g comput full machin precis effici chief motiv use vfnlib prospect improv comput rate vector processor assess advantag use vfnlib compar use vfn routin vector code repeat call correspond fnlib routin scalar code compar code three system describ section sun sparcstat convex c cray ymp first scalar workstat second vector minisupercomput third processor vector supercomput although use one processor test includ sun demonstr portabl softwar well show use vfnlib need degrad perform scalar processor test perform singl precis the sun convex machin cray bit machin comput innermost loop vector code evalu chebyshev seri use algorithm section tabl list comput rate megaflop evalu singl chebyshev seri argument use scalar vector code subprogram csevl wc use purpos theoret peak rate convex cray megaflop respect correspond linpack benchmark run megaflop light figur observ rate vector chebyshev seri evalu convex cray respect seen quit reason unfortun seen comput bessel function evalu chebyshev seri overhead must paid gather scatter vector element well variou error check easi assess effect overhead cray ymp use hardwar perform monitor tabl list measur asymptot comput rate megaflop usercal function obtain data evalu function differ set argument differ argument distribut compar tabl tabl see comput rate full bessel function evalu declin percent raw chebyshev seri evalu anoth measur perform speedup ratio scalar vector time multipl function evalu actual speedup depend upon distribut argument compar scalar vector code vector length distribut differ tabl asymptot perform bessel function cray ymp megaflop function j scalar vector tabl asymptot speedup scalar time vector time machin j sun sparc min ave max convex c min ave max convex c min veclib ave max cray ymp min ave way among three differ argument rang test includ case argument singl rang well case one per cent argument given rang tabl list minimum averag maximum speedup observ singl precis code comput speedup convex rang speedup cray rang the entri label convex c veclib explain shortli also interest note vector code run faster scalar code sun case speedup one might predict tabl sun convex cray respect averag speedup cray ymp given tabl somewhat better thi contrast speedup convex larg predict investig gener execut profil subroutin evalu vector length x i first two column tabl show percent time spent cray convex four differ activ innermost loop comput chebyshev seri evalu half comput occur cray howev convex half time spent index compress although compil vector index compress loop result code perform well one better straightforward fortran implement oper tabl percent time spent vi variou activ activ cray convex convex veclib chebyshev seri evalu pre post process index compress gatherscatt tabl short vector speedup scalar time vector time machin length j cray convex howev convex veclib librari contain fortrancal util optim perform index compress gatherscatt oper sinc care implement isol oper lowlevel util easili replac badli vector loop call veclib done entri third column tabl obtain reason distribut although gatherscatt oper still occupi significantli larger percentag time cray use modifi version vfnlib util convex lead improv scalarvector speedup label convex c veclib tabl test perform thu far assess perform code long vector also import assess penalti use vector code vector length short tabl list sampl speedup function three machin vector length argument test distribut two argument subrang intern vector length actual half list tabl one would expect vector code run slower case function valu request vector length vector code run twice long sun cray five time long convex tabl list vector length speedup ie breakeven point vector code faster breakeven point rang cray convex sun tabl short vector breakeven point vector machin j sun sparc cray conclus describ suit portabl fortran subprogram vfnlib comput bessel function real argument integ order code modif routin fullerton wellknown fnlib packag new routin allow user specifi array argument evalu function algorithm chang allow effect vector case speedup use origin fnlib observ vfnlib code cray ymp modest speedup also observ sun sparcstat scalar workstat vector techniqu employ vfnlib extend mani fnlib routin r handbook mathemat function formula slatec common mathemat librari note summat chebyshev seri convex comput corpor algorithm model implement test packag spars basic linear algebra subprogram perform variou comput use standard linear equat softwar distribut mathemat softwar via electron mail chebyshev polynomi numer analysi algorithm framework portabl librari portabl special function routin imsl inc system mathemat comput tr distribut mathemat softwar via electron mail mathematica system mathemat comput algorithm model implement test packag spars basic linear algebra subprogram algorithm framework portabl librari z portabl special function routin perform variou comput use standard linear equat softwar