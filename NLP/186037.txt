t fixpoint comput polyvari static analys higherord applic program a paper present optim generalpurpos algorithm polyvari static analys higherord applic program polyvari analysi accur form analysi produc mani abstract descript program convent analysi may also comput intermedi abstract descript irrelev final result analysi optim algorithm address overhead preserv accuraci analysi algorithm also parameter abstract domain degre polyvari implement instanc algorithm evalu perform compar unoptim algorithm implement run significantli faster averag algorithm benchmark report here b introduct abstract interpret abramski hankin cousot jone nielson use formul wide varieti static analys aim optim program practic program languag research area focus conceptu formal aspect topic special emphasi put issu accuraci termin relat nonstandard standard semant definit howev practic aspect involv implement abstract interpret receiv much attent situat even pronounc analys languag higherord function static analysi includ critic phase consist find fixpoint set possibl recurs abstract function deriv analyz program practic use analysi includ effici accur fixpoint algorithm effici depend mostli accuraci exam ple analys determin one abstract descript object eg function data structur program analog partial evalu consel danvi said monovari analys accur determin multipl abstract descript object research partial support nsf grant ccr author address j michael ashley comput scienc depart lindley hall bloom ington indiana email jashleycsindianaedu charl consel oregon graduat insti tute depart comput scienc po box portland oregon email con selcseogiedu m ashley c consel program depend context object use again analog partial evalu analys said polyvari make fixpoint comput expens yield abstract descript unlik firstord program higherord program static control flow graph sinc higherord languag treat procedur valu consequ controlflow dataflow aspect higherord program intertwin fact controlflow analysi higherord program also call closur analysi sestoft includ dataflow aspect polyvari analysi separ controlflow dataflow analys desir sinc firstord higherord valu use differenti context object use consel a inde accuraci scheme obtain cost iter controlflow dataflow analys rytz gengler altern controlflow dataflow analys combin polyvari analysi approach yield accur inform consel a present young analyz set mutual recurs function consist process function fixpoint iter chang occur precis iter process complet abstract valu propag everi control flow path abstract descript function stabil okeef okeef hall kennedi hall kennedi other notic strategi caus needless recomput perform inde given abstract function reanalyz even though chang trigger new iter affect it one solut remedi situat consist maintain depend chang occur abstract function affect chang reanalyz anoth problem discuss literatur eg charlier musumbu hentenryck way control flow analyz program travers analysi travers strategi caus abstract function analyz time necessari exampl travers controlflow graph depthfirst oppos breadthfirst affect rate analysi reach fixpoint analyz program first order call graph determin static one pass analysi use inform acceler converg fixpoint process exampl subset abstract function deriv stronglyconnect compon controlflow graph solv individu strategi firstord program present literatur eg charlier musumbu hentenryck howev analyz program higher order approxim call graph comput importantli callgraph analysi requir fixpoint process consequ exploit callgraph inform acceler fixpoint process requir analysi higherord program construct callgraph inform increment paper present new algorithm implement accur fixpoint analys algorithm appli callbyvalu program higherord procedur data structur introduc optim techniqu design deal overhead polyvari preserv accuraci implement algorithm polyvari bindingtim analysi bindingtim analysi part preprocess phase offlin partial evalu jone sestoft sndergaard nielson nielson aim determin invari partialevalu process fixpoint comput polyvari static analys delta test els fig simpl higherord languag experiment evalu new algorithm compar perform unoptim version algorithm give precis bound run time algorithm implement run significantli faster implement algorithm estim base seri benchmark given paper overview next section present version algorithm may use monovari polyvari analys illustr exampl accuraci perform may hamper presenc polyvari section revis algorithm improv perform accuraci preliminari perform result given section approach put perspect relat work section close section conclus gener analysi present gener static analysi simpl higherord program languag analysi present scheme clinger j ree ed dybvig extend simpl record facil facil allow new record type name field x xn defin express definerecord name field record access updat procedur namex setnamex respect conveni construct variantcas allow one dispatch type record extract valu record field name see figur exampl evalu unspecifi valu record match case languag treat analysi given lefthand part figur righthand part figur list record declar associ syntact rule program sequenc mutual recurs definit follow initi express correspond record program contain two field def the definit exp the initi express simplifi present procedur may take one argument also data structur sideeffect discuss return data structur languag conclud remark address issu sideeffect valu program valu express evalu environ establish definit program gener analysi abstract abstract domain polyvari func tion instanti analysi must meet follow requir m ashley c consel abstract domain must form complet lattic finit height abstract closur abstract descript runtim closur explicitli repres domain function ff abstract function map constant element a polyvari function map context analysi element finit index set consel a differ descript object group ie fold togeth respect index finit height abstract domain ensur fixpoint comput termin furthermor explicitli repres abstract closur allow analysi manipul compon eg environ text let us give exampl abstract domain polyvari function could use instanti gener analysi suppos interest develop form closur analysi analysi could collect set possibl closur could occur call site program so use follow domain set jng label lambda abstract environ abstract valu defin domain abstract valu infinit height contradict first requir list abov is domain use polyvari analysi may creat infinit number descript lambda express obtain finit domain control polyvari analysi introduc polyvari function use creat two differ kind abstract descript abstract closur abstract applic fact famili function sinc appli element differ domain shown below first use partit set abstract closur creat lambda express partit repres closur variant abstract closur repres abstract closur partit lambda express analyz abstract closur form text lambda express current lexic environ result analysi howev closur variant identifi partit abstract closur lie let us give exampl polyvari function domain a although domain infinit codomain finit sinc map closur label equip defin polyvari function closur ae xn xn g fixpoint comput polyvari static analys delta domain closur variant finit version domain a note a defin follow notic domain closur variant finit thu descript abstract closur finit well function domain defin use second time partit set valu closur variant appli determin partit applic partit repres applic variant applic variant repres applic closur variant abstract valu partit record result applic well applic variant element domain consid purpos analysi function ff would map firstord valu higherord valu singleton set consist correspond label exampl show infinit domain finit partit make abstract descript object finit achiev introduc function compon infinit domain wide spectrum function defin detail descript approach found consel a exampl polyvari function or gener context analysi includ current call chain lexic context abstract valu argument procedur call eg see consel a harrison iii shiver notic monovari analysi obtain defin constant function map uniqu partit turn describ concret algorithm implement gener analysi essenc algorithm driven need analyz applic variant besid comput controlflow dataflow program algorithm must construct maintain depend graph graph use initi comput applic variant updat note that conveni use ff mathemat formula program analyz express applic variant repres applic closur variant abstract valu algorithm comput result applic given figur procedur analyzeexp receiv argument express lexic environ map identifi abstract valu applic variant analyz return abstract valu analyzeexp dispatch syntact categori express liter map abstract valu domain variabl look current delta j m ashley c consel definerecord cv exp env creator av closur variant definerecord av cv caller arg return applic variant definerecord callsit av exp arg defin analyzeexp exp env self variantcas exp lit valu ff valu cond test els abstractcond analyzeexp test env self analyzeexp env self analyzeexp els env self proc formal bodi let cv lookupclosvari exp env cvcreator cv self env buildabsv cv app rator rand let arg analyzeexp rand env self cv cvsofabsv analyzeexp rator env self let callsit makecallsit self exp arg fold lambda cv acc let av lookupappvari cv arg avcal av callsit setcvav cv union cvav cv makeset av lub avarg av acc cv defin updateenviron cv variantcas cv cv env creator av let newenv creatorsenv creator unless env env newenv setcvenv cv newenv pushmani workstack av defin updateargu av variantcas av av arg caller let newarg callersarg caller unless arg arg newarg setavarg av newarg push workstack av fig algorithm analyz express fixpoint comput polyvari static analys delta lexic environ abstract valu condit determin abstract valu subexpress analysi lambda express applic caus depend inform record two abstract data type creator caller use help maintain inform creator abstract data type adt note context closur variant enter data flow program caller adt note closur variant may appli oper datatyp introduc need note adt simpli abstract bookkeep detail straightforward implement analysi lambda express yield closur variant creator closur variant updat includ applic variant analyz environ analysi occur done updatecr oper creator adt procedur updateenviron call updat environ closur variant anoth oper lubcreatorsenv use obtain least upper bound environ creator record environ creator effect record environ abstract closur partit name closur variant updat ensur closur variant accur reflect abstract closur partit environ closur variant may chang ad new applic variant set creator environ creator chang so applic closur variant must reanalyz av field cv record note depend pushmani oper updateenviron initi reanalys push applic variant onto workstack comput abstract valu applic closur variant collect applic site appli abstract valu argument one time applic yield abstract valu repres result applic least upper bound result set abstract valu result applic closur variant appli abstract valu first find applic variant repres applic similar updatecr caller adt oper updatecal record closur variant appli context repres applic variant procedur updateargu call updat argument applic variant oper lubcallersarg analog lubcreatorsenv use obtain least upper bound argument caller again record argument caller effect record abstract valu partit name applic variant updat ensur applic variant accur reflect valu partit argument applic variant may chang reason similar environ closur variant chang chang applic variant must reanalyz final applic variant repres applic context ad av field closur variant appli updat depend applic variant closur variant environ continu algorithm analyz complet program m ashley c consel defin workstack makestack defin analyzeprog prog variantcas prog prog def exp push workstack buildrootvari exp buildinitialenv def letrec loop lambda unless emptystack workstack let av top workstack analyzevari av defin analyzevari av variantcas av av cv arg variantcas cv cv exp env variantcas exp proc formal bodi let env extendenv env formal arg updatereturnvalu av analyzeexp bodi env av defin updatereturnvalu av newreturn variantcas av av caller return unless absval return newreturn setavreturn signatur newreturn pushmani workstack callersav caller fig algorithm analyz program analyz program algorithm comput abstract valu entir program given figur procedur analyzeprog take program comput abstract valu upon termin argument result applic variant program comput analyzeprog first creat initi environ definit program buildinitialenv root applic variant buildrootvari variant describ program express workstack repres stack initi variant procedur iter stack empti sinc chang monoton lattic abstract valu finit height iter termin finit number step procedur analyzevari analyz applic variant updat variant return valu extend lexic environ closur variant appli bind argument call analyzeexp valu return use updat variant fixpoint comput polyvari static analys delta defin f lambda x k h g x defin g lambda x x defin h lambda x jlambda y x defin k lambda f f f fig exampl program step applic variant fig fixpoint comput exampl program figur variant return valu chang applic variant call modifi variant must reanalyz variant depend result obtain callersav third oper caller abstract data type evalu algorithm given perform well instanti monovari analysi ie constant function unfortun may lose accuraci suffer perform penalti presenc polyvari identifi problem turn solv it consid program given figur trace analysi figur exampl program label anonym lambda express conveni carri exampl assum abstract domain function begin section trace show applic variant creat chang step analysi recal step constitut analysi one applic variant step omit chang variant step follow notat use tabl hf va i denot closur variant obtain label procedur f environ map abstract valu v applic variant denot c v c closur variant whose applic repres applic argument applic v result m ashley c consel let us follow trace step show root variant initi creat result appli procedur f next step applic variant f analyz result creation three new applic variant g h k sinc argument applic evalu first applic variant k push onto workstack last analyz step chang sinc closur variant appli applic variant h analyz next yield closur variant j sinc result variant chang applic variant f analyz caus creation new applic variant k sinc analysi new variant k caus applic variant hj x i creat put onto workstack howev analysi caus chang applic variant final applic variant g analyz result propag yield new applic variant h sinc analysi new variant also yield new closur variant pass k step crucial longer call hf sinc accur inform argument hh i obtain also impli hk i longer appli hj x i step see least upper bound new variant pass hk i old argument taken obtain new argument hk i lost precis controldata flow sinc two closur variant part argument realli one practic applic variant may analyz repeatedli becom useless depend inform record appropri updat controlflow dataflow inform chang due polyvari anc exampl illustr applic variant may creat intermedi point fixpoint comput longer use fixpoint reach also show data flow program may becom less precis valu return intermedi variant part final set variant intermedi variant necessari fixpoint reach fixpoint comput fixpoint comput acceler made accur detect variant becom useless elimin comput next section present revis algorithm intend achiev improv improv analysi chang algorithm illustr figur aim maintain accur depend inform presenc polyvari detect elimin useless variant chang bookkeep purpos extra field ad applic variant note whether variant use also extend record type call site includ set closur variant appli call site final lookup oper call site introduc lookup oper creat new record instanc match instanc exist otherwis return preexist instanc henc applic variantexpress pair exist exactli one callsit record repres it fixpoint comput polyvari static analys delta definerecord av cv signatur caller use definerecord callsit self exp cv arg defin analyzevari av variantcas av av cv signatur use let env extendenv env formal arg cond setavus av t updatereturnvalu av analyzeexp bodi env av setavus av f sweepexp bodi env av defin analyzeexp exp env self variantcas exp app rator rand let arg analyzeexp rand env self cv cvsofabsv analyzeexp rator env self callsit lookupcallsit self exp updatecallsit callsit cv arg defin updatecallsit callsit newcv newarg variantcas callsit callsit cv arg let droppedcv if pi arg newarg setdiffer cv newcv cleanup droppedcv callsit setcallsitearg callsit newarg setcallsitecv callsit newcv fig revis algorithm analyz express m ashley c consel defin sweepexp exp env self variantcas exp test pred els sweepexp pred env self sweepexp env self sweepexp els env self proc let cv lookupclosvari exp env app rator rand let callsit lookupcallsit self exp cleanup cv callsit setcallsitecv callsit sweepexp rator env self sweepexp rand env self defin cleanup cv callsit let piarg callsitearg callsit foreach lambda cv let av lookupappvari cv piarg defin stillus av letrec loop lambda av seen cond null av f memq car av seen loop cdr av seen or rootvari car av highest car av t els loop append callersav avcal car av av con car av seen loop list av defin highest av variantcas av av cv arg andmap lambda av absval lub avarg av arg arg cvav cv fig auxiliari revis algorithm fixpoint comput polyvari static analys delta call site updat updatecallsit oper addit simpli updat record field determin closur variant either longer appli call site els appli differ context analysi procedur cleanup call updat affect variant cleanup consid closur variant determin applic variant repres applic call site question remov call site caller applic variant use new adt oper removecal call updateargu record chang applic variant effect remov caller dataflow contribut call variant chang analysi alreadi caus accur controlflow dataflow inform gather sinc call one variant anoth eras dataflow inform becom precis turn remov useless variant analysi revis procedur analyzevariantcheck see variant use analyz stillus variant use reachabl either root applic variant rootvari highest applic variant highest deriv closur variant inde use analysi proce befor use variant must swept remov contribut data controlflow analysi mark longer live consid variant use reachabl highest applic variant closur variant ensur monoton fixpoint find process without it algorithm may termin argument result valu closur variant oscil point abstract domain procedur sweepexp travers abstract syntax tree applic variant self find lambda express applic lambda ex pression closur variant creat self point determin self remov creator closur variant use new oper removecr updateenv call updat environ closur variant applic cleanup call updat applic variant longer call call site call site also reset indic closur variant call site implement issu effici version algorithm easili implement exampl procedur stillus quadrat number applic variant controlflow graph linear version implement extra bookkeep also discov empir analysi reach fixpoint much quickli variant analyz somewhat greedili is instead put variant onto workstack analysi reanalyz immedi unless analysi variant alreadi pend also limit number pend analys appli improv implement use report result next section delta j m ashley c consel ds cp prolog mp match db proof proof size function initi variant time revis variant time ratio reus fig benchmark result revis algorithm implement bindingtim analysi partial evalu schism consel a consel b generalpurpos algorithm compar also implement schism bta figur tabul result analyz eight program use new analyz four eight program interpret first program ds interpret extens callbyvalu lambda calculu second cp continuationpass style version interpret third prolog interpret prolog consel khoo fourth interpret subset algol mp consel danvi b remain four program pattern matcher pattern express use regular express languag match consel danvi a implement simpl databas system db daniel vanc two encod theorem proof program report size measur number word program number toplevel definit lambda express report number variant number applic variant reachabl analysi termin time report second ratio shown indic speedup initi algorithm number variant reus number variant becam unreach point analysi call later point analysi revis algorithm show strategi elimin useless variant gener perform well result analyz program proof show drastic reduc number variant creat time spent analyz them result analyz program mp particularli interest illustr price detect discard useless variant three variant found useless took time perform analysi find handl useless variant expens implement princip overhead come determin whether variant reachabl elimin useless variant also costli mani variant subsequ reus sinc time invest detect elimin wast observ variant usual reus case number signific initi benchmark indic possibl execut accur polyvari analys keep overhead polyvari manag degre fixpoint comput polyvari static analys delta relat work martin hankin martin hankin discuss practic method perform strict analysi higherord languag optim abstract interpret attempt reduc number functionargu pair analyz techniqu howev dedic twopoint abstract domain henglein develop effici constraintbas bindingtim analysi henglein higherord program bondorf jrgensen bondorf jrgensen implement approach partial evalu similix bondorf analysi monovari howev unclear time whether analysi made polyvari preserv effici okeef okeef gave effici fixpoint algorithm similar henglein term rewritten intermedi form better suit analysi algorithm abl find solut set equat arbitrari lattic finit height algorithm parameter respect degre polyvari howev address specif issu aris analysi higherord program use pend list eagerli travers controlflow graph techniqu appli elsewher eg charlier musumbu hentenryck howev use context firstord program also appear comput minim function graph jone mycroft intend use firstord program well hall kennedi hall kennedi describ effici callgraph analysi fortran procedur reanalyz use context chang le charlier et al describ algorithm analyz prolog program charlier musumbu hentenryck strategi reanalyz equat need our sever static analyz higherord languag appear literatur eg harrison iii shiver young none work address parameter polyvari make attempt optim analysi process eg reanalyz equat byne conclus present generalpurpos algorithm comput fixpoint polyvari static analysi higherord applic program algorithm present previous comput polyvari analys date none attempt optim effic analysi languag consid analysi cannot express data structur fact data structur ad languag without significantli complic analysi treat exactli like closur perspect implement algorithm consel consel a data variant associ partit abstract data structur construct abstract data structur correspond creation abstract closur access data structur correspond applic abstract closur also analog closur variant data variant must remov dataflow program longer referenc futur work includ formal algorithm prove correct crucial compon proof show argument return valu applic variant stabil despit remov closur variant them also plan undertak complex analysi assess cost polyvari m ashley c consel hope extend approach sideeffect one direct follow shiv erss strategi shiver strategi involv major modif analysi studi strategi could cast framework well acknowledg thank olivi danvi karolin malmkjaer care read draft paper r abstract interpret declar languag automat autoproject higherord recurs equat effici analys realist offlin partial evalu journal function program gener abstract interpret algorithm complex analysi revis report algorithm languag scheme bind time analysi higher order untyp function languag polyvari bindingtim analysi higherord acm symposium partial evalu semanticsbas program manipul tour schism partial evalu system higherord applic languag better support static data flow static dynam semant process tutori note partial evalu semant foundat program analysi theori applic muchnick n partial evalu simpl databas system scheme program languag effici call graph analysi interprocedur analysi automat parallel scheme program effici type infer higherord bindingtim analysi abstract interpret semanticsbas tool program analysi mix selfapplic partial evalu experi compil gener proof structur induct use partial evalu find fix point finit lattic finit fixedpoint problem polyvari bind time analysi replac function paramet global variabl theori practic semant program analysi higherord program languag tr find fix point finit lattic abstract interpret declar languag scheme program languag bind time analysi high order untyp function languag replac function paramet global variabl static dynam semant process controlflow analysi higherord languag tame lambda effici type infer higherord bindingtim analysi better support static data flow twolevel function languag automat autoproject higher order recurs equat effici call graph analysi polyvari bindingtim analysi applic languag tour schism proof structur induct use partial evalu tutori note partial evalu revis report algorithm languag scheme data flow analysi applic program use minim function graph theori practic semant program analysi higherord function program languag ctr olivi danvi karolin malmkjr jen palsberg etaexpans trick acm transact program languag system topla v n p nov tim sheard nathan linger searchbas bind time analysi use typedirect prune proceed asian symposium partial evalu semanticsbas program manipul p septemb aizu japan annefranois le meur julia l lawal charl consel special scenario pragmat approach declar program special higherord symbol comput v n p marchjun j michael ashley r kent dybvig practic flexibl flow analysi higherord languag acm transact program languag system topla v n p juli j michael ashley effect flow analysi inlin acm sigplan notic v n p aug annefranois le meur julia l lawal charl consel toward bridg gap program languag partial evalu acm sigplan notic v n p march kenichi asai bindingtim analysi static dynam express new gener comput v n p januari niel h christensen robert glck offlin partial evalu accur onlin partial evalu acm transact program languag system topla v n p januari