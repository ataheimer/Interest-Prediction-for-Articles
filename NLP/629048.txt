t implement interprocedur bound regular section analysi a regular section analysi summar interprocedur side effect subarray form use depend analysi avoid complex prior solut shown practic addit product compil optim compil produc effici code even presenc highlevel languag construct howev current program support system significantli lack abil analyz procedur call defici complic parallel program loop withcal signific sourc parallel perform regular section analysi compar two benchmark linpack librari linear algebra subroutin rice compil evalu program suit ricep set complet applic code varieti scientif disciplin experiment result demonstr regular section analysi effect mean discov parallel given program written appropri modular program style b introduct major goal compil optim research gener code effici enough encourag use highlevel languag construct word good program practic research support nation scienc foundat grant ccr ibm corpor intel scientif comput reward fast execut time use subprogram prime exampl good program practic requir compil support effici unfortun call subprogram inhibit optim program support system especi design support parallel program fortran absenc better inform compil must assum two call read write memori locat make parallel execut nondeterminist limit particularli discourag call loop compil look parallel tradit interprocedur analysi help case consid follow loop continu sourc modifi locat ith column a parallel execut loop determinist classic interprocedur analysi discov variabl use defin side effect procedur call must determin subarray access order safe exploit parallel earlier paper callahan kennedi propos method call regular section analysi track interprocedur sideeffect regular section describ side effect common substructur array element row column diagon paper describ implement regular section analysi rice parallel fortran convert pfc automat parallel system also comput depend parascop program environ overrid concern implement effici enough incorpor practic compil system algorithm summar step analysi whiich integr threephas interprocedur analysi optim structur pfc regular section analysi ad less line pfc roughli line pli program run ibm vmcm remaind paper organ follow section compar variou method repres side effect array section give addit detail exact varieti bound regular section implement section describ construct local section propag respect section examin perform regular section analysi two benchmark linpack librari linear algebra subroutin rice compil evalu local analysi procedur array formal paramet global static save section describ shape refer build rang subscript merg result section summari mod use section save summari section call site array actual paramet save section describ pass locat scalar actual paramet global save rang pass valu interprocedur propag solv interprocedur problem call graph construct classic mod use summari constant propag mark section subscript scalar invalid modif iter call site translat summari section call context merg translat section caller summari depend analysi procedur call site summari section simul loop run element section test depend banerje gcd algorithm overview regular section analysi program suit ricep set complet applic code varieti scientif disciplin section suggest area futur research give conclus array side effect simpl way make depend test precis around call site perform inlin expans replac call procedur bodi precis repres effect procedur sequenc ordinari statement readili understood exist depend analyz howev even whole program becom larger loop nest contain call may grow dramat caus time space explos due nonlinear array depend analysi gain benefit inlin expans without drawback must find anoth represent effect call procedur depend analysi interest memori locat modifi use procedur given call procedur p statement array global variabl paramet a wish comput ffl set locat may modifi via p call ffl set u locat may use via p call need compar set simpl statement well test depend intersect set exampl exist true depend statement follow statement base array a sever represent propos repres interprocedur array access set contriv exampl figur show differ pattern repres precis evalu method involv examin complex precis of classic summari triolet regular section bound bound stride dadsimpl section figur summar refer a a a ffl repres set u merg descriptor summar multipl access we call meet oper descriptor may view form lattic ffl test two descriptor intersect depend test translat descriptor call site especi array reshap handl recurs turn issu iter techniqu guarante converg fix point solut use cousot techniqu widen oper li yew propos preparatori analysi recurs program guarante termin three iter either method may adapt regular section true summari true summari method use descriptor whose size larg independ number refer summar may make descriptor oper complic limit expens translat descriptor interprocedur propag intersect depend analysi classic method classic method interprocedur summari dataflow analysi comput mod use set indic paramet global variabl may modifi use procedur summari inform cost two bit per variabl meet intersect may implement use singlebit bitvector logic oper also exist algorithm comput complet solut number meet linear number procedur call site program even recurs permit unfortun experi pfc ptool indic summari inform coars depend test effect detect parallel problem access set represent method the whole array none array see figur coars inform limit detect data decomposit import sourc parallel differ iter loop work distinct subsect given array triolet region triolet irigoin feautrier propos calcul linear inequ bound set array locat affect procedur call represent intersect oper precis convex region pattern array access nonunit stride nonconvex result meet oper given convex approxim oper region expens meet oper requir find convex hull combin set inequ intersect use potenti exponenti linear inequ solver success meet oper also produc complic region potenti mani inequ number primit access merg togeth translat call site precis formal paramet array call procedur map subarray shape caller otherwis whole actual paramet array assum access call region method rank high precis expens complex represent refer list propos method summar repres refer separ descriptor list refer meet oper list concaten possibl check duplic translat intersect repeat applic correspond oper simpl refer howev two signific disadvantag ffl translat descriptor requir time proport number refer ffl intersect descriptor requir time quadrat number refer refer list method simpl precis asymptot expens inlin expans linear burk cytron propos repres multidimension array refer linear subscript express onedimension address express method also retain bound inform loop induct variabl occur express describ two way implement meet oper one involv mere keep list individu address express construct composit express polynomi loop induct variabl disadvantag first method describ abov second method appear complic yet rigor describ linear pure form illsuit summar might use extens true summari techniqu abil handl arbitrari reshap atom imag li yew extend parafras comput set atom imag describ side effect procedur like origin version regular section describ callahan thesi record subscript express linear loop induct variabl along bound induct variabl refer linear subscript express triangular iter space precis repres keep separ atom imag refer expens translat intersect list atom imag high price pay precis convert atom imag summari method would produc someth similar regular section describ below summari section precis method describ expens allow arbitrarili larg represent procedur access set extra inform may use practic simpl array access pattern probabl common other avoid expens intersect translat oper descriptor size independ number refer summa rize oper descriptor linear or worst quadrat rank array research rice defin sever variant regular section repres common access pattern satisfi constraint origin regular section callahan thesi propos two regular section framework first resembl li yew atom imag dismiss due difficulti devis effici standard meet oper restrict regular section second framework restrict regular section limit access pattern subscript ffl procedureinvari express with constant procedur input ffl unknown and assum vari entir rang dimens ffl unknown diagon one subscript restrict section effici descriptor size linear number subscript meet oper quadrat becaus diagon intersect oper linear howev lose much precis omit bound inform origin thought limit necessari effici handl recurs program li yew adapt iter techniqu work gener descriptor bound regular section anticip restrict regular section would precis enough effect parallel callahan kennedi propos implement regular section bound project subject paper regular section implement includ bound stride inform omit diagon constraint result analysi therefor less precis represent convex region triolet region data access descriptor describ below howev first interprocedur summari implement stride inform provid increas precis nonconvex region size bound regular section descriptor time requir meet oper linear number subscript intersect implement use standard depend test also take time proport number subscript data access descriptor concurr implement balasundaram kennedi develop data access descriptor dad gener techniqu describ data access dad repres inform shape array access travers comparison interest shape simpl section part dad repres convex region similar triolet et al except boundari constrain parallel one coordin axi ffi angl two axe stride inform repres anoth part dad data access descriptor probabl precis summari method implement reason effici repres like rectangular diagon trian gular trapezoid access size time requir meet intersect analysi ignor greatest common divisor comput use merg intersect section stride take time proport valu stride complex quadrat number subscript which reason given array subscript bound section implement less expens less precis dad implement extend comput dad addit precis prove use bound section rang bound regular section compris set rectangular subarray written use triplet notat propos fortran standard repres spars region stripe grid dens region column row block n express rang size rang size finit rang unknown figur lattic regular section subscript represent descriptor bound regular section vector element subscript lattic figur lattic element includ ffl invari express contain constant symbol repres valu paramet global variabl entri procedur ffl rang give invari express lower bound upper bound stride variant subscript ffl indic knowledg subscript valu rang may construct sequenc meet oper common case read directli bound loop induct variabl use subscript sinc constraint subscript maintain merg two regular section array rank requir independ invoc subscript meet oper test intersect two section singl invoc standard ddimension depend test translat formal paramet section one actual paramet also od oper where larger two rank oper rang rang typic built repres valu loop induct variabl follow loop enddo repres valu l l u often refer lower upper bound respect role revers neg produc standard lower toupper bound form know l u oper describ detail algorithm standard may caus loss inform therefor postpon standard requir oper merg two section begin diff constant signdiff sign return empti rang direct absdiff mod abss els diff constant direct signdiff els constant direct sign els return select direct perfect returnu select end algorithm standard rang lowerboundfirst form express rang convert rang exampl i loop repres l invari express accur ad multipli rang algorithm construct approxim sum rang rang merg find lowest lower bound highest upper bound correct stride express merg rang anoth express treat rang lower bound equal upper bound algorithm thu comput result interest subscript express contain refer scalar paramet global variabl repres symbol express global valu number may test equal standard merg oper procedur construct symbol subscript express accumul initi regular section knowledg interprocedur effect precis analysi depend function build range begin e leaf express constant formal global valu return subexpress e replac build rang select form e l u returnl l l otherwis return select end algorithm move rang top level express record question side effect answer result interprocedur analys avail symbol analysi construct regular section requir calcul symbol express variabl use subscript mani publish algorithm perform symbol analysi global valu number preliminari transform complex make difficult integr pfc implement build global valu number help pfc exist dataflow analysi machineri leaf valu number constant global paramet valu avail procedur entri build valu number express recurs obtain valu number subexpress reach definit valu number reach refer along differ defus edg merg either merg occurr unknown oper creat unknown valu whole express lower induct variabl recogn defin loop header replac induct rang auxiliari induct variabl current identifi exampl consid follow code fragment function mergea b begin rang let l u els let l u b rang let l b els let l b ab return return l els els returnl end algorithm merg express rang dimens an enddo return end dataflow analysi construct defus edg subroutin entri use n m loop use i therefor simpl comput subscript as regular section convert rang name n actual replac formal paramet indic note express nonlinear local analysi may becom linear later phase especi constant propag avoid compil depend construct accur valu number requir knowledg effect call site scalar variabl howev use interprocedur analysi determin effect costli program support system use interprocedur analysi must examin procedur least twice gather inform propag procedur use result propag depend analysi andor transform precomput local inform construct interprocedur propag phase iter call graph without addit direct examin procedur achiev minim number pass interprocedur analys must gather local inform one pass without benefit other interprocedur solut howev build precis local regular section need inform side effect call scalar use subscript follow code fragment must assum modifi unknown valu unless proven otherwis dimens an return end achiev precis without ad separ local analysi phase regular section build regular section subscript side effect occur annot subscript express hazard side effect would invalid it thu record am modifi sole paramet clobber hazard m interprocedur phase produc classic scalar side effect solut propag regular section check see clobber may chang m so chang ss array side effect a similar techniqu proven success interprocedur constant propag pfc hazard must record scalar express save use regular section analysi scalar actual paramet global call site well array subscript merg two express rang take union hazard set build summari regular section machineri place use mod regular section local effect procedur construct easili one pass procedur examin refer strictli true system comput summari inform use mod context inform alia make one pass pfc ir n parascop system perform summari context analysi well constant propag therefor requir least two pass formal paramet global static array symbol analyz provid valu number subscript demand result vector regular section section individu refer construct immedi merg appropri cumul section discard interprocedur propag regular section formal paramet translat section actual paramet travers edg call graph translat section merg summari regular section caller requir anoth translat propag step chang summari extend implement recurs program termin must bound number time chang occur translat call context analyz pascal array map referenc section formal paramet array one correspond actual paramet would simpl would need replac formal paramet subscript valu formal section correspond actual paramet valu copi result subscript valu new section howev fortran provid guarante formal paramet array shape actual paramet even array common block declar shape everi procedur therefor describ effect call procedur caller must translat referenc section accord way array reshap easiest translat method would linear subscript referenc section formal paramet ad offset pass locat actual paramet result section would give referenc locat actual onedimension array howev subscript origin section rang nonlinear express linear contamin subscript greatli reduc precis depend anal ysi reason forego linear translat significantli reshap dimens algorithm show one method translat summari section formal paramet f function translatebound f ref f bound pass begin ref consist ref els rankf consist ref els ref els replac scalar formal paramet bound f ref f correspond actual paramet bound lobound f i pass i lobound f i pass i consist ref els strideref lobound i delinear possibl fit bound i assum fit ref els ref end end algorithm translat summari section section correspond actual paramet a translat proce left right dimens precis dimens encount formal actual paramet inconsist have differ size nonzero offset first inconsist dimens also translat precis last dimens f referenc section subscript valu fit bound a delinear implement may use recogn refer f column stride column size correspond row refer a treatment recurs current implement handl nonrecurs fortran therefor suffici proceed revers invoc order call graph translat section leaf procedur caller final summari regular section built order incomplet regular section need never translat call site howev propos fortran standard allow recurs plan extens reimplement handl it unfortun straightforward iter approach propag regular section termin sinc lattic unbound depth li yew cooper kennedi describ approach propag subarray effici regardless depth lattic howev may conveni implement simpl iter techniqu simul boundeddepth lattic maintain counter summari regular section array procedur limit number time allow section becom larger lower lattic go best way keep one small counter eg two bit per subscript variant subscript go quickli leav precis subscript unaffect limit subscript lower subscript lattic k time array rank effect lattic depth kd sinc summari regular section lower okd time associ call site affect okdv time each time involv od merg v number referenc global paramet variabl worst case requir okd ve subscript merg translat oper e number edg call graph techniqu allow us use lattic bound inform keep time complex compar obtain restrict regular section lattic experiment result precis effici util regular section analysi must demonstr experi real program current candid real program linpack librari linear algebra subroutin rice compil evalu program suit perfect club benchmark ran program regular section analysi depend analysi pfc examin result depend graph hand parascop editor interact depend browser program transform linpack analysi linpack provid basi comparison method analyz interprocedur array side effect li yew triolet found sever parallel call linpack use implement univers illinoi translat parafras linpack prove use numer code written modular program style parallel call detect ricep rice compil evalu program suit collect complet applic code broad rang scientif disciplin colleagu rice alreadi run sever experi ricep porterfield model cach perform use adapt version pfc goff kennedi tseng studi perform depend test ricep benchmark ricep ricep candid code also examin studi util inlin expans procedur call six program studi two ricep code linpackd track four code inlin studi perfect club benchmark suit origin collect benchmark perform supercomput complet applic hope test perform implement program delay receiv prevent us obtain preliminari result paper precis precis regular section correspond true access set larg function program style analyz linpack written style use mani call bla basic linear algebra subroutin whose true access set precis regular section determin true access set subroutin ricep six program analyz dogleg linpackd actual call linpack exhibit linpack code style exist regular section precis describ effect bla local analysi unabl construct complic control flow chang bla elimin unrol loop condit comput valu use subscript express implement abl build minim regular section precis repres true access set modifi dscal exampl look follow doubl precis da dx n le enddo return end obtain precis symbol inform problem method describ array side effect triolet made similar chang bla li yew avoid first perform interprocedur constant propag fundament natur problem indic desir clearer fortran program style sophist handl control flow such describ section effici measur total time taken pfc analyz six ricep program pars local analysi interprocedur propag depend analysi includ execut time tabl compar analysi time requir use classic interprocedur summari analysi alon ip onli use summari analysi regular section analysi combin ip rs program ip ip name line proc rs chang efi euler vortex track dogleg linpackd total tabl analysi time second pfc ibm d abl run perfect program pfc yet obtain reliabl time recentlyupgrad ibm system rice present time depend analysi interprocedur inform perform less analysi loop call site discount advantag time taken classic summari analysi seem less percent time timeconsum part ad code local symbol analysi subscript valu includ invoc dataflow analysi symbol analysi would improv practic entir method overal addit analysi time compar requir analyz program heuristicallydetermin inlin expans cooper hall torczon studi seen publish execut time array side effect analys implement parafras triolet li yew except li yew state method run time faster triolet experi run linpack would particularli interest know method would perform complet applic util chose three measur util ffl reduc number depend depend refer ffl increas number call parallel loop reduc parallel execut time reduc depend tabl compar depend graph produc use classic interprocedur summari analysi alon ip summari analysi plu regular section analysi array dep call loop depend loop carri loop independ sourc ip rs efi euler vortex track dogleg linpackd ricep linpack tabl effect regular section analysi depend rs linpack analyz without interprocedur constant propag sinc librari routin may call vari array size first set three column give size depend graph produc pfc count true anti output depend edg scalar array refer loop includ refer call site set column count depend incid array refer call site loop separ count loopcarri loopindepend depend preliminari result eight perfect benchmark indic reduct percent total size depend graph parallel call tabl examin number call linpack parallel summari interprocedur analysi alon ip li yew analysi regular section analysi rs triolet result parafras resembl li yew call site parallel parascop base pfc depend graph transform necessari eight parallel call site detect summari interprocedur analysi alon appar parascop exploit parallel requir variant statement split yet support star entri indic parallel call precis summar regular section analysi detect parallel due defici pfc symbol depend test triangular loop one call qrdc mistakenli parallel parafras result indic least linpack benefit gener triolet li yew method regular section analysi obtain exactli precis differ number loop parallel differ depend analysi transform improv execut time two call ricep program parallel one dogleg one linpackd major comput loop linpackd dgefa dogleg depend graph result interprocedur analysi compar sinc call parallel depend collaps conserv space section yet propag array common block defici probabl result depend larger program routin call parallel call name loop ip liyew rs deltagbco deltageco deltapbco deltapoco deltappco deltatrco deltagedi deltapodi deltaqrdc deltasidi deltasifa deltasvdc deltatrdi tabl parallel linpack dqrdc run linpackd processor one call parallel enough speed execut factor five sequenti execut sequent symmetri rice experi improv parallel execut time await acquisit fortran code written appropri style futur work experi requir fulli evalu perform regular section analysi complet applic find new area improv base studi conduct far extens provid better handl condit flowsensit side effect seem promis condit symbol analysi consid follow exampl deriv bla doubl precis da dx enddo return end two comput initi valu ix correspond differ rang subscript turn repres merg oper produc precis result requir understand control condit express comput inlin studi rice none commerci compil abl detect parallel call dogleg even inlin presum due complic control flow kill regular section alreadi found program scalgam euler abil recogn local temporari array would cut number depend dramat allow call parallel could recogn interprocedur temporari array determin entir array guarante modifi use procedur flowsensit problem therefor expens solv gener even limit implement abl catch initi mani temporari subscript lattic kill section one use use mod section howev sinc kill analysi must produc underestim affect region order conserv lattic need invert addit approach requir intraprocedur depend analysi capabl use array kill inform describ rosen gross steenkist conclus regular section analysi practic addit product compil local analysi interprocedur propag integr interprocedur techniqu requir chang depend analysi trivialth one need support fortran section experi demonstr regular section analysi effect mean discov parallel given program written appropri modular program style style benefit advanc analysi way exampl keep procedur small simplifi intern control flow techniqu well program written style minim use procedur call compens lack interprocedur analysi compil compil must reward modular program style fast execut time take hold among computationintens user supercomput long run make program easier writer automat analyz understand acknowledg would like thank colleagu pfc parascop project made research possibl thank david callahan contribut regular section analysi kathryn c kinley mari hall review critiqu paper r analysi interprocedur side effect parallel program environ global approach detect parallel pfc program convert fortran parallel form interact parallel program use parascop editor an implement interprocedur analysi vector fortran compil interprocedur constant propag a catalogu optim transform an experi inlin substitut abstract interpret unifi lattic model static analysi program construct approxim fixpoint semant foundat program analysi interprocedur analysi program restructur parallel pro gram program parallel interprocedur analysi method determin side effect procedur call an interprocedur data flow analysi algorithm effici comput flow insensit interprocedur summari inform interprocedur sideeffect analysi linear time direct parallel call statement interprocedur analysi program restructur parafras a direct parallel call statement review interprocedur depend analysi parallel effici interprocedur analysi program parallel re structur interact parallel numer scientif program a techniqu summar data access use parallel enhanc transform a mechan keep use intern inform parallel program tool data access descriptor xj subcommitte ansi affin relationship among variabl program symbol program analysi almostlinear time global valu number redund com putat compil analysi valu rang variabl the impact interprocedur analysi optim ir n program environ compil depend ambiti optim compil philadelphia siam public supercomput perform evalu perfect benchmark softwar method improv cach perform supercomput applic practic depend test privat commun increment depend analysi structur dataflow analysi array use optim compil tr impact interprocedur analysi optim rsupnsup program environ interprocedur constant propag interprocedur depend analysi parallel direct parallel call statement global approach detect parallel analysi interprocedur side effect parallel program environ interprocedur sideeffect analysi linear time effici interprocedur analysi program parallel restructur global valu number redund comput techniqu summar data access use parallel enhanc transform mechan keep use intern inform parallel program tool data access descriptor structur dataflow analysi array use optim complier practic depend test supercomput perform evalu perfect benchmark effici comput flow insensit interprocedur summari inform interprocedur data flow analysi algorithm abstract interpret interact parallel program use parascop editor method determin side effect procedur call compil depend ambiti optim compil interprocedur recompil interact parallel numer scientif program softwar method improv cach perform supercomput applic increment depend analysi ctr peiyi tang exact side effect interprocedur depend analysi proceed th intern confer supercomput p juli tokyo japan donald g morri david k lowenth accur data redistribut cost estim softwar distribut share memori system acm sigplan notic v n p juli m jimnez j m llabera a fernndez e morancho gener algorithm tile regist level proceed th intern confer supercomput p juli melbourn australia s carr k kennedi compil blockabl numer algorithm proceed acmiee confer supercomput p novemb minneapoli minnesota unit state d brent weatherli david k lowenth mario nakazawa franklin lowenth dynmpi support mpi non dedic cluster proceed acmiee confer supercomput p novemb linda burton william hatchett mari hobkirk charl powel use high perform gi softwar visual data handson softwar demonstr proceed acmiee confer supercomput cdrom p novemb san jose ca helen park alisa chapman propos preservic student technolog compet proceed acmiee confer supercomput cdrom p novemb san jose ca compil techniqu blockcycl distribut proceed th intern confer supercomput p juli manchest england kathryn s mckinley evalu automat parallel effici execut sharedmemori multiprocessor proceed th intern confer supercomput p juli manchest england umit rencuzogullari sandhya dwardada dynam adapt avail resourc parallel comput autonom network workstat acm sigplan notic v n p juli craig chase kay crowley joel saltz anthoni reev compil runtim support irregularli coupl regular mesh proceed th intern confer supercomput p juli washington d c unit state r veldema r f h hofman r a f bhoedjang c j h jacob h e bal sourcelevel global optim finegrain distribut share memori system acm sigplan notic v n p juli g agraw a sussman j saltz compil runtim support structur block structur applic proceed acmiee confer supercomput p decemb portland oregon unit state honghui lu alan l cox sandhya dwarkada ramakrishnan rajamoni willi zwaenepoel compil softwar distribut share memori support irregular applic acm sigplan notic v n p juli tor e jeremiassen susan j egger static analysi barrier synchron explicitli parallel program proceed ifip wg work confer parallel architectur compil techniqu p august mari w hall ken kennedi effici call graph analysi acm letter program languag system lopla v n p sept jae bum lee chu shik jhon reduc coher overhead barrier synchron softwar dsm proceed acmiee confer supercomput cdrom p novemb san jose ca keith d cooper ken kennedi interprocedur sideeffect analysi linear time acm sigplan notic v n april sotiri ioannidi umit rencuzogullari robert stet sandhya dwarkada craulcolon compil runtim integr adapt loadthi work support part nsf grant cda ccr ccrsemi extern research grant compaq scientif program v n p august jay p hoefling yunheung paek kwang yi unifi interprocedur parallel detect intern journal parallel program v n p april radu rugina martin rinard automat parallel divid conquer algorithm acm sigplan notic v n p aug jaydeep marath frank mueller tushar mohan broni r de supinski salli a mckee andi yoo metric track ineffici memori hierarchi via binari rewrit proceed intern symposium code gener optim feedbackdirect runtim optim march san francisco california sandhya dwarkada alan l cox willi zwaenepoel integr compiletimeruntim softwar distribut share memori system acm sigplan notic v n p sept junji gu zhiyuan li gyungho lee experi effici array data flow analysi array privat acm sigplan notic v n p juli mari h hall saman p amarasingh brian r murphi shihwei liao monica s lam detect coarsegrain parallel use interprocedur parallel compil proceed acmiee confer supercomput cdrom pe decemb san diego california unit state satish chandra jame r laru optim commun hpf program finegrain distribut share memori acm sigplan notic v n p juli compil optim fortran mimd distributedmemori machin proceed acmiee confer supercomput p novemb albuquerqu new mexico unit state dhruva r chakrabarti prithviraj banerje global optim techniqu automat parallel hybrid applic proceed th intern confer supercomput p june sorrento itali chen ding ken kennedi improv cach perform dynam applic data comput reorgan run time acm sigplan notic v n p may compil fortran mimd distributedmemori machin commun acm v n p aug arun chauhan ken kennedi reduc vector procedur telescop languag intern journal parallel program v n p august d brent weatherli david k lowenth mario nakazawa franklin lowenth dynmpi support mpi mediumscal nonded cluster journal parallel distribut comput v n p june saman p amarasingh monica s lam commun optim code gener distribut memori machin acm sigplan notic v n p june exploit cach affin softwar cach coher proceed th intern confer supercomput p juli manchest england jaydeep marath frank mueller tushar mohan salli a mckee broni r de supinski andi yoo metric memori trace via dynam binari rewrit identifi cach ineffici acm transact program languag system topla v n pe april tor e jeremiassen susan j egger reduc fals share share memori multiprocessor compil time data transform acm sigplan notic v n p aug yunheung paek jay hoefling david padua effici precis array access analysi acm transact program languag system topla v n p januari junji gu zhiyuan li gyungho lee symbol array dataflow analysi array privat program parallel proceed acmiee confer supercomput cdrom pe decemb san diego california unit state y paek a navarro e zapata j hoefling d padua advanc compil framework noncachecoher multiprocessor ieee transact parallel distribut system v n p march manish gupta edith schonberg harini srinivasan unifi framework optim commun dataparallel program ieee transact parallel distribut system v n p juli radu rugina martin rinard symbol bound analysi pointer array indic access memori region acm sigplan notic v n p may evalu compil optim fortran mimd distribut memori machin proceed th intern confer supercomput p juli washington d c unit state arun chauhan ken kennedi optim strategi telescop languag procedur strength reduct procedur vector proceed th intern confer supercomput p june sorrento itali ayon basumallik rudolf eigenmann optim irregular sharedmemori applic distributedmemori system proceed eleventh acm sigplan symposium principl practic parallel program march new york new york usa ayon basumallik rudolf eigenmann toward automat translat openmp mpi proceed th annual intern confer supercomput june cambridg massachusett m w hall s hiranandani k kennedi cw tseng interprocedur compil fortran mimd distributedmemori machin proceed acmiee confer supercomput p novemb minneapoli minnesota unit state steve carr r b lehoucq compil blockabl dens matrix factor acm transact mathemat softwar tom v n p sept victor delaluz mahmut kandemir n vijaykrishnan anand sivasubramaniam mari jane irwin hardwar softwar techniqu control dram power mode ieee transact comput v n p novemb kathryn s mckinley compil optim algorithm sharedmemori multiprocessor ieee transact parallel distribut system v n p august dhruva r chakrabarti prithviraj banerje static singl assign form messagepass program intern journal parallel program v n p april junji gu zhiyuan li effici interprocedur array dataflow analysi automat program parallel ieee transact softwar engin v n p march mari w hall timothi j harvey ken kennedi nathaniel mcintosh kathryn s mckinley jeffrey d oldham michael h paleczni gerald roth experi use parascop editor interact parallel program tool acm sigplan notic v n p juli chen ding ken kennedi improv effect bandwidth compil enhanc global cach reus journal parallel distribut comput v n p januari manish gupta sayak mukhopadhyay navin sinha automat parallel recurs procedur intern journal parallel program v n p decemb ken kennedi kathryn s mckinley chauwen tseng analysi transform parascop editor proceed th intern confer supercomput p june cologn west germani radu rugina martin c rinard symbol bound analysi pointer array indic access memori region acm transact program languag system topla v n p march mari w hall saman p amarasingh brian r murphi shihwei liao monica s lam interprocedur parallel analysi suif acm transact program languag system topla v n p juli mohammad r haghighat constantin d polychronopoulo symbol analysi parallel compil acm transact program languag system topla v n p juli