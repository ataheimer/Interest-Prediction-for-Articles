t parallel data cube a paper present gener methodolog effici parallel exist data cube construct algorithm describ two differ partit strategi one topdown one bottomup cube algorithm partit strategi assign subcub individu processor way load assign processor balanc method reduc inter processor commun overhead partit load advanc instead comput individu groupbi parallel partit strategi creat small number coars task allow share prefix sort order differ groupbi comput method enabl code reus permit use exist sequenti extern memori data cube algorithm subcub comput processor support transfer optim sequenti data cube code parallel settingth bottomup partit strategi balanc number singl attribut extern memori sort made processor topdown strategi partit weight tree weight reflect algorithm specif cost measur like estim groupbi size partit approach implement share disk type parallel machin compos p processor connect via interconnect fabric access share parallel disk arrayw implement parallel topdown data cube construct method c mpi messag pass librari commun leda librari requir graph algorithm test code eight processor cluster use varieti differ data set rang size dimens densiti skew comparison test perform sunfir test show partit strategi gener close optim load balanc processor actual run time observ show optim speedup p b figur dimension lattic aggreg distinct combin ab groupbi child parent groupbi child comput parent aggreg attribut parentchild relationship allow algorithm share partit sort partial sort differ groupbuy exampl data sort respect ab cuboid groupbi gener ab without sort gener abc requir sort block entri cube algorithm differ make use common bottomup approach reus previous comput sort order gener detail groupbuy less detail one a less detail groupbi contain subset attribut topdown approach use detail groupbi comput less detail one bottomup approach better suit spars rela tion relat r spars n much smaller number possibl valu given ddimension space present differ partit load balanc approach depend whether topdown bottomup sequenti cube algorithm use conclud section brief discuss underli parallel model standard share disk parallel machin model is assum p processor connect via interconnect fabric processor typic workstat size local memori concurr access share disk array purpos parallel algorithm design use coars grain multicomput cgm model precis use emcgm model multiprocessor version vitter parallel model parallel data cube construct method assum ddimension input data set r size n store share disk array output ie groupbi compris data cube written share disk array subsequ applic may impos requir output exampl visual applic may requir store groupbi stripe format entir disk array support fast access individu groupbi parallel bottomup data cube construct bottomup data cube construct method calcul groupbi order emphas reus previous comput sort gener detail groupbuy less detail one bottomup method well suit spars relat support select comput block groupbi eg gener block specifi userden aggreg condit previou bottomup method includ buc partitioncub part main idea underli bottomup method captur follow data previous sort attribut a creat ab sort order requir complet resort local resort ablock block consecut element attribut use instead sort ablock often perform local memori henc instead anoth extern memori sort ab order creat one singl scan disk bottomup method attempt break problem sequenc singl attribut sort share prex attribut perform local memori singl disk scan outlin total comput time method domin number singl attribut sort section describ partit groupbi comput p independ subproblem partit gener subproblem process efcient bottomup sequenti cube method goal partit balanc number singl attribut sort requir subproblem ensur subproblem overlap sort sequenc way sequenti method therebi avoid addit work let aad attribut relat r assum aa ad ai number differ possibl valu attribut ai observ set groupsbi data cube partit contain contain a partit approach groupsbi contain sort a indic say contain prex groupbi contain ie project out contain postx recurs scheme remain attribut shall util properti partit comput groupbi independ subproblem load subproblem balanc overlap sort sequenc way sequenti method follow give detail partit method let x y z sequenc attribut repres sort order let arbitrari singl attribut introduc follow denit set attribut sequenc repres sort order and respect groupbi entir data cube construct correspond set sd ad sort order respect groupbi dimens data cube refer rank si set sd ad union two subset these turn figur partit dimension data cube attribut a b c d sset correspond groupbuy determin four attribut union four subset rank sda a ad sda ad a sda ad a sd ad a complet exampl dimension data cube attribut a b c shown gure sake simplifi discuss assum p power consid psset rank p set order dene eq dene partit assign set summar algorithm algorithm parallel bottomup cube construct processor pi p perform follow step independ parallel determin two set form describ below comput groupbi use sequenti externalmemori bottomup cube construct method end algorithm illustr partit use exampl valu gener sset rank give indic attribut a a a figur set assign processor repres projectedout attribut repres exist attribut awehav processor assign comput groupbi shown gure everi processor access copi relat r processor perform attribut sort gener data order need groupbi one copi r readconict avoid sort sequenc use binomi heap broadcast pattern result everi processor pi receiv two sort sequenc form time need singl attribut sort figur show sequenc sort processor exampl index insid circl indic processor assign ie processor perform total four singl attribut sort origin relat r start sort attribut a use binomi heap properti follow processor k singl attribut sort p sort sequenc avail time need figur binomi heap structur gener p gammaset without read conict algorithm easili gener valu p power also note algorithm requir p d usual case practic howev parallel algorithm need larger valu p partit strategi need augment augment could exampl partit strategi base number data item particular attribut would appli partit base number attribut done sinc rang p d cover current need respect machin dimens size discuss augment paper follow four properti summar main featur algorithm make load balanc commun efcient comput groupbi assign uniqu processor calcul groupbi assign processor pi requir number singl attribut sort sort perform processor pi share prex attribut way perform disk scan manner algorithm requir interprocessor commun parallel topdown data cube construct topdown approach comput data cube like sequenti pipesort pipe hash overlap method use detail groupbi comput less detail one contain subset attribut former appli data set number data item groupbi shrink consider number attribut decreas data reduct pipesort pipehash overlap method select span tree lattic root groupbi contain attribut pipesort consid two case parentchild relationship order attribut child prex order attribut parent eg abcd abc simpl scan sufcient creat child parent otherwis sort requir creat child pipesort seek minim total comput cost comput minimum cost match success layer lattic pipehash use hash tabl instead sort overlap attempt reduc sort time util fact overlap sort order alway requir complet new sort exampl abc groupbi partit sort independ c produc ac sort order may permit independ sort memori rather alway use extern memori sort next outlin partit approach gener p independ subproblem solv one processor use exist externalmemori topdown cube algorithm rst step algorithm determin span tree lattic use one exist approach like pipesort pipehash overlap respect balanc load differ processor next perform storag estim determin approxim size groupbi done exampl use method describ work weight tree crucial part solut partit tree partit subtre induc partit data cube problem p subproblem subset groupbi determin optim partit weight tree easili shown npcomplet problem by make exampl reduct processor schedul sinc weight tree repres estim heurist approach gener p subproblem some control size subproblem hold promis want size p subproblem balanc also want minim number subtre assign processor everi subtre may requir scan entir data set r thu mani subtre result poor io perform solut develop balanc two consider heurist make use relat partit problem tree efcient algorithm exist minmax tree kpartit problem dene follow given tree n vertic posit weight assign vertex delet k edg tree largest total weight result subtre minim minmax tree kpartit problem studi method assum weight xed note that partit problem differ that cut subtre addit cost introduc groupbi associ root must comput scratch separ sort henc cut weight root increas accordingli adapt algorithm account chang weight requir algorithm base pebbl shift scheme k pebbl shift tree root toward leav determin cut made adapt version cut made cost parent new partit adjust reect cost addit sort origin cost save hash tabl possibl futur use sinc cut move mani time reach nal posit remaind shall refer method modi minmax tree kpartit howev even perfect minmax kpartit necessarili result partit subtre equal size address tradeoff aris number subtre assign processor use treepartit initi step partit achiev better distribut load appli partit strategi instead partit tree p subtre partit p subtre integ then use pack heurist determin subtre belong processor assign subtre everi processor pack heurist consid weight subtre pair subtre weight control number subtre consist match phase p largest subtre or group subtre p smallest subtre or group subtre match up detail describ step b algorithm algorithm sequenti treepartitiont s p inputaspanningtre ofthelatticewithpositiveweightsassignedtothenodesrepres ing cost build node ancestor integ paramet oversampl ratio p number processor output partit p subset p subtre each comput modi minmax tree ppartit p subtre t tsp dehn et al distributesubtre ttsp amongth p subsetsp subtreespersubset follow a creat p set tree name i sp initi i ti weight i dene total weight tree i b sort set weight increas order wlog let spjp result sequenc end algorithm tree partit algorithm embed parallel topdown data cube construct algorithm method provid framework parallel sequenti topdown data cube algorithm outlin approach given follow algorithm algorithm parallel topdown cube construct processor pi i p perform follow step independ parallel appli storag estim method determin approxim size groupbi select sequenti topdown cube construct method eg pipesort pipe hashoroverlap comput span tree lattic use method comput weight node estim cost build node ancestor execut algorithm treepartitiont s p shown abov creat p set p set contain subtre comput groupbi subset use sequenti topdown cube construct method chosen step end algorithm perform result describ section show partit achiev good result respect balanc load assign processor import result sinc small valu crucial optim perform parallel arraybas data cube construct method section easili modi obtain efcient parallel arraycub method present arraycub method aim dens data cube structur raw data set ddimension array store disk sequenc chunk chunk way divid ddimension array small size ddimension chunk chunk portion contain data set ts disk block xed sequenc chunk store disk calcul groupbi requir certain amount buffer space arraycub method calcul minimum memori span tree groupbi mmst span tree lattic total amount buffer space requir minim total number disk scan requir comput groupbi total amount buffer space requir divid memori space avail arraycub method therefor parallel simpli appli algorithm mmst experiment perform analysi implement test parallel topdown data cube construct method present section implement sequenti pipesort c parallel topdown data cube construct method section c mpi requir graph algorithm well data structur like hash tabl graph representa tion drawn leda librari still implement took one person year full time work chose implement parallel topdown data cube construct method rather parallel bottomup data cube construct method former tunabl paramet wish explor primari parallel hardwar platform use pc cluster consist frontend machin eight processor frontend machin use partit lattic distribut work among processor frontend machin ibm netniti server two gb scsi disk mb ram mhz pentium processor processor mhz pentium g ide hard drive mb ram except one processor mhz pentium processor run linux connect via mbit fast ethernet switch full wire speed port clearli low end older hardwar platform experi report remaind section repres sever week hrday test pc cluster platform describ advantag avail exclus experi without user disturb measur main goal studi speedup obtain parallel method rather absolut time platform prove sufcient verifi result also hold newer machin faster processor memori per processor higher bandwidth port code sunfir perform comparison test data set sunfir use recent sun multiprocessor sun ultrasparc iii mhz processor run solari gb ram sun share disk figur show pc cluster run time observ function number processor use data set measur sequenti time sequenti pipesort parallel time obtain parallel topdown data cube construct method section use oversampl ratio data set consist record dimens test data valu uniformli distribut valu dimens figur show run time algorithm increas number processor three curv shown runtim curv show time taken slowest processor ie processor receiv largest workload second curv show averag time taken processor time taken frontend machin partit lattic distribut work among comput node figur pc cluster run time second function number processor fix paramet data experi per data point insignic theoret optimum curv shown gure sequenti pipesort time divid number processor use observ runtim obtain code theoret optimum essenti ident is oversampl ratio optim speedup p observ the anomali runtim curv due slower mhz pentium processor interestingli averag time curv alway theoret optimum curv even runtim curv sometim theoret optimum curv one would expect runtim curv would alway theoret optimum curv believ superlinear speedup caus anoth effect benet parallel method improv io sequenti pipesort appli dimension data set lattic partit pipe length order process pipe length pipesort need write open le time appear linux number open le consider impact perform record write le took second system write le took second write le took second benet parallel method sinc partit lattic rst appli pipesort part therefor pipe gener parallel method consider shorter order verifi result also hold newer machin faster processor memori per processor higher bandwidth port code sunfir perform comparison test data set figur show run time observ sunfir absolut run time observ consider faster expect sunfir approxim time faster pc cluster figur sunfir run time second function number processor data set gure importantli shape curv essenti pc cluster runtim slowest proc averag time curv similar close theoret optimum curv is oversampl ratio optim speedup p also observ sunfir larger sunfir instal also allow us test code larger number processor shown gure still obtain optim speedup p use processor dataset figur show pc cluster run time topdown data cube parallel increas data size row main observ parallel runtim increas slightli linear respect data size consist fact sort requir time on log n figur show parallel topdown data cube construct method scale grace respect data size figur show pc cluster run time function oversampl ratio s observ that test case parallel runtim ie time taken slowest processor best due follow tradeoff clearli workload balanc improv increas howev total number subtre p gener tree partit algorithm increas need perform sort root node subtre optim tradeoff point test case import note oversampl ratio tunabl paramet best valu depend number factor experi show issufci load balanc howev data set grow size time sort root node subtre increas linear wherea effect imbal linear substanti larger data set eg g row expect optim valu figur show pc cluster run time topdown data cube parallel increas dimens data set note that number groupbi must comput grow exponenti respect dimens data set gure observ parallel run time grow essenti linear respect dehn et al figur pc cluster run time second function data size fix paramet number experi per data point figur pc cluster run time second function oversampl ratio s fix paramet data row number processor dimens experi per data point figur pc cluster run time second function number dimens fix paramet data row number processor experi per data point note work grow exponenti respect number dimens output size also tri code high dimension data size output becom extrem larg exampl execut parallel algorithm dimension data set row result data cube size g figur show pc cluster run time topdown data cube parallel increas cardin dimens number differ possibl data figur pc cluster run time second function cardin ie number differ possibl data valu dimens fix paramet data size row number processor dimens dehn et al figur pc cluster run time second function skew data valu dimens base zipf fix paramet data size row number processor dimens experi per data point valu dimens recal that topdown pipesort aim dens data cube experi perform cardin level possibl valu per dimens result shown gure conrm expect method perform better denser data figur show pc cluster run time topdown data cube parallel data set skew distribut use standard zipf distribut dimens data reduct topdown pipesort increas skew total time observ expect decreas skew exactli observ gure main concern regard parallel method balanc partit tree would presenc skew main observ gure rel differ runtim slowest processor averag time increas increas skew appear indic partit method robust presenc skew comparison previou result section summar previou result parallel data cube comput compar result present paper author observ groupbi comput essenti parallel prex implement method mention experiment perform evalu present method creat larg commun overhead like show unsatisfactori speedup method well method present paper reduc commun overhead partit load assign set groupbi comput individu processor discuss balanc load assign differ processor hard problem approach use simpl greedi heurist parallel hashbas data cube comput observ simpl method scalabl load balanc speedup satisfactori processor subsequ paper group focus overlap multipl data cube comput sequenti set approach consid parallel sortbas data cube construct studi parallel bottomup icebergcub comput four differ method present rp rpp asl pt experiment result present indic asl pt better perform among four main reason rp rpp show weak load balanc pt somewhat similar parallel bottomup data cube construct method present section sinc pt also partit bottomup tree howev pt partit bottomup tree simpli subtre equal number node requir consider task processor obtain good load balanc observ larger number task requir perform problem aris approach reduc possibl share prex sort order differ groupbi comput contrast parallel bottomup method section assign two task processor task coars grain greatli improv share prex sort order differ groupbi comput therefor expect method decreas perform larger number processor observ asl method use parallel topdown approach use skiplist maintain cell groupbi asl parallel make construct groupbi separ task hope larg number task creat good overal load balanc use simpl greedi approach assign task processor similar again observ larg number task bring perform problem reduc possibl share prex sort order differ groupbi comput contrast parallel topdown method section creat coars task precis algorithm assign task subtre processor oversampl ratio shown section oversampl ratio issufci obtain good load balanc sens method answer open question obtain good load balanc without creat mani task also clearli reect experiment perform method comparison experi report observ experi gure indic asl obtain essenti zero speedup number processor increas contrast experi gure section show parallel topdown method section still doubl speed number processor increas obtain optim speedup p use processor conclus futur work present two differ partit base data cube parallel standard share disk type parallel machin partit strategi bottomup topdown data dehn et al cube parallel balanc load assign individu processor load measur dene origin propon respect sequenti method subcub comput carri use exist sequenti data cube algorithm topdown partit strategi also easili extend parallel arraycub method experiment result indic partit method efcient practic compar exist parallel data cube method parallel approach bring signic reduct interprocessor commun import practic benet enabl reus exist sequenti data cube code possibl extens data cube parallel method consid share noth parallel machin model possibl store duplic input data set r oneachprocessorsdiskthenourmethodcanbeeasilyadaptedforsuchanarchitecturethi clearli alway possibl solv case total output size consider larger input data set exampl spars data cube comput data cube sever hundr time larg r sufcient total disk space necessari store output as one singl copi distribut differ disk p time duplic r may smaller output data cube parallel method would partit problem way describ section subcub comput would assign processor way well comput subcub processor would read r local disk output two altern processor could simpli write subcub gener local disk could howev creat bottleneck is exampl visual applic follow data cube construct need read singl groupbi case groupbi distribut disk exampl stripe format obtain data distribut processor would write subcub directli local disk buffer output whenev buffer full would permut network summari observ that approach aim share disk parallel machin applic share noth parallel machin depend mainli distribut avail input data set r interest open problem identifi ideal distribut input r among p processor xed amount replic input data allow ie r copi r time r p anoth interest question futur work relationship topdown bottomup data cube comput parallel set two conceptu differ method exist literatur suggest bottomup method better suit high dimension data far implement parallel topdown data cube method took one person year full time work chose implement topdown method tunabl paramet discov experiment possibl futur project could implement parallel bottomup data cube method similar environ same compil messag pass librari data structur librari disk access method etc measur variou tradeoff point two method indic critic paramet parallel bottomup data cube comput similar good load balanc small number coars task lead us believ parallel bottomup method perform well compar parallel topdown method parallel bottomup method fewer paramet avail netun code therefor tradeoff point parallel set topdown bottomup method may differ sequenti set rel littl work done difcult problem gener partial data cube is entir data cube given subset groupbi given lattic set select groupbi gener challeng decid groupbi comput order minim total cost comput partial data cube mani case comput intermedi groupbi select set sever view select set comput cheapli reduc overal comput time sarawagi et al suggest approach base augment lattic addit vertic to repres possibl order view attribut addit edg to repres relationship view minimum steiner tree approxim algorithm run identifi number inter mediat node socal steiner point ad select subset best reduc overal cost approxim algorithm use optim minimum steiner tree problem npcomplet intermedi node introduc method areofcoursetobedrawnfromthenonselectednodesintheoriginallatticebyaddingthes addit node cost comput select node reduc although theoret neat approach effect practic problem augment lattic far mani vertic edg process efcient exampl dimension partial data cube number vertic edg augment lattic increas factor respect dimension partial data cube number vertic edg increas factor respect augment lattic dimension partial data cube edg anoth approach clearli necessari author current implement new algorithm gener partial data cube consid import area futur research acknowledg theauthorswouldliketothankstevenblimkiezimminchenkhoimanhnguyenthoma pehl suganthan sivagnanasundaram contribut toward implement describ section rst second fourth author research partial support natur scienc engin research council canada third author research partial support nation scienc foundat grant ccr r introduct parallel comput max planck institut tr probabilist count algorithm data base applic optim algorithm tree partit introduct parallel comput scalabl parallel geometr algorithm coars grain multicomput implement data cube effici toward effici portabl arraybas algorithm simultan multidimension aggreg effici extern memori algorithm simul coarsegrain parallel algorithm extern memori algorithm bottomup comput spars iceberg cube parallel virtual memori shift algorithm minmax tree partit icebergcub comput pc cluster data cube high perform olap data mine parallel comput reduc io complex simul coars grain parallel algorithm fast comput spars datacub storag estim multidimension aggreg presenc hierarchi comput multidimension aggreg multicub comput bsplike externalmemori comput bulk synchron parallel computinga paradigm transport softwar parallel scalabl infrastructur olap data mine ctr ying chen frank dehn todd eavi andrew rauchaplin parallel rolap data cube construct sharednoth multiprocessor distribut parallel databas v n p may frank dehn todd eavi andrew rauchaplin cgmcube project optim parallel data cube gener rolap distribut parallel databas v n p januari ge yang ruom jin gagan agraw implement data cube construct use cluster middlewar algorithm implement experi perform evalu futur gener comput system v n p may ying chen frank dehn todd eavi andrew rauchaplin pnp sequenti extern memori parallel iceberg cube comput distribut parallel databas v n p april