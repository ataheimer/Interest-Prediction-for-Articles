t high perform comput larg scale simul subsurfac multiphas fluid heat flow a tough wide use reservoir simul solv subsurfac flow relat problem nuclear wast geolog isol environment remedi soil groundwat contamin geotherm reservoir engin solv set coupl mass energi balanc equat use finit volum method contribut present design analysi parallel version tough parallel implement first partit unstructur comput domain time step set coupl nonlinear equat solv newton iter newton step jacobian matrix calcul illcondit nonsymmetr linear system solv use precondit iter solver commun requir converg test data exchang across partit border parallel perform result cray te present two real applic problem aris yucca mountain nuclear wast site studi execut time reduc second two processor second processor problem involv equat larger problem equat time decreas second processor second processor b introduct subsurfac flow relat problem touch mani import area to day societi natur resourc develop nuclear wast underground storag environment remedi groundwat contami nation geotherm reservoir engin complex model domain physic process involv numer simul play vital role solut problem contribut present design analysi parallel implement wide use tough softwar packag numer simul flow transport porou fractur media contribut includ descript algorithm method use parallel implement perform evalu present address depart comput scienc high perform comput center north umea univers se umea sweden c kluwer academ publish print netherland high perform comput subsurfac simul parallel simul processor cray te two real applic problem although implement analysi made cray te use standard fortran program languag mpi messag pass interfac make softwar portabl platform fortran mpi avail serial version tough transport unsatur groundwat heat version use organ countri see exampl major applic area includ geotherm reservoir simul environment remedi nuclear wast isol tough one offici code use us depart energi civilian nuclear wast manag evalu yucca mountain site repositori nuclear wast context aris largest demand applic tough far scientist lawrenc berkeley nation laboratori current develop flow model yucca mountain site involv comput grid block relat coupl equat water ga flow heat transfer radionuclid migrat subsurfac consider larger difficult applic anticip near futur analysi solut transport ever increas demand spatial resolut comprehens descript complex geolog ical physic chemic process high perform capabl tough code essenti applic earli result project present tough simul tough simul packag solv mass energi balanc equat describ fluid heat flow gener multiphas multicompon system fundament balanc equat follow dt z z z integr arbitrari volum v bound surfac s k denot mass kth compon water ga heat etc f k flux fluid heat surfac q k sourc sink insid v gener form flow mass paramet arbitrari nonlinear function primari thermodynam variabl densiti pressur satur etc given comput geometri space discret mani small volum block integr block becom variabl lead natur finit volum method result follow ordinari differenti equat dt volum block n anm interfac area border block n fnm flow them note flow term usual contain spatial deriv replac simpl differ variabl defin block n divid distanc block center see figur illustr lefthand side dimension grid block illustr arrow illustr flow throw interfac area neighbor grid block lefthand side two neighbor block n illustr dimension pictur here block center mark cross includ also variabl vm v n volum dm n distanc grid block center interfac area nm f nm figur space discret geometri data time implicitli discret first order differ equat deltat nm vector x t consist prime variabl time t flow sourcesink term right hand side evalu deltat high perform comput subsurfac simul initi setup time step advanc newton iter calcul jacobian matrix solv linear system output figur sketch main loop tough simul numer stabil multiphas problem lead coupl nonlinear algebra equat solv use newton method comput procedur main solut procedur schemat outlin figur read data set problem time consum part main loop time step newton iter iter linear solver time step nonlinear discret coupl algebra equat solv newton method within newton iter jacobian matrix first calcul numer differenti implicit system linear equat solv use spars linear solver precondit sever newton iter converg check control paramet measur maximum compon residu newton iter newton iter converg time advanc one time step process repeat predefin total time reach newton procedur converg preset max newtoniter current time step reduc usual half newton procedur tri reduc time step converg time advanc otherwis time step reduc anoth round newton iter follow procedur repeat converg newton iter reach system linear equat usual illcondit requir robust solver dynam adjust time step size key overcom combin possibl converg problem newton iter linear solver highli dynam elmroth ding wu system trajectori sensit variat converg paramet comput major part about execut time spent solv linear system second major part about assembl jacobian matrix design parallel implement aim work develop parallel prototyp tough demonstr abil effici solv problem significantli larger problem previous solv use serial version softwar problem larger number block number equat per block target comput system prototyp version parallel tough processor cray te nersc lawrenc berkeley nation laboratori follow section give overview design main step includ grid partit grid block reorder assembl jacobian matrix solv linear system well detail parallel implement grid partit grid block reorder given finit domain describ section follow consid dual mesh or grid obtain repres block or volum element centroid repres interfac block connect the word block connect use consist origin tough document physic properti block interfac repres data associ block connect respect tough comput domain defin set connect given input data inform adjac matrix construct ie matrix nonzero entri element i j connect block j current implement valu alway use nonzero element differ weight may use adjac matrix store compress row format call cr format slight modif harwellbo format see eg descript cr harwellbo format actual partit grid p almost equals part perform use three differ partit algorithm implement meti softwar packag version three algorithm denot kway vkway recurs partit algorithm consist meti document kway multilevel version tradit graph partit algorithm minim number edg straddl partit vkway modif kway instead minim actual total commun volum recurs recurs bisect algorithm object minim number edg cut partit grid processor block or specif vector element matrix row associ block reorder processor local order block processor comput result denot updat set processor updat set partit intern set border set border set consist block edg block assign anoth processor intern set consist block updat set block includ updat set need read onli comput defin extern set figur illustr block distribut pro cessor the vertic graph repres block edg repres connect ie interfac area pair block tabl show block classifi updat extern set updat set divid intern border set tabl element place local order global number illustr reorder processor processor processor figur grid partit processor tabl i exampl block distribut local order intern border extern set intern processor processor j processor j k order facilit commun element correspond borderextern block local renumb node made particular way block updat set preced block extern set updat set intern block preced border block final extern block order intern block assign specif processor place consecut one possibl order given exampl tabl i processor exampl grid block number intern block ie block updat processor depend block block assign processor grid block border block processor ie block updat processor depend block assign processor final block extern block processor ie block updat processor data associ block need readonli comput amount data processor send receiv comput approxim proport number border extern block respect consecut order extern block resid processor make possibl receiv data correspond block appropri vector without use buffer need reorder provid send processor access order inform howev possibl gener order border block transform avoid send basic block border set may sent one processor jacobian matrix calcul new jacobian matrix calcul newton step ie sever time time step algorithm parallel al gorithm processor respons comput row high perform comput subsurfac simul jacobian matrix correspond block processor updat set deriv comput numer jacobian matrix store distribut variabl block row format dvbr matrix block store row wise diagon block store first block row scalar element matrix block store column major order use dens matrix block enabl use dens linear algebra softwar eg optim level and level subproblem dvbr format also allow variabl number equat per block comput element jacobian matrix basic perform two phase first phase consist comput relat individu block begin phase processor alreadi hold inform necessari perform calcul second phase includ comput relat interfac quan titi ie calcul use variabl correspond pair block perform comput exchang relev variabl requir number variabl processor send element correspond border block appropri processor receiv element correspond extern block linear system nonsymmetr linear system solv gener illcondit difficult solv therefor parallel implement tough made differ iter solver precondition easili test result present obtain use stabil biconjug gradient method bicgstab aztec softwar packag theta block jacobi scale domain decomposit base precondition possibl overlap subdomain ie addit schwarz see eg use ilut incomplet lu factor domain decomposit base procedur perform differ level overlap case procedur turn anoth variant block jacobi precondition order distinguish theta block jacobi scale full subdomain block jacobi scale obtain chose domain decomposit precondit procedur refer former block jacobi scale latter domain decomposit base precondition though cours precondition illustr difficulti aris linear system would like mention small problem yucca mountain simul mention introduct nonsymmetr problem includ block equat per block connect solv linear system jacobian matrix size theta nonzero element first jacobian gener in first newton step first time step ie matrix involv first linear system solv largest smallest singular valu theta theta gamma respect give condit number theta appli block jacobi scale block row multipli invers theta diagon block condit number significantli reduc scale reduc largest singular valu theta smallest increas theta gamma altogeth reduc condit number theta is howev still illcondit problem therefor domain decomposit base precondition incomplet lu factor mention appli block jacobi scale procedur shown absolut vital converg problem significantli larger parallel implement section outlin parallel implement describ major step import routin all parallel tough includ line fortran code exclud meti aztec packag numer subroutin use mpi messag pass howev order understand main issu parallel implement suffici focu coupl routin cours sever routin also modifi compar serial version softwar detail would distract cycit initi processor read data describ problem solv essenti way serial version softwar then processor call routin cycit contain main loop time step newton iter routin also initi grid partit data distribut partit describ section defin input data distribut processor distribut perform sever routin call cycit five categori data distribut possibl reorder vector element correspond grid block distribut accord grid partit reorder local order intern border extern element describ section vector element correspond connect distribut adjust local grid block number high perform comput subsurfac simul processor determin connect involv local partit vector element correspond sink sourc replic full processor extract reorder part need addit number scalar small vector matric fulli replic ie data structur size depend number grid block connect final processor construct data structur store jacobian matrix distribut appropri part processor includ integ vector defin matrix structur larg array hold float point number matrix element problem distribut time step procedur begin brief descript routin cycit given figur descript lot detail omit clariti call includ coupl routin requir descript exchangeextern routin exchangeextern particular interest parallel implement main loop routin outlin figur call processor vector scalar noel argu ment exchang vector element correspond extern grid block perform neighbor processor paramet noel number vector element exchang per extern grid block addit paramet defin current partit eg inform neighbor etc need also pass routin clariti chosen includ figur though detail omit chosen includ full mpi syntax use fortran interfac commun primit routin pack call exchangeextern copi appropri element vector consecut work array extern element given processor specifi sendindex remark element store directli appropri vector receiv sinc extern block order consecut neighbor wherea border element sent need pack consecut work space sent note use nonblock mpi routin send receiv data use block routin would assur messag sent receiv appropri order avoid deadlock use nonblock primit send receiv made arbitrari order minor inconveni use nonblock routin work space use store element sent need larg enough store element processor send neighbor cycit initi grid partit data distribut etc set first time step first newton step number secondari variabl in par per grid block time endtim newton converg call multi newton converg result converg test newton converg updat primari variabl increment time defin new time step set els iter maxit solv linear system call eo call exchangeexternalpar num sec var iter maxit physic properti rang time step decreas mani time stop execut print messag failur solv problem els reduc time step call eo call exchangeexternalpar num sec var figur outlin routin cycit execut processor exchangeexternalvector noel neighbor call mpi irecvvectorrecvstart rlen mpi doubl precis proc tagmyid mpi comm world reqi ierr call packi vector sendindex slen workiw noel call mpi isendworkiw slen mpi doubl precis proc tagproc mpi comm world reqi ierr call mpi waitallnum neighbor req stat ierr figur outlin routin exchangeextern simultan call processor perform exchang noel element per extern grid block data vector routin multi call set linear system ie main part comput multi comput element jacobian matrix comput multi perform three major step first perform comput depend individu grid block follow comput term aris sink sourc far comput made independ processor last comput step multi interfac quantiti ie comput involv pair grid block perform last step exchang extern variabl requir vector x primari variabl dx the last increment newton process delx small increment x valu use calcul increment paramet need numer calcul deriv elmroth ding wu r the residu number element sent per extern grid block equal number equat per grid block four vector oper perform call exchangeextern perform comput involv interfac quantiti eo eo routin thermophys properti fluid mixtur need assembl govern mass energi balanc equat provid routin call eo equat state main task eo routin provid valu secondari thermophys variabl function primari variabl though also perform addit import task see page detail sever eo routin avail tough new eo routin becom avail howev eo one use parallel implement order provid maximum flexibl strive minim number chang need done eo routin move serial parallel implement done organ data assign appropri valu certain variabl call eo routin current parallel implement eo routin serial code use unmodifi except statement though still need verifi practic believ current parallel version tough handl also eo routin except write statement need adjust cray teth target parallel system parallel implement tough made portabl use standard fortran program languag mpi messag pass interfac interprocessor commun develop analysi howev perform processor cray te system te distribut memori comput processor local memori togeth network interfac hardwar processor known digit ev alpha local memori form process element pe sometim call node pe connect network arrang dimension toru see eg detail perform cray te system perform analysi parallel perform evalu perform real applic problem aris yucca mountain nuclear wast site studi result obtain processor cray te nersc lawrenc berkeley nation laboratori linear system solv use bicgstab theta block jacobi scale domain decomposit base precondition ilut incomplet lu factor differ level overlap tri procedur though result present nonoverlap test gener shown give good perform stop criteria use linear solver denot residu right hand side respect test problem requir simul time year would requir signific execut time also good parallel perform larg number processor order investig parallel perform therefor limit simul time year problem year problem still requir enough time step perform analysi parallel perform shorter simul time cours give initi phase unproport larg impact perform figur initi phase therefor exclud time test perform use kway vkway recurs partit algorithm meti see later differ order grid block lead variat time discret follow unstructur natur problem turn lead variat number time step requir therebi total amount work perform tri three partit algorithm chose one lead best perform problem number processor reduc somewhat artifici perform variat result differ number time step requir result present indic partit algorithm use result real applic problem problem consist block compon per block connect block give total equat jacobian matrix linear system solv newton step size theta nonzero element topmost graph figur illustr reduct execut time increas number processor execut time number processor execut time h number processor figur execut time parallel speedup problem processor cray te high perform comput subsurfac simul reduc second ie hour minut second two processor second ie minut second processor parallel speedup problem present second graph figur sinc problem cannot solv one processor parallel code speedup normal two pro cessor ie speedup p processor calcul t p denot wall clock execut time p processor respect complet also report execut time origin serial code second problem problem consist block compon per block connect block give total equa tion jacobian matrix linear system solv newton step size theta nonzero element topmost graph figur illustr reduct execut time problem increas number processor memori batch system time limit prohibit test less processor result therefor present pro cessor execut time significantli reduc number processor increas way processor reduc second ie hour minut second processor second ie minut second processor abil effici use larger number processor even better illustr speedup shown second graph figur speedup defin t p sinc perform result avail smaller number processor result clearli demonstr good parallel perform larg number processor problem observ speedup processor problem processor problem repeatedli doubl number processor etc processor problem obtain speedup factor problem correspond speedup factor repeatedli doubl number processor processor would ideal speedup time number processor doubl speedup eg problem often call superlinear speedup present explan later section number processor execut time h number processor figur execut time parallel speedup problem processor cray te high perform comput subsurfac simul overal parallel perform satisfactori complet analysi provid insight explain superlinear speedup unstructur problem ideal case problem evenli divid among processor approxim number intern grid block per processor also roughli number extern block per processor problem howev unstructur mean partit made even aspect lead exampl imbal number extern element per processor intern block evenli di tribut problem processor averag number extern grid block maximum number extern block processor follow least one processor higher commun volum averag processor assum commun volum proport number extern block note averag number intern grid block case mean averag processor actual extern block intern block final averag number neighbor processor maximum number neighbor processor altogeth indic commun pattern irregular amount commun becom signific term number messag total commun volum time amount comput perform without extern element becom fairli small despit difficulti parallel implement show abil effici use larg number processor everi half second wall clock time processor new linear system size theta nonzero element gener solv includ time numer differenti element jacobian matrix theta block jacobi scale block row ilut factor domain decomposit base precondition number bicgstab iter analysi work load variat sever issu need consid analyz perform number processor increas first size individu task perform differ processor decreas give increas commun comput ratio rel load imbal also like increas addit may find variat time discret perform the number time step number iter newton process linear solver order conduct detail studi present summari iter count time two test problem tabl ii tabl show averag number newton iter per time step averag number iter linear solver per time step per newton step well total number time step newton iter iter linear solver recal linear system solv time consum oper comput jacobian matrix second largest time consum oper perform newton step problem note variat occur time discret problem solv differ number pro cessor similar behavior observ exampl use differ linear solver serial version tough variat time discret lead variat number time step need number newton iter requir notabl processor execut problem requir time step newton step iter linear solver compar execut processor increas work fulli explain low speedup processor similar variat amount work also contribut good speedup case howev figur tabl ii alon fulli explain superlinear speedup observ case therefor continu studi look perform linear solver that howev show exampl motiv continu studi ie case speedup actual higher would expect look iter count onli exampl problem speedup processor larger maximum expect ie vs compar execut two processor processor execut actual requir slightli newton iter iter linear solver number time step test doubl number processor see anoth factor speedup even though reduct number newton iter iter linear solver respect speedup problem processor processor also higher would expect look tabl ii alon far summar follow observ two problem unstructur natur problem natur lead variat work load differ test alon explain tabl ii iter count execut time test problem problem partit algorithm vk vk k rec rec rec k rec time step total newton iter newton itertim step total lin solv iter lin solv iternewton step lin solv itertim step time spent lin solv time spent total time problem partit algorithm k rec k k rec rec time step total newton iter newton itertim step total lin solv iter lin solv iternewton step lin solv itertim step time spent lin solv time spent total execut time elmroth ding wu speedup anomali observ coupl case evid issu investig therefor continu studi focus perform linear solver precondition perform precondition linear solver breakup speedup one part linear solver includ precondition one comput mainli assembl jacobian matrix present problem figur figur illustr superlinear speedup whole problem follow superlinear speedup linear solver note result present total time spent part ie differ number linear system solv differ number iter requir solv linear system affect number speedup other part close p test problem also indic part comput may show good perform also larger number processor slight decreas processor problem due increas number time step conclud perform the part satisfi need explan continu studi superlinear speedup linear solver effect precondition precondition crucial number iter per linear system solv domain decomposit base process expect becom less effici number processor increas best effect precondition expect whole matrix use factor order achiev good parallel perform size precondit oper processor restrict local subdomain averag matrix use precondit processor n size whole global matrix p number processor reduc effect follow natur smaller subdomain ie decreas size matric use precondition sinc diagon block use calcul approxim solut number iter requir per linear system two test problem confirm theori see tabl ii test problem number iter requir per linear system increas number processor with except go processor problem problem number processor linear solver part number processor linear solver part figur breakup speedup problem one part linear solver mark r one part comput mark ideal speedup defin straight line also includ result processor problem tabl ii note increas number iter per linear system compar processor clear precondition perform good job number processor increas introduc one level overlap addit schwarz domain decomposit base precondition processor number iter linear solver reduc order smaller number proce sor howev done addit cost perform overlap overal time roughli unchang main observ despit overal increas number iter linear solver increas number processor speedup linear solver higher would normal expect certain number processor increas number iter per linear system larger number processor obvious follow reduc effect precondition follow section conclud perform analysi investig parallel perform actual comput perform precondit linear iter process perform precondition anoth effect decreas size subdomain domain decomposit base precondition total amount work perform incomplet lu factor becom significantli smaller number processor increas exampl number processor doubl size processor local matrix ilut factor decreas factor averag n p n p theta n p henc amount work per processor reduc factor depend sparsiti structur henc amount work per processor reduc faster normal expect assum ideal speedup figur give breakup speedup speedup linear solver separ one part precondition ie ilut factor one part linear solver precondition show dramat improv perform number processor increas follow natur decreas work ilut factor continu turn singl import explan sometim superlinear speedup number processor part precondition linear solver exclud precondition number processor part precondition linear solver exclud precondition figur breakup speedup problem one part linear solver exclud ilut factor precondition mark r one part ilut factor mark one part comput mark ideal speedup defin straight line elmroth ding wu perform linear iter explain superlinear speedup precondit part linear solver present figur also observ modest speedup part comput low speedup part partli explain increas number iter seen previou section increas commun comput ratio slightli increas rel load imbal factor alreadi figur present section show larg number extern element per processor imbal number extern element per processor present problem processor indic commun comput ratio would eventu becom larg perform obtain iter process linear solver support observ impact overal perform order fulli understand total combin effect superlinear behavior precondition moder speedup part linear solver need investig larg proport spent precondit total time requir solv linear system illustr tabl iii tabl iii time spent precondit percentag total time spent linear solver problem processor percentag problem processor percentag number processor becom larg amount time spent precondit becom small compar time spent iter wherea relat opposit processor problem processor problem exampl processor problem time linear solver spent factor precondition wherea correspond number processor long precondition consum larg portion time superlinear speedup signific effect overal perform implement evid certain number processor superlinear speedup incomplet lu factor domain decomposit base precondition suffici give superlinear speedup whole applic number processor becom larg factor consum smaller proport execut time henc superlinear behavior less impact overal per formanc instead issu becom critic larg number processor increas number iter linear solver conclus contribut present design analysi parallel prototyp implement tough softwar packag parallel implement show effici use least processor crayt system implement construct flexibl use differ linear solver precondition grid partit algorithm well altern eo modul solv differ problem comput experi real applic problem show high speedup processor problem processor problem result accompani analysi explain good parallel perform observ also explain minor variat perform follow unstructur natur problem superlinear speedup follow decreas work precondit process result also illustr tradeoff time spent precondit effect result object minim wall clock execut time note that particular problem smaller subdomain could use least small number processor seen variat perform test use three differ partit algorithm variat clearli follow variat amount work requir eg due differ time discret analysi requir order determin whether variat follow particular pattern result unpredict circumst elmroth ding wu problem target near futur larger term number block number equat per block moreov simul time significantli longer increas problem size expect abl effici use even larger number processor if avail longer simul directli affect parallel perform futur investig includ studi altern nonlinear solver studi interplay time step proce dure nonlinear system linear system evalu differ linear solver precondition paramet set would gener interest may help improv perform particular implement relat studi partit algorithm recent complet acknowledg thank karsten pruess author origin tough softwar valuabl discuss work anonym refere construct comment suggest work support director offic scienc offic laboratori polici infrastructur us depart energi contract number deacsf research use resourc nation energi research scientif comput center support offic scienc us depart energi r aztec user guid tough user guid domain decomposit tr bicgstab fast smoothli converg variant bicg solut nonsymmetr linear system domain decomposit parallel implement tough softwar packag larg scale multiphas fluid heat flow simul perform cray te multiprocessor