t deriv effici cach coher protocol refin a address problem develop effici cach coher protocol use distribut system implement distribut share memori dsm use messag pass seriou drawback tradit approach problem user requir state desir coher protocol level asynchron messag interact involv request acknowledg neg acknowledg messag handl unexpect messag introduc intermedi state proof correct protocol describ term low level asynchron messag involv often proof hold specif configur buffer alloc propos method user state desir protocol directli term desir highlevel effect name synchron coordin use synchron rendezv construct descript much easier understand comput effici verifi asynchron protocol due small state space rendezv protocol also synthes effici asynchron protocol paper present protocol refin procedur prove sound provid exampl effici synthesi procedur appli larg class dsm protocol b introduct grow complex concurr system autom procedur develop protocol grow import paper interest protocol refin procedur defin accept highlevel specif protocol appli provabl correct transform yield detail implement protocol run effici modest buffer resourc requir procedur enabl correct proof protocol carri respect highlevel specif consider reduc proof effort refin rule shown sound detail protocol implement need verifi paper address problem produc correct effici cach coher protocol use distribut share memori dsm system dsm system wide research next logic step parallel process confirm grow import dsm central problem dsm system design implement distribut coher protocol share cach line use messag pass presentday approach problem consist specifi detail interact possibl node term lowlevel request acknowledg neg acknowl edg deal unexpect messag difficulti design protocol compound fact verifi lowlevel descript invit state explos when done use modelcheck tediou when done use theoremprov even simpl configur often lowlevel descript modelcheck specif resourc alloc eg buffer size support part arpa order b spawar contract nc avalanch darpa contract dabtc uv often known would happen alloc chang protocol refin help allevi situat consider contribut paper protocol refin procedur appli deriv larg class dsm cach protocol problem design dsm cach coher protocol attribut appar lack atom implement behavior although design protocol may begin simpl atom transact view desir interact descript seldom written down instead get written highest level specif detail protocol implement arriv ad hoc reason situat aris paper choos csp specif languag allow design captur initi atomictransact view rendezv protocol rendezv protocol subject syntaxdirect translat rule modifi rendezv commun primit csp asynchron commun primit yield effici detail implement asynchron protocol empir show rendezv protocol are sever order magnitud effici modelcheck correspond detail implement addit also show context state art dsm machin project call avalanch procedur automat produc protocol implement compar qualiti handdesign asynchron protocol qualiti measur term number request acknowledg neg acknowledg nack messag need carri rendezv specifi given specif buffer requir guarante precis defin practic accept progress criterion rest paper organ follow section review relat past work section present structur typic dsm protocol distribut system section present syntaxdirect translat rule along import optim call requestrepli section present inform argument refin rule present alway produc correct result also point formal proof correct done use pv section present exampl protocol develop use refin rule effici modelcheck rendezv protocol compar effici modelcheck asynchron protocol final section present discuss buffer requir conclud paper relat work chandra et al use model base continu help reduc complex specifi coher protocol specif model check compil effici object code approach protocol still specifi lowlevel though rendezv commun model use transient state introduc compil cannot adequ handl unexpect messag contrast approach user write rendezv protocol use rendezv primit verifi protocol level great effici compil effici asynchron protocol object code work close resembl buckley silberschatz buckley silberschatz consid problem implement rendezv use messag process use gener inputoutput guard implement softwar solut expens dsm protocol implement contrast focu star configur process suitabl syntact restrict highlevel specif languag effici asynchron protocol automat gener gribomont explor protocol rendezv commun simpli replac asynchron commun without affect process way contrast show chang process rendezv commun replac asynchron communica tion lamport schneider explor theoret foundat compar atom transact eg rendezv commun split transact eg asynchron commun base left right mover consid specif refin rule cach coher distribut system directori base cach coher multiprocessor system coher line share memori manag cpu node call home node simpli home node may access share line call remot node home node respons manag access share line node without violat coher polici system simpl protocol use avalanch call migratori shown figur remot node home node engag follow activ whenev remot node r wish access inform share line first check data avail with requir access permiss local cach so r use data cach not send request permiss home node line home node may contact remot node revok permiss order grant requir permiss r final home node grant permiss along requir data r seen descript remot node interact home node home node interact remot node suggest restrict commun topolog interest star configur home node hub without loos descript power decis help synthes effici asynchron protocol shall see later complex protocol design alreadi point out problem design dsm protocol trace lack atom exampl consid follow situat share line read number remot node remot node say r wish modifi data henc send request home node write per mission home node contact remot node current access data revok read permiss grant write permiss r unfortun incorrect abstract entir sequenc home differ cach line differ deriv protocol focus one cach line usual done action consist contact remot node revok permiss grant permiss r atom action home node process revok permiss differ remot node say r may wish obtain read permiss case request must either nack buffer later process handl unexpect messag design introduc intermedi state also call transient state lead complex protocol hand show rest paper design allow state desir interact use atom view possibl refin descript use refin procedur introduc transient state appropri handl unexpect messag commun model assum network connect node system provid reliabl pointtopoint inord deliveri messag assumpt justifi mani machin eg dash avalanch also assum network infinit buffer sens network alway accept new messag deliv without assumpt asynchron protocol gener may deadlock assumpt satisfi solut propos hennessi patterson use postprocess step refin protocol divid messag two categori request acknowledg request messag may caus recipi gener messag order complet transact acknowledg messag not author argu network alway accept acknowledg messag as oppos messag case network infinit buffer deadlock broken shall see section asynchron protocol two acknowledg messag ack nack guarante network alway accept two acknowledg messag beyond scope paper use rendezv commun primit csp specifi home node remot node simplifi dsm protocol design particular use direct address scheme csp everi input statement process q form pmsgv pmsg p ident process sent messag msg enumer constant messag type v variabl local variabl q would set content messag everi output statement q form pmsge pmsg e express involv constant andor local variabl q p q rendezv p execut qme q execut pmv say p activ process q passiv process rendezv rendezv protocol written use notat verifi use either theorem prover model checker desir properti refin use rule present section obtain effici asynchron protocol implement directli exampl microcod process structur divid state process rendezv protocol two class intern commun process intern state cannot a home hm b remot c remot fig exampl commun state home node remot node particip rendezv process howev assum process eventu enter commun state rendezv action offer thi assumpt syntact check refin process introduc transient state unexpect messag handl denot th remot node r home node h simplic assum remot node follow protocol form commun process in asynchron rendezv protocol messag ie form commun global variabl avail discuss befor restrict commun topolog star sinc home node commun remot node behav like server remotenod request natur allow gener inputoutput guard home node protocol eg figur a contrast restrict remot node contain input nondetermin ie remot node either specifi wish activ particip singl rendezv home node eg figur b may specifi will passiv particip rendezv number messag eg figur c also figur c allow guard remot node model autonom decis cach evict decis empir valid number real dsm protocol help synthes effici protocol final assum fair condit place nondeterminist commun option avail commun state except forward progress restrict impos entir system describ below forward progress assum loop home node remot node refin process guarante least one refin remot node make forward progress forward progress possibl rendezv protocol notic forward progress guarante remot node everi remot node assur forward progress remot node requir alloc much buffer space home node n remot node assur everi remot node make progress home node need buffer hold n request impract nonscal n dsm machin high thousand guarante progress remot node buffer hold messag suffic see section refin procedur systemat refin commun action h r inspect syntact structur process techniqu split rendezv row state buffer content action c commun activ empti a request rendezv b goto transient state c commun activ request a delet request b request home rendezv c goto transient state c commun passiv request acknack request transient ack success rendezv transient nack go back commun state transient request ignor request tabl action taken remot node enter commun state transient state action messag buffer remov two halv request rendezv acknowledg ack neg acknowledg nack indic success failur rendezv given time refin process one three state intern commun transient intern commun state refin process correspond unrefin process rendezv protocol transient state introduc refin process follow manner whenev process p qme one guard commun state p send request q await transient state acknack request rendezv q transient state p behav follow receiv ack q rendezv success p chang state appropri r p receiv nack q rendezv fail p goe back commun state tri rendezv differ rendezv r p receiv request q action taken depend whether p home node remot node p remot node and q home node p simpli ignor messag thi becaus discuss next sentenc p know q get request tantamount nack qs request p home node goe back commun state though receiv nack implicit nack process qs request commun state rule rr govern remot node home node refin detail refin remot node everi remot node buffer store one messag home node remot node receiv request home node request would held buffer remot node commun transient state action shown tabl row tabl explain below c remot node commun state wish activ particip rendezv request home node pend buffer remot node send request rendezv home goe transient state await acknack request rendezv home node c row similar c except request home pend buffer case also remot send request home goe transient state addit request buffer delet explain rule r home receiv remot request act though nack receiv implicit nack delet request c remot node commun state passiv rendezv wait request rendezv home request satisfi guard commun state send ack home chang state reflect success rendezv not send nack home continu wait match request case request remov buffer t t remot node receiv ack rendezv success state process appropri chang reflect complet rendezv remot node receiv nack home home node suffici buffer hold request case remot node goe back commun state retransmit request reenter transient state t explain rule r remot node receiv request home simpli delet request buffer continu wait acknack home refin home node home node buffer capac k messag k incom messag enter buffer space follow except last buffer locat call progress buffer reserv incom request rendezv known complet rendezv current state home reserv made livelock result exampl consid situat buffer full none request buffer enabl guard home node due lack buffer space new request rendezv must nack thu home node longer make progress addit home node transient state expect acknack r addit buffer need reserv messag ack nack request rendezv r held refer buffer ack buffer home commun transient state action taken shown tabl row tabl explain below c home commun state accept one request pend buffer home finish rendezv arbitrarili pick one messag c request pend buffer satisfi guard commun state one guard commun state r m home node send request rendezv r enter transient state describ abov send messag also reserv ack buffer assur hold messag r step may requir home gener nack one request buffer order free buffer locat also note condit c state request r pend buffer rational behind condit that request r pend r commun state r activ particip rendezv due syntact restrict place descript remot node row state condit action commun buffer contain request a ack sent r r satisfi rendezv b delet request buffer c commun a request buffer a ack buffer alloc satisfi requir rendezv if enough buffer space b home node activ nack may gener rendezv r ie b request rendezv guard state sent r c request r pend c goto transient state buffer transient ack r rendezv complet transient nack r rendezv fail go back commun state send next request request left repeat start first guard transient a request r treat request b wait acknack r nack plu request transient a request r j r arriv enter request buffer b wait acknack r c buffer transient a request r j r arriv enter request b wait acknack r progress buffer c buffer d request satisfi guard commun state transient request r j arriv nack request all case cover abov tabl home node action enter commun transient state request rendezv commun state henc wast send request r case t recept ack transient state indic complet pend rendezv t recept ack transient state indic failur complet rendezv henc home goe back commun state state check new request buffer satisfi guard commun state so ack gener correspond request rendezv complet not home tri next output guard commun state output guard start first output guard reason that even though previou attempt rendezv fail may succeed remot node question might chang state guard commun state t home expect acknack r receiv request r instead use implicit nack rule r first assum nack receiv henc goe commun state request includ request r process row t t home receiv request r j expect acknack differ remot r suffici room buffer request ad buffer t home transient state two buffer space receiv messag r j add request buffer accord buffer reserv scheme ie request enter progress buffer iff request satisfi one guard commun state request cant satisfi guard would handl row t request rendezv r j receiv insuffici buffer space all case cover t home nack r j r j retransmit messag requestrepli commun gener scheme outlin replac rendezv action two me sage request ack case possibl avoid ack messag exampl two messag say req repl use follow manner req sent remot node home node servic home node receiv req messag perform intern action andor commun remot node send repl messag remot node case possibl avoid exchang ack req repl statement hreqe hreplv alway appear togeth hreqe hreplv remot node r repl alway appear r req home node ack drop whenev home node send repl messag remot node alway readi receiv messag henc home node wait ack addit recept repl remot node also act ack req cours remot node receiv nack instead repl remot node would retransmit request rendezv scheme also use req sent home node remot node respond repl argu refin correct analyz differ scenario aris execut asynchron protocol argument divid two part a rendezv happen asynchron protocol allow rendezv protocol b forward progress assur least one remot node rendezv finish asynchron protocol remot node execut row c c tabl home node execut row c tabl see rendezv accord rendezv protocol consid happen remot node activ particip rendezv the case home node activ particip similar remot node r send request rendezv home h start wait acknack three case consid h suffici buffer space case request nack rendezv take place h suffici buffer space either intern state transient state expect acknack differ remot node r j case messag enter hs buffer h enter commun state accept request send ack r complet rendezv clearli rendezv allow rendezv protocol h send nack r later make space buffer row c r would retransmit request case rendezv taken place h sent request rendezv r wait acknack r transient state thi correspond rule r case r simpli ignor request h h know request would drop henc treat request r combin nack request alreadi sent request rendezv thu case becom exactli like one two case abov h gener acknack accordingli henc ack gener would allow rendezv protocol ack gener case case rendezv allow rendezv protocol inform argument formal help pv prove refin rule safeti preserv ie show transit taken refin protocol allow origin rendezv protocol pv theori file proof obtain first author www home page proof forward progress see least one remot node make forward progress observ home node h make forward progress one remot node also make forward progress sinc disallow process stay intern state forev everi intern state h eventu enter commun state may go transient state note restrict h send request remot node remot would eventu respond ack nack request rendezv forward progress possibl rendezv protocol show h would eventu leav commun transient state follow case analysi h commun state complet rendezv row c tabl clearli progress made h commun state condit row c c tabl enabl h continu wait request rendezv would enabl guard it sinc buffer locat use progress buffer progress possibl rendezv protocol least one request would enter buffer enabl c h commun state row c tabl enabl case h send request rendezv goe transient state case argu eventu make progress h transient state receiv ack row tabl rendezv complet henc progress made h transient state receiv nack row tabl implicit nack row tabl respons nack home goe back rolrdata roinv rigrdata rolrdata roiddata f rjgrdata a home node hreq rw hlrdata hiddata hgrdata evict b remot node fig rendezv migratori protocol commun state case progress argument base request rendezv h receiv transient state buffer reserv scheme one request receiv enabl guard commun state least one request enter buffer row t henc ack sent respons one request h goe back commun state row c thu make progress request receiv h send request rendezv correspond anoth output guard row c reenter transient state process repeat h make progress take action c t progress possibl eventu either would enabl sinc h keep tri output guard repeatedli c would enabl sinc h repeatedli enter commun state repeatedli t check incom request rendezv so unless rendezv protocol deadlock asynchron protocol make progress exampl protocol take rendezv specif migratori protocol avalanch show protocol refin use refin rule describ abov the architectur team avalanch previous develop asynchron migratori protocol without use refin rule describ paper protocol follow home remot node shown figur initi home node start state f free indic remot node access permiss line remot node r need readwrit share line send req messag home node home node send gr grant messag r along data addit home node also record ident r variabl owner later use home node goe state e exclus owner longer need data may relinquish line lr messag result receiv lr messag home node goe back f home node e receiv req anoth remot node home node revok permiss current owner grant line new request revok permiss either send inv invalid messag current owner wait new valu data obtain id invalid done messag wait lr messag o revok permiss current owner gr messag sent new request variabl modifi reflect new owner remot node initi start state invalid cpu tri read write shown rw figur req sent home node permiss gr messag arriv remot node chang state v valid cpu read write local copi line line evict for capac reason exampl lr sent home node or anoth remot node attempt access line home node may send inv respons inv id invalid done sent home node line revert back state i refin migratori protocol note messag req gr refin use requestrepli strategi remot node send req home node send gr respons similarli messag inv id refin use requestrepli except case inv sent home node remot node respond id follow requestrepli strategi pair consecut rendezv r req r gr r inv r id data take messag shown figur refin home remot node shown figur figur use instead emphas commun asynchron figur transient state shown dot circl the dot arrow explain later discuss section refin home node transient state receiv request process expect acknack would treat combin nack request write nack impli home node receiv nack either explicit nack messag implicit nack again discuss section home node suffici number empti buffer nack request irrespect whether node intern transient commun state sake clariti left nack one transient state label rxmsgnack explain section remot node transient state receiv messag home node remot node ignor messag acknack ever gener respons request figur show self loop transient state remot node label h asynchron protocol design avalanch design team differ protocol shown figur protocol dot line action ie ack exchang lr messag believ loss effici due extra ack small current process quantifi effici asynchron protocol design hand asynchron protocol obtain refin procedur verif expect verif rendezv protocol much simpler verif asynchron protocol modelcheck rendezv asynchron version migratori protocol invalid anoth dsm protocol use avalanch use spin number state visit time taken second two protocol shown figur c complex verifi hand design migratori invalid compar verif asynchron protocol seen verifi rendezv protocol gener far fewer state take much rxmsgnack rolrdata rjgrdata roinv rigrdata roack rolrdata roack roiddata a home node rw v h evict h hlrdata hnack hnack hgrdata hack b remot node protocol n asynchron rendezv protocol protocol migratori unfinish unfinish invalid unfinish unfinish c modelcheck effici fig refin remot node migratori protocol less run time verifi asynchron protocol fact rendezv migratori protocol could model check node mb mem ori asynchron protocol model check two node mb current develop simul environ evalu perform variou asynchron protocol conclus present framework specifi dsm protocol highlevel use rendezv commun rendezv protocol effici veri fie exampl use modelcheck protocol translat effici asynchron protocol use refin rule present pa per refin rule add transient state handl unexpect messag rule also address buffer consider assur refin process gener effici asynchron protocol syntact restrict place process restrict name enforc star configur restrict use gener guard inspir domain specif consider current studi let two remot node commun asynchron protocol obtain better effici howev relax star configur requir rendezv protocol add much descript power howev relax constraint asynchron protocol improv effici refin rule present also guarante forward progress per line per remot node forward progress per node guarante modest buffer follow everi home manag buffer pool share resourc cach line howev instead use progress buffer per line progress buffer per node use request node enter share buffer pool buffer space progress buffer node satisfi progress criterion strategi guarante forward progress per node per line howev virtual modern processor bound instruct issu window use proerpti protocol action line interfer anoth line one show forward progress guarante per line well remot node r effect implement gener inputoutput construct csp comparison softwar hardwar synchron mechan distribut share memori multiprocessor languag support write memori coher protocol cray research protocol verif hardwar design aid use formal verificationanalysi method critic path system design case studi comput architectur quantit appo rach commun sequenti process state spin stanford flash multiprocessor pretend atom stanford dash multiprocessor method prove properti parallel program s pv combin specif protocol verif aggreg distribut transac tion tr design valid comput protocol tempor logic reactiv concurr system stanford dash multiprocessor stanford flash multiprocessor teapot comput architectur nd ed effect implement gener inputoutput construct csp commun sequenti process reduct synchron asynchron commun protocol verif hardwar design aid exploit parallel cach coher protocol engin use formal verificationanalysi method critic path system design protocol verif aggreg distribut transact pv