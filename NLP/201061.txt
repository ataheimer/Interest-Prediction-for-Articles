t combin analys combin optim a modern optim compil use sever pass program intermedi represent gener good code mani optim exhibit phaseord problem get best code may requir iter optim fix point reach combin phase lead discoveri fact program expos opportun optim articl present framework describ optim show combin two framework reason properti result framework structur frame work provid insight combin yield better result make idea concret articl present framework combin constant propag valu number unreachablecod elimin open question framework combin way b introduct modern optim compil make sever pass program intermedi represent gener good code mani optim exhibit phase order problem differ fact discov and differ code gener depend order optim execut get best code requir iter sever optim fix point reach show combin optim pass compil discov fact program give opportun optim shown ad hoc way previou work exampl wegman zadeck present algorithm combin constant propag unreach code elimin paper provid formal basi describ combin show combin yield better result present proof simpl iter techniqu effici solv combin optimiza tion final combin condit constant propag ccp global valu number gvn get optim sum part overview intermedi represent describ algorithm need describ program program repres control flow graph cfg edg denot flow control vertic basic block basic block contain set assign statement special final statement may return empti fall through program variabl alway written lower case letter eg x y simplifi present restrict program integ arithmet set integ repres n assign statement singl function righthand side variabl left function op small constant ariti ie x aopb op may constant ident function limit kari function reason assumpt applic run work support arpa onr grant nj algorithm lowlevel compil intermedi represent k call set op function op assum program convert static singl assign ssa form origin program name assign valu multipl definit point ssa form name correspond singl definit point convent gener new name ssa form ad subscript origin name make relationship textual obviou human reader wherev two definit origin variabl reach merg point program control flow oefunct insert ssa form oefunct defin uniqu name merg valu written sinc express occur righthand side assign everi express associ assign variabl onetoon correl variabl express variabl name use direct map express defin it implement requir map fast final defin n number statement ssa form ssa form quadrat size origin code commun practic experi date ssa shown usual linear nearli linear size origin code monoton analysi framework order combin sever optim first describ common monoton analysi framework briefli monoton analysi framework is ffl set infer make program describ complet lattic height d where arbitrari set infer distinguish element a usual call top bottom respect u meet oper a b a u b u length longest chain l ffl set kari monoton function f use approxim program defin f ff l lg contain ident function close composit pointwis meet ffl map f program primit approxim function gener approxim function simpl tabl map lattic element lattic element directli map cfg framework framework maintain correspond cfg incident mean solut directli compar meet path mop solut like describ kam ullman valu number solut framework fact implement replac variabl name pointer express defin variabl perform map requir singl pointer lookup map take account inform cfg take notat liberti defin map op f correct implement use operatorlevel instead basicblock level program depend graph pdg ssa form represent cfg basic block control inform encod input function like program variabl say awb u awb b lattic complet u close a h lattic height largest n sequenc element l form chain x requir l finit descend chain properti is must bound constant problem examin quit small usual assum comput f f time ok k largest number input function f sinc k implement comput f constant time monoton analysi problem appli monoton analysi framework specif program instanti monoton analysi problem set simultan equat deriv directli program variabl equat correspond point interest program express program defin variabl associ variabl singl infer program analysi substitut approxim function chosen f use fl actual program primit function solv equat approxim function in effect analysi run approxim version program design equat minim solut call greatest fix point gfp function f repres complet program via composit monoton give us special properti composit monoton function also monoton also composit function onto l solv set equat set variabl repeatedli comput propag local solut effect variabl run downhil solut limit kari approxim function ensur comput quickli propag chang far bound chain length limit number forward downhil step finit number monoton ensur run downhil local cannot improv global solut mean first solut find also best solut prove formal section combin framework given two framework b framework combin yield better inform solut interact solut must reli solut must reli solut a interdepend care order produc answer combin framework combin two framework combin set equat framework equat implicitli refer fact deriv equat b viceversa make explicit implicit refer equat set must prove combin equat still monoton therefor repres monoton analysi framework combin framework still maxim solut may equal combin maxim solut individu problem if fact ident combin individu solut gain noth combin framework ie profit demonstr idea clearli work extend exampl combin simpl constant propag unreach code elimin optim well known wide use wegman zadeck shown algorithm combin instruct compar properti describ section ensur exist gfp system equat solv use mani techniqu techniqu vari wide effici expens techniqu solv system equat less effici cannot gener differ effici led classic compil use least expens method solv given problem algorithm frameworkbas approach final exercis combin ccp partitionbas gvn obtain new optim strictli power number repetit separ optim combin run on time faster previou algorithm techniqu equat deriv directli intermedi represent purpos paper intermedi represent equat use techniqu abstract interpret associ approxim function chosen f everi primit function program form equat restrict see section find maxim solut use iter techniqu time onk d n number equat solv often equal n number statement program k largest number input one function height lattic simpl constant propag simpl constant propag look program express comput valu execut program cast monoton analysi framework conserv approxim program control flow assum basic block execut thu control flow explicit express dataflow equat assign defin express variabl infer variabl hold tell us whether express comput constant infer use standard constant propag lattic l c element f integ constant g shown figur meet oper u also defin figur notat mean if c equal c c els everi primit function program l l l c c c figur constant propag lattic l c meet oper need correspond monoton function f f oefunct use meet oper extend primit handl exampl look correspond function replac op applic f op instead mean appli function undefin input yield undefin result as oppos unknown result embodi idea propag inform fact known function zero element use precis and complex extens multipli extend figur f rather reflect intuit zero time anyth zero shown figur function result monoton decreas left right top bottom thu f monoton function maintain inform case correspond function without special case zero figur gener equat small program ssa form everi variabl x program equat defin v x assign x gener equat v unknown valu valu cannot discov compil time mani unknown valu typic program compil must emit code comput valu run time undefin valu compil choos valu want two integ incompar lattic thu neither greater less c theta c figur extend function l c f f figur extend multipli l c case constant function f v x cumbersom write x instead differ use x obviou context oefunct use meet oper function n theta n n return input equal input equal extend f shown figur assum loop control predic pred beyond abil compil analyz possibl keyboard read solv equat inspect yield x short new constant found program equat int x figur simpl constant propag exampl find greatest fix point section show iter techniqu work monoton analysi framework is show initi system monoton equat success solv equat eventu yield gfp start tarski prove everi monoton function f l l gfp complet lattic l sinc f monoton success applic f descend monoton lattic bound fix point eventu reach cannot gfp greatest fix point and u fix point suppos revers situat u applic f must form descend chain fall past gfp must delta delta delta monoton f contradict therefor success applic f yield gfp need repres system monoton equat simpl monoton function f extend lattic l tupl lattic l defin l lattic whose element ntupl l element use notat fx refer tupl l element defin ls meet oper elementwis meet l element x u l complet lattic finit descend chain properti defin monoton function collect monoton function f l tupl lattic regular lattic therefor f x defin system monoton equat function f take nlength tupl l element problem solv requir k k n element l actual use is f take input ksize subset x unfortun solut techniqu repeatedli appli f fix point reach ineffici l lattic height ond comput f might take onk work run time on kd next section present effici techniqu base evalu singl variabl formul f rather f provid effici solut solv equat fx simpl worklist iter techniqu spars equat make algorithm effici initi equat variabl x place equat worklist w w empti do a remov equat y worklist w b solv use valu x variabl c solut chang set x place equat use x back w function f monoton input function drop lattic defin variabl go lower lattic lattic height d variabl drop and chang time function express program worklist per time input drop lattic okd time time function remov worklist take time ok evalu total evalu time per function ok d total run time onk d simpl constant propag number equat n number statement n ssa form program k ariti function small run time on unreach code elimin analysi unreach code elimin simpl constant propag seek determin code program execut either controlflow test base constant valu code jump it infer determin whether section code reachabl express twoelement lattic l u element fu rg u unreach r reachabl defin function similar boolean figur analysi constant fact avail liter constant defin j return u input textual equal r otherwis u u r r r r u u u r u r figur or defin l u figur gener equat exampl befor readabl defin f synonym integ start statement clearli reachabl statement reachabl fall reach bottom loop statement loop predic alway fals remain equat gener similar fashion equat composit monoton function monoton b pred liter constant j test must return r solut straightfor ward everyth reachabl program equat int x deltapr j f figur unreach code elimin exampl look close exampl see program run x set if predic b alway fals consequ test s never execut neither simpl constant propag unreach code elimin discov fact analysi need fact discov other combin analys improv result optim would like combin two analys thi need framework allow us describ combin system reason properti answer critic question particular would like know combin transform correct is retain meaningpreserv properti origin separ transform combin profit is discov fact improv code way separ techniqu cannot combin framework monoton know gfp exist find effici combin analys union set equat make explicit implicit refer equat union equat make bigger set unrel equat howev equat remain monoton safe howev analys interact profit combin them make analys interact replac implicit refer function take input one origin framework produc output other reachabl equat use variabl b defin constant propag equat instead test b liter constant test replac j function l c theta n l u defin figur function exampl function mix input output framework take input c framework return result l u framework mean easili determin know test constant ie exit path reachabl otherwis test constant one exit path reachabl first glanc function look nonmonoton f compar l c import question answer is function repres interact framework monoton are combin framework monoton use tool develop handl monoton framework origin framework monoton transfer function mono tonic combin framework monoton combin two framework implementor must prove properti fortun reason monoton transfer function harder reason origin framework transfer function use exampl repres small tabl determin function monoton inspect profit combin framework combin framework profit profit gfp solut comput valu mix function higher output lattic implicit function mix function replac mix function solut implicit function equat use mix function better result use implicit function mean combin solut fare better implicit function use impli combin solut better individu solut function framework l c framework l u viceversa simpl phase order problem solv l c framework l u framework achiev result equal f u r u r test predic unreach code comput figur mix function combin equat combin framework combin framework profit also function l u c combin gfp improv mix function result back exampl unreach code alway comput constant propag equat get explicit refer appropri reachabl variabl reachabl variabl use input monoton infix function defin figur instead one equat per statement two equat per statement equat grown by most constant amount so total size equat grown constant factor remain linear number statement program equat int x pred deltapr f figur combin exampl exampl complet new equat given figur solv equat straightforward tediou solut use iter techniqu given section present figur exampl box term repres step b the variabl comput main point interest interact separ analys equat x time x along variabl initi u time x meet x x get valu time constant f time left mark unreach u sinc chang valu equat set x never place worklist time x meet x x get valu sinc x chang user x includ x s go back worklist time x s origin valu remain unchang solut stabil statement mark unreach x known constant fact found individu analys repeat applic separ analys cannot pred figur solv combin exampl discov new fact new applic start fact first analysi did howev combin framework find fact condit constant propag algorithm wegman zadeck discov fact improv solut more knowledg deriv interact made explicit equat specif combin framework expos unreach code precis reachabl equat reli assumpt made constant propag equat viceversa assumpt optimist sens justifi fact hand must proven correct assumpt correct equat must reevalu light new more pessimist correct inform howev assumpt correct someth new may discov thu reason ccp improv simpl constant propag unreach code elimin interact if combin framework implicit interact made explicit combin framework discov addit fact case combin framework consist two independ set equat global valu number formul monoton analysi framework find congruent express defin two express congruent when ffl two express express reflex ffl comput equival function congruent input ffl comput constant ffl one ident function other wegman zadeck use term optimist assumpt function aris direct copi input languag algebra ident addit zero merg congruent valu oefunct congruenc relat hold pair express program size n on infer and on equat solv deriv equat involv constant infer reachabl infer congruenc infer straightforward manner equat interact benefit solv combin problem infer whether two express congruent express twoelement lattic lj element fj jg overload function delta work lj element usual way shown figur write c xy variabl determin whether express x congruent express y x op primit function express x x ith input x op basic congruenc equat express x look like reflex equal function congruent input constant add zero add commut merg congruent valu multipli test function valu ie x fix program precomput solv gener problem equat still complex fix number special case one special case per kind algebra ident number input equat defin c xy thu fix constant k function involv equat monoton composit function also monoton thu use algorithm section achiev run time onk d sinc constant run time on make gvn interact ccp modifi c xy equat use comput constant instead textual constant note undefin valu congruent anyth either undefin comput constant add zero congruenc equat clearli use valu l c lattic add mix function revers direct defin subtract congruent valu yield compar congruent valu yield sinc mix function go lj l c element opportun find congruenc constant unreach code found separ analys figur exampl code solv combin problem result n c xy congruenc form equival relat fairli obviou strategi pick one express partit repres express partit build new program select express drop unreach code use constant possibl howev partit might contain express slightli stronger notion congruenc alpern wegman zadeck use allow ident function if cours solv equat subtract constant yield constant consid congruent conflict instead choos leav subtract express situat temporari cannot remain congruent f int constant int defin unknown int congruent z predic if z if know z congruent then destroy constant x know x constant then destroy yz congruenc printfx dnnx x alway figur subtl congruenc littl dead code algebra ident anoth express partit express select repres partit presenc undefin variabl result congruenc form equival relat defin express x congruent express express x start congruent constant constant x drop problem resolv equat solv x remain becaus x undefin congruenc x remain lead unusu behavior code figur test x constant analysi show print statement alway reach f int x x undefin figur use undefin variabl languag standard fail address particular aspect use undefin variabl believ interpret correct given fact hand unusu behavior avoid analysi look congruenc relat form equival relat arbitrari congruenc broken some c xy variabl set j analysi proceed anoth lower fix point reach process continu equival relat form worst case congruenc broken result clearli trivial equival relat process break congruenc forc analysi choos x congruent x congruent moral stori is use undefin variabl lead unexpect result summari paper shown combin two code improv techniqu assum origin transform encod monoton analysi framework model combin two framework reason monoton combin framework solv combin framework effici furthermor structur combin framework show combin produc better result repeat applic origin transform and equal import cannot illustr point show combin constant propag unreach code elimin deriv algorithm properti similar condit constant propag algorithm present wegman zadeck combin framework includ transfer function take constant valu reachabl reachabl valu back constant propag discov constant unreach code repeat applic origin transform final show combin constant propag unreach code elimin global valu number open question framework combin profit combin asymptot complex present analysi on discov fact separ applic three transform gener combin two framework import remov phase order problem monoton analysi framework combin problem run onk d time n number equat k ariti function use equat height infer lattic r detect equal variabl program systemat design program analysi framework effici method comput static singl assign form program depend graph use optim flow analysi comput program monoton data flow analysi framework depend flow graph algebra approach program depend unifi approach path problem latticetheoret fixpoint theorem applic constant propag condit branch tr program depend graph use optim detect equal variabl program effici method comput static singl assign form constant propag condit branch unifi approach path problem flow analysi comput program systemat design program analysi framework depend flow graph algebra approach program depend ctr rebecca hasti susan horwitz use static singl assign form improv flowinsensit pointer analysi acm sigplan notic v n p may decid phase order problem optim compil proceed rd confer comput frontier may ischia itali joel ausland matthai philipos craig chamber susan j egger brian n bershad fast effect dynam compil acm sigplan notic v n p may dipanwita sarkar oscar waddel r kent dybvig nanopass infrastructur compil educ acm sigplan notic v n septemb alexandr lenart christoph sadler sandeep k s gupta ssabas flowsensit type analysi combin constant type propag proceed acm symposium appli comput p march como itali bjorn de sutter bruno de bu koen de bosscher saumya debray combin global code data compact acm sigplan notic v n p aug min zhao bruce childer mari lou soffa predict impact optim embed system acm sigplan notic v n juli keith d cooper alexand grosul timothi j harvey steve reev devika subramanian linda torczon todd waterman explor structur space compil sequenc use random search algorithm journal supercomput v n p may virgil palanciuc drago badea spill code minim techniqu applic metrowerk starcor c compil intern journal parallel program v n p decemb wankang zhao baosheng cai david whalley mark w bailey robert van engelen xin yuan jason d hiser jack w davidson kyle gallivan dougla l jone vista system interact code improv acm sigplan notic v n juli sorin lerner david grove craig chamber compos dataflow analys transform acm sigplan notic v n p jan roberto giacobazzi francesca scozzari logic model relat abstract domain acm transact program languag system topla v n p sept matthew b dwyer lori a clark jamieson m cobleigh gleb naumovich flow analysi verifi properti concurr softwar system acm transact softwar engin methodolog tosem v n p octob keith d cooper li xu effici static analysi algorithm detect redund memori oper acm sigplan notic v n supplement p februari keith d cooper l taylor simpson christoph a vick oper strength reduct acm transact program languag system topla v n p septemb jeffrey dean greg defouw david grove vassili litvinov craig chamber vortex optim compil objectori languag acm sigplan notic v n p oct thoma kistler michael franz continu program optim case studi acm transact program languag system topla v n p juli