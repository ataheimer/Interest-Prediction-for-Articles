t runtim spatial local detect optim a dispar processor main memori perform grow number execut cycl spent wait memori access complet also increas result latenc hide techniqu critic improv applic perform futur processor present microarchitectur scheme detect adapt vari spatial local dynam adjust amount data fetch cach miss spatial local detect tabl introduc paper facilit detect spatial local across adjac cach block result detail simul sever integ program show signific speedup improv due reduct conflict capac miss util small block small fetch size spatial local absent prefetch effect larg fetch size spatial local exist b introduct paper introduc approach solv grow memori latenc problem intellig exploit spatial local spatial local refer tendenc neighbor memori locat referenc close togeth time tradit two main approach use exploit spatial local first approach use larger cach block natur prefetch effect howev larg cach block result wast bu bandwidth poor cach util due fragment underutil cach block neg effect occur data littl spatial local cach second common approach prefech multipl block cach howev prefetch benefici prefetch data access cach otherwis prefetch data may displac use data cach addit wast bu bandwidth similar issu exist alloc cach which effect prefetch data cach block contain written address particu technic report longer version larli use larg block size write alloc amount prefetch fix howev spatial local henc optim prefetch amount vari across often within program avail chip area increas meaning spend resourc allow intellig control latencyhid techniqu adapt variat spatial local numer program sever known compil techniqu optim data cach perform contrast integ nonnumer program often irregular access pattern compil cannot detect optim exampl tempor spatial local link list element hash tabl data often difficult determin compil time paper focus cach perform optim integ program focu attent data cach techniqu present applic instruct cach order increas data cach effect integ program investig method adapt cach hierarchi manag intellig control cach decis base usag characterist access data paper examin problem detect spatial local access data automat control fetch multipl smaller cach block data cach buffer abl reduc conflict capac miss smaller cach line fetch size spatial local absent also reduc cold start miss prefetch use data larger fetch size spatial local present introduc new hardwar mechan call spatial local detect tabl sldt sldt entri track access multipl adjac cach block facilit detect spatial local across block cach result inform later record memori address tabl longterm track larger region call macroblock show extens cach microarchitectur significantli improv perform integ applic achiev improv cycl memori latenc respect scheme fulli compat exist instruct set architectur isa remaind paper organ follow section relat work section discuss gener spatial local issu code exampl common applic use illustr role spatial local cach line size determin applic cach perfor manc well motiv spatial local optim techniqu section discuss hardwar techniqu section present simul result section perform cost analysi ad hardwar section conclud futur direct relat work sever studi examin perform effect cach block size one studi allow multipl consecut block fetch one request found data cach optim staticallydetermin fetch size gener twice block size work also examin fetch size larger block size howev allow fetch size vari base detect spatial local anoth method allow number block fetch miss vari across program execut across differ data hardwar softwar prefetch method uniprocessor machin propos howev mani method focu prefetch regular array access within wellstructur loop access pattern primarili found numer code method gear toward integ code focu compilerinsert prefetch pointer target could use conjunct techniqu dual data cach attempt intellig exploit spatial tempor local howev tempor spatial data must place separ structur therefor rel amount type data must determin priori also spatial local detect method tune numer code constant stride vector integ code spatial local pattern may regular split temporalspati cach similar structur dual data cach howev runtim local detect mechan quit differ dual data cach paper spatial local cach seek exploit principl local store referenc item cach exploit tempor local tendenc item rereferenc soon addit store multipl item adjac referenc item exploit spatial local tendenc neighbor item referenc soon exploit tempor local result cach hit futur access particular item exploit spatial local result cach hit futur access multipl nearbi item thu avoid long memori latenc shortterm access item well tradit exploit spatial local achiev either larger block size prefetch addit block defin follow term use throughout paper element data item maximum size allow isa system byte spatial reus refer cach element element caus referenc element fetch cach spatial local applic data set predict effect spatial local optim unfortu nate quantit measur spatial local exist forc adopt indirect measur one indirect measur amount spatial local via invers rela tioship distanc refer space time view measur spatial reus kbyte fullyassoci cach byte line give us approxim time bound the time taken block displac space bound within byte block boundari chose block size past studi found byte block size maxim data cach perform measur techniqu differ explicit measur reus distanc in time goal measur reus unus portion cach block differ cach organ figur a show spatial local estim fullyassoci cach number dynam cach block broken number byte element access block cach lifetim block one element access spatial local within measur context graph show rel locat access element within byte cach block figur a show cach block spatial reus figur b show distribut chang kbyte directmap cach case block spatial reus byte cach block half time extra data fetch cach simpli wast bu bandwidth cach space similar observ made numer code therefor would benefici tune amount data fetch cach miss spatial local avail data optim investig work discuss sever issu involv vari fetch size includ cost effici accur spatial local detect fetch size choic cach support vari fetch size code exampl section use code exampl spec gcc illustr difficulti involv static analysi annot spatial local inform motiv dynam approach one main data structur use gcc rtl ex pression rtx whose definit shown figur rtx structur contain twobyt code field onebyt mode field seven onebit flag array operand field operand array defin contain one fourbyt ele ment howev rtx dynam alloc contain mani array element operand depend rtx code rtl express type therefor rtx instanc contain eight byte frequent execut rtx renumb equal tine use jump optim two rtx compress sc go vortex pcode lmdes_custom cc li perl mksim benchmark total block block access four element block access three element block access two element block access one element a kbyte fullyassoci compress sc go vortex pcode lmdes_custom cc li perl mksim benchmark total block block access four element block access three element block access two element block access one element b kbyte directmap figur breakdown block cach l data cach mani byte element access block cach result two cach configur shown byte block struct rtxdef kind express is enum kind valu express ha enum machinemod mode variou bit flag unsign int unsign int call unsign int unchang unsign int volatil unsign int instruct unsign int use unsign integr first element operand rtx number operand type control code field accord rtldef rtunion fld common union element rtx int rtint char struct struct enum machinemod rttype figur gcc rtx definit structur compar determin equival figur show slightli abbrevi version renumb equal routin check code mode field two rtx structur ident routin compar operand determin also ident four branch target figur annot execut weight deriv execut profil use spec refer input roughli time code field two rtx structur compar exit case first two byte rtx structur access time x const int rtx first operand access therefor first eight byte rtx structur access spatial local within eight byte mani type rtl express routin use loop iter operand last first compar mismatch found case spatial local slightli larger distanc in space previou case instruct type contain one operand common operand type loop rtl express result recurs call rtx renumb equal p routin illustr amount spatial local vari particular load refer depend function argument therefor origin access rtx structur routin miss optim amount data fetch cach vari correspond ingli exampl access getcodey line figur perform access ycode miss l cach spatial local data depend whether program later fall case bodi switch statement line bodi loop line rtx type x determin initi valu loop howev time cach miss line inform avail highli datadepend such neither static analysi if even possibl profil result definit accur spatial local inform load instruct dynam analysi spatial local data offer greater promis routin dynam analysi instanc access routin would obtain accur spatial local detect also dynam scheme requir profil mani user unwil perform isa chang case label_ref return next_real_insn xfldrtx next_real_insn yfldrtx case symbol_ref return xfldrtstr yfldrtstr compar element pair correspond element fail match return whole thing regist int j switch fmti case i xfldirtint yfldirtint return break case s return break case e access xyfldirtvec return regist int regist rtx_code regist char fmt rare enter case e switch code case pc case cc case addr_vec case addr_diff_vec return rtx_renumbered_equal_p xfldirtx yfldirtx case const_int return xfldrtint yfldrtint exit time exit time case match time exit time figur gcc rtx renumb equal routin execut time applic asid vari data cach load fetch size spatial local optim could use control instruct cach fetch size write alloc versu noalloc poli cie bypass fetch size bypass employ latter case discuss briefli greatli expand paper paper examin applic techniqu control fetch size l l data cach also studi optim conjunct cach bypass complementari optim also aim improv cach perform overview prior work section briefli overview concept mac roblock well memori address tabl mat introduc earlier paper util work show cach bypass decis could effect made runtim base previou usag memori address access bypass scheme includ particular scheme dynam kept track access frequenc memori region call macroblock macroblock static defin block memori uniform size larger cach block size macroblock size larg enough total number access macroblock excess larg small enough access pattern cach block contain within macroblock rel uniform determin kbyte macroblock provid good costperform tradeoff order keep track macroblock run time use mat ideal contain entri macroblock access macroblock address support dynam bypass decis entri tabl contain satur counter counter valu repres frequenc access correspond mac roblock detail mat bypass scheme see also introduc paper optim gear toward improv effici l bypass track spatial local bypass data use mat use inform determin much data fetch l bypass paper introduc robust spatial local detect optim scheme use sldt enabl much effici detect spatial local new scheme also support fetch vari amount data level data cach without bypass practic spatial local optim perform combin by pass order achiev best possibl perform well amort cost mat hardwar cost combin hardwar address section set set set set set tag data byte x x tag data byte x x figur layout byte subblock byte block start address x byte way setassoci cach byte line shade block correspond locat four byte subblock follow present experiment result support vari fetch size vari fetch size optim could support use subblock case block size largest fetch size subblock size gcdfetch n number fetch size support current support two poweroftwo fetch size level cach subblock size simpli smaller fetch size howev cach line underutil smaller size fetch instead use cach small line equal smaller fetch size option fill multipl consecut block larger fetch size chosen approach similar use prefetch strategi result cach fulli util even smaller size fetch also elimin conflict miss result access differ subblock howev approach make detect spatial reus much difficult describ section also smaller block size increas tag array cost address section scheme max fetch size data alway align boundari result techniqu fetch data either side access element depend locat element within max fetch size block experi spatial local data cach either direct spatial referenc element spatial local detect tabl facilit spatial local track spatial counter sctr includ mat entri role sctr track medium longterm spatial local correspond macroblock make fetch size decis explain section counter increment whenev spatial miss detect occur portion larger fetch size block data resid cach element current ac cess therefor hit might occur larger fetch size fetch rather smaller fetch size implement multipl cach block fill larger fetch size chosen spatial miss trivial detect cach fullyassoci tag differ block resid larger fetch size block lie consecut set shown figur data one byte block highlight search cach block larger fetch size block data requir access tag consecut set thu either addit cycl access addit hardwar support one possibl restructur tag array design allow effici access multipl consecut set tag altern separ structur use detect inform approach investig work structur call spatial local detect tabl sldt design effici detect spatial reus low hardwar overhead role sldt detect spatial local data cach record mat data displac sldt basic tag array block larger fetch size allow singlecycl access necessari inform figur show overview sldt interact mat l data cach doublearrow line show correspond four l data cach entri singl sldt entri order track cach block sldt would need n entri n number block cach repres worst case fetch smaller line size block cach differ larger size block howev order reduc hardwar overhead sldt use much smaller number entri allow us captur shorterterm spatial reus sldt could use track spatial local aspect structur level memori hierarchi data cach instruct cach and perform bypass bypass buffer sldt tag correspond maximum fetch size block sz field one bit indic either larger size block fetch cach smaller block fetch vc valid count field logmax fetch sizemin fetch size bit length indic mani smaller block larger size block current valid data cach actual number valid smaller block vc sldt entri valid larger size block constitu block current valid data cach bit mask could use implement vc rather counter design reduc oper complex howev larg maximum minimum fetch size ratio bit mask result larger entri final sr spatial reus bit set spatial reus detect discuss later larger size block data fetch cach sldt entri alloc possibl caus replac exist entri valu sz vc set max fetch sizemin fetch size gamma respect smaller size block fetch sldt entri current exist correspond larger size block entri alloc sz vc initi entri alreadi exist vc increment indic addit valid constitu block data cach fetch size sr bit initi cach block replac data cach correspond sldt entri access vc valu decrement greater vc alreadi valid block sldt entri invalid spatial reus hit mat sctr fetch updat sctr hit spatial reus result l data cach addr tag sz vc sr figur sldt mat hardwar sldt entri invalid sr bit check see spatial reus data cach not correspond entri mat access sctr decrement effect deposit inform mat longerterm track sldt manag cach entri replac case action taken fi fetch initi bit ad data cach tag help detect spatial hit fi bit set cach refil cach block contain referenc element ie cach block caus fetch otherwis reset therefor hit block fi bit spatial hit data fetch cach miss element tabl summar action taken sldt memori access sr bit initi zero set type spatial miss spatial hit two type spatial miss detect first type spatial miss occur portion larger fetch size block fetch independ indic valid sldt entri sz therefor might cach hit larger size block fetch correspond entri mat access sctr increment second type occur larger size block fetch one constitu block displac cach indic cach miss valid sldt entri sz trivial detect miss element caus origin fetch element larger fetch size block sr bit conserv set sctr correspond mat entri increment spatial hit occur two situat larger size block fetch fi bit set one load cach block hit load cach block without fi bit set spatial hit describ earlier increment sctr spatial hit fetch size correct updat sctr fetch size chang futur multipl smaller block fetch hit one also character spatial hit case detect check vc larger sz howev increment sctr case either spatial miss would detect earlier second element larger fetch size block first access and miss cach sldt access access fi sz vc action miss hit cach entri vc replac vc invalid sldt entri sldt entri replac sr invalid sr action tabl sldt action dash indic correspond valu blank indic valu matter fetch size decis memori access lookup mat correspond macroblock entri perform parallel data cach access entri found sctr valu compar threshold valu larger size fetch sctr larger threshold otherwis smaller size fetch entri found new entri alloc sctr valu initi threshold valu larger fetch size chosen paper threshold maximum sctr valu experiment evalu experiment environ simul ten benchmark includ compress sc cc spec benchmark suit use refer input go vortex li perl mksim spec benchmark suit use train input last two benchmark consist modul impact compil felt repres mani realworld integ applica tion pcode front end impact run perform depend analysi intern represent combinec file gnu cc input lmde custom machin descript optim run optim supersparc machin descript optim oper link list complex data structur util hash tabl effici access inform order provid realist evalu techniqu futur highperform highissu rate system first optim code use impact compil classic optim appli optim perform increas instruct level parallel code schedul regist alloc optim eightissu scoreboard superscalar processor regist renam isa extens hp parisc instruct set support compiletim specul perform cyclebycycl emulationdriven simul hewlettpackard parisc workstat model processor memori hierarchi includ relat buss instruct latenc use hewlettpackard parisc given tabl base machin configur describ tabl sinc simul entir applic level detail would impract uniform sampl use reduc simul time howev emul still perform function latenc function latenc memori load fp multipli memori store fp divid singl prec branch tabl instruct latenc simul experi l icach kbyte splitblock direct map byte block l dcach kbyte nonblock max direct map byte block multiport writeback write alloc ll bu byte bandwidth splittransact cycl latenc return critic word first l dcach l dcach except kbyte byte block system bu ll bu except cycl latenc issu issu uniform except memori opscycl max regist integ doubl precis floatingpoint tabl base configur sampl simul sampl instruct length space evenli everi instruct yield sampl ratio smaller ap plicat time sampl reduc maintain least sampl instruct evalu accuraci techniqu simul sever configur without sampl found improv report paper close obtain simul entir applic macroblock spatial local variat present perform improv achiev optim first examin accuraci macroblock granular track spatial local import accur spatial local inform mat scheme success mean data element macroblock similar amount spatial local phase program execut divid main memori macroblock describ section macroblock subdivid smaller section size byte cach block simpli call smaller section block order determin dynam cach block spatial local behavior examin access block gather inform twice per simul sampl everi instruct end instruct phase determin fraction time block memori least one spatial reus time cach phase call spatial reus fraction block figur show graphic represent result inform three program row graph repres kbyte macroblock access particular phase everi phase particular macroblock access correspond row row contain one data point everi byte block access correspond phase lie macroblock purpos clariti row sort averag block spatial reus fraction per macroblock averag increas bottom top graph cach block macroblock also sort spatial reus fraction increas left right row full mean block access correspond phase final cach block spatial reus fraction fall within rang plot marker figur a show spatial local distribut compress block correspond lighter gray point spatial reus fraction mean spatial reus block less time cach block correspond black point spatial reus time cach repres fairli optim scenario macroblock contain block approxim amount reus figur b show distribut perl around macroblock id contain block littl spatial reus spatial reus fraction less macroblock id contain block larg fraction spatial reus spatial reus fraction macroblock contain cach block differ amount spatial reus medium gray point row correspond block spatial reus fraction howev inform reveal time interv spatial reus block vari possibl certain small phase program execut spatial local behavior uniform chang drastic one small phase execut anoth type behavior possibl due dynamicallyalloc data particular section memori may alloc one type data one part program freed realloc anoth type later final figur c show distribut gcc similar characterist perl macroblock nonuniform spatial reus fraction perform improv section examin perform improv execut cycl elimin base issu configur describ section support vari fetch size use sldt mat level cach hierarchi l l sldt directmap entri larg number simul show directmap sldt perform well fullyassoci design entri perform almost well larger poweroftwo number entri entri maximum size examin l l mat util kbyte macroblock examin one fourbit sctr first present result infinit entri mat studi effect limit number mat entri static versu vari fetch size left bar benchmark figur a show perform improv achiev use byte l data cach block static byte fetch size base byte block fetch size bar show better choic block size highli applicationdepend right bar show improv achiev spatial local optim l level onli use byte data cach block size fetch either byte l data cach miss depend valu a compress b perl b gcc figur reus fraction srf cacheblocksizeddata access macroblock three applic correspond sctr result show scheme abl obtain either almost perform abl outperform best static fetch size scheme case bit sctr perform similarli one case bit sctr achiev almost greater perform improv four leftmost bar benchmark figur b show perform improv use differ l data cach block static fetch size l spatial local optim bit sctr base configur configur describ section byte l data cach block fetch size bar show that again better static blockfetch size highli applicationdepend exampl perl achiev much better perform byte fetch size compress achiev best perform byte fetch size obtain perform degrad byte fetch rightmost two bar figur b show perform improv achiev l spatial local optim use byte l data cach block size fetch either byte l data cach miss depend valu correspond l mat sctr again spatial local optim abl obtain almost better perform best static fetch size scheme benchmark figur show breakdown processor stall cycl attribut differ type data cach miss percentag total base configur execut cycl left right bar benchmark stall cycl breakdown base configur spatial local optim respect spatial local optim perform cach level use configur figur b bit sctr benchmark larg amount spatial local indic result figur obtain larg reduct l cold start stall cycl fetch byte l cach miss benchmark littl spatial local l data cach compress pcode obtain reduct l capac miss stall cycl fetch fewer small cach block l miss case l cold start stall cycl increas indic l optim less aggress term fetch data howev increas gener compens reduct type l stall cycl conflict miss stall cycl increas lmde custom tend fetch fewer block l miss expos conflict interpret capac miss base configur revisit exampl section found access ycode line figur miss time fetch byte miss byte remain also found averag spatial hit spatial miss result data occur per miss illustr techniqu success choos appropri amount data fetch miss setassoci data cach increas setassoci data cach reduc number conflict miss may turn reduc advantag offer optim howev compress sc go vortex pcode lmdes_custom cc li perl mksim benchmark improv base l static byte blockfetch size vari fetch bit sctr vari fetch bit sctr a l trend compress sc go vortex pcode lmdes_custom cc li perl mksim benchmark improv base l static byte blockfetch size l static byte blockfetch size l static byte blockfetch size l static byte blockfetch size vari fetch bit sctr vari fetch bit sctr b l trend with l vari fetch figur perform variou staticallydetermin blockfetch size spatial local optim use bit sctr compress base opti base opti base opti vortex base opti pcode base opti lmdes_custom base opti base opti base opti perl base opti base opti benchmark total base execut cycl cold start stall cycl l capac miss stall cycl conflict miss stall cycl cold start stall cycl l capac miss stall cycl conflict miss stall cycl figur stall cycl breakdown base spatial local optim reduct capac cold start stall cycl optim achiev remain investig effect data cach configur discuss section modifi way setassoci l data cach way setassoci l data cach figur show new perform improv optim left bar show result appli optim l data cach onli right bar show result appli techniqu l l data cach use fourbit sctr improv reduc significantli benchmark shown figur howev larg improv still achiev benchmark particularli appli optim l data cach level due reduct achiev l cold start stall cycl data spatial local compress sc go vortex pcode lmdes_custom izer benchmark improv base vari fetch bit sctr vari fetch bit sctr figur perform spatial local optim way way setassoci l l data cach respect grow memori latenc effect discuss section memori latenc increas trend expect continu figur show improv achiev optim appli directmap cach cycl la tenci rel base configur memori latenc benchmark see much larger improv optim except compress compress littl spatial local exploit longer latenc cannot hidden effect although raw number cycl elimin grow percentag associ base execut cycl count becom smaller comparison integr techniqu doubl data cach memori latenc increas intellig cach manag techniqu becom increasingli import examin perform improv achiev integrat compress sc go vortex pcode lmdes_custom izer benchmark improv base cycl latenc cycl latenc figur perform spatial local optim grow memori latenc compress sc go vortex pcode lmdes_custom izer benchmark improv base doubl kk ll vari fetch bit sctr bypass infinit mat vari fetch bit sctr bypass kentri mat vari fetch bit sctr bypass entri mat figur comparison doubl cach integr spatial local bypass optim infinit entri entri directmap mat examin ing spatial local optim intellig bypass ing use bit access counter mat entri way setassoci buffer use hold bypass data l l cach contain byte entri byte entri respect then sldt mat cach level use detect spatial local control fetch size data cach bypass buffer level figur show improv achiev combin techniqu cach level cycl memori latenc show result three directmap mat size infinit kentri entri also shown perform improv achiev doubl l l data cach doubl cach bruteforc techniqu use improv cach perform figur show perform integr optim cach level outperform simpli doubl level cach case doubl cach perform significantli better optim compress improv mostli come doubl l data cach result hash tabl fit data block tag tag cach cost size size cost level byte byte set bit byte tabl hardwar cost doubl data cach kbyte cach pcode benchmark perform degrad significantli reduc mat size howev kentri mat still outperform doubl cach compar figur bypass improv show often signific improv achiev intellig control fetch size data cach bypass buffer design consider section examin hardwar cost spatial local optim scheme describ section compar cost doubl data cach level discuss section cost mat hardwar amort perform spatial local bypass optim reason comput hardwar cost hardwar support opti mizat combin perform compar perform doubl cach section addit hardwar cost incur spatial local optim scheme small compar doubl cach size level particularli l cach kbyte directmap l cach use gener result section bit tag use per entri assum bit address doubl cach result bit tag line size byte total addit cost increas tag array lambda k byte addit extra k data need similar comput show cost doubl kbyte l cach extra byte tag k byte data total tag data cost doubl l l cach shown tabl directmap mat bit access counter bit spatial counter tabl give hardwar cost data tag mat size discuss section sinc address within macroblock map mat counter number lower address bit discard access mat size result mat address kbyte macroblock shown column tabl a tabl b show data tag array cost directmap data cach spatial local optim scheme data cost remain base configur cost tag array cost increas due decreas line size addit support scheme requir bit fetch initi bit per tag entri cost l buffer way setassoci cach byte line shown tabl c optim data cach bypass buffer requir bit fetch initi bit addit address tag cost l bypass buffer comput similarli tabl c ignor valid bit state mat data cost size mat tag size tag cost entri byte address bit bit byte a hardwar cost k entri mat cost l l cach level data fetch block tag tag cach cost size size size cost level byte byte byte set bit byte b hardwar cost optim data cach block data tag tag cach fetch size cost size cost level entri size byte byte byte bit byte c hardwar cost bypass buffer cach sldt tag size tag cost level entri bit byte d hardwar cost sldt figur hardwar cost breakdown spatial local optim final compon spatial local optim scheme entri sldt organ directmap tag array vc bit sz bit sr field includ tag entri l sldt requir bit vc byte line per byte maximum fetch l sldt requir bit vc due byte line per byte maximum fetch bit mask could use implement vc rather counter design reduc oper complex howev larg maximum minimum fetch size ratio to ratio l cach bit mask result larger entri tabl d show total tag array cost l l sldt final combin cost mat optim data cach bypass buffer sldt result total l cost byte entri mat byte kentri mat therefor save doubl l data cach k k byte kentri mat respect similar calcul show l optim save k byte k byte kentri mat re spectiv doubl l data cach translat less tag data doubl data cach l l level respect larger kentri mat compar perform spatial local bypass optim perform obtain doubl data cach level shown figur illustr much smaller hardwar cost optim usual outperform simpli doubl cach reduc hardwar cost could potenti integr l mat tlb page tabl macroblock size larger equal page size tlb entri need hold one bit counter valu macroblock size less page size tlb entri need hold sever counter one macroblock within correspond page case small amount addit hardwar necessari select counter valu howev studi need determin full effect tlb integr conclus paper examin spatial local characterist integ applic show spatial local vari program also vari vastli data access applic result vari spatial local within across applica tion spatial local optim must abl detect adapt vari amount spatial local within across applic order effect present scheme meet object detect amount spatial local differ portion memori make dynam decis appropri number block fetch memori access spatial local detect tabl sldt introduc paper facilit spatial local detect data cach inform later record memori address tabl mat longterm track use tune fetch size miss access detail simul sever applic show signific speedup achiev techniqu improv due reduct conflict capac miss util small block small fetch size spatial local absent util prefetch effect larg fetch size spatial local exist ad dition show speedup achiev scheme increas memori latenc increas memori latenc increas import cach perform improv level memori hierarchi continu grow also avail chip area grow make sens spend resourc allow intellig control cach manag order adapt cach decis dynam access behav ior believ scheme extend gener framework intellig runtim manag cach hierarchi acknowledg author would like thank mark hill santosh abraham wenhann wang well member impact research group comment suggest help improv qualiti research research support nation scienc foundat nsf grant ccr intel corpo ration advanc micro devic hewlettpackard sun mi crosystem ncr nation aeronaut space administr nasa contract nasa nag cooper illinoi comput laboratori aerospac system softwar iclass r runtim spatial local detect optim predict preclud problem memori latenc runtim adapt cach hierarchi manag via refer analysi the perform impact block size fetch strategi line block size choic cpu cach memo rie fix adapt sequenti prefetch share memori multipro cessor cach memori improv directmap cach perform addit small fullyassoci cach prefetch buffer an effect onchip preload scheme reduc data access penalti quantifi perform potenti data prefetch mechan pointerintens numer program stride direct prefetch scalar processor softwar method improv cach perform supercomput applic design evalu compil algorithm prefetch data access microarchitectur superscalar processor compilerassist data prefetch compilerbas prefetch recurs data structur spaid softwar prefetch pointer call intens environ a data cach multipl cach strategi tune differ type local iti the split temporalspati cach initi perform analysi a quantit analysi loop nest local effici simul cach optim replac applic miss character a modifi approach data cach manag reduc conflict directmap cach temporalitybas design data prefetch multiprocessor vector cach memori impact architectur framework multipleinstructionissu processor how simul billion refer cheapli tr line block size choic cpu cach memori data prefetch multiprocessor vector cach memori impact data access microarchitectur superscalar processor compilerassist data prefetch effect onchip preload scheme reduc data access penalti design evalu compil algorithm prefetch direct prefetch scalar processor data cach multipl cach strategi tune differ type local modifi approach data cach manag compilerbas prefetch recurs data structur runtim adapt cach hierarchi manag via refer analysi cach memori predict preclud problem memori latenc softwar method improv cach perform supercomput applic ctr guest editor introductioncach memori relat problem enhanc exploit local ieee transact comput v n p februari afrin naz mehran rezaei krishna kavi philip sweani improv data cach perform integr use split cach victim cach stream buffer acm sigarch comput architectur new v n june jike cui mansur h samadzadeh new hybrid approach exploit local lrfu adapt prefetch acm sigmetr perform evalu review v n p decemb sanjeev kumar christoph wilkerson exploit spatial local data cach use spatial footprint acm sigarch comput architectur new v n p june jie tao wolfgang karl detail cach simul detect bottleneck miss reason optim potenti proceed st intern confer perform evalu methodolgi tool octob pisa itali srikanth t srinivasan roy dzching ju alvin r lebeck chri wilkerson local vs critic acm sigarch comput architectur new v n p may gokhan memik mahmut kandemir alok choudhari ismail kadayif integr approach improv cach behavior proceed confer design autom test europ p march mccorkl programm busmemori control modern comput architectur proceed rd annual southeast region confer march kennesaw georgia neungsoo park bo hong viktor k prasanna tile block data layout memori hierarchi perform ieee transact parallel distribut system v n p juli jaeheon jeong per stenstrm michel duboi simpl penaltysensit replac polici cach proceed rd confer comput frontier may ischia itali hur calvin lin memori prefetch use adapt stream detect proceed th annual ieeeacm intern symposium microarchitectur p decemb prateek pujara aneesh aggarw increas cach capac word filter proceed st annual intern confer supercomput june seattl washington hantak kwak ben lee ali r hurson sukhan yoon woojong hahn effect multithread cach perform ieee transact comput v n p februari ben juurlink pepijn de langen dynam techniqu reduc memori traffic embed system proceed st confer comput frontier april ischia itali toni givargi improv index cach miss reduct embed system proceed th confer design autom june anaheim ca usa mirko loghi paolo azzoni massimo poncino tag overflow buffer energyeffici cach architectur proceed confer design autom test europ p march timothi sherwood brad calder joel emer reduc cach miss use hardwar softwar page placement proceed th intern confer supercomput p june rhode greec soonta kim n vijaykrishnan mahmut kandemir anand sivasubramaniam mari jane irwin partit instruct cach architectur energi effici acm transact embed comput system tec v n p may razvan cheveresan matt ramsay chri feucht ilya sharapov characterist workload use high perform technic comput proceed st annual intern confer supercomput june seattl washington jonathan weinberg michael o mccracken erich strohmaier allan snave quantifi local memori access pattern hpc applic proceed acmiee confer supercomput p novemb