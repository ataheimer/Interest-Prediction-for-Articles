t compil parallel code spars matrix applic a develop framework base relat algebra compil effici spars matrix code dens doani loop specif represent spars matrix paper show framework use gener parallel code present experiment data demonstr code gener bernoulli compil achiev perform competit handwritten code import comput kernel b introduct spars matrix comput ubiquit comput scienc howev develop highperform softwar spars matrix comput tediou errorpron task two reason first standard way store spars matri ce sinc varieti format use avoid store zero best choic format depend problem architectur second algorithm take lot code reorgan produc effici spars program tune particular format illustr point describ two format classic format call compress column storag cc modern one use blocksolv librari serv run exampl abstract cc format illustr fig matrix compress along column store use three array colp val rowind valu nonzero element column j store array section row indic nonzero element column j store illustr fig b matrix mani zero column zero column store result call compress compress column storag format ccc case anoth level indirect ad the colind array compress column dimens well fig c colp val rowind colp val rowind a exampl matrix b cc format c ccc format figur illustr compress column storag format gener simpl format howev exploit applic specif structur matrix format use blocksolv librari exploit structur present spars matric aris solut pde multipl degre freedom figur a adapt illustr grid would aris d linear multicompon finiteel model three degre freedom discret point degre freedom illustr three dot discret point stiff matrix model would group row ident column structur call inod ident node nonzero valu inod gather dens matrix shown fig c matric also rich cliqu a partit cliqu shown fig a use dash rectangl librari color contract graph induc cliqu reorder matrix shown fig b symmetr matric lower half store togeth diagon black triangl along diagon correspond dens matric induc cliqu gray offdiagon block correspond spars block matrix store use inod notic matrix store collect smaller dens matric fact help reduc spars storag overhead improv perform matrixvector product parallel execut color divid among processor therefor processor receiv sever block contigu row processor offdiagon block actual store column in column inod perform matrixvector product storag organ make process messag contain nonloc valu vector effici addit allow overlap comput commun separ matrixvector product portion access local data one deal nonloc data incom messag main algorithm consid paper matrixvector product core comput iter solver linear system consid perform in mflop spars matrixvector product singl processor ibm sp varieti matric storag format shown tabl descript matric format found appendix a box number indic highest perform given matrix clear set experi singl format appropri kind problem demonstr difficulti develop spars bla spars matrix comput even limit format tabl one still provid least version spars matrixmatrix product color color color a subgraph gener linear finit element model b colorcliqu reorder block solv librari b f e c e f c inod storag figur illustr blocksolv format assum result store singl format lack extens spars bla approach address objectori solver librari like petsc librari argonn librari provid templat certain class solver for exampl krylov space iter solver allow user add new format provid hook implement algebra oper such matrixvector product howev mani case implement matrixvector product quit tediou as case blocksolv librari also librari use develop new algorithm radic differ solut gener spars matrix program use restructur compil technolog compil given dens matrix program declar matric actual spars respons choos appropri storag format gener spars matrix program idea explor bik approach limit simpl spars matrix format repres use highperform code intuit trade abil handl varieti format abil compil arbitrari loop nest taken differ approach previous shown effici spars sequenti code gener varieti storag format doall loop loop reduct approach base view array relat execut loop nest evalu relat queri demonstr method describ storag format access method gener enough specifi name diagon coordin cr itpack jdiag bs small bu gr memplu sherman tabl perform spars matrixvector product varieti format yet specif enough allow import optim sinc class doani loop cover matrixvector matrixmatrix product also import kernel within highperform implement direct solver incomplet precondition allow us address need number import applic one think spars code gener provid extens set spars bla code use implement varieti applic like dens bla routin parallel execut one need specifi data comput partit inform we call distribut relat come varieti format case spars matrix format distribut relat format also applic depend case regular blockcycl distribut distribut relat specifi closedform formula allow ownership inform comput compiletim howev regular distribut might provid adequ loadbal mani irregularli structur applic hpf standard provid two kind irregular distribut gener block indirect gener block distribut processor receiv singl block continu row suggest standard processor hold block size processor distribut relat replic permit ownership determin without commun indirect distribut gener user provid array map element mapi give processor ith row assign map array distribut varieti way howev requir commun determin ownership nonloc data chao librari allow user specifi partit inform provid list row indic assign processor list indic transfer distribut translat tabl equival map array partit block wise scheme gener indirect scheme use hpf also requir commun determin ownership build translat tabl alreadi discuss partit scheme use blocksolv librari somewhat differ gener gener block distribut provid hpf yet structur indirect distribut furthermor distribut relat blocksolv librari replic sinc processor usual receiv small number contigu row goal provid parallel code gener strategi follow properti ffl strategi depend fix set spars matrix format ffl depend fix set distribut ffl system extens possibl add new format without chang overal code gener mechan ffl time gener come expens perform compil must exploit structur avail spars matrix partit format solv problem extend relat approach gener parallel spars code start dens code specif spars matrix format data partit inform view array distribut relat parallel loop execut distribut queri evalu addit differ way repres partit inform regular irregular unifi view distribut map relat outlin rest paper section outlin relat approach sequenti spars code gener section describ spars parallel code gener algorithm section present experiment evid advantag approach section present comparison previou work section present conclus ongo work relat model spars code gener consid matrixvector product suppos matrix vector x spars vector dens execut code effici necessari perform iter ij xj zero set iter describ follow set constraint first row repres loop bound constraint second row associ valu array indic exampl predic ai j a constraint valu j final constraint third row specifi iter updat nonzero valu problem comput effici enumer set iter specifi constraint iter need effici access correspond entri matric vector sinc constraint linear set comput convex cannot use method base polyhedr algebra fouriermotzkin elimin enumer set approach base relat algebra model a x relat tabl hold tupl array indic valu conceptu relat correspond spars matrix contain zero nonzero valu view iter space loop relat hi ji tupl write first two row constraint follow relat queri relat algebra notat summar appendix test element spars array x nonzero use predic nzai j nzxj notic dens nzi i evalu true array therefor constraint third row rewritten as predic p call sparsiti predic use algorithm bik wijshoff comput sparsiti predic gener use definit sparsiti predic final write queri defin indic valu spars comput oe relat algebra select oper reduc problem effici enumer iter point satisfi system constraint problem effici comput relat queri involv select join problem turn solv determin effici order join perform determin join implement decis depend storag format use spars array describ storag format follow idea relat databas literatur spars storag format describ term access method properti unlik databas relat usual store flat collect tupl spars storag format hierarch structur must exploit effici exampl cc format provid way enumer row indic without first access particular column use follow notat describ hierarch structur array indic mean given column index j access set hi vi tupl row indic valu matrix oper use denot hierarchi array indic term hierarchi j i v exampl programm must provid method search enumer indic level must specifi properti method cost search whether enumer produc sort output method properti use determin good join order join implement relat queri extract program describ way describ storag format compil access method properti solv extens problem varieti storag format describ compil compil strategi depend fix set format detail format specifi compil see indic permut kind index translat easili incorpor framework suppos permut p store use two integ array perm iperm repres permut invers view p relat tupl hi i origin index permut index suppos row matrix exampl permut use p view relat hi tupl queri spars matrixvector product is sparsiti predic is summari highlight ffl array spars dens relat ffl access method defin relat view data structur implement particular format ffl view loop execut relat queri evalu ffl queri optim algorithm need know highlevel structur relat provid access method actual implement eg role colp rowind array cc storag ffl permut also handl compil ffl compil algorithm independ particular set storag format new storag format ad compil gener parallel code ancourt et al describ problem gener spmd code dens hpf program reduc comput express polyhedr algebra describ problem gener spars spmd code loop nest reduc problem evalu relat algebra queri distribut relat section describ distribut array repres section describ distribut queri translat sequenc local queri commun statement section discuss code gener algorithm use context blocksolv data structur repres distribut array uniprocessor case relat highlevel view underli data structur parallel case relat view partit or fragment store processor format fragment defin use access method outlin sec problem must address describ distribut relat fragment let start follow simpl exampl ffl matrix partit row processor p get fragment matrix p ffl let j row column indic array element origin matrix let j correspond indic fragment p partit row column indic j global row index wherea thought local row offset translat processor keep integ array ind p ind p i processor keep list global row indic assign it repres partit notic processor p array ind p view relat ind p i local fragment matrix also view relat p i a defin global matrix follow the project oper defin appendix b case processor p carri inform translat fragment p contribut global relat situat processor p might translat inform fragment store p good exampl distribut translat tabl use chao librari suppos global indic fall rang number processor let e given global index index owner processor p local offset store processor processor q hold array hp index need gener way repres index translat scheme key view index translat relat distribut relat then first case global relat defin as exampl chao librari relat defin by ind q h view mention array hp tupl relat blocki q h shorthand constraint defin index translat relat indi ind defin by exampl similarli defin global relat x vector matrixvector product assum distribut way row a gener distribut relat describ by inda r distribut relat r p fragment processor p ind globaltoloc index translat relat index translat relat differ differ array assum alway specifi map global index pair hp i notic exampl partit ind relat satisfi definit call fragment equat specifi distribut comput recal iter set loop also repres relat ii j matrixvector product exampl p access method fragment colp global relat val lowlevel data structur rowind p bernoulli compil hpf distribut array alignmentdistribut compil figur flow inform hpf bernoulli compil could requir user suppli full fragment equat i would burdensom user would provid local iter set p set realli determin compil use polici such ownercomput rule addit relat store need allow multipl storag format it mechan independ polici use determin distribut relat iter given distribut relat ind defin local iter set by p i simpl definit allow us treat iter set relat uniformli togeth relat question notic fragment equat explicit alignmentdistri bution scheme use hpf bernoulli compil global relat describ hierarchi view first local fragment defin access method view lowlevel data structur global relat defin view local fragment fragment equat hpf align distribut provid map global indic proce sor full globaltoloc index translat local storag layout and full index translat deriv compil remov user respons and flexibl in defin local storag format differ flow inform hpf bernoulli compil illustr fig mistak user may specifi inconsist distribut relat ind incon sistenc gener detect runtim exampl verifi runtim user specifi distribut relat ind fact provid onto map problem uniqu framework hpf valuebas distribut similar problem basic function specifi valu runtim properti check runtim possibl gener debug version code check consist distribut beyond scope paper translat distribut queri let us return queri spars matrixvector product relat a x defin translat distribut queri sequenc local queri commun statement expand definit distribut relat algebra simplif follow gener strategi distribut queri literatur optim problem is find site evalu part queri context of say bank databas spread across branch bank partit relat fix may optim queri submit system choic site might nontrivi ap plicat see detail discuss gener distribut queri optim problem case expect placement relat correl queri given us user particular placement iter space relat tell us queri process queri evalu processor p is p i p set iter assign processor p resolv refer global relat a x by first exploit fact join in case requir commun directli translat join local fragment then resolv remain refer comput commun set and perform actual commun relat x exampl outlin major step exploit colloc order expos fact join done without communi cation expand join use definit relat assum index translat relat ind provid map global index processor number deduc q noth statement fact align join translat into p i notic join global index translat join local offset sparsiti predic p origin refer distribut relat translat queri replac refer global relat refer local relat gener commun queri use p p i comput set global indic j x referenc processor join set index translat relat tell us get element recvind p use p tell us element x must commun processor p processor q ind relat distribut as case chao librari evalu queri might requir commun commun also express comput framework appli parallel code gener algorithm recurs summari summari repres distribut array distribut relat repres globaltoloc index translat relat distribut relat repres parallel doani loop execut distribut queri evalu ffl compil dens hpf program ancourt et al describ comput set commun set etc describ express polyhedr algebra deriv similar result spars program use relat algebra compil blocksolv format discuss introduct blocksolv librari split matrix two disjoint data structur collect dens matric along diagon shown use black triangl figur b offdiagon spars portion matrix store use inod format figur c comput matrixvector product x dens matric along diagon refer local portion vector x also offdiagon spars block store way make easi enumer separ element matrix refer local element x requir commun altogeth view matrix store blocksolv librari format sum ad a sl a snl where ffl ad repres dens block along diagon ffl sl repres portion spars block refer local element x ffl snl repres portion spars block refer nonloc element x ad sl snl partit row distribut librari assign small number continu row processor distribut relat also replic thu reduc cost comput ownership inform handwritten librari code comput commun set index translat product involv ad sl portion matrix access directli local element x use code gener technolog produc code competit handwritten code straightforward approach start sequenti dens matrix dataparallel program matrixvector product sinc matrix repres three fragment ad sl snl approach essenti comput three matrix vector product perform code discuss next section care comparison code handwritten code reveal perform code suffer fact even though product involv ad sl requir commun still requir globaltoloc index translat element x use comput view ad sl global relat store global row column indic hide fact local indic x determin directli data structur ad sl redund index translat introduc extra level indirect access x degrad node program perform point automat approach handl problem howev circumv problem cost increas complex input program specifi code product ad sl node program level code product snl still specifi global dataparallel level local local p etc local portion array y snl x global view compil gener necessari commun index translat product snl mix specif both dataparallel node level program uniqu approach exampl hpf allow programm escap node program level use extrins gener sophist composit spars format one use blocksolv librari might requir algorithm specif differ level dens loop current explor way specifi storag format get good sequenti perform without drop node level program part applic experi section present preliminari perform measur ibm sp algorithm studi parallel conjug gradient solver diagon precondit cg solv larg spars system linear equat iter follow terminolog chao project parallel implement algorithm divid inspector phase executor phase inspector determin set valu commun perform preprocess executor perform actual comput commun iter applic cost inspector usual amort sever iter executor order verifi qualiti compilergener code demonstr benefit use mix localglob specif algorithm applic measur perform inspector executor follow implement cg algorithm ffl blocksolv handwritten code blocksolv librari ffl bernoullimix code gener compil start mix lo calglob specif ffl bernoulli naiv code gener compil start fulli dataparallel specif ran differ implement solver set synthet threedimension grid problem connect result spars matrix correspond point stencil degre freedom discret point then ran solver processor ibm sp cornel theori center run kept problem size per processor constant theta place theta row theta nonzero total processor limit number solver iter tab show time in second numer solut phase the executor tab show overhead inspector phase ratio time taken inspector time taken singl iter executor compar perform bernoullimix blocksolv version verifi qualiti compil gener code differ due aggress blocksolv bernoullimix bernoulli sec sec diff sec diff tabl numer comput time iter blocksolv bernoullimix bernoulli indirectmix indirect tabl inspector overhead overlap commun comput done handwritten code current bernoulli compil gener simpler code first exchang nonloc valu x comput inspector bernoullimix code twice expens blocksolv code cost still quit neglig executor iter comparison bernoulli bernoullimix code illustr import use mix localglob specif bernoulli code perform redund work order discov refer x fact local requir commun amount work proport problem size the number unknown much larger number element x actual commun result inspector bernoulli code order magnitud expens one blocksolv bernoullimix implement perform executor also suffer redund globaltoloc translat introduc extra level indirect final code even local refer x result executor bernoulli code slower bernoullimix code demonstr benefit expos structur distribut relat measur inspector overhead use indirect distribut format hpf standard implement two version inspector use support indirect distribut chao librari ffl indirectmix inspector mix localglob specif ffl indirect inspector fulli data parallel specif tab show ratio time taken indirect inspector time taken singl iter bernoulli executor executor code exactli case measur executor bernoulli implement order magnitud differ perform indirectmix bernoullimix inspector due fact indirectmix inspector perform asymptot work requir expens commun set distribut translat tabl indirectmix inspector necessari resolv nonloc refer requir round alltoal commun volum proport problem size ie number unknown addit queri translat tabl in order determin ownership inform requir alltoal commun global index j processor queri ownership inform even though commun pattern problem limit nearestneighbor connect differ indirect bernoulli inspector pronounc number refer translat proport problem size still indirect inspector perform alltoal commun determin ownership nonloc data rel effect inspector perform overal solver perform de pend cours number iter taken solver which turn depend condit number input matrix get better idea rel perform bernoullimix indirectmix implement rang problem plot fig ratio time indirectmix implement would take time bernoullimix implement would take processor rang iter count k line fig plot valu ratio inspector overhead bernoullimix version r inspector overhead indirectmix version k iter count simpl calcul show would take iter indirectmix solver processor get within perform bernoullimix processor number iter get within would take iter processor respect data demonstr that inspector cost somewhat amort iter solver still import exploit structur distribut relat lead order magnitud save inspector cost improv overal perform solver also note indirectmix version slower two bernoulli version also requir program effort compil start specif level dens loop wherea hpf compil need sequenti spars code input target class problem spars doani loop approach result better qualiti parallel code reduc program effort indirectmix bernoullimix number iter figur effect problem condit rel perform previou work closest altern work combin bik spars compil work specifi compil spars code hpf fortran one could use spars compil translat dens sequenti loop spars loop then fortran vienna fortran compil use compil spars loop howev bik work work done ujaldon et al reduc inspector overhead spars code limit user fix set spars matrix storag distribut format reduc possibl exploit problemspecif structur conclus present approach compil parallel spars code userdefin data struc ture start doani loop approach base view parallel doani loop execut relat queri evalu spars matric distribut inform distribut relat relat approach gener enough repres varieti storag format howev gener come expens perform abl exploit properti distribut relat order produc inexpens inspector well produc qualiti numer code executor experiment evid show import achiev perform competit handwritten librari code far focus effort version iter solver conjug gradient algorithm use incomplet factor precondition core oper solver spars matrixvector product product spars matrix skinni dens matrix current investig techniqu use automat gener highperform code oper matrix factor full incomplet triangular linear system solut r linear algebra framework static hpf code distribut scan polyhedra loop global optim parallel local scalabl parallel machin solv align use elementari linear algebra advanc compil optim spars comput automat data structur select transform spars matrix comput qualiti numer softwar assess enhanc high perform fortran forum comput solut larg spars posit definit system user manual scalabl librari softwar parallel solut spars linear system algorithm itpack c fortran packag solv larg spars linear system adapt acceler iter method compil parallel spars code userdefin data structur relat approach spars matrix compil databas manag system solv ellipt problem use ellpack kyrlov subspac method supercomput new dataparallel languag featur spars matrix comput principl databas knowledgebas system distribut memori compil design spars problem tr solv ellipt problem use ellpack principl databas knowledgebas system vol krylov subspac method supercomput scan polyhedra loop global optim parallel local scalabl parallel machin runtim compil techniqu data partit commun schedul reus advanc compil optim spars comput automat data structur select transform spars matrix comput databas manag system matrix market algorithm itpack c fortran packag solv larg spars linear system adapt acceler iter method comput solut larg spars posit definit distribut memori compil design spars problem solv align use elementari linear algebra ctr chunyuan lin yehch chung jenshiuh liu effici data compress method multidimension spars array oper base ekmr scheme ieee transact comput v n p decemb yuan lin david padua automat parallel spars irregular fortran programsthi work support part armi contract dabtc armi contract nc nsf contract mip partnership award ibm work necessarili repres posit polici armi govern scientif program v n p august roxan adl marc aiguier franck delaplac toward automat parallel spars matrix comput journal parallel distribut comput v n p march chunyuan lin yehch chung data distribut scheme spars array distribut memori multicomput journal supercomput v n p juli eunjin im katherin yelick richard vuduc sparsiti optim framework spars matrix kernel intern journal high perform comput applic v n p februari chunyuan lin jenshiuh liu yehch chung effici represent scheme multidimension array oper ieee transact comput v n p march chunyuan lin yehch chung jenshiuh liu effici data parallel algorithm multidimension array oper base ekmr scheme distribut memori multicomput ieee transact parallel distribut system v n p juli