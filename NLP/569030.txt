t theorem prove guid develop formal assert resourceconstrain schedul highlevel synthesi a paper present formal specif proof correct widelyus forcedirect list schedul fdl algorithm resourceconstrain schedul data flow graph highlevel synthesi system proof effort conduct use higherord logic theorem prover proof effort mani interest properti fdl algorithm discov properti formal state prove higherord logic theorem prove environ properti constitut detail set formal assert invari hold variou step fdl algorithm insert program assert implement fdl algorithm productionstrength highlevel synthesi system turn on program assert certifi whether specif run fdl algorithm produc correct schedul and event failur help discov isol program error fdl implementationw present detail exampl sever experi demonstr effect assert discov isol error base experi discuss role formal theorem prove exercis develop use set assert embed schedul code argu absenc formal proof check effort discov use set assert would arduou imposs task b often expens ramif sinc could lead synthesi final fabric incorrect design therefor reliabl correct tool becom import issu need address simul tradit use check correct oper digit system howev increas system function complex prove inadequ due comput demand task involv formal verif correct determin independ input valu design thu exhaust valid implicit formal verif approach like theorem prove model check techniqu power techniqu employ formal verifi rtl design support use formal specif languag rigor semant formal proof method support mechan rtl design synthes realworld specif often compris larg state space make formal verif rtl design postdesign activ rather tediou often result tremend strain verif tool verif engin model check environ increas rtl design size result combinatori explos number global state theorem prove limit design size tend extrem tediou requir lot time user interact moreov synthesi rtl design highlevel synthesi inform specif refin implement longer avail end synthesi compound problem face formal verif techniqu further sever research propos altern postsynthesi verif effort idea formal hardwar synthesi origin propos johnson present techniqu deriv synchronoussystem descript recurs function definit use correct preserv function algebra transform sinc sever techniqu propos attempt guarante correct construct synthes design elimin need separ verif stage techniqu employ formal logic requir user close interact synthesi tool specif refin implement eisenbiegl et al introduc gener scheme formal embed high level synthesi algorithm hol high level synthesi perform sequenc logic transform input specif data flow graph fed synthesi system theorem prover stage synthesi control inform pass hol environ correspond transform execut within logic control inform gener extern system faulti correspond transform cannot perform within logic except rais approach probabl report attempt formal convent synthesi process howev methodolog requir tight integr synthesi system formal verif environ formal verif rtl design gener convent highlevel synthesi environ long challeng hl behavior specif goe seri transform lead final design meet set perform goal hl synthesi flow usual compris follow four main stage ffl schedul stage stage specifi partial order oper input specif data control oper bound time step oper may also map function unit compon librari stage ffl regist alloc stage carrier specif addit identifi schedul phase map physic regist ffl bind stage interconnect among differ compon design establish ffl control gener stage control gener sequenc oper rtl design propos formal assert approach build formal highlevel synthesi system approach work premis that stage synthesi system like schedul regist optim interconnect optim etc verifi perform correct transform input composition assert result rtl design equival input specif divid conquer approach verif power techniqu well research area transformationbas synthesi system algorithm complex involv convent hl render verif process formal proof system rather complex approach attempt bypass problem formal assert approach limit state space design sinc never attempt verifi rtl design directli chang made process synthesi paper look close import stage highlevel synthesi name schedul stage illustr approach verifi implement stage convent hl system formal achiev context theorem prove exercis embed within synthesi domain appeal aspect approach verif exercis conduct within framework convent synthesi system thu avoid complex involv integr synthesi system verif tool seamlessli integr convent automat synthesi formal assert approach introduc formal synthesi subtask transpar design section give outlin verif approach section introduc verif problem present core set correct condit section present well known schedul algorithm formul condit verif approach discuss proof strategi section discuss applic proof exercis within context high level synthesi environ result present section scope verif approach discuss section make conclus section assert base verif outlin verif approach base higherord logic theorem prove lead formal assert program code stage highlevel synthesi well understood scope welldefin input specif pass stage synthesi undergo specif modif bring closer final rtl design therefor possibl captur specif stage synthesi precis manner verif outlin ffl character identifi base specif model synthesi task model cover aspect correct particular synthesi task task synthesi welldefin base specif model usual tight set correct properti complet character synthesi task ffl formal specif model formal collect theorem higherord logic theorem prove environ form base formal assert algorithm chosen realiz correspond synthesi task describ formal environ ffl verif formal descript algorithm verifi theorem character base specif model inconsist base model identifi verif exercis further model enhanc sever addit formal assert deriv verif formal assert repres invari algorithm ffl formal assert embed develop softwar implement algorithm formal verifi previou stage emb much enhanc formal verifi set formal assert within softwar implement program assert synthesi implement task continu evalu specif model specifi assert design error synthesi detect highlevel synthesi system wherein task embed formal specif model constitut formal synthesi system strive gener errorfre rtl design rest paper explain verif approach context schedul task highlevel synthesi schedul task base specif model schedul task one crucial step highlevel synthesi sinc directli impact tradeoff design cost perform map oper specif time step given constraint impos input specif user time step correspond clock cycl rtl design schedul done either resourc constraint design area compon librari time constraint design speed paper illustr verif techniqu resourceconstrain schedul algorithm schedul stage view input specif depend graph depend graph direct acycl graph dag vertex associ oper specif presenc edg two vertic graph denot data depend control depend oper associ vertic data depend captur oper assign statement input specif henc order execut control depend make semant condit loop construct consid simpl depend graph shown figur opopop op denot four vertic graph oper type specifi insid vertex primari input feed op op op edg denot data depend specifi order oper execut final rtl design addit depend graph schedul stage expect valid modul bag librari compon enough function fulli implement oper specif modul bag typic gener modul gener stage usual preced schedul synthesi flow base specif model schedul task let n set oper node e set depend edg depend graph let r bag denot bag resourc avail sched func schedul function map everi oper graph posit time step given thi follow three correct condit captur base specif model exist schedul function map everi oper input specif posit time step op op op figur simpl depend graph depend preserv direct edg exist two oper graph oper sourc edg schedul earlier time step oper destin sched sched thu figur op alway schedul op resourc suffici oper map time step must satisfi resourc constraint let set time step oper graph schedul let ot set oper type graph op map function map oper type set oper time step n let rmap map oper type modul r bag implement oper type two oper op op depend graph shown figur schedul time step provid r bag least two adder everi correct schedul satisfi three correct condit properti far remov algorithm detail hold entir class resourceconstrain schedul algorithm treatment schedul stage paper concentr primari function schedul timestamp oper input specif highlevel synthesi system addit primari function schedul stage also perform function unit alloc either concurr stepwis refin manner methodolog quit easili extend reflect addit task perform schedul stage sake paper assum schedul stage support multicycl chain oper therefor oper input specif consum exactli one time step assum highlevel synthesi system gener nonpipelin rtl design therefor schedul task consid structur pipelin function pipelin issu addit correct condit easili includ base specif model order reflect extens primari schedul task assum least one resourc r bag implement oper graph conceivablyadd th condit captur desir properti schedul tight properti state everi time step maximum time step schedul graph must least one oper schedul let tmax maximum time step node input graph schedul state properti follow section discuss verif strategi close look schedul algorithm use wide highlevel synthesi forc direct list schedul algorithm propos paulin knight theori formal verif schedul algorithm forc direct list schedul fdl resourceconstrain schedul algorithm popular schedul techniqu wide use mani synthesi tool exist current literatur fdl algorithm shown figur base classic list schedul algorithm use global measur concurr throughout schedul process overview forc direct list schedul algorithm oper depend graph sort topolog order base control data depend time step step list oper readi schedul call readi list l readi form includ oper whose predecessor oper schedul long resourc bag r bag insuffici schedul oper l readi inner loop see figur keep defer oper iter order select oper defer deferr forc calcul readi list oper least forc oper pick resourc suffici remain oper readi list schedul current time step first step comput deferr forc determin time frame everi oper evalu asap alap as late possibl schedul next step determin distribut graph measur concurr similar oper final forc oper comput given time frame distribut graph calcul forc oper perform deferr produc lowest forc chosen repeat resourc suffici implement oper readi list oper prune readi list assign time step formal base specif model base specif model schedul task describ earlier section formal theorem higherord logic formul done pv prototyp verif system specif languag environ order understand formal specif model better first introduc basic type inform formal model fdl algorithm base thi describ formal correct properti theorem higherord logic fdl type specif input schedul algorithm depend graph oper input specif form node graph depend oper repres direct edg type specif shown figur describ type structur input specif oper arithmet logic condit etc therefor model oper node op node desir set data valu declar uninterpret type thu behav placehold arbitrari set data valu type declar denot op node nonempti type exist least one variabl type avoid certain typecheck condit dep edg declar interpret type actual type name tupl type defin order pair op node thu captur semant direct edg input depend forc direct list schedulingdfg r bag begin length dfg t step tmax iter correspond step evalu time f rame readi f oper whose time frame intersect step g r bag suffici need defer oper comput op oper l readi least forc readi l readi gamma fopg defer oper op critic path evalu time f rame oper op l readi schedul op step end end figur forc direct list schedul algorithm graph tupl type op graph captur semant input depend graph defin order pair set first project type op node set second project type dep edg set actual depend type defin term first project ensur input depend graph g wellform term edg defin term node graph addit input depend graph schedul task expect bag resourc initi schedul function type declar shown figur modul uninterpret nonempti type bag modul deriv repres input resourc bag schedul function type schedul map domain op node natur figur show relev variabl use descript correct theorem input graph defin term finit set node n set edg e three function variabl type schedul declar modul bag variabl rbag declar schedul algorithm repres fdl function recurs function take input graph n e bag resourc rbag initi schedul just placehold function initi recurs final sched func output function schedul algorithm exist theorem exist theorem shown figur theorem state that final sched func schedul function obtain execut fdl function map everi oper input graph posit natur fdl function expect three argument depend graph bag resourc initi schedul function output fdl function final schedul theorem assert final schedul map everi node graph posit time step exist function accept set node schedul function return true node node set schedul opnod type depedg e edg proje proje prededepedg nodesetproj projeproj projeproj modul type modul schedul figur type formal model fdl algorithm n var finitesetopnod e var preddepedg rbag var modul schedfunc var schedul initschedfunc var schedul finalschedfunc var schedul figur variabl pv model schedul depend preserv theorem theorem shown figur ensur final schedul violat depend specifi input depend depend preserv function take graph final schedul ensur depend graph preserv final schedul function visit everi edg input graph check partial order maintain schedul exist theorem foral n e rbag initschedfunc finalschedfunc existencen finalschedfunc existencen figur exist theorem schedul dependenciespreserv theorem foral n e rbag initschedfunc finalschedfunc dependenciespreservedn e finalschedfunc dependenciespreservedog figur depend preserv theorem schedul foral n e rbag initschedfunc fdlsn e rbag initschedfunc constraintssatisfiedn e rbag finalschedfunc constraintssatisfiedog rbag schedfunc foral tstep posnat projogn resourcesuffro finitesetopnod rbag exist opnoderesourcemap memberopnoderesourcemapn mbag memberopnodereourcemapn mbag true els fals figur resourc suffici theorem schedul resourc suffici theorem theorem shown figur assert correct schedul function obey resourc constraint specifi input resourc bag specif resourc constrain schedul algorithm attempt optim time step given limit set resourc schedul satisfi constraint function perform resourc suff test time step resourc suff function return true oper given time step denot execut resourc rbag resourc suff function specifi pv model fdl theori shown figur resourc suff function accept set select node known readi set bag resourc declar function opnod resourc map map set op node resourc bag rbag resourc suff function return true map inject node ro map resourc rbag three base theorem specifi function correct resourc constrain schedul algorithm make assumpt implement detail schedul algorithm assert properti satisfi correct schedul task attempt timestamp input depend graph two choic model fdl algorithm pv construct explicitli defin result algorithm construct descript ie state set properti axiom algorithm satisfi chose former style sinc conduc topdown approach verifi fdl algorithm function algorithm construct defin use pv languag mechan ensur function henc algorithm well defin total pure descript style could introduc inconsist axiom lemma although would use underspecif fact judici mix style specif would best suit verif strategi sinc verif exercis concentr develop correct properti schedul task axiomat portion formal model fdl algorithm pertain pure optim issu exampl fdl algorithm shown figur comput deferr forc function decid oper readi set select schedul current time step set axiom quit easili state captur requir function exact construct function necessari conduct verif exercis formal verif fdl algorithm given formal model fdl algorithm three theorem formal assert captur gener correct criteria fdl algorithm next verifi formal model algorithm inde satisfi theorem pv proof check environ pv verifi employ sequent calculu sequent conjunct anteced impli disjunct consequ sequent calculu proof view tree sequent whose root sequent form a properti prove anteced empti proof pv end everi path root tree termin leaf node implic inde true fdl theori pv shown figur fdl function defin recurs captur semant fdl algorithm shown figur pseudocod shown figur outer loop termin insid loop tmax condit stretch model loop structur recurs function termin condit would lead illdefin function recurs function pv requir specifi measur function ensur recurs function welldefin measur appli argument recurs call compar measur appli origin argument case measur function specifi cardin set unschedul op node input graph reduc recurs call due lack space formal forc updat use time frame distribut graph calcul asap alap schedul shown pv model figur present insight verif approach partial walk portion proof exercis one theorem name exist theorem exist theorem state truth node input graph proof theorem proce induct variabl n set op node use induct scheme cardn result base case easili discharg grinda builtin strategi induct case display sequent figur proof goal specifi formula consequ anteced formula fg reiter induct step care studi sequent one observ proof goal actual embed within formula appropri proof step isol right side implic formula fg can proper instan tiation extract formula match proof goal shown formula order isol proof goal thu prove theorem care introduc four addit lemma specif lemma form first hierarchi lemma exist theorem categor level lemma shown figur assert set correct properti specif fdl algorithm exampl lemma delet ro card lemma state function new unsch node alway return set whose cardin alway smaller origin node set n word formal assert nonempti set oper schedul theori begin import fdlstype getmaxparenttstepr finitesetopnod og opgraph schedfunc schedul emptyp els maxrecp endif getmaxschedschedfunc updatedschedro nonemptyfinitesetopnod schedfunc schedul maxsch nat lambda n opnod rosn maxsch updatedrosro nonemptyfinitesetopnod mbag modul getrosog n opnod finalrosog opgraph mbag modul newschedfuncog opgraph mbag modul schedfunc schedul updatedschedfinalrosog mbag schedfunc getmaxschedschedfunc newedgesog opgraph n finitesetopnod e depedg projog nproje nproje newunschednodesog opgraph mbag modul fdlsog opgraph mbag modul schedfunc schedul fdlsnewunschednodesog mbag restrictnewedgesog newunschednodesog mbag mbag newschedfuncog mbag schedfunc end schedul figur overview pv theori fdl algorithm fdlsnewunschednodess restrict rbag restrictnewedgess restrict newunschednodess restrict rbag newschedfunc restrict rbag initschedfunc impli foral e rbag initschedfunc finalschedfunc exist finalschedfunc figur induct step proof sequent fdl algorithm verif schedul recurs call fdl function new unsch node function lemma take given graph return smaller node set remov graph oper schedul current iter proof step delet ro card lemma lemma shown tabl proof lemma easili discharg introduct three addit lemma shown tabl lemma introduc prove delet ro card lemma form second hierarchi level lemma adopt topdown approach simplifi proof exercis theorem prove use lemma level lemma appropri infer rule provid proof system proof level lemma sometim requir introduct addit lemma level lemma suffici care taken ensur lemma introduc consist relev verif exercis lemma next prove cours proof addit lemma introduc process continu addit lemma need introduc theorem thu consid prove prove lemma hierarchi success prove topdown approach result wellstructur proof exercis addit make overal proof effort manag ad advantag systemat deriv larg set formal correct properti lemma larg complex task schedul rather difficult identifi task invari make verif algorithm hard problem approach present systemat way identifi invari gener formal environ exist theorem alon total invari formul part proof exercis larg set formal deriv invari provid consider insight correct issu concern exist theorem fdl algorithm similar proof approach adopt verifi two theorem concern depend preserv resourc suffici thu start three base theorem abl formul set lemma formal assert consequ formal proof system formal assert organ four level hierarchi assert sever invari properti fdl algorithm without introduc formal specif model would hard identifi task invari formal assert express precis assur correct next section show use set formal assert make enhanc specif model deleteroscardlemma lemma nonemptyn cardnewunschednodesn e deleteexistencelemma lemma finalschedfunc schedul initschedfunc schedul rbag modul existencenewunschednodesn e rbag finalschedfunc existencedifferencen newunschednodesn e rbag newschedfuncn e rbag initschedfunc existencen finalschedfunc rosconstructionlemma lemma foral e preddepedg n finitesetopnod rbag modul n opnod membern n membern newunschednodesn e rbag membern finalrosn e rbag rosexistencelemma lemma initschedfunc schedul rbag modul n opnod membern finalrosn e mbag newschedfuncn e mbag initschedfuncn figur level lemma exist theorem fdl algorithm fdl algorithm formal c implement fdl algorithm implement formal assert embed program code section discuss use set formal assert make specif model fdl algorithm verifi schedul implement exist highlevel synthesi system dss dss accept algorithm behavior specif written subset vhdl gener rtl design also express vhdl subject constraint clock period area schedul length power dissip schedul phase dss implement variat fdl algorithm extend handl vhdl specif multipl process signal assign wait statement fdl algorithm enhanc perform global process schedul oper across process share data path resourc addit assign timestep stage also bind oper function unit target librari schedul stage current support pipelin chain multicycl overal structur implement schedul dss model close fdl algorithm describ section theorem lemma formul theorem prove exercis constitut set formal assert invari repres function specif fdl algorithm if execut run schedul faith formal specif model assert correct schedul gener assert assert assert figur proof step delet ro card lemma sinc formal specif model formul higherord logic implement the schedul dss c softwar domain establish equival imp spec straightforward procedur formal specif model set formal assert specifi invari differ portion fdl algorithm formal assert translat c program assert statement embed portion schedul implement correspond spatial local invari formal model algorithm schedul thu embed formal specif model give rise autoverifi schedul sake illustr figur show fdl algorithm small sampl formal deriv program assert embed within it three base program assert correspond three base formal assert state origin care translat theorem c assert statement place outsid bodi fdl implement sinc verifi truth schedul techniqu use checkpoint order ensur final state schedul violat three univers correct properti schedul complet execut gener schedul base program assert execut schedul incorrect schedul gener one assert rais except thu schedul gener formal embed schedul guarante errorfre correct schedul complet specifi three base assert capabl detect error schedul implement might result incorrect schedul base formal assert due spatial locat code highlevel notion correct usual provid use inform incorrect schedul apart detect presenc lemma axiom systemat formul formal assert verifi result pv proof exercis play import role error diagnost illustr refer embed fdl algorithm shown figur formal assert introduc differ level hierarchi proof exercis care translat program assert hierarchi preserv organ program assert thu level program assert narrow scope time focu detect error local area schedul implement assert embed code shown inner loop loop assert invari properti loop statement delet ro card assert state invari properti true end everi iter outer loop place portion code ensur identif violat assert everi iter schedul contrast error show base assert iter schedul complet level assert thu offer better diagnost user promptli made awar error implement proceed hierarchi formal assert finer detail implement subject verif formal assert correspond level specif verifi smaller portion schedul code thu expos error code pinpoint accur go back forc direct list schedulingdfg r bag begin length dfg level assert schedul invari order schedul strict subset nonempti oe t step tmax evalu time f rame readi f oper whose time frame intersect step g r bag suffici comput assert ro invari ro construct ro nondepend card strict sub oe op oper l readi least forc readi l readi gamma fopg op critic path evalu time f rame end level assert final ro suffici edg depend final ro wellform ro suffici oe oper op l readi schedul op step end level assert delet ro card delet exist graph wellform edg wellform oe base assert exist dep preserv re suffici oe end figur fdl algorithm sampl formal assert previou exampl although program assert delet ro card virtu posit code abl detect error within one iter outsid loop schedul might still good enough locat sourc problem card strict subset one lemma use complet proof delet ro card properti theorem prove environ correspond level formal assert verifi invari iter inner loop algorithm assert concentr smaller portion implement promptli detect violat base assertionsth verif approach thu extend mani level hierarchi formal assert tree sourc error isol detect local exampl dss sinc incept use synthes benchmark largescal specif design exampl care chosen test wide rang synthesi issu rang singl process arithmeticdomin specif multipl process specif complic synchron protocol variou combin control construct like condit loop fact effort part concert endif assertdepend preservedfdl map endif endif figur base program assert schedul attempt systemat valid dss use simul formal techniqu cours exercis sometim incorrect rtl design synthes analysi faulti design eventu lead discoveri implement error hl system notabl error rtl design attribut conceptu flaw schedul implement error identifi use systemat simul method tradit softwar debug aid although exercis led increas confid reliabl synthesi system given limit number test case involv one could never sure isol bug system also complex synthesi system render error trace back often quit labori time consum formal assert approach hope address problem valid synthes rtl design particular sinc formal specif model schedul embed within implement as c assert incorrect schedul almost alway guarante violat specif model violat immedi flag except user notifi properli enabl formal deriv program assert trace back sourc bug perform almost effortlessli illustr approach walk error detect exercis schedul stage synthesi system use formal assert techniqu formal embed schedul seed error would result synthesi rtl design incorrect schedul begin enabl base program assert first run schedul sinc assert check execut run overhead introduc minim necessari could systemat enabl level hierarchi formal assert tree build error trace would guid us problem area schedul implement bug schedul code fire depend preserv base program assert synthesi rtl design shown figur assert situat end schedul task along two base assert figur function fdl graph implement fdl algorithm return final schedul fdl map base assert place outsid actual implement schedul assert check see schedul preserv depend boldfac italic figur input graph fail due error introduc code tell us final schedul somehow violat partial order specifi input graph order get inform sourc error level program assert enabl schedul execut set test case time assert failur occur within bodi fdl graph function portion schedul function embed assert shown figur assert edg depend lemma place termin inner loop assert c translat follow pv lemma unschednodesp readylistn f break end inner loop assertedg depend lemmareadi list unsch node origin unsch node endif assertdeleteroscardexistencelemmaunschednodeslength endif figur level program assert schedul foral og opgraph e depedg member member newedgesog newunschednodesog mbag memberproj newunschednodesog mbag lemma state that edg present present graph present next updat graph one node must readi set ro node must updat graph thu failur formal assert shown boldfac figur give user insight natur error portion schedul code around formal assert examin close error immedi caus error discov level assert enabl hope would provid inform caus error schedul execut time one assert level class program assert fail snapshot code shown figur time program assert ro nondepend assert shown boldfac figur fail place inner loop check resourc suffici figur assert translat follow pv lemma rosnondepend lemma foral og opgraph n opnod m opnod membern ro memberm ro membern m projog memberm n projog lemma state properti node readi set ro must satisfi properti assert two node readi set edg them mean that readi set compris node depend relat among them clearli assert failur indic current readi set somehow violat properti need look routin build readi set order find error build readi list n check unschedul parent allparentsareschedul error p allparentsareschedul break allparentsareschedul f assertro nondependencereadi list unsch node endif defer oper resourc constraint met figur level program assert schedul upon examin portion code locat fail assert easili notic select process culprit select process erron admit node readi set even one parent schedul yet caus statement code shown figur select process admit node readi set parent schedul achiev replac erron construct construct constrain schedul implement abid formal specif everi step execut run ensur effici reliabl error detect trace mechan error trace back sourc use techniqu systemat enabl higher level formal assert error discov formal assert order test effect formal assert approach synthesi system seed program error formal embed schedul stage error repres actual implement error earlier discov period time tradit valid techniqu like simul code walk through hope approach would serv two purpos discov least seed error littl user intervent provid error trace sourc program error schedul execut synthesi system number design exampl tabl show detail experi seven exampl rang size littl oper node mani oper node test assert level detect error op node fbaseg pass fbaseg fbaseg fg pass pass test fbaseg fbaseg fbaseg pass fg pass pass test fbaseg fbaseg fbaseg pass fg fbaseg fbaseg tabl verif result formal embed schedul column tabul error detect result five program error detect execut schedul code entri column indic level formal assert need pinpoint sourc error pass entri tabl indic success execut test case program error advers effect correct schedul gener implement none formal assert trigger base formal assert suffici ascertain sourc error base alon appear correspond entri tabl thu error detect one base formal assert test case next observ result error error involv incorrect way build readi set earlier illustr previou section walk error detect exercis test error went undetect sinc none node test case one parent result error code result incorrect schedul rest test case formal assert base level detect error case although error detect three level formal assert level enabl order pinpoint sourc error discov formal assert approach error hitherto escap detect even simul code inspect defer oper routin culprit avail resourc incorrectli analyz build readi list result discontinu schedul number assign oper input specif conceptu error detect enabl level program assert introduc error asap alap routin manifest last three test case fact need formal assert level hierarchi enabl order locat sourc error error effect schedul first four test case sinc enough resourc schedul oper henc bug goe undetect error repres program error forc calcul routin schedul gener correct schedul test case sinc enough resourc schedul oper henc defer oper routin never execut schedul test case rest four test case error discov sourc pinpoint base assert overhead formal assert approach signific tabl show time inform test case present abov experi conduct sparc workstat mb resid memori second column repres fdl algorithm run time none assert enabl entri third column denot run time algorithm three base assert enabl increas run time hardli notic expect sinc base assert evalu schedul algorithm assign time step fourth column repres run time level program assert enabl algorithm appreci increas run time sinc assert embed within algorithm evalu sever time execut algorithm quit clearli seen overhead introduc formal assert approach pose seriou problem perform fdl algorithm typic base assert switch normal synthesi process assert failur signal synthesi process fault somewher implement design resynthes test no fdl algorithm run time second assert base assert assert tabl runtim overhead due formal assert schedul enabl lower level program assert order trace back sourc program error synthesi system scope verif effort formal assert techniqu ensur detect incorrect schedul schedul directli indirectli violat base formal assert therefor valid verif approach hing complet set theorem make base specif model lemma deriv formul thorem prove exercis usual limit identifi error result violat base theorem experi observ except error error led incorrect schedul identifi base assert reinforc confid complet set base theorem exploit absenc base correct condit ensur tight properti discuss earlier second footnot end section discuss possibl ad fourth base theorem captur socal tight properti state cannot discontinu schedul input graph sinc strictli correct issu includ base theorem happen one level lemma engend induct strategi deduct analysi use prove base theorem explicitli specifi properti explain error discov level assert slip past base assert typic lower level assert axiom enabl error detect finer granular possibl base assert error detect capabl limit specif compar base formal assert verif formal assert translat program assert synthesi system given express differ logic softwar domain translat process often could get quit complic ultim correct formal assert approach hing translat process conveni data structur exist allow us conveni conduct translat process sometim theorem cannot translat directli softwar domain case develop equival formal assert amen softwar domain formal establish equival relationship ensur translat process inde correct portabl issu formal assert approach need address base assert typic quit easili port across differ algorithm perform task synthesi lower level assert formul cours formal proof exercis present limit portabl formal assert modif fairli easili port across implement belong class algorithm portabl across class algorithm could restrict would requir addit proof exercis order formul appropri formal assert formal assert approach verifi singl execut run synthesi process guarante correct design specif violat process synthesi therefor entir feasibl bug synthesi system go undetect manifest execut shown tabl bug expos soon introduc error rtl design synthes conclus futur work insert assert invari program known effect techniqu establish correct outcom execut program discov isol error howev determin appropri set assert often tediou errorpron task itself paper made use mechan theorem prove systemat discov set suffici capabl assert present formal approach verifi rtl design gener highlevel synthesi verif conduct program assert discov theorem prove environ paper focus resourceconstrain schedul task synthesi correct condit resourceconstrain schedul formal specifi higherord logic formal specif fdl algorithm verifi use deduct techniqu larg set addit properti systemat discov verif exercis properti embed program assert implement schedul algorithm highlevel synthesi tool assert act watchpoint collect ensur detect error synthesi process appeal aspect approach systemat incorpor design verif within tradit highlevel synthesi flow conduct formal verif exercis synthes rtl design synthesi environ design synthes avoid need function verif synthes design later use formal verif tool simul time taken onthefli verif approach scale toler size design synthes contrast blind postfacto simul model check theorem prove base verif approach use reason base properti synthesi algorithm one critic approach may concern care effort involv manual process convert formal assert higherord logic program assert c experi inde prove process requir consider dilig often express formal assert sever differ way higherord logic time care construct necessari datastructur c enabl implement program assert process repeat discov form formal assert lent straightforward transliter c estim entir process fdl formal verif embed assert implement took person hour anoth critic approach concern suffici assert isol error error cannot caught sourc first caus assert violat howev problem assertionbas approach program correct suffici base correct condit never formal establish condit repres formal intuit understand schedul do effort current underway adopt verif strategi present paper formal stage highlevel synthesi system approach allow earli detect error synthesi process rtl design complet gener r implement issu embed exist high level synthesi algorithm hol the scienc program highlevel synthesisintroduct chip system design integr formal method system design dss distribut highlevel synthesi system introduct hol an engin approach formal system design synthesi optim digit circuit synchron control model synthesi commun vhdl process valid synthes registertransf level design use simul formal verif from vhdl effici firsttim right design formal approach forc direct schedul behavior synthesi asic schedul bind algorithm highlevel synthesi highlevel vlsi synthesi experi function valid high level synthesi system some experi local microcod compact horizont machin pv prototyp verif system user guid pv specif verif system languag proof checker synthesi digit design recurs equat on interplay synthesi verif a survey highlevel synthesi system tr schedul bind algorithm highlevel synthesi highlevel synthesi experi function valid high level synthesi system vhdl effici firsttimeright design scienc program synthesi digit design recurs equat synthesi optim digit circuit highlevel vlsi synthesi dss engin approach formal digit system design implement issu embed exist high level synthesi algorithm hol effect theorem prove guid discoveri formal assert regist alloc highlevel synthesi system pv facet synchron control model synthesi commun vhdl process theorem prove guid develop formal assert resourceconstrain schedul highlevel synthesi