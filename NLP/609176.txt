t retract approach cp transform a studi continu pass style cp transform gener comput transform notion comput gener continu pass arbitrari one establish relat direct style continu pass style interpret sequenti callbyvalu program prove retract theorem say lambda term recov cp form via defin retract retract theorem prove logic comput lambda calculu simpli typabl term b introduct notion continu continu pass style cp transform introduc number author see rey histor overview main motiv independ develop concept seem twofold explain behavior imper featur function languag compil program higher order procedur research led develop cp denot semant sw see also sto later categor semant comput mog well compil base cp transform ste see also app kind applic one central goal research support part by type algorithm offic naval research n comput effici optim reduct lambda calculu nation scienc foundat cda logic complex program languag nation scienc foundat ccr research establish relationship origin term imag transform work view cp transform formal contin uation pass style denot semant callbyvalu program languag fij lambda calculu n model callbyvalu evalu program languag choos moggi mog comput lambda calculu c two reason logic c sound callbyvalu reason logic c complet class model comput lambda model mog commonli use comput effect express one way assert correct cp transform interpret c n equat correspond result due sabri felleisen sf theorem sabryfelleisen two lambda term n lefttoright implic theorem say cp transform preserv equal righttoleft implic say transform also preserv distinct thu transform give accur pictur equival n formal problem tri solv observ lefttoright implic theorem also say cp transform defin function map c equival class lambda term n equival class lambda term righttoleft implic understood say inject therefor left ask question whether function invers defin precis ffl lambda term p n p ffl lambda term r c r elementari argument given mr show answer first question must no work give affirm answer second question precis prove follow theorem theorem retract cp transform simpl type oe lambda term r oe close lambda term type oe r oe version retract theorem proven meyer wand mw conclus theorem hold logic n howev author point us result mislead interest behavior term callbyvalu evalu n sound callbyvalu reason presenc comput effect interest point cp transform view interpret callbyvalu program interpret pure function program also extend interpret program control oper callcc abort differ extens function languag impur featur also given denot semant use similar transform exampl interpret program languag mutabl store given use state pass style sp transform shown moggi mog number comput effect describ notion monad cp sp transform gener to call comput transform wad sw equat correspond comput transform hold well sw natur ask whether retract theorem theorem gener howev comput transform map lambda term term monad metalanguag ml mog languag ml extend new construct logic comput lambda calculu axiom for question whether lambda term r even languag ml denot comput transform ill form order studi retract theorem abstract set appli transform well cp transform defin modifi comput transform pi map lambda term lambda term extend two constant e r satisfi axiom r modifi comput transform satisfi equat correspond result close term prove retract theorem logic c extend axiom re theorem retract pi simpl type oe term r oe close lambda term type oe r oe pi pi stand modifi comput transform proof theorem consist defin interpret type term well relat interpret prove term type oe mean mean oe relat relat framework mani way similar to inspir by type infer model develop mit even though transform interest name cp transform sp transform special case modifi comput tran form benefit studi abstract transform obtain proof depend detail particular transform appli modifi definit appropri either cp sp transform henc obtain retract theorem cp sp transform fore mention result appli simpli type close term extend applic result proceed two direct extend comput lambda calculu new languag construct axiom defin equat behavior new term extend type system result appli larger class term result easili extend calculu extend c datatyp natur number primit oper natur number import class extens consist extens introduc comput effect c abl extend retract theorem c extend diverg element howev stop short prove retract theorem c term extend recurs attempt prove retract theorem untyp close term extend type system recurs type prove follow result call term f total function valu v f v c equival valu theorem assum term e r exist e r total function satisfi in c re r y e x everi term r pi analog theorem also hold cp sp transform assumpt theorem quit strong remain seen whether term e r exist one also investig whether element exist model would allow interest applic theorem assum reader familiar elementari concept lambda calculu detail one refer bar section provid concis definit order disambigu notat lambda calculu lambda term term form infinit set variabl lambda abstract applic use number standard convent write lambda term applic associ left gener use parenthes freeli make term easier read let xm n abbrevi term xn ffi n term xm n x part but exclus use letter n p etc rang arbitrari lambda term letter u v w rang valu lambda term either variabl lambda abstract constant lowercas letter x y z etc use variabl studi provabl equal untyp lambda term set axion equat deriv use rule lambda congruenc axiom let xm tabl axiom c part paper consid equal provabl moggi tabl possibl extend addit axiom constant particular use constant e r satisfi axiom r type system consid type system assign type untyp lambda term simpl type defin base type ie type oe type whenev oe type type infer system consist set rule given tabl deriv sequent form gamma oe oe call type assert gamma type hypothesi ie set type assert form x alway assum variabl x occur gamma gamma x oe x oe var m n app gamma x oe ab tabl type infer rule simpl type transform work concentr three transform map lambda term lambda term first studi modifi comput transform pi map pure lambda term lambda term extend two constant e r see tabl transform pi view abstract transform captur purpos import properti cp sp transform name transform pi term order evalu lefttoright callbyvalu made explicit howev addit structur make particular cp transform attract compil design reflect definit pi tabl modifi comput transform pi next transform studi callbyvalu version fischer reynold cp transform definit use as well overlin taken plo see tabl analog cp transform use give denot semant program mutabl store instead control oper state pass style transform sp definit given tabl use pair construct abbrevi name let hx im n tabl cp transform abbrevi express let xm let x x let x x n x tabl sp transform even though give untyp definit transform believ transform understood context type languag view support monad framework develop moggi mog program interpret comput leav detail moggi monad interpret well definit type transform sinc central develop rather sketch intuit pictur help motiv definit think transform map term type oe intuit program term type oe intuit comput unari type constructor that depend particular transform oe defin induct use made precis defin type version transform map type sequent type sequent retract theorem section state prove retract theorem abstract transform pi well as cp sp transform one might find transform pi interest itself us serv purpos precis develop framework enabl us prove retract theorem transform pi free detail specif cp sp transform nevertheless framework effortlessli modifi prove retract theorem transform thu believ focus abstract transform improv clariti present retract retract theorem assert defin invers cp transform as well transform interest give construct typeindex famili lambda term defin retract note give follow definit use term e r definit understood parameter term is invers modifi comput transform defin use constant e r definit invers cp transform constant replac term e k r k likewis sp transform term e r use think transform context type languag map term of type oe term repres comput of type oe in tuitiv understand pair term defin retract embed pair type oe oe one also formal defin notion type oe retract type sens definit given below exhibit term r oe e oe form retract embed pair type oe oe moreov show suitabl version of term r oe defin requir invers transform studi definit type oe said retract type pair lambda term r oe e oe type oe oe respect r oe e oe definit simpl type oe defin term e oe r oe induct structur oe follow higher type r r f e lemma c re r oe e oe proof easi induct oe note lemma hold whenev replac constant e r valu e r c r final defin term r r x e later show r oe invers transform pi defin invers cp transform first defin term r k def xkk x easi show in c r k e k retractionembed pair r k oe use term r k e k instead constant r e definit similarli sp transform defin term repres initi state store defin term r oe e oe use term instead interpret term type framework develop prove retract theorem close relat mitchel type infer model mit definit type infer model defin interpret term type well relat two howev definit type infer model assum one work full fijequ need relax definit accommod reason weaker logic c first sketch definit gener framework fill detail appli particular transform studi interpret term assum d app applic structur is set app binari oper d assum also distinguish subset vd d valu given environ ae map variabl vd defin interpret rel ae term assign element jmkae d addit assum particular defin set equival class term set valu equival class term valu note below may inform identifi term equival class interpret function defin transform consider interpret type type interpret certain subset call type set particular chose type set contain equival class term form interpret type defin use relat defin below induct set term form set of form e v n joek r r oe n relat interpret relat mean term type instead use simpl setmembership relat defin extend relat gener depend structur transform consider intuit serv purpos separ import part transform term truth valid defin notion say type assert oe true with respect ae written ae joek notion satisfact valid defin standard way rel definit truth name ae satisfi type hypothesi gamma written ae everi type assert gamma true respect ae type sequent gamma oe valid true everi ae satisfi gamma aim prove sound lemma type infer system would impli retract theorem state lemma singl two condit necessari lemma hold name requir joek n joek r r oe n z r oe etc defin section equal provabl equal c re main reason two condit singl that prove retract theorem modifi comput transform modifi definit interpret term type well relat reflect properti cp transform condit y z need prove show retract theorem hold cp transform similarli sp transform modifi comput transform previou section outlin definit framework fill detail follow definit given particular prove retract theorem modifi comput transform also indic definit need chang subsequ section prove retract theorem cp sp transform write denot equal provabl c re definit let ae substitut map variabl valu defin interpret function j deltak jmkae definit type set set term form valu note definit understood parameter term e is consid say cp transform use term e k instead definit n term defin applic codomain transform follow easi see jm definit let type set let term write valu v term p definit interpret type defin induct structur type express name set term form set form e v n joek r r oe n recal r note understand definit parameter e r app consid cp sp transform appropri definit use instead equip definit prove sound lemma first need auxiliari result lemma type oe valu v proof easi induct oe lemma two term n joek r r oe n proof first observ statement lemma stronger given definit abov definit requir two statement hold n joek lemma show two statement hold n joek condit easili prove use definit axiom c re sound lemma consist two part s s first part assert sound interpret respect type rule simpli type lambda calculu second part is fact statement retract theorem lemma sound let gamma type hypothesi let ae substitut satisfi gamma let ae substitut r oe aem pi proof prove lemma induct deriv gamma oe var case follow assumpt app case follow directli lemma induct hypothes ab case slightli involv assum j xn oe j gamma xn deriv gamma x use ab rule show s first observ aexn pi need show aexn pi term j k therefor sinc aefvxg satisfi gamma x induct hypothesi s k moreov comput r appaexn pi r use definit retractionembed pair induct hypothes s s establish s show s simpli comput r use properti retractionembed pair lemma induct hypothesi s retract theorem follow directli lemma theorem retract pi close term simpl type oe r oe pi cp transform prove retract theorem cp transform indic be fore use exactli framework modifi definit use appropri definit applic codomain transform relat first recal defin retractionembed r easi see c r k e k abstract properti e r use defin interpret term rel substitut ae use cp transform is jmkae applic codomain transform defin m final defin extend membership relat k term p valu v fresh variabl k understood definit use preced section defin use e k r k app k k instead e r app new definit prove follow lemma analog lemma assert condit y z hold lemma two term n k joek app k m r k oe m r k oe proof proof straightforward use definit axiom c shown lemma rest proof sound lemma cp transform exactli case modifi comput transform corollari obtain retract result theorem retract cp transform close term simpl type oe r k sp transform adopt framework sp transform defin e r app place e r app prove condit y z still hold recal term e r defin init initi state store interpret term defin use sp transform name jmkae applic codomain transform defin m n final defin extend membership term p valu v furthermor interpret definit type set interpret type retractionembed pair defin earlier given use place e r app new definit show condit y z still satisfi yield retract theorem sp transform theorem retract sp transform close term simpl type oe r oe extens thu far prove retract result pure simpli type term order make result applic would like extend theorem larger class term essenti two direct proceed extend class term ad constant term constructor includ possibl new axiom defin function behavior new term secondli extend type system one type larger class term extend retract theorem extens c constant base type primit oper numer quit straight forward howev ad arbitrari constant higher order type may difficult difficulti lie ensur closur condit impos type set addit constant satisfi exampl constant c type oe ad c need make sure oe appc pi m closur condit determin base type new constant proof satisfi will gener depend function behavior new constant diverg differ callbynam callbyvalu evalu strategi becom appar presenc actual comput effect far consid pure simpli type term set everi close term equival valu logic c n therefor stop here would unjustifi claim signific improv origin meyerwand retract theorem simplest comput effect add languag diver genc presenc diverg n reason longer sound call byvalu languag applic c extend diverg realli need stronger version retract theorem provabl weaker logic c extens retract theorem languag diverg present quit straightforward import sinc illustr differ meyer wand formul retract theorem diverg repres diverg element omegagamma ad languag c constant consid valu axiom foromega specifi applic diverg either oper operand diverg moreov axiom identifi diverg term axiom areomega m omega m omegagamma one verifi result equat logic consist cannot valu v type system extend axiom omegagamma oe say thatomega everi type modifi comput transform defin onomega everi type prove retract theorem comega need extend sound lemma case type word need show s s r omega everi type oe second condit follow trivial definit ofomega pi axiom prove first condit observ xomega e e oe x lemma e e oe x joek everi oe reason appli extend retract theorem cp transform comegagamma cp transform defin onomega komega k recurs type well known term type use recurs type system order extend retract theorem close term studi recurs type recurs type disciplin introduc type form toe where use denot type variabl order extend result c extend recurs type need defin retractionembed pair oe new type particular one defin e toe r toe even e r motiv solut consid follow exampl let ttt recurs type disciplin one type xx x assum defin term e r tri comput r xx x pi r r e x e x complet deriv one would like e continu r see exampl two occurr x xx x act type respect similarli would like two occurr e xr r e x e x act e e solut problem find uniform definit es rs type name want retractionembed pair r e satisfi follow definit definit term f call total function f valu and valu v provabl equal valu pair total function r e uniform retractionembed pair e r satisfi system equat r remain open whether pair term satisfi condit assum given pair function and assumpt show retract theorem extend recurs type moreov sinc recurs type system type term corollari obtain follow theorem theorem assum total function e r exist satisfi equat then close lambda term r pi cours analog theorem hold transform well sketch main idea proof theorem detail proof found kuc recurs type system extend simpl type ad type variabl type express form toe new infer rule i e one understand rule consid type toe type satisfi equat oeftg thu need defin interpret jk satisfi equat word jk fix point function sjoekfstg we assum interpret satisfi joekfjktg difficulti lie show oe function sjoekfstg alway fix point so defin metric space type set result metric space complet show function sjoekfstg contract thu banach fixedpoint theorem uniqu fix point mac queen et al mp develop framework develop view special case name domain consist finit element typ ing sequent order discret order thu greatli simplifi gener purpos structur use mp conclud remark work establish relat direct style cp term use defin retract function retract theorem show term recov c equival imag cp transform therefor retract approach fact provid relat equival class term contrast result other provid perhap even stronger relat lambda term cp form eg sw emphas invers cp transform obtain defin anoth import point conclus version retract theorem equat provabl logic c callbyvalu logic unlik result mw fil give similar equal callbynam logic consequ result applic even callbynam reason sound open question practic applic function program languag equip form recurs therefor make retract approach applic practic need extend result languag recurs done two way extend type system fixedpoint oper defin pure languag ad languag construct constant letrec etc first approach partial result discuss one difficulti ad fixedpoint oper similar languag construct addit closur condit need definit type set abl construct type set satisfi condit difficulti determin correct axiomat fixedpoint oper appear axiom suffic model c fixedpoint oper defin use call fixpoint object crole pitt cp defin object model c discuss logic system reason fixpoint comput may hold answer question anoth class extens motiv applic retract theorem develop rieck viswanathan rv show one isol effect extens languag assign control interf pure function code natur question aris whether possibl extend approach isol one comput effect interf code possibl contain differ comput effect instanc program in say call byvalu pcf assign defin oper call encap that extens callbyvalu pcf assign control encap m behav behav extens callbi valu pcf assign believ appropri extens retract theorem program languag imper featur may give us result r compil continu lambda calculu syntax se mantic new foundat fixpoint comput fixhyperdoctrin fixlog repres monad free theorem type infer contain comput lambdacaluclu monad comput lambdacaluclu monad notion comput monad ideal model recurs polymorph type continu may unrea sonabl continu semant type lambdacalculi summari discoveri continut isol side effect sequenti languag reason program continuationpass style compil scheme denot semant scottstrachey approach program languag theori mathemat semant handl full jump reflect callbyvalu comprehend monad tr ctr andrzej filinski relat monad semant theoret comput scienc v n p may