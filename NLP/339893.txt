t onthefli model check fair exploit symmetri a onthefli algorithm model check fair present algorithm util symmetri program reduc state space employ novel techniqu make onthefli model check feasibl algorithm use state symmetri elimin parallel edg reachabl graph experiment result demonstr dramat reduct run time memori usag present b introduct state explos problem one major bottleneck tempor logic model check mani techniqu propos literatur combat problem among these symmetri base techniqu propos method state space program collaps identifi state equival symmetri model check perform reduc graph although initi method could handl limit set live properti gener approach check live properti variou notion fair propos method howev facilit earli termin suppli answer construct requir data structur complet mani tradit model check algorithm use onthefli techniqu avoid store complet state space main memori howev none techniqu employ symmetri use onthefli techniqu togeth symmetri model check focu reason simpl basic type correct ie safeti properti express tempor logic ctl assert form agerror paper present onthefli model check algorithm check correct weak fair exploit symmetri comput said preliminari version paper appear proceed th intern confer comput aid verif held haifa israel june work present paper partial support nsf grant ccr ccr weakli fair everi process either infinit often disabl execut infinit often work extens work present develop addit theori lead novel techniqu make onth fli modelcheck feasibl exploit symmetri differ state also take advantag symmetr structur individu state allow us reduc size explor state space major improv gain break sequenti line algorithm origin algorithm construct three data structur the reduc state space product graph thread graph detail given below one perform test last one elimin construct third data structur maintain new dynam inform algorithm construct part first structur need construct second final store node second structur onthefli construct techniqu uptod dynam inform mainten facilit earli termin program satisfi correct specif allow us construct minim necessari portion state space program satisfi correct specif onthefli model check algorithm implement experiment result indic substanti improv perform compar origin method algorithm given work follow assum system consist set process commun share variabl variabl associ subset call index set denot set process share variabl clearli index set local variabl consist singl process onli state system map associ appropri valu variabl permut set process extend natur permut set variabl state system permut automorph system reachabl graph system invari more specif edg reachabl graph s t also edg vice versa two state equival automorph system map one other factor equival relat compress reachabl state space origin method consist three phase first construct reduc state space comput product reduc state space finit state automaton repres set incorrect comput explor product graph check exist fair final strongli connect compon compon correspond fair incorrect comput check strongli connect compon fair boil check fair respect individu process done take product compon index set result call thread graph resolut compon path thread graph correspond comput system special attent one design process fair strongli connect compon product graph check verifi strongli connect compon thread graph fair respect design process compon onthefli algorithm two layer reduc state space product graph construct successor node reduc state space construct product graph construct request it product graph construct engin modifi algorithm comput strongli connect compon scc use depth first search see depth first search vertex stack maintain partit vector process set partit vector associ product state u captur inform thread graph strongli connect compon u alreadi explor part product graph intuit process j partit class indic node u i u scc thread graph reveal infinit run system correspond strongli connect compon u alreadi explor part product graph either fair respect process j fair respect mention process partit vector updat whenev new node edg alreadi construct node explor correct algorithm base new theori develop part paper thoeri connect partit vector algorithm strongli connect compon thread graph permut autm process state symmetri state s state symmetri origin introduc suppos map process j case transit ignit process onetoon correspond caus process j henc save space comput time consid belong process i one form state symmetri exploit algorithm anoth way initi partit vector state symmetri partit map process j thread correspond process j certainli situat either fair none fair paper organ follow section contain notat preliminari sect develop necessari theori present onthefli algorithm describ variou modif algorithm take state symmetri consider section present experiment result show effect algorithm dramat improv time well memori usag section contain conclud remark preliminari program process global state graph let set process indic consid system run parallel process k set transit assum variabl p index subset indic process share variabl system p meet descript call index transit system or briefli program global state index transit system assign valu variabl assum variabl take finit number valu assumpt ensur number global state system also finit defin index graph set global state captur behavior program index global state graph set global state initi state r theta theta transit relat ie transit process enabl state execut lead state t strongli connect subgraph weak fair infinit path start initi state denot comput p infinit path p weakli fair process i either disabl infinit often p execut infinit often p unless otherwis state consid weak fair throughout paper implement howev capabl handl strong fair an infinit execut program strongli fair everi process enabl infinit often execut infinit often strongli connect subgraph graph set node path everi pair node pass node subgraph strongli connect compon scc short maxim strongli connect subgraph set state appear infinit often infinit comput finit state program p form strongli connect subgraph mani properti infinit comput fair onetoon correspond properti associ strongli connect compon therefor effort direct toward find scc certain properti formul weak fair condit scc definit scc c weakli fair everi process either disabl state c execut c process disabl state transit disabl s process execut c state s c given program p interest check absenc fair incorrect comput assum incorrect specifi buchi automaton a set comput accept exactli set incorrect comput problem check whether program p incorrect weakli fair comput decid look product graph b a b scc whose project contain final automaton state whose project weakli fair p weakli fair incorrect comput suffici construct product reachabl part a annot quotient structur previous suggest method ie analyz reachabl part expens sinc mani system reachabl part huge system exhibit high degre symmetri state space reduc identifi state equival symmetri construct quotient structur given below denot set permut sym let sym induc action set variabl set global state follow way everi variabl v imag v cours may variabl program say respect set variabl imag everi variabl variabl program assum properti imag global state defin global state s satisfi valu valu v s everi variabl v program say automorph index global state graph respect exactli s i r set automorph denot autm certainli autm subgroup sym given subgroup g autm defin equival relat s state equival g t use g compress smaller structur call annot quotient structur aq follow ffl set repres state contain exactli one state equival class sg particular contain s class ffl r set tripl i gamma denot edg repres state annot permut g process indic defin r formal state s defin rep uniqu repres state equival class t t also associ canon permut g rg remark mani case use allow multipl initi state captur nondetermin program defin set initi state requir everi automorph concept multipl initi state simul system introduc new fulli symmetr initi state everi edg check fair thread graph briefli outlin approach taken check given concurr program p exhibit fair comput accept automaton a assum automaton refer variabl whose index set involv process specifi properti execut process onli process call global track process travers compress global track process repres differ set state path formal local track process state pass path p product permut found edg p exampl first edg path gamma then sinc repres real successor state global track process repres process t step path may return state time encount differ set local track process properti make feasibl model check purpos compact need less compress version set local track process given state depend path lead initi state need unwind partial thread graph construct captur unwind graph whose edg label permut set possibl mark kthread graph h kthr correspond h hv theta k consist edg form s gamma k note h label edg denot previou line permut h kthr inherit them thread graph correspond h denot h thr second compon state s i h thr call design process follow simpl exampl depict concept here throughout paper id denot ident permut ij transposit interchang j graph h graph h thr edg label indic i r gammapsi figur thread graph construct origin algorithm first construct annot quotient structur correspond p second step product graph theta construct state product graph form s edg b s gamma edg kthr automaton transit state input consist program state obtain simultan replac index c l l l k third step product graph b check exist fair strongli connect compon these call subtli fair scc check done construct thread graph resolut everi scc b everi scc thread graph check fair respect design process sect show that use techniqu base new deeper theoret result method consider enhanc oeae iii rii rrr oeae oe id idgamma gammapsi cri gammapsi crrid gammapsi figur aq simplifi resourc control startingst a finalst true oe state c oeae ae oe true figur automata simplifi resourc control exampl illumin gener concept present instruct exampl simplifi resourc control program consist server client process run parallel client either idl i request r critic c state variabl statec indic statu client c client freeli move idl request state server may grant resourc client move critic state provid client request state client critic state yet simpl exampl state all combin valu i r c except contain one c contrast state as illustr fig initi state one mark iii lower left side figur three process idl i state move request state r henc three successor state space rii iri iir state equival chose rii repres them three edg depart iii correspond three enabl transit edg iii gamma rii exampl indic process enabl transit execut transit lead state gamma similarli state rri repres state itself rir irr suppos want check obvious fals properti client never get critic state negat properti captur automaton given figur automaton state client eventu get critic state global track process product graph b state depth first search b reveal strongli connect subgraph weakli fair contain final automaton state util state symmetri origin algorithm briefli describ subsect construct b togeth thread graph b thr method improv appli follow three new idea construct kthr goal defin less compress version properti visit state multipl time infinit path encount set local track process sens link set local track process state kthread graph unwind optim solut defin equival relat theta k usual result greater compress theta k still desir properti smaller kthr case program exhibit symmetri it possibl two state s equival repres singl state theta k second improv applic onthefli algorithm increment construct b simultan explor it explor analyz thread graph without construct them partial explor b contain requir subgraph algorithm immedi exit save comput time onthefli natur algorithm need store complet b specif edg need store final third idea use symmetri singl global state use state symmetri reduc number edg elimin redund parallel one redund parallel edg remov also result reduct memori usag keep present simpl assum track one process so loos gener result present below appli with obviou modif case mani track pro cess actual implement algorithm given below use gener case compress theta subsect defin equival relat s now extend theta follow say equival permut g obvious equival relat partit set theta set equival class let aqsi set repres state contain exactli one state equival class ensur aqsi close relat adopt convent s i aqsi impli s is aqsi theta contain may strict possibl two state form s i s j equival annot quotient structur track index aqsi gamma t ig state s i local track process note indic initi state formali element set state aqsi specif track process assign it seemingli unnatur definit adopt want encorpor inform automaton definit theta theta consider smaller thr best case may achiev reduct number node number edg factor n n respect here n size i simplifi resourc control exampl thr state calcul size aqsi note first state iii process local state henc iii iii iii equival theta one need includ aqsi similarli one rrr rrr rrr aqsi rii rri crr iic two s s s equival henc two need store aqsi final case cri process differ local state therefor s s s aqsi count show aqsi contain repres state let b product theta a formal properti s repres recal process track automaton a r pr consist edg s i a l gamma t j s i t aqsi s i l gamma t automaton move state input gain replac occurr index definit let c scc b scc c thr weakli fair state u k process k disabl u edg type use slightli modifi version argument found deduc b contain inform need decid program p satisfi complement properti given a state follow theorem prove exactli line theorem lemma use new definit b theorem p satisfi complement properti defin scc c b c contain final automaton state everi scc c thr weakli fair onthefli model check main contribut present paper lie show search scc b without requir complet b previous construct b explor construct onthefli manner mention earlier b construct product theta a one first improv construct theta smaller construct b implicitli creat theta store part b base observ that care choic repres state theta thread graph resolut construct node thread graph check equival node store alreadi implicit part b new node store first one equival class done command algorithm present below implement control way construct default and effici case successor state togeth edg lead creat store first need construct b want avoid store edg use second option recreat temporarili time b state construct requir it third possibl option implement allow us construct advanc useful program test multipl correct properti second compon use construct b automaton repres correct properti small size compar data structur involv construct onthefli manner motiv gener introductori line let us turn present actual al gorithm explain earlier onthefli modelcheck algorithm explor simultan construct it process order analyz thread graph without explicitli construct it maintain partit b node stack partit indic process known strongli connect compon thread graph partit first would like adopt follow convent concern partit identifi equival relat correspond partit given set sens say partit contain anoth partit equival relat correspond first partit superset equival relat correspond second partit join two partit smallest partit contain both follow two lemma prove import properti scc b c scc b follow properti hold ffl node c path r i r thr path r j r i well ffl scc c thr disjoint ie two distinct scc connect path c thr proof first part lemma prove follow assum node c path r i r c thr mean exist path p r r c product permut path p sinc c scc exist path p r r c let product permut p exist n ident permut now consid path p path creat cycl c thr start r i back pass r obvious cycl contain path r r i second part lemma follow trivial first part a state b c scc b contain r defin equival relat r follow compon c thr easi see class partit r identifi uniqu compon thr everi compon c thr identifi class r thu use partit repres scc c thr class r call weakli fair correspond scc c thr weakli fair note track process l r alway form class size suppos r r node scc b partit r equal case fortun one obtain permut belong g problem motiv use common referenti base possibl nomine initi state pr b assum explor b depth first manner start initi state reachabl state visit let result depth first span tree now state u b let u denot product permut uniqu pr u path now state r b defin equival relat r follow r r node scc c b proof prove lemma enough show that everi impli vice versa show prove that everi i r r scc c thr automat impli follow everi j r j ie path c thr r r j also path r r j henc show r i r scc c thr take follow approach let u root scc c ie u first node c visit depthfirst search induc forest f let tree f contain u r let initi state pr root shown uniqu path pr r pass u see henc exist path c thr u gamma i r i henc lemma see two node scc c thr similar argument see scc show r scc intuit indic thread s pr i s pr enter scc thread graph pass r illustr concept consid subgraph simplifi resourc control exampl depict figur below tree edg denot boldfac arrow oeae pr oeae oeae oeae gammapsi figur strongli connect subgraph product graph b node strongli connect subgraph u immedi successor thread graph henc u similarli u u use return gener argument show comput r explor use depth first search edg gamma v b let e denot permut u note e edg e ident permut permut e satisfi follow properti e edg scc c contain r e proof sinc depth first search tree enter scc graph uniqu vertex accord lemma scc therefor may assum r root scc contain e henc path p p r endpoint u v e let product permut path p p respect easi see r r now demonstr r j enough show path c thr r j r i substitut u i j replac gamma r r i let denot permut r henc gamma r r i sinc r v scc exist path p v now path cycl exist n p also cycl product permut cycl ident permut big cycl written path obviou product permut p final consid cycl c product permut cycl equal cycl creat path c thr r i r i r r i follow path c thr r j r i let ae permut defin orbit relat ae reflex transit closur binari relat ig obvious orbit relat ae equival relat defin orbit partit ae partit induc orbit relat ae proposit reformul as e edg scc r orbit partit e smaller equal ie subset of r follow stronger result character r theorem r join orbit partit e e rang edg strongli connect compon r ie smallest equival relat contain orbit relat e edg e scc contain r proof need show r j impli process edg e scc r ek i k would indic i k k orbit relat ek henc i j smallest equival relat contain orbit relat edg scc relationship r r j therefor r i r j scc thread graph let r r j path connect them take k rk l k certainli permut label edg e k note differ ek ek i k i i k get ek i k l substitut l l from definit thread graph get complet proof illustr exampl figur comput e edg compon g e gamma gamma u tree edg gamma u find similar way comput e gamma u u orbit partit e join partit coincid next theorem follow immedi definit necessari suffici condit check class r weakli fair let c scc r b theorem class k partit r weakli fair i disabl u execut that is edg gamma v c gather togeth necessari tool present onthefli algorithm algorithm algorithm modif strongli connect compon comput use depth first search present eg vertex a product graph b maintain follow inform ffl udfnum uniqu id or depth first number node use strongli connect compon computationq ffl ulowlink id reachabl node lower u itself ffl uonstack flag indic u still stack ffl uperm vector u defin previou subsect ffl upartit approxim u ffl ustatu vector flag indic partit class known weakli fair ffl ufin flag indic u scc contain final automaton state inform propag depth first tree variabl udfnum ulowlink uonstack maintain algorithm given uperm set u creat upartit ustatu ufin updat everi time edg successor state u explor ontyefli model check m set depthfirstcount zero m set the initi state b set uperm ident permut conduct dfsearchu m exit answer dfsearchu note push u stack set uonstack set udfnum ulowlink depthfirstcount increas depthfirstcount initi upartit ident partit initi ustatu inform disabl process store aq state s ufin final automaton state idl command later modif use it aq edg gamma automaton transit aa enabl v alreadi construct vonstack set comput join upartit orbit partit e store upartit updat ustatu use process execut set ulowlink minimum ulowlink vlowlink v construct yet conduct dfsearchv vonstack still set comput join upartit vpartit store upartit combin vstatu ustatu updat ustatu use process execut set ulowlink minimum ulowlink vlowlink ufin vfinal set partit class weakli fair use ustatu ufin set exit ye answer udfnum ulowlink pop element u inclus stack mark pop vertic offstack command m construct initi state b invok dfsearch vertex dfsearch algorithm may exit ye answer fair final scc discov none recurs call invoc dfsearch exit ye answer algorithm output answer exit command m dfsearch work follow command initi variabl appropri two for loop command gener successor b state u command invok routin findequiv find equival repres t gamma l aqsi return l ae properti t gamma l t l equival permut ae later belong aqsi equival test becom easi store state symmetri partit underli state t definit detail consult subsect below it note need equival check sinc construct b product theta automaton a use a howev want construct b theta theta a need equival check case may state result b thi command need chang set l gamma l set ae ident permut command check u v nontre edg u v scc accomplish test v alreadi construct ie visit v still stack test pass orbit partit e join upartit result store upartit command execut edg tree edg ie v construct and henc visit first time command vperm set command dfsearch invok v v u scc indic condit command partit join ustatu updat updat carri out process edg u v command check partial explor scc contain u weakli fair final state algorithm exit ye answer indic fair comput accept automaton found command detect scc pop state scc stack theorem algorithm describ output ye origin program weakli fair comput accept a proof proof reli theori develop subsect correct strongli connect compon algorithm suppos algorithm halt ye answer termin stack contain strongli connect subgraph product graph subgraph weakli fair respect process upartit class weakli fair upartit approxim it smaller than u yield u weakli fair itself subgraph defin fair run program accept automaton program termin answer explor entir b graph found none strongli connect compon satisfactori they either lack final automaton state fair respect one process henc origin program fair run accept automaton analyz complex algorithm use follow notat k graph automaton jkj denot number node ek number edg transit execut command m togeth take oji time command execut node number b node jm theta j delta jaj singl execut list command take oji time thu command contribut ojm theta j delta jaj delta ji j complex consid execut command everi time command execut tripl e l differ valu henc command execut em time execut command take oji time implement algorithm join two partit mention command algorithm use graph data structur complex oji j command requir check node v alreadi construct implement state s maintain link list b state whose first compon s obvious length list ji j delta jaj search list take oji j delta jaj thu see execut command complex final consid command time execut tripl e l a differ valu henc number time execut bound em delta ji j delta jaj thu command contribut oem complex x denot complex singl execut command analysi see complex algorithm note that gener case check state symmetri command exponenti complex henc valu x exponenti howev implement check restrict form symmetri name symmetri swap two process also use state symmetri partit gener construct see next subsect implement complex oji j henc implement complex algorithm oem delta ji note invok equival check command explain earlier construct b theta theta a explor it case complex also oem state symmetri b partit initi parallel edg subsect devot show equival relat u defin subsect comput upartit comput effici present basic algorithm improv achiev sophist initi u consid portion edg command let a vertex product graph b process j call uequival denot u j permut ae g u call local state symmetri partit u intuit show process j interchang state u let u l edg b u aeffiael gamma v also edg yield v gamma i successor node u i u j thread graph b thr lemma follow u i u scc b thr henc u j prove next lemma lemma partit u smaller u everi state u product graph b fact allow improv algorithm first need project u common referenti base defin j command dfsearch chang initi upartit u describ state symmetri use remov parallel edg let gamma v e gamma v edg b say e e parallel permut ae g sure parallel equival relat edg let r r pr set repres edg contain least one edg parallel class partit initi present command orbit partit e give new inform orbit partit e consid reflect next lemma lemma r scc b r smallest partit contain v the initi valu vpartit everi v scc r well orbit partit e everi edg e r r pr proof let gamma v edg scc r whose repres gamma v r r pr suppos e show i j contain join orbit partit e u use definit e ident permut let i e later impli ae j henc gamma l give l u j sum up e impli l i l orbit partit e l j u therefor orbit partit e contain join u orbit partit e prove smallest partit contain v everi v scc r well orbit partit e everi edg e r r pr actual contain orbit partit edg scc r use theorem conclud contain r well direct follow proposit lemma idea appli follow class u pick repres process call leader class put r r l leaderg sinc everi edg parallel one caus leader pro cess r r pr satisfactori set repres edg introduc new vector ulead flag next improv algorithm introduct command modif command initi ulead aq edg gamma v uleaderi set state symmetri subsect show state symmetri also use reduc number edg gener store let state symmetri s ie gamma edg ffij gamma also edg simpl observ show need store j gamma gamma provid effici comput s idea employ first introduc aq state s equival call state equival relat among process indic defin follow g note subsect introduc local state symmetri partit b state local state symmetri partit b state a denot u note subscript distinguish two notat recal g j observ therefor local state symmetri partit b state usual smaller state equival relat underli state caus fact state symmetri permut b state fix underli state track process well nevertheless hand u easili comput unfortun problem comput difficult task sinc equival graph isomorph problem with given graph h associ program p state p straightforward way p mani process mani node h ha pair process v w p variabl av w index v w av w take valu v w edg h otherwis v exactli h automorph map node v later problem equival graph isomorph problem mani import special case symmetri detect perform effici gener howev approxim solut avail let j gamma edg gamma edg well simpl observ show need store j gamma ffij provid effici comput s readi present last improv algorithm construct not shown algorithm follow modif new node creat comput vector srepr defin that everi index j point repres class j construct edg store edg caus repres process so j gamma store origin algorithm command chang below respect store aq edg gamma process uleaderi set comput g point earlier gener comput comput hard howev implement method look state sym metri ie permut interchang two process indic comput symmetri correspond equival relat done ef ficient approach employ comput state symmetri b also note step algorithm enough find one permut satisfi given properti comput permut sinc case state symmetri restrict class permut interchang two process indic step also implement effici conclud section illustr concept state symmetri redund edg show simplifi resourc control delet redund edg oeae iii rii oeae oe id idgamma gammapsi gammapsi gammapsi figur aq without redund edg consid figur top row circl show local state three process bottom row list repres process compress edg origin implement develop prototyp onthefli model checker implement present algorithm use effici approxim techniqu check equival two state gener aq also main algorithm check equival b state case complet symmetri resourc control readerswrit exampl approxim algorithm indic two state equival whenev equival type symmetri approxim method may sometim indic two state inequival although equival case may get maximum possibl reduct size state space howev algorithm still correctli indic concurr system satisfi correct specif not use implement system check correct resourc control exampl reader writer exampl ethernet protocol variou number user contrast new system old model checker implement result present resourc control exampl check mani properti includ live properti everi user process request resourc eventu access resourc mutual exclus properti dramat improv detect perform measur indic tabl below product graph construct old new model checker refer b b respect statist given ab b number correspond old new model checker respect tabl statist check live properti eventu access aq state aq transit explor total memori use kbyte total cpu time use sec tabl statist check safeti properti mutual aq state aq transit explor total memori use kbyte total cpu time use sec live properti check satisfi resourc control model checker found fair incorrect comput tabl see number aq state same number aq transit much smaller new model checker due use state symmetri number product state explor onthefli system much smaller sinc termin earli hand origin model checker construct check incorrect fair comput mutual exclus properti model checker indic resourc control satisfi properti case earli termin come effect furthermor sinc track process mutual exclus global properti number state explor b b same howev number transit much smaller well b due effect state symmetri cpu time memori usag substanti smaller new model checker conclus paper present onthefli model check system exploit symmetri between state well insid state check correct fair symmetri base reduct shown power tool reduc size state space number context exampl techniqu employ petrinet commun reduc size state space explor techniqu also use protocol verif hardwar verif tempor logic model check onthefli model check techniqu employ tradit state enumer method also use type state reduct techniqu best knowledg first approach perform onthefli model check fair full rang tempor properti exploit symmetri part futur work plan explor techniqu automat detect symmetri integr techniqu model checker also algorithm check equival global state type symmetri need explor r a calculu protocol specif valid the design analysi comput algorithm effici onthefli modelcheck ctl automat verif finit state concurr program use tempor logic practic approach exploit symmetri tempor logic model check ing analyz concurr system use concurr workbench function program concurr simul autom reason introduct algorithm gener reduc model check fragment ctl symmetri model check util symmetri model check fair assumpt automatatheoret approach partialord method verif concurr system the state spin better verif symmetri color petri net basic concept analysi method practic use highlevel petri net theori applic test contain omegaregular languag comput aid verif coordin process automata theoret approach tr ctr a prasad sistla patric godefroid symmetri reduc symmetri model check acm transact program languag system topla v n p juli sharon barner orna grumberg combin symmetri reduct underapproxim symbol model check formal method system design v n p septemb alic miller alastair donaldson muffi calder symmetri tempor logic model check acm comput survey csur v n pe