t open shut typecas a two differ way defin adhoc polymorph oper commonli occur program languag first form polymorph oper defin induct structur type second form polymorph oper defin specif set typesin intension type analysi oper defin induct structur type therefor new case necessari userdefin type type equival underli structur howev intension type analysi close extens behavior oper cannot differenti new type thu destroy distinct type design expresshaskel type class hand defin polymorph oper set type oper defin class instanc consid openth programm add instanc new type without modifi exist code howev oper must extend special code new type may tediou even imposs add extens appli larg univers new typesboth approach benefit import let programm decid appropri need paper defin languag support form adhoc polymorph use basic construct b introduct adhoc polymorph execut program depend type inform parametr polymorph permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee septemb snowbird utah function must behav instanti how ever instanc adhoc polymorph function integ may behav dierent instanc boolean call function depend type inform typedirect adhoc polymorph compel addit type program languag well suit dynam environ use implement dynam typ ing dynam load marshal also essenti definit gener version mani basic oper equal structur travers particular adhoc polymorph simplifi program complic data structur elimin need repetit boilerpl code exampl implement compil may includ mani data structur repres intermedi languag mani pass data structur without typedirect program code travers abstract syntax must implement intermedi languag gener travers defin adhoc polymorph allow programm concentr import part transform current two form adhoc polymorph type function languag first base nomin analysi type inform haskel type class execut adhoc oper determin sole name type argument or name head constructor list exampl may use type implement polymorph structur equal type class declar typedirect oper call eq instanc class describ eq behav type composit type product list equal defin term equal compon type class eq eq bool instanc eq int instanc eq bool instanc eq a eq b eq ab instanc eq a eq a nomin analysi natur limit domain adhoc oper type definit provid exampl eq defin function type typedirect oper nomin framework natur open time may extend instanc new type without modifi exist code second form adhoc polymorph base structur analysi type exampl intension type analysi allow programm defin typedirect oper case analysi type structur polymorph equal defin runtim type analysi may look like typecas bool x els bc eq fst xfst y snd xsnd y bc error eq defin function typedirect oper defin case anali si natur close extens fact case type must provid oper defin two form adhoc polymorph dier way treat userdefin type userdefin type haskel newtyp import part mani languag although new type isomorph exist type express applicationspecif distinct made type checker exampl programm may wish ensur confus phone number age applic even though may repres use integ nomin oper open must extend instanc new userdefin type may tediou even dicult add new oper appli mani type furthermor type defin separ inaccess modul imposs programm extend oper type instead must reli defin type add instanc guarante respect invari typedirect oper hand close oper cannot extend new type structur system treat new type equal definit approach destroy distinct new type design express typedirect oper cannot treat age dierent phone numberboth treat integ system allow adhoc definit userdefin type loss abstractiona typedirect oper alway determin type underli represent presenc userdefin type neither pure nomin pure structur adhoc polymorph entir satisfactori combin form one languag paper unifi two dierent form adhoc polymorph foundat languag call l languag provid capabl structur nomin analysi coher framework allow develop choos characterist wish use system core l simpl system structur type analysi augment userdefin type structur analysi oper typecas may includ branch new name scope natur typedirect oper may unabl handl newli defin type type contain name branch oper cannot allow argument evalu becom stuck therefor type system l static track name use type compar domain type analysi oper new name gener dynam execut desir extend typedirect oper branch new name purpos introduc firstclass map name express intuit map branch typecas may pass typedirect oper extend handl new name also l includ support coerc type express mention new type name stress consid l appropri sourc languag human much way f appropri sourc languag human defin l requir program heavili annot written highlystyl fashion next step research program develop autom assist common idiom infer type argument firstclass map contribut work l languag import step toward improv practic typedirect program particu lar paper follow contribut defin languag allow definit open close typedirect oper previou work chosen one other augment adhoc mechan counter diculti defin languag allow programm static restrict domain typedirect oper defin structur system natur manner previou work requir programm use typelevel analysi program make restrict show reconcil typecas analysi higherord type constructor previou work base analysi interpret type constructor l show implement oper simpler construct present sophist system coercion convert new type definit extend previou work higherord coercion presenc type constructor isomorph remaind paper follow next section introduc featur l exampl first describ semant core languag section extend fulli reflex section section show higherord analysi may defin discuss addit extens section discuss relat work section conclud section program l core l polymorph lambda calculu augment type analysi userdefin type syntax l appear figur addit standard kind type constructor term fl includ label l set label l label may consid type constant model builtin type such int userdefin type kind type l label l type typepoli term l type labelpoli term sl type setpoli term l l type typecas branch term e x xe e e calculu fix xe integ recurs new e label creation e l firstord coercion higherord coercion typecas e type analysi l e e e branch le e le e l label polymorph slse el label set polymorph label l variabl constant label set u empti univers l l l singleton union figur core l languag import point l support runtim analysi type inform instead requir typedirect oper resolv compil time runtim analysi necessari mani situat type known compil time exampl larg program benefit typedirect program import compil entireti furthermor separ compil dynam load runtim code gener requir runtim type analysi even within singl compil unit type inform may avail compil time firstclass polymorph where data structur may hide type in polymorph recurs where iter loop instanti dierent type follow subsect describ import featur l detail gener type l languag includ simpl mechan user defin new type constant call type constant label emphas fact vari arbitrari label constant written annot kind distinguish constant languag constructor primit type label nullari constructor type integ binari constructor function type use syntact sugar int refer two label howev label appear type use notat int stand int stand function type exampl extend languag new form type boolean bool product list list add new label constant written bool list form type express new e creat userdefin label express dynam gener new label constant bind label variabl insid scope e type isomorph type kind oper coerc express type appar context elid annot exampl below new unlik form userdefin type haskel newtyp mechan dynam creat new type gener new label requir oper eect run time howev coercion convert new label definit runtim cost chose mechan model gener type l simplic sophist languag could base mechan type gener modul system note even though runtim type analysi destroy parametr creat type polymorph user may still hide implement detail abstract datatyp gener type outsid scope new label imposs determin underli definit exampl know polymorph function f must treat term argument parametr becaus even presenc runtim type analysi cannot coerc type int new type analysi restrict domain term typecas e may use defin typedirect oper l oper determin head or outermost label normal form type argument int list select appropri branch finit map e label ex pression exampl express typecas int int evalu finit map typecas may form singleton map such int e int join two finit map e e join domain disjoint second map preced compound map abbrevi challeng part design l ensur match branch analyz type ex ampl stuck express typecas bool int type check branch boolean type or rather label reason check typecas express l calcul set label may appear within analyz type requir set subset set label branch typecas label set l may empti may contain singl label l may union two label set l l may entir univers label u analog finit map l l n abbrevi l ln allow type polymorph annot quantifi type variabl set label may appear type instanti it exampl know instanti type form label int bool ie int bool match typecas express annot type variabl u unanalyz typecas cover branch realist use typecas polymorph equal iti function eq implement polymorph equal function data object compos integ boolean product list follow exampl let list fix eql bool l typecas int eqint bool xbool ybool x els not y l l fst xfst y list l xlist ylist eq x product type two subcompon branch abstract two type variabl subcompon likewis list case abstract type list element gener type branch typecas determin kind match label typecas determin head label argument step correspond map branch appli branch argument appli head label exam ple appli polymorph equal type integ list result list branch appli int eqlist int l xlist ylist eq x y int xlist int ylist int eqint x abil restrict argument polytyp function valuabl exampl polytyp equal function cannot appli valu function type here l natur make restrict omit set label argument eq gener type type analysi function eq close extens howev creation new label may mani type express programm would like appli eq to l provid two solut problem rewrit eq extens new branch new label otherwis leav eq applic coerc argument eq type contain new label extens type analysi l rewrit eq extens new branch new label programm may provid new typecas branch addit argument eq type argument firstclass map label ex pression written l l first compon flexibl unanalyz type impor tant approach best way support parametr polymorphismit allow type partli abstract partli transpar type domain map second third compon use describ type branch use firstclass map pass branch int follow oper x int bool int typecas int bool true x simplic l make attempt enforc domain join map disjoint instead map or dere exist branch may shadow rightmost match branch select follow express int fals suppli x express evalu fals x int bool int typecas int bool fals int true x redefin behavior typecas int may programm intend allow scenario aect sound l programm wish prevent redefinit could join x left howev even typedirect function abstract map typecas still extens type map specifi label domain branch newli creat label cannot suppli therefor l includ labelset polymorph typic idiom extens oper abstract set label map set requir argument polytyp function compos label plu label alreadi branch typecas call function defin manner open exam ple creat open version eq follow again let list code below variabl describ domain label map y eq function may instanti type contain label l s slsi bool l fix eq s l bool s l typecas list version eq treat label dierent underli represent exampl dollar amount store float point number round two decim place compar them calculu explicitli wit design complex open polytyp oper suppos wish call open oper call import bodi open se rializ call tostr intuit import elid part data structur decid whether recurs continu tostr appli type provid map new label import must also applic type two way write tostr first suppli branch import addit argument type branch determin kind label match branch well two compon precis specif relationship appear section tostr below slsi to s string s fix tostr s typecas y to fst x tostr fst x els tostr snd x els dependencystyl gener haskel use techniqu languag addit argument automat infer compil howev depend still show type oper hinder modular program second solut provid tostr mechan coerc away label set call import case import would abl special execut newli provid label how ever tostr call mani open oper somehow infeas suppli map import may reason implement contrast close polytyp oper may easili call close polytyp function higherord coercion typedirect oper extens programm may wish reason oper close world furthermor even oper ex tensibl mani new label behavior oper ident underli representa tion although data structur contain new label may convert mention new label by repeat use still may dicult comput expens coerc compon larg data structur exampl coerc list s list int requir deconstruct list coerc element individu creat new list avoid unnecessari eort program written execut add higherord coercion l term provid ecient mechan coerc valu label type underli represent back like firstord coercion oper runtim eect mere alter type express exampl suppos defin new label equival pair integ new intint variabl x type list say also close typedirect oper f type int int call f list x type check domain f howev know isomorph int could call f coerc type element list map firstord coercion across list f list int map y y howev oper map destruct rebuild type context empti context bound type var l label variabl sl label set variabl l bound type var signatur l context x l l e v v le le slse tycon path figur syntax necessari static dynam semant list could comput expens higherord coercion coerc x type list int without comput cost list gener higherord coercion annot type constructor in case list describ locat label coerc type term core languag next describ semant core l detail includ dynam static semant mechan describ previou section semant languag defin number judgment import describ below judgment employ number new syntact categori list figur refer complet semant languag appear appendix a judgment state term e wellform type type context term context possibl use type isomorph describ type isomorph induc new express introduc new label variabl isomorph type show term well type often requir determin kind type judgment set possibl label may appear type judgment l judgment describ smallstep call byvalu oper semant languag say term e set label l step new term e possibl larger set label l evalu new oper labelset compon allow select fresh label previous use way resembl alloc semant initi state execut includ type constant int l semant calculu fragment l includ fix integ standard discuss further semant gener type dynam static rule new are new e l l int l l figur oper semant higherord coercion excerpt new e dynam new oper choos label constant previous refer substitut label variabl within scope e static must appear type e escap scope type check e isomorph avail coercion primit coercion chang head constructor type argument ll syntax denot type head type path path sequenc applic sever type argument oper primit coercion cancel primit coercion higherord coercion extend express primit coercion allow nonhead posit type chang describ last section use coerc type valu store data structur coercion annot type constructor describ part data structur coerc l intuit higherord coercion map primit coercion express guid type constructor figur list rule describ oper semant term weakhead normal form constructor determin oper higherord coercion form determin follow kinddirect relat first rule assur type kind normal weakhead normal form relat standard weakhead reduct relat list appendix type kind second rule appli eventu reduc nest abstract around weakhead normal form type constructor annot higherord coercion must kind kind know reduc type constructor form also know path head variabl constant univers type branch type form determin execut higherord coercion path begin type variabl locat firstord coercion use howev may part valu coerc ie may occurr path besid head posit insid firstord coercion anoth higherord coercion otherwis form must match valu bodi coercion form valu oper rule exampl int valu must integ coercion goe awayno primit coercion necessari valu function semant push coercion function chang type argument bodi function similar rule appli valu form semant type analysi rule describ execut typecas below rule use relat determin weakhead normal form analyz type form must label head type path then typecas choos rightmost match branch map argument v step specifi term appli seri type argument specifi term path p term path deriv obviou fashion static semant typecas defin follow rule l l l l l import part rule check may safe analyz typecas whatev head normal form is must correspond branch typecas judgment l conserv determin set label could appear part type judgment state type context type may mention label set l import rule judgment label variabl l l l first rule abov label ad set use type second two rule correspond two form type variabl bind type variabl bound term languag annot set label may appear type use instanti them howev variabl bound typelevel abstract annot consequ contribut label set last rule sound appropri label record typelevel abstract appli type analyz core l languag type firstclass map polymorph express may analyz normal form label head next section show extend calculu type may repres label therefor analyz core languag howev prevent type argument typecas includ rule determin label set type rule type check typecas determin label could appear argument type look type firstclass map determin domain map given map e domain l type argument mention label l rule check map handl possibl label l l result type typecas depend type map argument l l import rule check map rule singleton map below first compon map type in case l describ domain map second two compon l describ type branch map judgment ensur label l label set l wellform respect type context label higher kind typecas appli match branch argument path match label therefor branch label must quantifi argument correct type branch determin kind label polykind type notat l notat defin follow rule label set compon kindindex type use restrict quantifi type variabl ensur safe appli branch subcompon type argument rule typecas requir second label set type map least big first label set import express calculu typecas rule conserv determin set label may occur anywher type argument also sound defin version rule determin possibl label head posit type examin typecas howev case branch match label higher kind must use u restrict quantifi type variabl determin head label type provid inform label part type precis would prevent import exampl express calculu mani typedirect oper such polymorph equal fold cata morphism structur type determin behavior algorithm composit type product type function must make recurs call subcompon type recurs call type check show subcompon satisfi label set requir entir oper mention abov must assum subcompon label set u unanalyz properti l languag type sound follow usual progress preserv theorem proof theorem induct deriv defin theorem progress int dom e valu exist l e theorem preserv int exist e also shown coercion necessari oper semant untyp calculu coercion eras preserv type analysi oper behavior calculu word express l evalu valu coercioneras version evalu coercion eras valu full reflex core languag demonstr basic idea extens typecas express oer capabl full reflex type cannot analyz typecas full l languag address problem extend set analyz type includ type express full languag also includ label label set runtim analysi oper rest section discuss extens modif kind label l label set l type l slsl l term e setcas l lindex l setcas e e e u eu branch figur modif full reflex label polymorph label set polymorph kind polymorph figur distinguish label kind syntax core l support full reflex appear figur core l languag univers type map type cannot argument typecas full languag introduc distinguish label repres constructor univers type map type kind distinguish label shown figur type becom syntact sugar applic appropri label shown figur new distinguish label requir new form abstract type level label l label set sl kind addit also reflect kind level kind includ kind core l kind label abstract l kind label set constructor ls final univers kind kind kind abstract type level one implic addit new abstract form polykind type cannot determin static gener kind parameter may unknown compil time therefor polykind type part syntax full languag instead deriv form type equival relat encod fact equival certain simpler type interest equival given figur notic polykind type label constructor figur run time close polykind type alway reduc one type form although typecas allow programm determin label match one given set label provid way learn new label there fore full l languag introduc oper lindex return integ associ argument label con stant oper provid programm way figur int int figur syntact sugar type distinguish label run time rule lindex straightforward lindex anoth addit label set analysi oper setcas languag label set fix setcas branch possibl form label setempti sin gleton union univers oper setcas behav much like typecas convert argument normal form equival label set behavior step appropri branch demonstr label label set analysi consid follow exampl function comput string represent label set assum languag extend string oper concaten convers tofrom integ fix settostringl stringl setcas s lss ls rule type check setcas below setcas l e e rule e must abl take label argu ment whatev kind label therefor express must kind polymorph higherord analysi higherord type analysi extens runtim analysi type higherord kind use defin oper term parameter data structur list tree oper must abl distinguish type paramet rest type exampl gener length oper determin length list number node tree must abl distinguish data no matter type is rest structur l gener new label run time make distinct result higherord analysi depend kind analyz constructor previou system typedirect oper defin interpret type constructor type function map term type applic term applic type variabl term variabl way equival term languag reflect equival type languag even though type int bool bool syntact dierent semant type analysi produc result howev l analysi weakhead normal form type equal type normal form equival alreadi preserv furthermor know constructor kind equival type function by extension encod analysi constructor polymorph term function whose bodi use typecas analyz constructor kind gener kind encod higherord analysi firstord analysi exampl suppos f open polytyp oper type slssss l say want use instanc f type kind l contain label so modifi call site f polymorph function interpret type function function abstract type argument branch x interpret creat new label pass branch f map new label interpret way matter type instanti with interpret alway x lxnew extens branch one diculti work l typecas must alway branch label argument show earlier work around use higherord coercion firstclass map howev case natur provid default branch appli branch match label add anoth form map e domain label extens type variabl restrict u parametr branch match label kind type depend kind match label therefor type kind polymorph polymorph within l reason term could default branch howev addit linguist mechan except default branch provid anoth way treat new type name recurs uncoercion new type l may recurs defin howev are higherord coercion cannot complet elimin new label type express instead coercion unrol type onc leav occurr new label possibl use firstord coercion recurs remov occurr new type result unnecessarili decompos rebuild data structur coercion comput content reason provid primit oper jk l uncoerc imposs know static exact shape e is unrol type e hidden use existenti type type bottom out use int although could use type exampl follow list could uncoerc follow jinr inr inl result existenti packag could open content use argument typedirect oper cannot handl label record variant type current system typedirect program troubl record variant type name field constructor often system translat type intern represent analysi label integr part l small extens use repres type nativ extens need record variant type finit type map label type kind finit type map new syntact categori form abstract applic type term languag well finit map analysi rule analog label set subsumpt membership equal defin finit map map e mmape em mapcas distinguish label rec kind map form record type finit map mani version record type equival permut record term form empti record singleton concaten e e l domain record type record project el wellform provid abstract finit map record get form row polymorph free straightforward develop similar extens variant key dierenc record branch use typecas record label must kind arbitrarilykind label allow code analyz record type would need kind polymorph limit use relat work much research typedirect program runtim type analysi allow structur analysi dynam type inform abadi et al introduc type dynam type could coerc later via case analysi extract core semant typecas l similar intension polymorph harper morrisett howev l includ typelevel analysi oper extens l fulli reflex follow similar extens harper morrisett languag trifonov saha shao weirich extend runtim analysi higherord type constructor follow work hinz gener program use structur datatyp gener special oper compil time chariti languag automat gener fold datatyp polyp extens haskel allow definit polytyp oper base posit regular datatyp functori ml base polytyp oper composit functor lead program languag fish gener haskel follow work hinz allow polytyp function index type type constructor nomin form adhoc polymorph usual use overload type class haskel implement overload defin class type instanc set polytyp oper hinz peyton jone explor extens automat deriv type class instanc look underli structur new type dependencystyl gener haskel revis gener haskel languag base name type instead structur howev automat defin gener function convert userdefin type underli structur represent specif definit provid mani languag use form gener type repres applicationspecif abstract exampl standard ml haskel reli datatyp gener type infer modern modul system also provid gener type definit new type known type isomorph paper dier calculi type equal such provid harper lillibridg stone harper requir explicit term coerc type name definit explicit coercion dicult programm use simplifi semant gener type explicit coercion also make sens conjunct typedirect program even definit known distinct still made dynam type analysi research consid combin gener type form dynam type analysi glew sourc languag dynam check predeclar subtyp relationship type name lammel peyton jone use dynam type equal check implement number polytyp iter rossberg n calculu dynam check type possibl contain new name equal rossberg languag also includ higherord coercion allow type isomorph behav like existen tial hide type inform insid precomput expr sion howev coercion dierent semant our higherord coercion reminisc color bracket grossman et al also use leifer et al preserv type gener marshal discuss conclus l languag provid good way understand properti nomin structur analysi repres form make appar advantag disadvantag each view l solid foundat design userlevel languag incorpor version polytyp design l explor mani altern simplifi languag exampl tri combin label label set syntact categori type therebi elimin need separ abstract form howev combin dramat increas complex semant fact chang allow new express creat new name type label set even label complic process determin appropri set label use type constructor asid develop usabl sourc languag number extens would worthwhil con sider first type definit provid simplist form gener plan extend l modul system possess sophist type gener further more type analysi especi use applic marshal dynam load would use develop distribut calculu base upon l avoid need central server provid uniqu type name name gener could done randomli larg domain low probabl collis final increas express core lan guag plan extend two way first typecas make restrict label appear argument express catamorph structur type languag howev everi typedirect function catamorph oper determin head form type other hybrid applic specif pattern type structur exampl add refer calculu could extend eq refer enc even content compar use pointer equal calculu cannot express pattern furthermor oper applic specif pattern exampl oper may applic function take integ argument function form int int int int int oper still express core calculu way static determin whether type argument satisfi one pattern dynam check must use approach problem plan investig pattern calculi may abl precis specifi domain typedirect oper exampl mechan languag design support nativ xml process static enforc treestructur data particular form furthermor also import add typelevel analysi type languag shown past work imposs assign type typedirect function without featur one way might extend primitiverecurs oper trifonov et al includ firstclass map label type acknowledg thank steve zdancew benjamin pierc andrea rossberg help discuss r dynam type staticallytyp languag gener haskel user guid chariti flexibl type analysi type system higherord modul regular object type type dispatch name hierarch type syntact type abstract compil polymorph use intension type analysi polytyp valu possess polykind type jone deriv type class regular express pattern match xml program fish functori ml jone scrap boilerpl practic design pattern gener program global abstractionsaf marshal hash type definit standard ml revis abstract model memori manag jone editor haskel languag librari revis report record variant natur extens ml type abstract parametr polymorph gener dynam opac abstract type decid type equival languag singleton kind fulli reflex intension type analysi type compil recurs datatyp make adhoc polymorph less adhoc syntact approach type sound tr ctr ralf lmmel simon peyton jone scrap boilerpl class extens gener function acm sigplan notic v n septemb geoffrey washburn stephani weirich good advic typedirect program aspectori program extens gener function proceed acm sigplan workshop gener program septemb portland oregon usa john bill peter sewel mark shinwel rok strnia typesaf distribut program ocaml proceed workshop ml septemb portland oregon usa