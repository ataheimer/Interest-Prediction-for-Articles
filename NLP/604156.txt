t ownership type object encapsul a ownership type provid static enforc way specifi object encapsul enabl local reason program correct objectori languag howev type system enforc strict object encapsul constrain allow effici implement import construct like iter paper argu right way solv problem allow object class defin modul privileg access other represent show inner class approach allow programm express construct like iter yet support local reason correct class class inner class togeth reason modul paper also sketch use variant ownership type enabl effici softwar upgrad persist object store b introduct abil reason local program correct crucial deal larg program local reason allow correct dealt one modul time modul specic describ expect behavior goal prove modul satis research support part darpa contract f nsf grant ii ntt permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee popl januari new orlean louisiana usa acm specic use specic code modul way complex proof eort formal inform kept control local reason approach sound separ verica tion individu modul suce ensur correct composit program key sound local reason objectori languag object encap sulat consid exampl stack object implement use link list local reason correct stack implement possibl object outsid directli access list node ie list node encapsul within s paper present variant ownership type specifi static enforc object encapsul ownership type program declar own list node type system static ensur list node encapsul within s type system enforc strict object encapsul how ever constrain allow ecient implement import construct like iter consid exampl iter abovement stack object s iter encapsul within s cannot use outsid s iter encapsul within s cannot directli access list node s henc cannot run ecient previou ownership type system either constrain support construct like iter permiss support local reason exampl allow object outsid abovement stack object temporarili get direct access list node paper argu right way solv problem provid special access privileg object belong class modul show inner class variant ownership type allow inner class object privileg access represent correspond outer class object principl violat encapsul allow programm express construct like iter use inner class yet support local reason correct class system support local reason class inner class reason togeth modul paper also describ variant ownership type enabl ecient softwar upgrad persist object store interest softwar upgrad led us work ownership type paper show ownership type use ensur code upgrad object observ broken invari interfac unknown time written make possibl programm reason correct upgrad paper organ follow section discuss object encapsul section describ variant ownership type enforc object encapsul section present formal descript type system section show ownership type use enabl modular upgrad section discuss relat work section conclud object encapsul object encapsul import provid abil reason local program correct reason class objectori program involv reason behavior object belong class typic object point subobject use repres contain object local reason class correct possibl subobject fulli encapsul is subobject access within contain object condit support local reason ensur outsid object cannot interact subobject without call method contain object therefor contain object control subobject howev full encapsul often need encapsul requir subobject contain object depend d object x depend subobject x call method furthermor call expos mutabl behavior way aect invari x thu stack object implement use link list depend list item contain list code outsid could manipul list could invalid correct stack implement code outsid safe use item contain call method depend ident item ident never chang similarli set immut element depend element even invok aequalsb ensur two element b set equal element immut local reason class possibl object class encapsul everi object depend on strict object encapsul constrain prevent efcient implement import construct like iter exampl run ecient iter abovement stack object need access list node s provid access allow object like iter violat encapsul local reason still possibl provid violat encapsul limit code contain mod ule exampl stack iter impl o everi object owner o owner either anoth object world o owner object chang time o ownership relat form tree root world figur ownership properti world figur ownership relat ment modul still reason correct local examin code modul ownership type encapsul ownership type provid static enforc way specifi object encapsul idea object subobject depend on thu prevent access outsid section present ownership type system system similar one describ the main dierenc support construct like iter type system allow temporari violat encapsul disallow violat instead support construct like iter use inner class key type system concept object owner ship everi object owner owner either anoth object special owner call world type system static guarante ownership properti shown figur figur present exampl ownership relat draw arrow x x own y gure special owner world own object o o o own o own o own o ownership allow program static declar encapsul boundari captur depend d object object depend on system enforc encapsul insid encapsul boundari z x outsid x cannot access y an object x access object x pointer y method x obtain pointer y figur insid encapsul boundari outsid cannot access o object allow access object own ancestor ownership tree object own global access object name object own world thu access object gure except o note analog nest procedur proc p fvar x class tstackstackown towner new tnodethi townervalu head pop return valu class tnodenodeown towner tnodenodeown towner next valu tnodet v tnodenodeown towner n valu return valu tnodenodeown towner next return next class class tstackclient void test new tstackthi thi new tstackthi world new tstackworld world new tstackworld thi figur stack object shead sheadnext shead sheadnext shead sheadnext sheadvalu sheadvalu sheadnextvalu sheadnextvalu sheadnextvalu sheadvalu world figur ownership relat tstack s s owner polymorph present type system context javalik languag augment ownership type everi class definit parameter one owner rst owner paramet special identi owner correspond object owner paramet use propag ownership inform parameter allow programm implement gener class whose object dierent owner parameter similar parametr polymorph except paramet owner type owner instanti thi world anoth owner paramet object own encapsul object cannot access outsid object own world access anywher proc p fvar x proc p fggg say xn pn children pn pn access pn children ancestor pn children global variabl procedur class ccowner sowner towner sowner towner tstacksown towner s figur use claus constrain owner figur show exampl tstack stack ob ject implement use link list tstack class parameter stackown towner stack owner own tstack object towner own object contain tstack code speci tstack object own node list therefor list node cannot access outsid tstack object type tstack instanti use owner paramet mean tstack own tstackclient object creat object s tstack own tstackclient object object own world tstack own world object s ownership relat s s depict figur assum stack contain two element dot line indic everi object directli indirectli own world constraint owner everi type hx xni multipl owner type system static enforc constraint x x fng recal figur ownership relat form tree root world notat y z mean descend z ownership tree notat y z mean either z descend z ownership tree thu type tstack figur illeg world thi constraint howev extend parameter method well method object type hx xni restrict x x fkg these constraint need provid encapsul presenc subtyp illustr point exampl check ownership constraint modularli sometim necessari programm specifi addit constraint class method paramet exampl figur type legal sowner towner allow programm specifi addit constraint use claus type system enforc constraint exampl figur class c speci sowner towner instanti c satisfi constraint illeg subtyp rule declar subtyp rst owner paramet supertyp must subtyp addit cours supertyp must satisfi constraint owner rst owner match exampl show type annot written explicitli howev mani automat infer see section detail class tstackstackown towner tstackenumenumown towner element enumown towner return new tstackenumenumown towner class tstackenumenumown towner implement tenumerationenumown towner tnodetstackthi towner current tstackenum current tstackthishead getnext current null return null return t return current null class tstackclient void test tstackthi world new tstackthi world interfac tenumerationenumown towner boolean hasmoreel figur tstack iter special correspond object thu tstackhstackown towneri subtyp objecthstackowneri thtowneri subtyp objecthworldi rst owner match inner class inner class similar member inner class java inner class denit nest insid class figur show exampl inner class tstackenum implement iter tstack element method tstack provid way creat iter tstack tstack code otherwis similar figur recal owner instanti thi world anoth owner paramet within inner class owner also instanti cthi c outer class featur allow inner object access object encapsul within outer object figur owner current eld intstackenum instanti tstackthi current eld access list node encapsul within outer tstack object inner class parameter owner like regular class system outer class paramet automat visibl insid inner class inner class use outer class paramet must explicitli includ outer class paramet declar figur tstackenum declar includ owner paramet towner outer class towner therefor visibl insid tstackenum tstackenum declar class tstackstackown towner class tstackenumenumown towner implement tenumerationenumown towner tnodetstackthi towner current getnext writesthi readststackthi interfac tenumerationenumown towner boolean hasmoreel readsthi figur tstack iter eect includ stackown therefor stackown visibl insid tstackenum note exampl element method parameter enumown allow program creat differ iter dierent owner element return iter type tstackenumhenumown towneri type legal must case enumown towner requir captur claus note also tstackhstackown towneritstackenum henumown towneri declar subtyp tenu merationhenumown towneri allow tstackclient creat unencapsul iter e encapsul tstack s program pass e object outsid tstackclient gener inner class use implement wrapper expos limit interfac outer object program creat wrapper around encapsul subobject pass wrapper object outsid encapsul boundari encapsul theorem system provid follow encapsul properti theorem x access object own x inner class object o proof consid code class chf if ho i g variabl type ho i declar within static scope class c owner therefor either thi world formal class paramet formal method paramet c thi c outer class show rst four case constraint thi o hold rst two case constraint hold trivial last two case f o thi f constraint hold fth case c therefor object x class c access object own rst four case x inner object o fth case class intvector int size read thi return elementcount void addint x writesthi elementcount class intstack intvector new intvector vecaddx figur reason alias side eect discuss variant ownership type support local reason provid programm declar dependedon object own theorem impli own object access insid owner inner ob ject therefor ownership captur depend relat describ section local reason correct class possibl class inner class togeth reason modul ownership type also express allow ecient implement construct like iter wrapper furthermor also allow program creat wrapper use context underli object inaccess abil illustr figur iter e use global even though tstack iter use tstackclient rst ownership type system support construct like iter gener access wrapper also ensur local reason discuss section eect claus system also contain eect claus use specifi assumpt hold method boundari enabl modular reason check program use eect ownership type enabl modular upgrad describ section system allow programm specifi read write claus consid method speci write wn read r rm method write object x or call method write x fng method read object or call method read y y w y r j fmg thu allow method read write object name write claus figur show tstack iter use eect otherwis similar tstack iter figur exampl hasmoreel method read object getnext method read object own tstackthi write and read object defn class cnhformali extend c constr bodi bodi finnerclass eld methg owner formal j world j cnthi constr owner owner j owner owner innerclass defn meth mnhformaliarg eect constr feg eect read owner write owner eld fd formal f e new c j xnew c j x j let arg feg j class name eld name method name xy variabl name figur grammar eect claus use conjunct subtyp eect overridden method must subsum eect overrid method sometim make dicult specifi precis eect method exampl dicult specifi precis read eect getnext method tenumer class tenum ation expect supertyp subtyp like tstack enum tenumer cannot name specic object use getnext method subtyp accommod case allow escap mechan method includ world eect claus ownership type eect use local reason side eect method call consid exampl code figur show intstack implement use intvector vec we adopt exampl exampl method receiv two argument intstack intvector v condit assert statement true v alias svec exampl method use claus specifi v s s v sinc ownership relat form tree see figur constraint impli v cannot alias svec furthermor intvectors declar read object own intvector intstackpush declar write and read object own intstack therefor possibl reason local vsize spush cannot interfer thu condit assert statement must true type system section present formal descript type system simplifi present key idea describ type system context core subset java known classic java add inner class classic java augment type system ownership type approach howev extend whole java similar languag type check figur present grammar core type system set rule reason type judgment fieldsoncep class cnhfn extend c constr ficlass eld methg c constr env owner world world owner formal owner thi class cnhfn i constr cnhfi xy method declar class cnhfn i f meth g c method inherit field declar class cnhfn i f eld g c field inherit eld world exp ref assign figur type check rule judgment mean defn wellform class class c owner constraint constr satis eect x subsum eect wellform type subtyp type environ e wellform class c declaresinherit eld class c declaresinherit meth eld eld wellform eld meth meth wellform method eect e subsum rw figur type judgment t p program check includ provid inform class denit e environ provid type free variabl e r w must subsum read write eect e type e dene type environ r w on dene type system use judgment figur present rule judgment figur rule use number predic shown figur predic base similar predic simplic sometim treat outermost class rule inner class class also sometim use cnhfi denot sound type system type check rule ensur program welltyp program respect properti describ figur complet syntact proof type sound construct dene oper semant by extend oper semant classic java prove welltyp program reach error state gener subject reduct theorem hold welltyp program subject reduct theorem state semant interpret term type invari reduct proof straightforward tediou omit here type infer although type system explicitli type principl would oner fulli annot everi method extra type inform instead use combin infer wellchosen default signicantli reduc number annot need practic describ intraprocedur type infer algorithm default type use similar approach in one thirti line code chang express java program ownership type system emphas approach infer pure intraprocedur infer method signatur type instanc vari abl rather use default complet partial type specic case minim requir anno tation approach permit separ compil mean wfclassesp cycl class hierarchi declar twice p contain two inner class name either declar inherit fieldsoncep class contain two eld name either declar inherit contain two method name overrid method return type paramet type method overridden read write eect overrid method must supersed overridden method figur predic use type check rule runtim overhead system describ pure static type system ownership relat use compiletim type check preserv runtim consequ program runtim overhead compar regular java program fact one way compil run program system convert regular program type check remov owner paramet constraint owner eect claus languag like java howev pure staticallytyp java allow downcast check runtim suppos object declar type objecthoi downcast vectorhoei sinc result oper depend inform avail runtim type checker cannot verifi compiletim e right owner paramet even assum object inde vec tor safe support downcast system keep ownership inform runtim similar keep runtim inform parameter type describ ecient ownership keep runtim inform object potenti involv downcast type multipl paramet upgrad persist object store section show ownership type eect claus use enabl modular reason correct upgrad persist object store desir achiev reason motiv work ownership type encapsul persist object store contain convent object similar one might nd objectori languag java applic access persist object within atom transact sinc necessari ensur consist store object transact allow concurr access mask failur upgrad need system improv object implement correct error even chang interfac face chang applic requir includ incompat chang interfac new interfac support method old one provid satisfactori solut upgrad persist object store longstand challeng upgrad persist object store dene set classupgrad one class whose object need chang classupgrad tripl holdclass newclass tfi indic object belong oldclass transform use transform function tf provid programm object newclass tf take oldclass object newli alloc newclass object initi newclass object oldclass object upgrad infrastructur caus newclass object take ident oldclass object object use point oldclass object point newclass object upgrad execut transform object whose class replac howev transform must interfer applic access store must perform ecient space time addit must done safe import persist state corrupt previou approach provid satisfactori solut challeng either stop applic access databas run upgrad keep copi databas limit express power transform eg transform function allow make method call system provid ecient solut perform upgrad lazili object transform applic access it applic transact interrupt run transform function transform run transact transact commit applic transact resum system also allow later upgrad run parallel earlier one object sever pend transform run one anoth upgrad order furthermor transform transact encount object pend transform upgrad interrupt just like applic run pend transform continu execut pend transform commit detail found ownership type safe upgrad upgrad system ecient express delay applic transact avoid use version copi object limit express power transform function also need support modular reason correct transform function possibl transform function encount object interfac invari exist upgrad start even though realiti transform function might run much later applic transact transform transact use variant ownership type enabl modular reason correct transform function system check static whether transform function satisfi follow constraint use ownership eect declar eect claus state object tf access s tfx access object x own directli transit transform function often satisfi ownership frequent captur depend relat discuss section typic transform function access depend object we discuss support modular reason transform function hold implement also ensur follow s object x aect upgrad x access object own x ensur use two mechan own object encapsul within x type system guarante x access rst own object share inner class object x system caus x access inner class object rst use upgrad latter mechan describ detail hold prove outorord process transform caus problem particular show that applic interfer transform function transform function unrel object interfer other transform function relat object run predetermin order name object transform own subobject the proof given thu hold ensur transform function encount expect interfac invari support modular reason transform function reason extra method old class relat work euclid one rst languag consid problem alias stress need better treatment alias objectori program earli work island balloon focus fulli encapsul object subobject object access access outsid object univers also enforc full encapsul except readonli refer howev full encapsul signicantli limit express often need work escjava point encapsul requir subobject contain object depend escjava unabl alway enforc encapsul ownership type encapsul ownership type provid static enforc way specifi object encapsul propos formal system enforc strict object en capsul signicantli limit express ness requir subtyp owner supertyp tstackhstackown towneri cannot subtyp objecthstackowneri moreov support iter prfj scj joe extend ownership type support natur form subtyp without violat encapsul joe introduc constraint everi type multipl owner rst owner owner result joe program creat pointer object x object own o prfj scj allow object contain pointer subobject own dierent object eect claus prevent program follow point er system eectiv enforc encapsul object eld howev support construct like iter allow method local variabl violat encapsul therefor support local reason aliasjava use ownership type aid program under stand like ownership type system aliasjava allow programm use ownership inform reason alias aliasjava also exibl ownership type system howev unlik ownership type system aliasjava enforc encapsul properti thi illustr exampl ownership type extend inner class howev system enforc properti state section support local reason ownership type also use enforc prop erti parameter racefre java prfj use base type system prevent data race multithread program safe concurr java scj extend prevent data race deadlock system combin approach enforc object encapsul well prevent data race deadlock sketch way thi recent work combin region type type system static ensur object encapsul safe regionbas memori manag relat type system linear type uniqu pointer also use control object alias linear type use low level languag support safe explicit memori dealloc track resourc usag linear type uniqu pointer orthogon ownership type two use conjunct provid express system prfj rst system combin ownership type convent uniqu pointer recent work propos better approach allow program specifi uniqu extern pointer object intern pointer object subobject eect claus use specifi assumpt must hold method boundari eect enabl modular check program prfj rst system combin eect ownership type static prevent data race also combin eect ownership prevent deadlock program understand paper use eect ownership enabl lazi upgrad data group use name group object eect claus write modular specic presenc subtyp ownership type provid altern way write modular specic ownership type also use name group object eect claus name owner use name object transit own owner figur present exampl express use ownership type data group implement use theorem prover principl exibl howev pivot uniqu impos drastic restrict pivot eld ownership type impos restrict requir owner object uniqu owner exclus constraint hard code system programm specifi arbitrari constraint owner use claus owner exclus use default system tvla pale role specifi shape local object graph detail ownership type tvla verifi properti input program tree output also tree pale verifi data structur express graph type role verifi global properti particip object multipl data structur role also support composit interprocedur analysi contrast system take exponenti time veric ownership type provid lightweight practic way constrain alias conclus object encapsul enabl sound local reason program correct objectori languag ownership type provid way specifi static enforc object encapsul howev type system enforc strict object encapsul constrain allow ecient implement import construct like iter paper argu right way solv problem allow object class dene modul privileg access other represent show inner class variant ownership type allow object inner class privileg access represent correspond object outer class principl violat encapsul allow programm express construct like iter wrapper use inner class system also allow wrapper use global context object wrap yet system support local reason correct class class inner class reason togeth modul thu paper describ rst ownership type system express enough support iter wrapper also support local reason addit paper describ applic techniqu enabl modular reason upgrad persist object store ownership type use purpos well prevent data race deadlock safe regionbas memori manag sinc ownership type requir littl program overhead type check fast scalabl provid sever benet oer promis approach make objectori program reliabl acknowledg thank daniel jackson viktor kuncak greg nelson martin rinard alexandru salcianu use discuss comment earlier draft paper r ad type parameter java languag alia annot program understand balloon type control share state data type scalabl recover implement object evolut pjama platform design issu persist java typesaf represent independ semant implement schema evolut objectori databas jp distribut persist java system safe runtim downcast ownership type ownership type safe program prevent data race deadlock ownership type safe lazi upgrad objectori databas lazi modular upgrad persist object store parameter type system racefre java program make futur safe past ad gener java program languag gemston data manag system shore persist applic object ownership contain ownership encapsul disjoint type e simpl ownership type object contain ownership type exibl alia protect extern uniqu type memori manag calculu capabl subtyp vs claus constrain parametr polymorph enforc highlevel protocol lowlevel softwar adopt focu practic linear type imper program wrestl rep exposur stori o class mixin design pattern element reusabl objectori softwar java languag speci objectori eect system island alias protect objectori languag geneva convent treatment object alias graph type role analysi report program languag euclid data group specifi modi data abstract inform hide beyond schema evolut databas reorgan provid persist object distribut system safe lazi softwar upgrad objectori databas toward aliasfre pointer pointer assert logic engin parameter type java iter encapsul object design inc class modi solv shapeanalysi problem languag destruct updat parametr polymorph java approach translat base ectiv featur linear type chang world syntact approach type sound tr semant implement schema evolut objectori databas class modif gemston objectori dbm gemmyampersandndashston data manag system polymorph effect system beyond schema evolut databas reorgan island graph type design pattern syntact approach type sound shore persist applic subtyp vs claus regionbas memori manag parameter type java ad type parameter java languag class mixin solv shapeanalysi problem languag destruct updat ownership type flexibl alia protect data group make futur safe past type memori manag calculu capabl confin type typebas race detect java parametr polymorph java abstract mechan clu enforc highlevel protocol lowlevel softwar pointer assert logic engin role analysi represent independ confin access control extend abstract parameter type system racefre java program adopt focu use data group specifi check side effect regionbas memori manag cyclon java languag specif ownership type safe program ownership encapsul disjoint type effect alia annot program understand stori objectori effect system provid persist object distribut system simpl ownership type object contain scalabl recover implement object evolut pjama platform toward aliasfre pointer iter encapsul ctr pradeep kumar modal logic ownership type unit three world companion st acm sigplan confer objectori program system languag applic octob portland oregon usa david l hein monica s lam practic flowsensit contextsensit c c memori leak detector acm sigplan notic v n may ana milanova precis identif composit relationship uml class diagram proceed th ieeeacm intern confer autom softwar engin novemb long beach ca usa alex potanin jame nobl robert biddl gener ownership practic ownership control program languag companion th annual acm sigplan confer objectori program system languag applic octob vancouv bc canada yin liu ana milanova ownership immut infer umlbas object access control proceed th intern confer softwar engin p may alex potanin jame nobl dave clark robert biddl featherweight gener confin journal function program v n p novemb adrian birka michael d ernst practic type system languag refer immut acm sigplan notic v n octob protect represent effect encapsul acm sigplan notic v n p januari ana milanova composit infer uml class diagram autom softwar engin v n p june matthew s tschantz michael d ernst javari ad refer immut java acm sigplan notic v n octob pratibha permandla michael roberson chandrasekhar boyapati type system prevent data race deadlock java virtual machin languag acm sigplan notic v n juli yu david liu scott f smith interactionbas program classag acm sigplan notic v n octob weingan chin florin craciun shengchao qin martin rinard region infer objectori languag acm sigplan notic v n may nathanael schrli andrew p black stphane ducass objectori encapsul dynam type languag acm sigplan notic v n octob derek raysid luci mendel daniel jackson dynam analysi reveal object ownership share proceed intern workshop dynam system analysi may shanghai china tian zhao jen palsberg jan vitek typebas confin journal function program v n p januari alex potanin jame nobl dave clark robert biddl gener ownership gener java acm sigplan notic v n octob chandrasekhar boyapati alexandru salcianu william beebe jr martin rinard ownership type safe regionbas memori manag realtim java acm sigplan notic v n may david a naumann observ puriti encapsul theoret comput scienc v n p may chandrasekhar boyapati barbara liskov liuba shrira chuanghu moh steven richman lazi modular upgrad persist object store acm sigplan notic v n novemb david a naumann mike barnett toward imper modul reason invari share mutabl state theoret comput scienc v n p novemb peter mller arnd poetzschhefft gari t leaven modular invari layer object structur scienc comput program v n p octob