t effici algorithm aggreg pepa model a abstractperform evalu process algebra pepa formal languag perform model base process algebra previous shown that use process algebra apparatu compact perform model deriv retain essenti behavior characterist model system howev effici algorithm deriv given paper present effici algorithm recogn take advantag symmetri within model avoid unnecessari comput algorithm illustr multiprocessor exampl b introduct recent year sever markovian process algebra mpa present literatur includ pepa mtipp empa classic process algebra formal allow model system construct amen function behaviour analysi varieti techniqu addit allow time inform captur model facilit perform analysi via solut continu time markov chain ctmc process algebra sever attract featur facil highlevel definit composit structur exist formal defin equival relat use compar model markovian context theoret result shown possibl exploit equival relat level model descript gener aggreg ctmc composit way great practic import becaus like statebas model techniqu mpa model suffer state space explos problem although prototyp tool develop model explor littl work done exploit full potenti use equival relat achiev effect aggreg thu put theoret result practic use paper describ algorithm carri effici aggreg implement pepa workbench aggreg wide use wellunderstood techniqu reduc size ctmc use perform analysi state space ctmc partit number class treat singl state new deriv stochast process partit shown condit known lumpabl new stochast process ctmc amen numer solut steadi state probabl distribut via linear algebra mpa context partit carri use formal defin equival relat establish behaviour observ equival state within model equival relat gener discuss relat aggreg call strong equival for pepa markovian bisimul for mtipp extend markovian bisimul equival for empa howev problem appli equival relationaggreg syntax level composit way discuss detail section paper use finer equival relat call isomorph although may result coarser aggreg advantag readili amen automat gener equival class syntax level thu construct complet state space avoid aggreg ctmc construct directli rest paper structur follow section introduc pepa languag oper semant aggreg via isomorph algorithm comput reduc state space discuss section exampl present section case algorithm cannot achiev optim theoret partit discuss section section present relat approach and final section conclud paper present possibl futur investig perform evalu process algebra pepa algebra descript techniqu base classic process algebra enhanc stochast time inform extens result model may use calcul perform measur well deduc function properti system section briefli introduc pepa detail inform found process algebra mathemat theori model concurr system algebra provid apparatu reason structur behaviour model classic process algebra eg calculu commun system cc time abstract awayact assum instantan rel order repres choic gener nondeterminist exponenti distribut random variabl use specifi durat action process algebra may use repres markov process approach taken pepa sever markovian process algebra basic element pepa compon activ correspond state transit underli ctmc activ repres two piec inform label action type identifi it activ rate paramet neg exponenti distribut determin durat thu action repres pair ff r assum set possibl action type a includ distinguish type type denot intern unknown activ provid import abstract mechan process algebra notat repres system wholli base use formal languag pepa languag provid small set combin allow languag term construct defin behaviour compon via activ undertak interact them syntax may formal introduc mean follow grammar denot sequenti compon p denot model compon execut parallel c stand constant denot either sequenti model compon defin defin equat c stand constant denot sequenti compon compon combin togeth name interpret present inform below rs basic mechan describ behaviour system give compon design first action use prefix combin exampl compon ff rs carri activ ff r action type ff exponenti distribut durat paramet r subsequ behav s set action type denot a sequenc action combin build life cycl compon exampl comp life cycl sequenti compon may complex behaviour express use prefix combin alon choic combin captur possibl competit select differ possibl activ compon repres system may behav either activ enabl first activ complet distinguish one them discard system behav deriv result evolut chosen compon exampl faulti compon consid may also capabl complet task satisfactorili comp constant c alreadi seen conveni abl assign name pattern behaviour associ compon constant provid mechan thi compon whose mean given defin equat eg c def give constant c behaviour compon p cooper system compris sever compon interact pepa direct interact cooper compon repres combin delta set l visibl action type l n fg signific determin activ compon forc synchronis thu cooper combin fact index famili combin one possibl cooper set l cooper impos name action type l compon proceed independ concurr enabl activ howev compon enabl activ whose action type cooper set abl proceed activ compon also enabl activ type two compon proceed togeth complet share activ rate share activ may alter reflect work carri compon complet activ exampl faulti compon consid may need cooper resourc order complet task cooper repres follow system ftaskg re compon also need cooper repairman order repair could written as system delta repman or equival ftaskg repman case activ known carri cooper anoth compon compon may passiv respect activ denot ff mean rate activ left unspecifi determin upon cooper rate activ compon passiv action must synchronis final model cooper set empti two compon proceed indepen dentli share activ use compact notat p k q repres case thu two compon compet access resourc repairman would repres system ftaskg repman hide pl possibl abstract away aspect compo nent behaviour provid hide oper here set l visibl action type identifi activ consid intern privat compon activ visibl extern observ access compon coopera tion exampl system introduc may wish ensur compon exclus access resourc order complet task thu hide action type task ensur even system embed environ compon access task activ resourc system ftaskg resftaskg activ hidden appear unknown type rate activ howev remain unaffect preced combin provid default interpret express hide highest preced prefix next follow cooper choic lowest preced bracket may use forc altern pars simpli clarifi mean oper semant underli ctmc model compon captur structur system term static compon dynam behaviour system repres evolut compon either individu cooper form evolut govern set formal rule give oper semant pepa term semant rule structur oper style plotkin shown figur interest reader refer full detail rule read follow transit infer line infer infer transit line one exampl two rule choic show choic oper symmetr preserv potenti behaviour two operand anoth cooper oper special case two cooperand synchronis activ notat case e k f case three rule would simplifi two shown below f rule captur intuit understand two compon synchronis activ cannot influenc other comput state case compon synchronis rate result activ reflect capac compon carri activ type compon e action type ff term appar rate ff e denot r ff e sum rate activ enabl e exact mechan use determin rate share activ explain shortli classic process algebra semant term pepa given via label transit system case label multitransit systemth multipl arc signific transit system state correspond syntact term languag deriv choic f cooper f f f f r ff e r ff hide constant e figur oper semant pepa initi state figur dg multicompon model without hide state correspond deriv ftaskg repman ftaskg repman ftaskg repman ftaskg repman ftaskg repman ftaskg repman ftaskg repman ftaskg repman tabl state deriv graph figur arc repres activ caus one deriv evolv anoth complet set reachabl state term deriv set model form node deriv graph dg form appli semant rule exhaust exampl deriv graph system ftaskg repman shown figur assum follow definit comp re repman simplic figur chosen name deriv short name correspond complet name list tabl note pair arc deriv graph initi state onestep deriv captur fact two distinct deriv activ task accord whether first second compon complet task cooper resourc even though result deriv either case time aspect compon behaviour repres state dg arc paramet neg exponenti distribut govern durat correspond activ interpret follow enabl activ ff r delay period sampl neg exponenti distribut paramet r sever activ enabl concurr either competit independ assum race condit exist them thu activ whose delay complet least one suc ceed evolut model determin whether activ abort simpli interrupt state chang either case memoryless properti neg exponenti distribut elimin need record previou execut time two compon carri activ cooper rate share activ reflect work capac slower compon assum compon fix capac perform activ type ff cannot enhanc work cooper it still must carri work unless compon passiv respect activ type capac appar rate appar rate ae ae ae ae r r ae ae r r ae ffl ae figur ctmc underli multicompon model ff cooper p delta fffg q minimum r ff p r ff q rate particular share activ appar rate share activ weight condit probabl contribut activ cooper compon interest reader refer detail dg basi underli ctmc use deriv perform measur pepa model graph systemat reduc form treat state transit diagram underli ctmc deriv state ctmc transit rate two deriv p p dg rate system chang behav compon p behav p denot qp p sum activ rate label arc connect node p node p exampl state transit diagram ctmc underli simpl compon model shown figur note arc label rate state x x repres deriv comp k comp delta ftaskg repman comp k comp delta ftaskg repman respect order ctmc ergod dg must strongli connect necessari condit ergod syntact level pepa model defin syntact condit impos introduc earlier aggreg pepa via isomorph equival relat notion equival gener play import role process algebra defin use equival relat essenti part languag develop pepa variou equival relat defin includ isomorph captur intuit notion equival languag term base isomorph deriv graph strong equival sophist notion equival base bisimul equival relat defin state space model induc partit state space aggreg achiev construct partit form correspond aggreg process aggreg process partit state origin process form one state origin state space fx aggreg state space fx x gener ctmc aggreg result stochast process markov properti howev partit shown satisfi socal lumpabl condit properti preserv aggreg said exact model consid deriv process algebra pepa possibl establish use algebra properti equival relat use import congruenc equival relat congruenc respect oper languag substitut equival compon within model express give rise equival model eg p equival p p delta q equival q congruenc use basi aggreg composit model aggreg may carri compon compon avoid construct complet state space aggreg compon equival origin nevertheless approach appli semant level model necessit expans subsequ partit relev state space more over reduc model produc way may compact would achiev aggreg complet model directli make applic aggreg procedur necessari case model consist aggreg compon isomorph strong equival congruenc relat use basi exact aggreg pepa model base lumpabl either case relat use partit state space possibl composit underli ctmc equival class form one state aggreg state space algorithm present use isomorph relat use strong equival purpos discuss section use isomorph relat may seem surpris sinc power bisimulationstyl equival relat one attract featur process algebra often cite one benefit formal languag contrast isomorph receiv littl attent literatur part classic process algebra object use equival relat determin two agent system descript exhibit behaviour stochast process algebra greater emphasi place use equival relat partit deriv graph model order produc aggreg result smaller underli markov process shown pepa strong equival relat power tool aggreg style alway result lumpabl equival markov process how ever believ mani instanc isomorph also use purpos sinc discrimin notion equival may give finer partit thu less aggreg strong equival hand show may detect syntact level system descript without recours semant level necessari detect strong equival gener thu reduc deriv graph gener without need construct origin deriv graph follow section present algorithm exploit isomor phism section discuss relat work autom aggreg algorithm algorithm comput reduc deriv graph pepa model begin preprocess model suppli model purpos preprocess reexpress model conveni form product aggreg deriv graph aggreg deriv graph node equival class pepa term rather singl syntact express preprocess step pepa syntax systemat replac model express convert vector form minimis convert canon form everi distinct pepa express map distinct vector form equival isomorph express canon represent preprocess complet gener reduc deriv graph begin process altern gener onestep deriv present state compact order group togeth deriv canon represent algorithm proce assumpt model suppli reduc name norm form name form represent deriv sequenti compon explicitli name norm form model express singl model equat consist cooper sequenti compon govern hide set reduc form cooper hide set reduc remov redund element suppli model form necessari restructur carri algorithm appli function achiev carri routin check valid model suppli modif make complet transpar model proceed describ step detail restructur model applic algorithm conveni intermedi deriv model bound identifi gener identifi decompos defin equat sequenti compon exampl defin equat comp introduc name intermedi deriv replac singl equat follow pair equat comp done sequenti compon model said name form describ section pepa model consist collect defin equat sequenti compon model compon one model compon distinguish name initi state model definit compon may refer model compon defin equat wish elimin use model compon definit order reduc norm form identifi use sequenti compon proceed backsubstitut model compon definit defin equat distinguish compon exampl pair equat repman system ftaskg re becom ftaskg re delta repman continu process converg definit norm model equat consist cooper sequenti compon govern hide set cooper hide set model definit contain unnecessari redund element equival class form algorithm may optim thu can circumst improv subsequ perform algorithm remov redund element set algorithm appli furthermor presenc redund element cooper hide set regard potenti error part model consequ model warn reduct previous present effici algorithm comput set activ act perform pepa model compon use reduc minimum size cooper hide set follow way reduct appli systemat throughout norm model equa tion oper bound complex size static represent input pepa model thu hidden cost travers state space gener dynam explor model preprocess vector form minimis canonicalisa tion vector form model express repres model suitabl form aggreg algorithm amen effici calcul canon form present vector form vector sequenti compon decor bracket denot scope set use subscript bracket delimit cooper set superscript angl bracket delimit hide set implement vector repres link list provid effici manipul form canon repres reorder rearrang represent compon vector form achiev safe staticallycheck pointer manipul therebi avoid overhead repeat copi data valu would incur use arraybas represent model express defin vector form induct structur express let mn express c constant denot sequenti compon vf m delta vf vf follow write p denot vector norm model equat vector form represent contain within singl express inform static structur model record name current deriv sequenti compon addit scope cooper hide set forc vector form alon suffici allow us comput deriv graph model defin equat sequenti compon also need gener directli full model equat vector form may includ redund henc includ preprocess step carri reduc vector form gener straightforward translat model equat vector form use remaind state space explor step consist gener minim represent vector form minim respect number bracket need record scope cooper hide set see reduc number bracket vector form may signific impact aggreg achiev thu perform follow simplif elimin redund cooper bracket aris compon q delta r vector form compon would q contigu bracket decor way inner one elimin exampl result q elimin redund hide bracket would aris whenev hide bracket contigu regardless decor ex ampl compon plk vector form would would reduc kl hp i minim vector form reduc model represent canon form choos arbitrari order compon term one suitabl order lexicograph order denot order denot canonicalis function c insert compon p vector p use p p definit function shown definit definit complex includ complet order prevent appear hidden complex definit canonicalis insert function present definit canonicalis function first definit insert function second three case definit function c l hp p p p gener aggreg deriv graph previou preprocess step appli input pepa model facilit subsequ applic aggreg algorithm preprocess model repres pepa express repres individu initi state contain inform necessari dynam evolut preprocess step perform express reduc canon minim vector retain inform state structur model repres equival class state thu canon vector form reduc represent two sens firstli inform dynam behaviour cooper set hide set common state model factor store separ secondli canon vector form may fact repres number equival model state would distinct vector form gener reduc deriv graph proce via follow two step carri altern state space fulli explor deriv given vector form object find enabl activ record list pair vector form correspond deriv done recurs static structur current deriv lowest level sequenti compon repres simpli deriv name point defin equat use find activ set activ enabl deriv identifi three case individu activ within scope hide oper record directli result deriv individu activ within scope hide oper record action appropri rate togeth result deriv ffl activ within scope cooper set compar enabl activ compon within cooper match activ individu activ discard otherwis abov activ record togeth result vector form reduct carri deriv may given rise vector form canon moreov sever activ vector form pair may turn ident vector form put canon form case multipl record one copi kept two step repeat element left set unexplor deriv class remaind section present step formal first introduc notat describ formul manipul vector vector form ffl given vector p write p denot subvector element p satisfi predic oe vector p obviou context shall omit it write abbrevi ffl write pp denot vector obtain p substitut ffl subvector s similarli write ps abbrevi ps note use vector substitut vector number element rule govern deriv step algorithm shown figur rule constant formal state lowest level defin equat use find activ activ infer deriv name two rule hide correspond first two case identifi abov complex rule cooper third case abov examin detail first rule state condit number ident ac tiviti ff r give rise deriv ident canon form case activ ff r must enabl one compon p p moreov possibl activ vector form result deriv alway canonicalis formal oe arbitrari element vector say first element note equat impli p equal equival class equal canon form vector defin subvector consist deriv may potenti chang via ff r activ form vector satisfi condit activ ff r comput rate compon perform activ evolv canon repres deriv jsj delta r sinc total rate equival class sum rate individu activ may make move case one element vector perform activ ff complic due consider multipl aris rule simplifi equival follow constant hide gammagammagamma gammagammagamma cooper gammagammagamma cpl s gammagammagamma cpl s r ff figur oper semant vector form complex second rule cooper due need calcul rate subvector compon cooper perform activ also simpler case vector size two special case rule afford easier comparison oper semant pepa present figur gammagammagamma rate r activ perform cooper comput individu rate r r correspond cooper rule figur implement state space reduct algorithm ad pepa workbench model packag implement pepa languag provid varieti solut analysi facil pepa model algorithm present pseudocod form figur drive forc algorithm provid procedur vfderiv which given deriv model find enabl transit use function cderiv call result deriv function cderiv carri canonicalis onestep deriv produc use function deriv function differ case depend structur vector form handl reflect appropri rule semant exampl case choic list possibl deriv consist list deriv second compon choic append list deriv first deriv vector cooper compon comput use function cooper deriv transit function disallow enforc activ type cooper set carri without partner make use function lookup retriev definit compon identifi environ final function updat take set element procedur return set element modifi procedur modif pepa workbench requir alter data structur use repres pepa model abstract syntax tree within workbench represent cooper pair compon generalis extend list compon pepa model submit process contain mark p begin mark ff r n p cderivp output transit p ffndeltar begin empti choos a p a n p r n replac a n p a els add a remov a p return switch p case unari cooper return updat proc a case nari cooper return case l hp hide return filterd l case ff rp prefix return singletonff r p case p q choic return case const c constant return derivativeslookupc begin empti remov x d add p x return empti return els begin remov remov els return begin empti remov ff r p d ff l add r p r els add ff r p r return begin empti remov ff r p d ff l add ff r p r return figur pseudocod algorithm structur exploit state space reduct algorithm chang invis user workbench howev pepa model contain either repeat compon structur exploit benefit becom appar user workbench term reduc time gener ctmc represent model term matrix smaller dimens requir storag model get certain size see tabl exampl section show algorithm work exampl consid multiprocessor system share memori deriv correspond pepa model underli deriv graph ordinari aggreg altern approach discuss section introduc mean small variant exampl multiprocessor system consid multiprocessor system share memori process run system compet access common memori gain access use common memori need also acquir system bu releas access common memori simplic bu explicitli repres follow process map onto processor processor explicitli repres determin rate activ associ process ie process function behaviour action progress differ speed depend processor run number process present processor model respons select rate appropri protocol complet fair simpli prevent one processor monopolis memori might impos access processor memori processor must gain access first access again process run ith processor repres case order impos protocol memori model rememb processor access last access processor disabl mem n process run ith processor system model follow express sy mem k note cooper set model express throughout remaind paper write get shorthand get assum start state system exclud access arbitrari processor number k vector form model sy deriv appli equat definit follow form show exampl deriv state space sy ordinari aggreg simplic consid smaller system sy two processor two replica process run processor simplifi system thu specifi mem expand deriv process p memori mem follow mem mem initi state figur ordinari deriv graph sy complet deriv graph complet deriv graph sy comput use pepa workbench aggreg algorithm switch off state transit portion graph shown figur make draw easier understand chosen name deriv short name depend whether state complet expand s s onestep deriv also repres vector form correspond deriv list tabl row contain name state correspond vector form moreov contain inform whether vector form canon not name state repres correspond canon vector form aggreg deriv graph aggreg deriv graph comput use pepa workbench aggreg algorithm switch on state transit portion graph shown figur compar one figur pepa model sy construct accord algorithm sequenti compon defin process memori compos mean cooper oper obtain model equat deriv explicitli name use model equat gener vector form model redund bracket therefor elimin requir point aggreg state space obtain consid canon vector form onli shown graph figur subset state tabl correspond canon vector form explicitli outlin name node integ number round bracket close specifi number equival state repres number comput consid number replica process model equat number equal deriv vector form exampl let us consid state correspond vector form state repres four equival deriv number comput divid product factori number repeat instanc compon product factori number ident deriv vector form state vector form canon repres p p tabl state vector form figur aggreg deriv graph sy gener formula could express follow number process run processor n ij number equal deriv p multipl arc also repres indic number arc fold togeth fact singl arc repres one activ type reflect rate action label arc itself instanc model evolv state state execut action think rate ie mem two activ think concurr enabl notic aggreg obtain correspond find permut compon within bracket form aggreg pictori repres figur flatten equival node deriv graph figur onto plane time ran differ configur multiprocessor system pentium iii machin clock frequenc mhz mbyte mem ori time record tabl take account cpu time time necessari file io singl compon p run processor aggreg possibl execut time basic modifi workbench almost same soon add replica process state space aggreg becom appar compar second fifth column tabl well reduct execut time compar fourth seventh column particularli size model grow altern aggreg section illustr case algorithm inde syntact approach cannot achiev optim theoret partit particular show greater aggreg could achiev circumst strong equival use gener partit instead processor deriv graph aggreg deriv graph process state tran time sec state tran time sec processor deriv graph aggreg deriv graph process state tran time sec state tran time sec tabl execut time basic modifi workbench isomorph note howev case reli quit strong condit appar unrel activ rate clear condit occur suffici frequenc real model justifi addit complex need implement approach base strong equival strong equival relat sophist notion equiv alenc bisimul style base observ behaviour gener process algebra two term bisimilar extern observ behaviour appear same strong equival assum action type appar rate activ observ inform two pepa compon strongli equival total condit transit rate strongli equival term action type condit transit rate p p via action type ff denot qp sum activ rate label arc connect correspond node dg also label action type ff condit transit rate thu rate system behav compon p evolv behav compon p result complet activ type ff consid set possibl deriv s total condit transit rate p s denot qp s ff equal definit thu formal state follow denot set languag term deriv equival relat deriv r theta strong equival whenev ff r say p q strongli equival written strong equival r ie fr j r strong equival g two follow exampl demonstr use strong equival aggreg howev first exampl show abstract oper may use higher syntact level model introduc symmetri compon appear quit distinct defin equat symmetri reli context compon place someth current captur algorithm ribaudo distinguish two form aggreg found use strong equival horizont aggreg aris interleav activ similarli behav compon aggreg take advantag repeat instanc pattern behaviour within overal model structur aggreg found use algorithm may term horizont aggreg contrast vertic aggreg aris repeat pattern behaviour within singl compon second exampl present below variant multiprocessor model consid horizont aggreg found use strong equival although isomorph would regard compon distinct final give exampl vertic aggreg possibl strong equival isomorph consequ syntact approach aggreg via abstract facil hide abstract action type within pepa model design give model freedom construct compon detail ensur behaviour accur repres subsequ restrict visibl action type relev current model studi exampl model multiprocessor present previou section model may choos hide get action term captur correct behaviour protocol import action type distinguish term complet model may regard intern action hide activ introduc strong symmetri model term function behaviour if moreov find process run differ processor share time characteri tic ie symmetri appar aspect model behaviour one process access memori timeand subsequ memori access host processor excludedbut process processor behav equiv alent mean need consid two class processor exclud elig access regardless placement processor get activ hidden longer possibl identifi process type process oper exampl consid multiprocessor three processor two process run first one second two third regard system immedi process p complet access memori one process wait access behaviour system isomorph regardless whether wait process processor processor ie follow state isomorph mem mem mem mem although state equival isomorph algorithm would place within singl partit two one consist first two state one consist second pair process oper differ processor distinct name distinct action get thi necessari ensur correct function protocoland syntact form minimis use cannot recognis context p p behav equival could regard penalti rich languag exampl analog situat aris petri netbas model notion abstract hide horizont aggreg via strong equival isomorph strict structur equival must onetoon relationship deriv activ observationbas strong equival strict although correspond deriv must capabl action type appar rate implement activ deriv may differ follow exampl demonstr suppos processor two differ type process may run ning first ident process p discuss section second similar pattern behaviour two altern local comput access common memori process below rate think activ strongli equival p although two clearli isomorph thu consid system mem algorithm distinguish deriv p mem p mem wherea partit base strong equival would consid equival case state space aggreg algorithm state wherea aggreg base strong equival would result state vertic aggreg via strong equival identifi second sourc aggreg achiev strong equival captur algorithm socal vertic aggreg illustr vertic aggreg case mean anoth variant multiprocessor exampl consid process which use memori detect error case return directli initi state instead must complet recoveri action repeat access memori new process expans deriv could follow p probabl error occur deriv graph process p shown figur a suppos action a b figur deriv graph p type think recov hidden becom intern compon moreov assum case deriv p p strongli equival aggreg form macrost p similarli combin arc label rel rel p theta r singl arc label rel r connect p figur b form aggreg reli inform oper behaviour compon repres deriv graph cannot detect pure syntact mean use algorithm approach base bisimul style equival strong equiv alenc work semant rather syntact level thu not gener compar approach relat work exploit symmetri achiev aggreg perform model wellexplor topic sever autom approach describ literatur section give brief account work appear context stochast petri net stochast process algebra explain work relat own case object gener partit origin ctmc satisfi condit lumpabl closest approach work class stochast colour petri net call stochast wellform net swn stochast petri net spn extens use function analysi perform evalu distribut system model primit consist place time transit repres system state system event respect pepa order analyt solv spn model associ stochast process must deriv comput set reachabl state mark moreov pepa realist system comput state space often lead model whose size make intract order tackl problem swn allow construct parametr represent system achiev fold similar subnet ad colour structur distinguish token that fold belong place net restrict term possibl colour domain place transit term possibl colour function restrict allow symmetr structur within model exploit solut purpos particular structur automat detect reduc state space construct without recours complet state space reduct obtain concept symbol mark inform symbol mark correspond equival class ordinari mark share characterist unlik approach formal equival relat defin underpin partit fact ordinari mark equival class enabl set transit whose fire lead new ordinari state still equival ie belong symbol mark start symbol represent initi mark symbol reachabl graph construct via symbol fire rule symbol mark repres minim canon form note unlik algorithm minimis carri preprocess swn case minimis repeat symbol deriv step symbol reachabl graph use gener reduc ctmc prove lumpabl equival origin ctmc thu perform estim comput lower comput cost anoth petri netbas approach develop context stochast activ network san formal incorpor featur spn queue model make use composit oper similar found process algebra primit formal place activ equival petri net transit may guard input gate repres enabl rule output gate repres complet rule submodel construct repres compon system may combin use replic join oper replic oper captur case system contain two ident subsystem join oper combin san submodel differ type use oper make symmetri within model explicit facilit compact represent state space structur compos san repres direct tree differ type node leaf node captur distinct san submodel ie basic element construct oper appli intern node one child replic node child submodel replic intern node two children join node children repres submodel join togeth tree state represent automat extract minim sens state differ permut repeat compon group togeth singl combin state state repres record replic node number replic san possibl submodel mark join node vector mark join submodel addit state maintain inform desir perform variabl outsid scope paper clear parallel state represent vector form discuss section work aggreg stochast process algebra model develop almost entir semant level approach well known graph partit algorithm use reduc label transit system underli process algebra model syntact approach taken ad hoc basi without correspond tool implement equat law deriv markovian bisimul equival strong equival use obtain state space reduct mtipp model achiev term rewrit base judici applic law howev although good result obtain particular model set term rewrit rule use aggreg purpos found approach good result obtain modifi restrict combin languag make symmetri explicit disallow difficult case exampl symmetr parallel composit oper denot fnpg use captur case nari parallel composit ident replica synchronis action s oper provid mean express number replic copi process cannot express synchronis repeat copi differ synchronis set oper semant new oper consist usual parallel composit reduc state space produc regard spa equival san approach outlin abov state differ permut replic submodel treat equival earlier work mtipp took similar approach term alter combin languag replic oper denot p inform semant fnpg abov hide usual gener parallel composit oper remov languag distinct approach denot matrix semant given rather usual oper semant use approach infinitesim gener matrix ctmc construct directli moreov rettelbach siegl show transit matrix result semant minim respect markov chain lumpabl ie matric subset equival state disadvantag approach requir model adher new set combin form cooper allow differ synchronis set amongst replica compon techniqu appear autom contrast algorithm work transpar pepa languag take advantag whatev symmetri present model submit pepa workbench user conclus work shown exist isomorph term deriv graph stochast process algebra model exploit aggreg state space model algorithm collaps deriv graph model state requir costli comput bisimul equival compon model found applic situat full deriv graph larg even gener further believ mani model occur practic would contain symmetri type exploit isomorph howev advantag algorithm cannot guarante achiev maximum possibl aggreg model gener aggreg deriv graph allow speedier comput steadi state probabl distribut ctmc correspond pepa model discuss paper influenc aggreg interpret probabl distribut term given pepa model examin steadi state distribut order determin perform factor throughput utilis pepa model must select set model state interest via descript canon repres state space ad reason choos aggreg isomorph instead bisimul format canon repres isomorph class simpler howev full investig issu remain work work influenc earlier work swn howev stress signific adjust approach necessari develop algorithm spa straightforward translat result nevertheless feel consider benefit gain studi relationship formal object import idea appropri techniqu one other acknowledg collabor took place within project rom enhanc toolset perform engin fund british council murst stephen gilmor support distribut commit pro tocol grant epsrc esprit work group firework jane hillston support esprc compa grant author would like thank anonym refere help comment earlier version paper thank graham clark implement work pepa workbench r composit approach perform model stochast process algebra tutori empa theori concurr process nondetermin composit markovian model use process alg bra pepa workbench tool support process algebra base approach perform model composit perform model tipptool finit markov chain spa model program aggreg techniqu stochast petri net stochast process algebra stochast wellform colour net symmetr model applic perform analysi use stochast petri net stochast wellform colour net multiprocessor model applic reduc base model construct method stochast activ network composit net composit aggreg stochast process algebra tool perform depend model exploit symmetri stochast process algebra composit minim semant stochast process algebra tipp investig onlin auction system use pepa wellform colour net symbol reachabl graph tr ctr stephen gilmor jane hillston leila kloul marina ribaudo pepa net structur perform model formal perform evalu v n p octob marco bernardo nadia busi marina ribaudo integr twotow greatspn compact net semant perform evalu v n p novemb salem derisavi peter kemper william h sander tod courtney mbiu statelevel abstract function interfac perform evalu v n p octob daniel d deavour graham clark tod courtney david dali salem derisavi jay m doyl william h sander patrick g webster mbiu framework implement ieee transact softwar engin v n p octob david m nicol william h sander kishor s trivedi modelbas evalu depend secur ieee transact depend secur comput v n p januari