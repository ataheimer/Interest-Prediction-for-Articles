t hpf compil ibm sp a describ phpf research prototyp hpf compil ibm sp seri parallel machin compil accept input fortran fortran program augment hpf direct sequenti loop automat parallel compil support symbol analysi express allow paramet number processor unknown compiletim without significantli affect perform commun schedul comput guard gener parameter form compiletim sever novel optim improv version wellknown optim implement phpf exploit parallel reduc commun cost optim includ elimin redund commun use dataavail analysi use collect commun new techniqu map scalar variabl coarsegrain wavefront commun reduct multidimension shift commun present experiment result wellknown benchmark routin result show effect compil gener effici code hpf program b introduct fortran alway synonym fast execut high perform fortran hpf defin set direct extens fortran facilit perform portabl fortran program compil largescal multiprocessor architectur preserv sharedaddress space program model unfortun hpf compil appear rapidli origin hope accept high qualiti compil hpf evolv time experi complex compil hpf result ffl abil perform commun optim essenti high perform singl innerloop commun result signific loss perform hpf perform approach handcod perform sophist optim implement ffl implement everi featur fortran affect distribut data across differ address space fortran data primarili static hpf data must dynam alloc sinc array redistribut even without redistribut number processor is gener known compiletim size local array partit known static thu addit loop parallel hpf requir ibm tj watson research po box yorktown height ny author reach email fmguptamidkiffschnbrgshieldskywchingtangogwatsonibmcom correspond author reach schnbrgwatsonibmcom ibm softwar solut divis eglinton ave east north york ontario canada mc v author reach email seshadrivnetibmcom enhanc runtim model new implement featur common block data statement block data array address ffl hpf extrem highlevel languag amount generatedexecut code per sourc line gener larger common program languag pose challeng code gener runtim librari design tool develop ffl addit gener scalabl code hpf compil must gener code good uniprocessor node perform particular hpfspecif transform must inhibit uniprocessor optim spmd overhead must small paper describ phpf hpf compil ibm sp architectur develop past two year phpf consist extens hpf subset exist fortran compil paper focu novel aspect optim experi set benchmark although phpf still develop featur describ paper fulli implement sever hpfrelat compil effort previous describ compil uniqu follow combin featur ffl phpf exploit data parallel fortran array languag also perform program analysi effect parallel loop fortran code ffl phpf perform symbol analysi gener effici code presenc static unknown paramet like number processor array size rather leav task determin commun schedul runtim phpf gener closedform parameter express repres commun data set commun processor ffl along wellknown commun optim like messag vector exploit collect commun phpf also perform aggress optim like elimin redund commun reduc number messag multidimension shift commun coarsegrain wavefront phpf also use novel techniqu map scalar variabl expos parallel reduc commun cost rest paper organ follow section present overview architectur entir compil spmdizer detail section describ set optim perform spmdizer section give perform result set benchmark section describ compil hpf similar languag discuss literatur final section present conclus idea futur work compil framework phpf implement incorpor new spmdizer compon exist fortran compil shown figur addit frontend extens requir process hpf direct impact hpf compon fortran compil small scalar requir signific modif prototyp develop project ibm researchphpf current support block cyclic blockcycl distribut array languag scalar hpf spmdizer local optim optim backend fortran hpf frontend depend analyz loop transform hpf runtim figur architectur phpf compil architectur overview phpf nativ compil preprocessor preprocessor portabl easier build nativ compil gener prefer obtain highlytun perform also easier write applic debugg nativ compil preprocessor compil process summar consid output phase figur ffl front end produc highlevel intermedi represent includ intern form fortran array languag hpf direct ffl scalar compil intern array languag intern fortran scalar form ffl spmdizer interpret hpf direct produc spmd singlenod program data comput partit commun code resolv nonloc data refer ffl local optim perform loop reorder transform uniprocessor program better util cach regist ffl back end perform tradit optim uniprocessor program scalar inlin fortran intrins function whenev possibl inlin intrins function possibl elimin extra array temporari copi achiev perform fortran program compar fortran program hpf extens hpf spmdizer data partit preprocess commun analysi dataflow depend analyz loop transform comput partit commun code gener data partit postprocess figur architectur phpf spmdizer scalar ensur inform parallel implicit fortran construct such reduct oper lost inlin record addit inform need later scalar also assign suitabl distribut array temporari creat scalar izat placement spmdizer scalar signific spmdizer process fortran program scalar fortran program uniform manner similarli local optim process spmdize uniprocessor input program uniform way modular function simplifi implement without sacrif perform spmdizer place commun outsid loop legal local optim subsequ abl reorder inner communicationfre loop better cach util fur thermor spmdize form new loop bound parallel loop facilit easi identif conform loop enabl loop fusion transform improv data local distribut array spmdizer shrink distribut dimens addressspac hole data would otherwis reduc spatial local compil includ dataflow analysi data depend analysi loop transform modul enabl varieti optim perform differ compil stage exampl scalar use data depend inform elimin array temporari otherwis need preserv fortran array languag semant data depend analysi loop transform also critic local commun optim structur spmdizer shown figur illustr compil process particular differ phase spmdizer help exampl integ a integ b figur fortran exampl spread figur scalar spread program hpf compil exampl figur show simpl fortran spread program hpf direct figur show result scalar program naiv scalar spread oper would result gener dimension temporari array runtim call librari spread routin scalar gener effici inlin code spread oper without creat new temporari variabl figur show pseudocod output produc spmdizer scalar program shown figur use exampl illustr spmdizer phase data partition distribut array which may static commonblock array transform fortran pointer alloc dynam librari routin hpf alloc array shrunk accord processor local block size adjust bound local array within global address space exampl processor bound second processor use fortran dynam pointer alloc alloc shrunk array spmdizer need perform globaltoloc address remap unlik variou hpf preprocessor form output code gener enough repres miss compiletim inform exampl even though global array bound b given number processor given processorloc block size henc local array bound known compiletim believ numberofprocessor loopbound arraybound inform commonli unknown compiletim phpf design import compil paramet treat gener express rather constant storag map array alway dynam alloc minim observ perform loss commun analysi gener read refer program commun analysi phase determin whether requir interprocessor commun com cyclic distribut requir subscript modif except integ pointer call hpfgetnumprocsnumprocspid call hpfallocateb globalbound blocksiz call hpfallocatea commun call hpfallocatecomputationbufferbuffercbsect pid le blocksiz and pid le blocksiz call hpfbcastsectionasendsect buffer iiownlboundminiownubound iiownlboundminiownubound call deallocatebuff figur spmdize spread program munic need analysi determin i placement commun ii commun primit carri data movement processor grid dimens phpf extend analysi describ handl scalar incorpor addit possibl regard distribut array dimens name replic map constant processor posit code gener identifi processor data element need particip commun gener call runtim commun routin accord commun requir differ grid dimens figur assign row b sinc align first row b commun analysi select broadcast along first dimens processor grid data processor particip commun specifi array section use globaladdressspac coordin array section cb section specifi bound comput buffer store nonloc data receiv anoth processor array send section specifi processorloc section broadcast send processor comput buffer bound also specifi global address space comput partit comput partit shrink loop bound introduc statement guard necessari distribut comput among differ processor ownercomput rule gener use except reduct comput assign scalar condit describ section hpf runtim librari runtim librari alloc partit array perform local data movement commun provid high level interfac compil specifi commun base global indic data indic correspond array data distri bution processor data processor repres multidimension section possibl nonunit stride buffer alloc pack unpack need linear data commun perform runtim routin runtim system also perform optim like overlap unpack oper nonblock receiv wait complet multipl receiv runtim librari portabl across differ basic commun system current support ibm mpl mpi librari runtim system also provid detail perform statist trace inform debug hand trace gener program visual tool optim spmdizer phpf perform sever optim reduc commun cost overhead guard introduc comput partit optim wellknown discuss literatur mani other uniqu phpf messag vector move commun outsid loop amort startup cost send messag recogn extrem import optim phpf use depend inform determin outermost loop level commun place applic optim improv by ffl loop distribut preliminari analysi commun comput partit guard use guid select loop distribut phpf use data control depend inform first identifi program structur maxim loop distribut align di ai commun di commun di in figur enabl messag vector loop distribut form strongli connect compon scc program depend graph sinc unnecessari loop distribut hurt cach local also redund messag elimin current recogn redund messag differ loop nest phpf identifi scc loop distribut expect improv perform scc identifi innerloop commun move loop distribut mutual differ local iter set obtain comput partit case loop distribut reduc commun cost overhead comput partit exampl figur commun refer di move outsid iloop result loop distribut ffl exploit independ direct compil assum loopcarri depend loop mark independ programm often allow commun move outsid loop static analysi inform imprecis collect commun phpf use techniqu identifi highlevel pattern collect data movement given refer inform use recogn opportun use collect commun primit like broadcast reduct gener effici sendrec code special commun pattern like shift effect analysi improv by ffl idiomrecognit reduct current phpf recogn sum product min max reduct fortran code sinc fortran reduct oper handl inlin inform reduct oper gather idiomrecognit inlin repres uniformli commun analysi exploit inform gener parallel code local reduct follow global reduct effici commun ffl symbol analysi sinc data distribut paramet block size often unknown eg number processor specifi static compil use symbol analysi oper like check equal express check one express integr multipl anoth express enabl phpf gener effici code exampl detect absenc commun symbol test strictli synchron properti array refer elimin redund commun uniqu featur phpf analysi avail data processor owner enabl detect redund align aij bij align di bi figur exampl redund commun program ref comm ref redund elim redund elim redund comm grid block block ncar block block cmslow tabl result optim elimin redund commun commun compil infer data commun alreadi avail intend receiv due prior commun exampl figur commun refer ain statement made redund commun refer ain implement simplifi version analysi present elimin redund commun find redund commun within singl loop nest advantag analysi perform high level henc larg independ commun code gener tabl summar result obtain phpf benchmark program describ section tabl show static count number refer requir commun optim elimin redund commun show compil quit success identifi redund commun optim nearestneighbor shift commun phpf compil employ sever techniqu optim shift commun occur frequent mani scientif applic scalar optim number temporari array introduc handl fortran shift oper follow optim perform reduc commun cost figur exampl nearestneighbor shift commun figur exampl wavefront comput ffl messag coalesc consid program segment figur commun two rh refer signific overlap neither complet cover other augment data commun bij extra data need bi j separ commun bij avoid phpf commun analysi identifi data movement bij shift first dimens intern data movement idm second dimens data movement bij shift dimens recogn commun bij domin due interprocessor commun instead idm second dimens phpf drop commun bij augment domin commun drop commun data set case extend upper bound date commun second dimens bij gener implement redund commun elimin messag coalesc well ffl multidimension shift commun given array refer shift commun processor grid dimens processor ignor boundari case send data receiv data gamma processor exampl commun bij figur requir processor send data receiv processor phpf compil use optim reduc number messag exchang either direct gamma d accomplish compos commun step augment data commun suitabl step experi show notic perform improv optim even shift commun two dimens coars grain wavefront consid program segment shown figur basic depend base algorithm would place commun aij insid jloop commun aij insid iloop due true depend refer aij align i ai bcd align i a ef privat z without align figur differ align privat scalar lead pipelin parallel across grid dimens regardless loop order one dimens extrem finegrain parallel high commun overhead phpf perform special analysi finegrain pipelin commun take place insid loop nest identifi maxim fullypermut inner loop nest statement insid loop nest comput partit pipelin commun correspond array dimens block distribut move outsid fullypermut loop nest follow two observ first fullypermut loop nest tile arbitrarili second loop blockdistribut array dimens pipelin commun travers tile onto outer loop travers processor which appear separ loop spmd code inner loop travers local space processor commun move loop thu exampl figur phpf abl move commun aij aij outsid jloop lead wavefront parallel low commun overhead associ coarsegrain pipelin futur experi loop stripmin control grainsiz pipelin map scalar wellknown replic scalar variabl processor often lead ineffici code exampl replic variabl x figur would unnecessarili lead processor execut first statement loop everi iter valu bn cn broadcast processor scalar variabl privat phpf choos among i align produc refer ii align consum refer iii align first explain map chosen phpf scalar variabl figur describ gener algorithm use determin map scalar privatiz variabl align produc refer ie rh refer ai statement comput scalar valu avoid commun need produc refer statement variabl x align consum refer ie lh refer di use scalar valu comput x align instead produc refer bi ci commun x owner di would requir commun insid iloop depend definit x use x insid loop align x di commun need two refer bi ci commun move outsid iloop final variabl z use valu replic array element ei fi comput real a iiown lboundai iown uboundai end figur guard optim exampl explicitli align refer processor execut iter iloop comput partit as determin partit statement loop own comput temporari valu z loop iter phpf use static singl assign ssa represent associ separ map decis assign scalar choos replic default map definit scalar loop privat without copyout base defus analysi reach use identifi reach definit phpf align scalar refer partit array ani rh statement rh refer statement avail processor scalar variabl explicitli mark align scalar valu need commun owner consum refer phpf determin separ pass desir chang align commun scalar and scalar referenc comput consum refer instead chang done new align show lower estim cost result commun move outsid loop scalar comput reduct oper such sum carri across processor grid dimens handl special manner addit privat copi scalar creat hold result local reduct comput initi perform processor global reduct oper combin valu local oper optim statement guard statement guard need enforc ownercomput rule howev innerloop guard inhibit parallel significantli degrad perform sever guard optim perform ffl statement within loop local iter set loop loop bound shrink use perform comput partit otherwis guard introduc individu statement ffl guard introduc comput partit hoist loop nest far possibl given statement local iter set differ loop guard differ processor grid dimens handl independ increas abil float guard inner loop sinc type move far possibl exampl figur guard need first processor grid dimens iloop bound reduc local iter set guard second dimens base condit invari insid iloop henc move outsid iloop mpl version tabl speedup grid program section discuss preliminari experiment result set benchmark program util optim discuss previou section experiment setup chose four program hpf benchmark suit develop appli parallel research inc publicli avail program vari degre challeng present compil first benchmark program grid iter d point stencil program featur regular nearest neighbor commun follow global reduct oper grid program littl comput benchmark version program take logarithm point stencil comput exponenti valu averag artifici boost computationcommun ratio second program tomcatv origin spec benchmark mesh gener thompson solver third program ncar shallow water atmospher model nontrivi d stencil program contain nearest neighbor commun gener commun last program x explicit model system use fourth order differenc use valu grid side center point benchmark routin use serial perform program compil use ibm xlf compil baselin perform compil hpf program number physic processor specifi compil time perform result obtain run object code differ number processor processor speedup program calcul divid baselin time parallel time s p experi both sequenti parallel run done processor ibm sp thinnod widenod program compil optim flag o grid ncar shallowwat x time handoptim version program use messag pass librari mpl also shown result grid threedimension array align templat distribut onto twodimension processor grid benchmark result obtain cycl compil achiev linear speedup case note previou section phpf success elimin redund commun program column mark grid tabl obtain specifi number processor compiletim show phpf capabl gener high qualiti code number processor unknown compil time tabl speedup tomcatv program program speedup ncar block block mpl version tabl speedup ncar shallow water program tomcatv array tomcatv distribut columnwis onto d processor grid array size x program first comput residu requir nearest neighbor commun next maximum valu residu determin final tridiagon system solv parallel comput iter maximum valu residu converg idiom recognit identifi reduct oper comput maximum residu commun onethird refer initi identifi need commun recogn redund elimin optim use includ align scalar consum replac induct variabl optim enabl bound main comput loop nest shrunk guard need statement insid loop nest although compil achiev ideal speedup processor result quit good compar result seen hpf compil ncar shallow water benchmark result tabl comput base x array distribut block compil reli independ direct loop could otherwis recogn parallel due static unknown constant appear subscript small number processor speedup good scale well number processor increas array distribut block block number refer need commun increas perform d distribut better d distribut howev cost extra messag less save send shorter messag redund commun elimin also effect d distribut x benchmark version apr time part program comput wavefield array distribut use d block distribut redund commun elimin remov static commun summari compil hpf program mani inher perform overhead result perform less highlytun handcod program benchmark perform x block block mpl version tabl speedup x program result report repres combin effect optim built compil symbol analysi abil compil maintain level perform number processor known compil time relat work sever group look problem compil hpflike languag distribut memori machin work also benefit earli project like kali fortran compil perform sever optim like messag vector use collect commun exploit pipelin parallel also perform analysi elimin partial redund commun irregular comput current version fortran compil requir number processor known compil time support partit singl dimens array superb compil develop univers vienna repres second gener compil pioneer techniqu like messag vector use overlap region shift commun compil support block distribut array dimens put special emphasi perform predict guid optim datapartit decis fortran compil exploit parallel fortran construct gener spmd messagepass program attempt parallel sequenti fortran program work focuss consider support parallel io handl outofcor program paradigm compil target fortran program provid option automat data partit regular comput also support exploit function parallel addit dataparallel adaptor system support hpf subset perform optim handl fortran array construct improv cach local addit reduc commun cost adaptor determin commun schedul runtim suif compil perform loop transform increas parallel enhanc uniprocessor perform compil also support automat data partit report result messagepass machin conclus describ hpf compil ibm sp seri parallel machin compil phpf uniqu abil effici support fortran array oper sequenti fortran loop hpf program handl static unknown paramet like number processor usual perform degrad use symbol analysi resort runtim determin commun schedul phpf make sever contribut optim commun elimin redund commun use dataavail analysi deal problem map scalar variabl comprehens manner perform specialpurpos optim like coarsegrain wavefront reduc number messag multidimension shift commun present experiment result indic optim lead effici code gener futur plan appli optim commun across procedur boundari interprocedur analysi plan support blockcycl distribut array dimens also provid effici support irregular comput also investig compil strategi use remot memori copi oper like get put basic primit transfer data across processor acknowledg thank rick lawrenc joefon jann provid perform result mpl version benchmark program would also like thank alan adamson lee nackman support r overview compil scalabl parallel machin overview paradigm compil distributedmemori multicomput compil approach fortran dhpf compil distribut memori mimd comput adaptor compil system dataparallel fortran program effici comput static singl assign form control depend graph static paramet base perform predict tool parallel program ansi fortran standard committe high perform fortran forum methodolog highlevel synthesi commun multicomput unifi dataflow framework optim commun compil fortran mimd distributedmemori machin visual execut high perform fortran hpf program compil global namespac parallel loop distribut exe cution appli parallel research xhpf system compil communicationeffici program massiv parallel ma chine process decomposit local refer pghpf portland group autom parallel regular comput distribut memori multicomput paradigm compil compil runtim support outofcor hpf program loop transform theori algorithm maxim parallel compil distributedmemori system tr process decomposit local refer effici comput static singl assign form control depend graph compil fortran mimd distributedmemori machin methodolog highlevel synthesi commun multicomput high perform fortran handbook static paramet base perform predict tool parallel program giventakemyampersandmdasha balanc code placement framework paradigm compil distributedmemori multicomput compil communicationeffici program massiv parallel machin compil global namespac parallel loop distribut execut loop transform theori algorithm maxim parallel visual execut high perform fortran hpf program overview compil scalabl parallel machin compil approach fortran d hpf compil unifi dataflow framework optim commun ctr manish gupta edith schonberg static analysi reduc synchron cost dataparallel program proceed rd acm sigplansigact symposium principl program languag p januari st petersburg beach florida unit state combin compiletim runtimedriven proactiv data movement softwar dsm system proceed th workshop workshop languag compil runtim support scalabl system p octob houston texa shankar ramaswami sachin sapatnekar prithviraj banerje framework exploit task data parallel distribut memori multicomput ieee transact parallel distribut system v n p novemb gerald roth ken kennedi loop fusion high perform fortran proceed th intern confer supercomput p juli melbourn australia daniel j rosenkrantz lenor r mullin harri b hunt iii minim materi arrayvalu temporari acm transact program languag system topla v n p novemb jo e moreira samuel p midkiff fortran cse case studi ieee comput scienc engin v n p april vijay menon keshav pingali highlevel semant optim numer code proceed th intern confer supercomput p june rhode greec b di martino s briguglio m celino g fogaccia g vlad v rosato m briscolini develop larg scale high perform applic parallel compil practic parallel comput nova scienc publish inc commack ny gerald roth john mellorcrummey ken kennedi r gregg brickner compil stencil high perform fortran proceed acmiee confer supercomput cdrom p novemb san jose ca shuo yang ali r butt y charli hu samuel p midkiff trust verifi monitor remot execut program progress correct proceed tenth acm sigplan symposium principl practic parallel program june chicago il usa soumen chakrabarti manish gupta jongdeok choi global commun analysi optim acm sigplan notic v n p may vikram adv john mellorcrummey use integ set dataparallel program analysi optim acm sigplan notic v n p may steven j deitz bradford l chamberlain sungeun choi lawrenc snyder design implement parallel array oper arbitrari remap data acm sigplan notic v n octob daniel chavarramiranda john mellorcrummey effect commun coalesc dataparallel applic proceed tenth acm sigplan symposium principl practic parallel program june chicago il usa manish gupta edith schonberg harini srinivasan unifi framework optim commun dataparallel program ieee transact parallel distribut system v n p juli ayon basumallik rudolf eigenmann optim irregular sharedmemori applic distributedmemori system proceed eleventh acm sigplan symposium principl practic parallel program march new york new york usa dhruva r chakrabarti nagaraj shenoy alok choudhari prithviraj banerje effici uniform runtim scheme mix regularirregular applic proceed th intern confer supercomput p juli melbourn australia john mellorcrummey vikram adv simplifi control flow compilergener parallel code intern journal parallel program v n p octob rudolf eigenmann jay hoefling david padua automat parallel perfect benchmark ieee transact parallel distribut system v n p januari christoph barton clin casav georg almsi yili zheng monts farrera siddhartha chatterj jo nelson amar share memori program larg scale machin acm sigplan notic v n june bradford l chamberlain steven j deitz lawrenc snyder compar studi na mg benchmark across parallel languag architectur proceed acmiee confer supercomput cdrom pe novemb dalla texa unit state mahmut kandemir alok choudhari prithviraj banerje j ramanujam nagaraj shenoy minim data synchron cost oneway commun ieee transact parallel distribut system v n p decemb m kandemir p banerje a choudhari j ramanujam n shenoy global commun optim techniqu base dataflow analysi linear algebra acm transact program languag system topla v n p nov johan cockx kristof denolf bart vanhoof richard stahl sprint tool gener concurr transactionlevel model sequenti code eurasip journal appli signal process v n p januari ken kennedi charl koelbel han zima rise fall high perform fortran histor object lesson proceed third acm sigplan confer histori program languag p june san diego california jack dongarra ian foster geoffrey fox william gropp ken kennedi linda torczon andi white refer sourcebook parallel comput morgan kaufmann publish inc san francisco ca