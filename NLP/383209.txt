t scrambl queri plan cope unexpect delay a access data numer widelydistribut sourc pose signific new challeng queri optim execut congest failur network introduc highlyvari respons time widearea data access paper initi explor solut variabl introduc class dynam runtim queri plan modif techniqu call queri plan scrambl present algorithm modifi execut plan onthefli respons unexpect delay obtain initi request tupl remot sourc algorithm reschedul oper introduc new oper queri plan present simul result demonstr techniqu effect hide delay perform use work wait miss data arriv b introduct ongo improv network technolog infrastructur result dramat increas demand access collat data dispar remot data sourc widearea network internet intranet queri optim execut strategi long studi central parallel tightlycoupl distribut environ data access across wide distribut sourc howev impos signific new challeng queri optim execut two reason first semant perform problem aris due heterogen natur data sourc looselycoupl envi ronment second data access widearea network involv larg number remot data sourc intermedi site commun link vulner congest failur appear proceed fourth intern confer parallel distribut inform system pdi miami beach florida decemb laurent amsaleg support postdoctor fellowship inria rocquencourt franc z support part nsf grant iri ibm sur award grant bellcor user point view congest failur compon network manifest highlyvari respons time is time requir obtain data remot sourc vari greatli depend specif data sourc access current state network time access attempt queri process problem result heterogen subject much attent recent year eg sad con trast impact unpredict respons time widearea queri process receiv rel littl attent work present initi explor address problem responsetim variabl widearea data access respons time variabl high variabl make effici queri process difficult queri execut plan typic gener static base set assumpt cost perform variou oper cost obtain data ie disk andor network access caus highvari typic failur congest inher runtim issu cannot reliabl predict queri optim time even queri startup time result execut static optim queri plan like suboptim presenc unexpect respons time problem worst case queri execut may block arbitrarili long time need data fail arriv remot data sourc differ type respons time problem experienc looselycoupl widearea environ categor follow ffl initi delay unexpect delay arriv first tupl particular remot sourc type delay typic appear difficulti connect remot sourc due failur congest sourc along path sourc destin ffl slow deliveri data arriv regular rate rate much slower expect rate problem re sult exampl network congest resourc content sourc differ slower commun path use eg due failur ffl bursti arriv data arriv unpredict rate typic burst data follow long period arriv problem aris fluctuat resourc demand lack global schedul mechan widearea environ problem aris unpredict runtim cannot effect address static queri optim techniqu result investig class dynam runtim queri plan modif techniqu call queri plan scrambl approach queri initi execut accord origin plan associ schedul gener queri optim how ever signific perform problem aris execut queri plan scrambl invok modifi execut onthefli progress made part plan word rather simpli stall slowli arriv data queri plan scrambl attempt hide unexpect delay perform use work three way queri plan scrambl use help mask respons time problem first scrambl allow use work done hope caus problem resolv meantim approach use three class problem describ abov second data ar rive rate hamper queri process perform eg slow deliveri bursti arriv case scrambl allow use work perform problemat data obtain background fashion final case data simpli arriv arriv far slowli scrambl use produc partial result return user andor use queri process later time trv toler initi delay work present initi approach queri plan scrambl specif address problem initi delay ie delay receiv initi request tupl remot data sourc describ analyz queri plan scrambl algorithm follow first approach outlin abov name use work perform hope problem eventu resolv request data arriv near expect rate on algorithm exploit possibl decis made static queri optim impos optim execut perform overhead absenc unexpect delay order allow us clearli defin algorithm studi perform work assum execut environ sever properti ffl algorithm address respons time delay receiv initi request tupl remot data sourc initi delay over tupl assum arriv near origin expect rate state previous type delay model problem connect remot data sourc often experienc internet ffl focu queri process use dataship hybridship approach fjk data collect remot sourc integr queri sourc queri process perform queri sourc subject scrambl approach typic mediat databas system integr data distribut heterogen sourc eg trv queri execut schedul use iter model gra model everi runtim oper support open call getnext call queri execut start call open topmost oper queri execut plan proce iter call getnext topmost oper call propag tree time oper need consum data call getnext child or chil dren oper model impos schedul oper queri plan remind paper organ follow section describ algorithm give extend exampl section present result simul studi demonstr properti algorithm section describ relat work section conclud summari result discuss futur work scrambl queri plan section describ algorithm scrambl queri cope initi delay obtain data remot data sourc algorithm consist two phase one chang execut order oper order avoid idl one synthes new oper execut absenc work perform first provid brief overview algorithm describ two phase detail use run exampl algorithm summar end section algorithm overview figur show oper tree complex queri plan typic complic plan would gener static queri optim accord cost model statist object function leav tree base relat store remot site node tree binari oper we focu studi hashbas join execut queri sourc site unari oper select sort partit shown figur e g figur initi queri tree discuss previous describ scrambl algorithm context iteratorbas execut model model impos schedul oper queri drive flow data oper schedul oper indic figur number associ oper ator figur join number accord order would complet iteratorbas schedul flow data oper follow model discuss sd ie left input hash join alway materi right input consum pipelin fashion schedul impli tree figur would thu begin materi left subtre root node assum hash join use suffici memori hold hash tabl relat a c so partit necessari relat materi would consist follow step scan relat build hashtabl ha use select tupl pipelin fashion probe ha select tupl b build hashtabl contain result ab hab scan c build hashtabl hc scan build hashtabl hd pipelin fashion probe hd hc hab tupl e build hashtabl contain result abcd execut thu begin request tupl remot site relat store delay access site say site temporarili down scan ie step block site recov tradit iteratorbas schedul disciplin delay would result entir execut queri block pend recoveri remot site given unexpect delay highli probabl widearea environ sensit delay like result unaccept perform scrambl algorithm address problem attempt hide delay make progress part queri problem resolv scrambl algorithm invok delay relat detect via timeout mechan algorithm iter iter select part plan execut materi correspond temporari result use later execut scrambl algorithm execut one two phase phase iter modifi schedul order execut oper depend data known delay exampl queri figur phase might result materi join relat c e wait arriv a phase iter synthes new oper join exampl order make progress exampl phase iter might choos join relat b result cde comput previous end iter algorithm check see delay sourc begun respond so stop iter return normal schedul oper possibl reinvok scrambl addit delay relat later detect if howev delay data arriv iter algorithm iter again algorithm move phase phase fail find exist oper depend delay relat if phase algorithm unabl creat new oper scrambl termin queri simpli wait delay data arriv follow section describ detail two phase scrambl interact phase materi subtre block runnabl oper oper queri tree producerconsum relationship immedi ancestor given oper consum tupl produc oper convers immedi descend given oper produc tupl oper con sume producerconsum relationship creat execut depend oper one oper consum tupl tupl produc exampl select oper consum tupl base relat relat avail case select oper block select consum tupl produc tupl consequ consum select also block transit ancestor unavail relat block system discov relat un avail queri plan scrambl invok scrambl start split oper queri tree two disjoint queue queue block oper queue runnabl oper queue defin follow definit queue block oper given queri tree queue block oper contain ancestor unavail relat definit queue runnabl oper given queri tree queue block oper queue runnabl oper contain oper queue block oper oper insert runnabl block queue accord order execut would initi iteratorbas schedul maxim runnabl subtre iter phase queri plan scrambl analyz runnabl queue order find maxim runnabl subtre materi maxim runnabl subtre defin follow definit maxim runnabl subtre given queri tree queue block runnabl oper runnabl subtre subtre oper runnabl runnabl subtre maxim root first runnabl descend block oper none oper belong maxim runnabl subtre depend data known delay iter phase initi materi first maxim runnabl subtre found notion maxim use definit impor tant materi biggest subtre iter tend minim number materi perform henc reduc amount extra io caus scrambl materi runnabl subtre complet relat use subtre discov unavail execut execut runnabl subtre finish result materi algorithm remov oper belong subtre runnabl queue check miss data begun arriv miss data other block relat still unavail anoth iter begun new iter analyz again runnabl queue find next maxim runnabl subtre materi subtre data unavail possibl execut runnabl subtre one or more particip base relat discov unavail maxim runnabl subtre defin respect current content block runnabl queue runnabl queue guess real avail relat algorithm insert oper runnabl queue know whether associ relat actual avail unavail discov correspond relat request case relat discov unavail execut runnabl sub tree current iter stop algorithm updat runnabl block queue ancestor unavail relat extract runnabl queue insert block queue queue updat scrambl queri plan initi new phase iter order materi anoth maxim runnabl subtre note remaind paper use maxi mal runnabl subtre runnabl subtre interchang except explicitli note e g runnabl block figur block runnabl oper relat unavail termin phase end iter algorithm check data arriv discov unavail relat begun arriv algorithm updat block runnabl queue ancestor unblock relat extract block queue insert runnabl queue note ancestor unblock relat also depend block relat extract queue phase termin execut queri return normal iteratorbas schedul oper relat block execut queri proceed final result return user scrambl algorithm reinvok howev queri execut block again phase also termin runnabl queue empti case phase perform iter remain oper block happen queri plan scrambl switch phase purpos second phase process avail relat oper queri tree block present second phase queri plan scrambl section first howev present exampl illustr facet phase describ abov run exampl exampl reus complex queri tree present begin section discuss case data need need partit join assum tupl relat need partit contrast assum tupl relat f g h partit illustr behavior phase follow scenario given below execut queri start relat discov unavail third iter relat g discov unavail tupl begin arriv queri execut site end fourth iter time phase termin tupl g receiv execut exampl queri begin request tupl remot site own relat a follow scenario assum relat b ac e g a ai g figur queri tree iter b a figur g unavail x materi unavail indic thick solid line figur oper block delay depict use dash line unavail invok phase updat block runnabl queue initi first iter iter analys runnabl queue find first maxim runnabl subtre consist unari oper select tupl relat b oper materi ie select tupl b local disk store relat b algorithm check arriv tupl a follow scenario assum tupl still unavail anoth iter initi second iter find next maxim runnabl subtre one root oper note subtre root oper maxim sinc consum oper block figur show materi runnabl subtre found first two iter queri scrambl part a figur show effect materi first runnabl subtre local relat b contain materi select tupl remot relat b also show second runnabl subtre indic shade grey area figur b show queri tree materi second runnabl subtre materi result call x x materi anoth iter start sinc exampl relat still unavail third iter find next runnabl subtre root oper join f g h as state abov relat need partit join execut runnabl subtre start build left input oper partit f f request relat g order partit probe tupl f scenario howev g discov unavail trigger updat block runnabl queue figur a show oper newli block oper oper alreadi block due unavail a queue oper updat anoth iter scrambl initi run next runnabl sub tree ie one root oper indic shade grey area figur result execut call x state earlier oper insert queue respect execut order figur illustr next step scenario ie illustr case x materi discov tupl relat begun arriv case algorithm updat runnabl block queue shown figur a oper previous block unblock oper remain block howev phase termin return normal iteratorbas schedul oper materi left subtre root node see figur b result relat call x x materi queri block g phase reinvok phase comput new content runnabl block queue discov runnabl queue empti sinc remain oper ancestor g phase termin scrambl queri plan enter phase describ phase algorithm next section phase creat new join scrambl move phase runnabl queue empti block queue not goal phase creat new oper execut specif second phase creat join relat directli join origin queri tree whose consum block ie block queue due unavail data contrast phase iter simpli adjust schedul allow runnabl oper exe cute iter phase actual creat new join oper creat phase chosen optim origin queri plan gener possibl oper may entail signific amount addit work join creat execut phase expens queri scrambl could result net degrad perform phase b a figur relat avail a b c gx g f x figur perform new join phase therefor potenti negat even revers benefit scrambl care taken paper use simpl heurist avoid cartesian product prevent creation overli expens join phase section analyz perform impact cost creat join rel cost join origin queri plan one way ensur phase gener overli expens join involv queri optim choic new join involv optim queri scrambl one aspect ongo work creat new join start phase scrambl algorithm construct graph g possibl join node g correspond relat edg g indic two connect node common join attribut thu join without caus cartesian product unavail relat place g g construct phase start iter creat execut new join oper iter phase perform follow step g find two leftmost joinabl ie con nect relat j notion leftmost respect order queri plan joinabl relat g termin scrambl creat new join oper materi j updat g replac j materi result j updat runnabl block queue updat queri tree test see unavail data arriv so termin scrambl els begin new iter figur demonstr behavior phase continu exampl previou section figur divid three part part a show queri tree end phase case g would contain f x x assum that g relat f x directli connect relat x connect either ie assum share join attribut unavail relat g exampl therefor f x two leftmost joinabl relat x leftmost relat joinabl figur b show creation new join f x creation join requir remov join number block queue replac order execut join number final figur c show materi creat oper materi join call x point g modifi remov f x insert x joinabl x relat g termin phase iter phase number relat g reduc phase termin g reduc singl relat multipl relat none joinabl shown preced exampl latter situat aris attribut requir join remain relat contain unavail relat in case relat g phase also termin due arriv unavail data data arriv phase iter then end itera tion runnabl block queue updat accordingli control return normal iteratorbas schedul oper mention phase queri scrambl may reinvok later cope delay relat physic properti join preced discuss focus restructur logic node queri plan restructur physic plan howev rais addit considera tion first ad new join may requir introduct addit unari oper process input new join correctli ex ecut exampl merg join oper requir tupl consum sort thu may requir sort oper appli input second delet oper done preced exampl may also requir addit unari oper exampl relat may need repartit order place children exist hybrid hash node final chang input exist join oper may also requir modifica tion new input suffici differ origin input physic join oper may modifi exampl index nest loop join might chang hash join inner relat replac one index join attribut summari discuss queri plan scrambl algorithm summar follow ffl queri becom block becaus relat unavail queri plan scrambl initi ate first comput queue block oper queue runnabl oper phase analys queue runnabl oper ator pick maxim runnabl subtre materi result process repeat ie iter queue runnabl oper empti point system switch phase phase tri creat new oper join two relat avail joinabl process iter joinabl relat found ffl iter algorithm check see unavail data arriv so control return normal iteratorbas schedul oper otherwis anoth iter perform two addit issu regard algorithm deserv mention here first issu concern knowledg actual avail re lation instead discov algorithm now execut oper perform iter sourc unavail possibl send initi data request data sourc soon first relat discov unavail would give algorithm immedi knowledg avail statu sourc fortun use iter model open multipl data sourc forc queri execut site consum tupl simultan iter model suspend flow tupl consum consum oper second issu concern potenti addit work phase describ previous phase materi exist subtre optim prior runtim queri optim rel overhead materi may less signific depend io pattern scrambl subtre compar unscrambl ver sion exampl subtre consist singl select base relat materi phase pure overhead sinc origin queri plan select tupl receiv without involv io hand overhead materi oper partit data compar less import case origin queri plan scrambl plan perform disk io write partit disk later pro cess scrambl plan howev write disk one extra partit would kept memori origin nonscrambl queri plan phase howev costli creat new join scratch use simpl heurist avoid cartesian product advantag approach simplic disadvantag howev potenti overhead caus possibl suboptim join studi perform impact vari cost creat join follow section cost materi phase new join phase may certain case negat benefit scrambl control cost rais possibl integr scrambl exist queri optim would allow us estim cost iter order skip exampl costli materi expens join integr one aspect ongo work paramet valu descript numsit number site mip numdisk number disk per site dskpages size disk page byte netbw network bandwidth mbitsec netpages size network page byte compar instr appli predic hashinst instr hash tupl move instr copi byte tabl simul paramet main set perform section examin main perform characterist queri scrambl algorithm first set experi show typic perform queri scrambl second set experi studi sensit phase select new join creat first describ simul environ use studi algorithm simul environ studi perform queri scrambl algorithm extend exist simul fjk model heterogen peertop databas system shore cdf simul use provid detail model queri process cost system here briefli describ simul focus aspect pertin experi tabl show main paramet configur simul set use studi everi site cpu whose speed specifi mip paramet numdisk disk mainmemori buffer pool current studi simul configur model clientserv system consist singl client connect seven server site except queri execut site store one base relat studi disk queri execut site ie client use store temporari result disk model includ cost random sequenti physic access also charg softwar oper implement io unit disk io databas client disk cach page size dskpages unit transfer site page size netpages network model simpli fifo queue specifi bandwidth netbw detail particular technolog ethernet atm model simul also charg cpu instruct network protocol op erat cpu model fifo queue simul charg function perform queri oper like hash compar move tupl memori paper simul use primarili demonstr properti scrambl algo rithm rather detail analysi algo f g figur queri tree use experi rithm such specif set use simul less import way delay either hidden hidden algorithm experi variou delay gener simpli request tupl unavail sourc end variou iter queri plan scram bling is rather stochast gener delay explicitli impos seri delay order studi behavior algorithm control manner exampl simul arriv block tupl dure say third iter phase scrambl queri time initi transfer tupl block relat final result queri could eventu comput queri tree experi experi describ section use queri tree repres figur use queri tree demonstr featur scrambl allow us highlight impact perform overhead caus materi creat join base relat tupl byte each assum join graph fulli con nect is relat equijoin relat join use join attribut first set experi studi perform queri plan scrambl case join queri tree produc number tupl ie tupl second set experi howev studi case join queri tree differ select thu produc result variou size experi studi perform approach case singl relat unavail relat leftmost relat ie relat repres case queri scrambl benefici examin case other unavail relat would chang basic lesson studi experi describ below evalu algorithm case execut context small larg memori case larg memori none relat use queri tree either base relat intermedi result need partit process case small memori everi relat includ intermedi result must partit note sinc join test queri use join attribut repartit relat requir new join creat case experi step phenomenon figur show respons time scrambl queri plan gener delay relat the leftmost relat plan var i delay shown along xaxi also repres lower grey line figur higher grey line show perform unscrambl queri is execut queri simpli delay tupl relat begin arriv distanc two line therefor constant equal respons time origin unscrambl queri plan second case experi memori size queri execut site small set ting hashtabl inner relat join entir built memori partit requir middl line figur show respons time scrambl queri plan execut variou delay a case six possibl scrambl plan could gener state section scrambl algorithm iter end iter check see delay data begun arriv so stop scrambl normal queri execut resum if howev end iter delay data still arriv anoth iter scrambl algorithm initi result execut model step shape observ figur width step equal durat oper perform current iter scrambl algorithm height step equal respons time queri normal process resum end iter exampl experi first scrambl iter result retriev partit relat b oper requir second end iter tupl relat begun arriv scrambl done normal queri execut resum result execut case respons time second thu first step shown figur width second height second note case scrambl effect hide delay a respons time scrambl queri nearli ident origin queri delay a tupl arriv end first iter anoth iter perform case second iter retriev partit join relat c d shown figur iter requir addit second begin arriv iter result queri plan total respons time second thu experi scrambl abl hide delay second penalti second ie respons respons time secdelay sec delay scrambl figur respons time scrambl queri plan small memori vari delay a time origin queri delay correspond respons time improv compar scrambl if end second iter tupl still fail arriv third iter initi case howev runnabl subtre scrambl switch phase result creation new join see section third iter result cd partit join relat b iter width second input alreadi present b alreadi partit result cd fairli small respons time result plan second repres respons time improv compar scrambl remain queri plan exhibit similar behavior tabl show addit oper overal perform possibl scrambl plan experi largest rel benefit approxim scrambl obtain delay second time requir complet six iter point work queri scrambl do scrambl plan must also wait ar rive seen figur end iter six respons time scrambl plan increas linearli delay a distanc delay respons time scrambl plan time requir complet queri arriv although appar figur first scrambl queri slightli slower unscrambl queri plan delay short amount time delay second respons time scrambl queri second second nonscrambl queri join b unscrambl queri doe b partit join allow one partit b stay memori partit b join a first scrambl queri plan doe forc partit written back disk read later join a delay less time need perform addit io cheaper stay idl wait a experi sensit phase previou experi join produc number tupl result oper perform phase benefici section examin sensit phase chang select join creat vari select chang number tupl produc join affect width height step goal show case benefit scrambl vari greatli clear improv case scrambl perform wors noscrambl test queri first join creat phase join relat b result cd which materi phase set experi ment vari select new join creat result variabl size select join adjust produc tupl sever thousand tupl join phase may creat behav like function join simpli carri tupl creat bcd queri tree time tupl join a number tupl carri along queri tree return normal drop vari select first join produc phase suffici gener variabl number tupl carri along tree join phase may creat two next section present result sensit analysi small larg memori case scrambl perform total respons save plan iter delay time partit b tabl delay rang respons time scrambl queri plan delay sec respons time delay scrambl phase figur respons time scrambl queri plan small memori vari select delay state previous memori small relat partit join as previou experi partit add potenti cost scrambl plan result addit io would present unscrambl plan memori larg howev hashtabl built entir memori relat need partit thu larg memori potenti overhead scrambl plan lessen small memori case experi examin effect queri scrambl select first join creat phase vari figur show respons time result differ select previou experi delay shown along xaxi also repres lower grey line figur higher grey line show respons time unscrambl queri be fore increas linearli delay a two line exactli one present previou experi solid line middl figur show perform scrambl queri plan stop scrambl right end phase in case two iter perform phase without initi phase iter note line becom diagon end phase sinc system simpli wait tupl arriv comput final result queri intuit use perform second phase scrambl queri result respons time would locat line costli join would creat phase would consum lot resourc littl improv hand phase would benefici scrambl queri whose result respons time would line sinc addit overhead would small gain larg dash dot line figur illustr tradeoff line show respons time scrambl queri plan execut variou delay variou select note scrambl queri plan share respons time iter perform phase two first iter correspond exactli scrambl plan describ previou ex periment end second iter second howev tupl still fail arriv third iter initi queri scrambl enter phase creat new join dot line show perform select new join produc result tupl line ident one show previou experi sinc join produc tupl second select first join creat second phase produc tupl end iter tupl still arriv anoth iter initi iter process produc tupl correspond line figur lowest dash line case time tupl carri along scrambl queri plan step higher roughli second wider sinc tupl manipul case tupl creat even addit overhead tupl howev respons time scrambl queri plan far respons time unscrambl queri equival delay new join produc tupl the higher dash line figur respons time scrambl plan almost equal even wors origin unscrambl queri includ delay a case costli carri larg number tupl queri tree simpli wait block data arriv respons time delay sec scrambl delay phase figur respons time scrambl queri plan larg memori vari select delay larg memori case figur show experi case memori larg enough allow inner relat join built entir main memori larg memori partit relat need done larg memori case line show increas delay respons time unscrambl queri delay increas separ second phase start delay second four differ select repres figur contrast previou experi time tupl negat benefit scrambl case time tupl carri scrambl queri plan benefit becom close zero larg memori result comput iter need materi consum is contrast memori small materi result partit consum respect small memori case partit relat memori larg reduc number io allow scrambl plan manipul tupl overhead experi present section shown queri scrambl effect techniqu abl improv respons time queri data delay improv come fact iter scrambl queri plan hide delay data improv ment howev depend overhead due materi creat join improv scrambl bring also depend amount work done origin queri bigger ie longer costli origin queri is improv techniqu bring sinc abl hide larger delay comput costli oper improv also depend shape queri tree bushi tree offer option scrambl deep tree respect figur present abov mani iter done phase point phase start shift right increas distanc phase diagon line respons time unscrambl queri turn scrambl algorithm handl wider rang bad select join creat phase relat work section consid relat work respect a point time optim decis made ie compil time queri startup time queri runtim b variabl use dynam decis ie respons time remot sourc con sider c natur dynam optim ie entir queri rewritten d basi optim ie costbas heurist base volcano optim cg gra dynam optim distribut queri process optim cost comparison return in compar choic part search space encod chooseplan oper queri start time incompar cost comparison re evalu accord result reevalu chooseplan oper select particular queri execut plan final decis regard queri execut thu made queri startup time work complimentari volcano optim sinc volcano adapt chang evalu queri start work dynam queri optim either consid distribut case dmp ohm optim access path select cannot reorder join hs thu direct consider problem respons time remot sourc account for articl are how ever rich sourc optim carri work novel approach dynam queri optim use rdbvm describ ant ap proach multipl differ execut logic oper occur time compet produc best execut one execut oper determin probabl better execut termin dsd respons time queri improv reorder leftdeep join tree bushi join tree sever reorder algorithm present work assum reorder done entir compil time work cannot easili extend handl runtim reorder sinc reorder restrict occur certain locat join tree acp track cost previou call remot sourc in addit cach result use track estim cost new call volcano system optim queri queri compil queri startup time chang queri plan queri runtim research prototyp mermaid cbti commerci successor interviso thmb heterogen distribut databas perform dynam queri optim mermaid construct queri plan entir runtim thu step queri optim base dynam inform intermedi join result size network perform mermaid neither take advantag static gener plan dynam account sourc respond runtim sage system kno ai plan system queri optim heterogen distribut sourc system interleav execut optim respond unavail data sourc conclus futur work queri plan scrambl novel techniqu dynam adjust chang runtim environ ment present algorithm specif deal variabl perform remot data sourc account initi delay respons time algorithm consist two phase phase chang schedul exist oper produc result queri optim phase iter appli chang schedul possibl point algorithm enter phase creat new oper process avail data new oper iter creat work queri plan scrambl do perform experi demonstr techniqu hide delay receiv initi request tupl remot data sourc examin sensit perform scrambl plan select join creat phase work repres initi explor develop flexibl system dynam adapt chang properti environ among ongo futur research plan develop algorithm scrambl differ failur model handl environ data arriv bursti rate steadi rate significantli slower expect also studi use partial result approxim final result also plan studi potenti improv base scrambl decis costbas knowledg final queri plan scrambl promis approach address mani concern address dynam queri optim adapt queri plan runtim account actual cost oper could compens often inaccur unreli estim use queri optim moreov could account remot sourc export cost inform especi import remot sourc run complex subqueri thu plan investig use scrambl complimentari approach dynam queri optim acknowledg would like thank praveen seshadri bjorn jonsson jeanrobert gruser help comment work would also like thank alon levi point relat work r queri cach optim distribut mediat system dynam queri optim rdbvm distribut queri process multipl databas system shore persist applic optim dynam queri execut plan semant data cach replac design implement gluenail databas system reduc multidatabas queri respons time tree balanc perform tradeoff client queri evalu techniqu larg databas optim parallel queri execut plan xpr queri process objectstor databas system tradeoff process complex join queri via hash multiprocessor databas machin modern databas system object model deal complex feder databas access scale heterogen databas design disco tr ctr navin kabra david j dewitt effici midqueri reoptim suboptim queri execut plan acm sigmod record v n p june henriqu paqu ling liu calton pu ginga selfadapt queri process system proceed eleventh intern confer inform knowledg manag novemb mclean virginia usa ihab f ilya walid g aref ahm k elmagarmid hicham g elmongui rahul shah jeffrey scott vitter adapt rankawar queri optim relat databas acm transact databas system tod v n p decemb amol deshpand zachari ive vijayshankar raman adapt queri process foundat trend databas v n p januari memoryadapt schedul larg queri execut proceed seventh intern confer inform knowledg manag p novemb bethesda maryland unit state avigdor gal obsolesc materi view queri process enterpris inform system proceed eighth intern confer inform knowledg manag p novemb kansa citi missouri unit state laurent amsaleg michael j franklin anthoni tomas dynam queri oper schedul widearea remot access distribut parallel databas v n p juli qiang zhu jaidev harida wenchi hou queri optim via content space partit cost error control dynam multidatabas system distribut parallel databas v n p april henriqu paqu ling liu calton pu distribut queri adapt tradeoff proceed acm symposium appli comput march melbourn florida yongluan zhou beng chin ooi kianle tan wee hyong tok adapt distribut queri process architectur data knowledg engin v n p june kainle tan pin kwang eng beng chin ooi ming zhang join multijoin process data integr system data knowledg engin v n p februari tolga urhan michael j franklin laurent amsaleg costbas queri scrambl initi delay acm sigmod record v n p june qiang zhu jaidev harida wenchi hou queri optim via content space partit cost error control dynam multidatabas system distribut parallel databas v n p april jeanrobert gruser louiqa raschid vladimir zadorozhni tao zhan learn respons time websourc use queri feedback applic queri optim vldb journal intern journal larg data base v n p march ron avnur joseph m hellerstein eddi continu adapt queri process acm sigmod record v n p june yong yao johann gehrk cougar approach innetwork queri process sensor network acm sigmod record v n septemb bertram ludscher pratik mukhopadhyay yanni papakonstantin transducerbas xml queri processor proceed th intern confer larg data base p august hong kong china alon halevi anand rajaraman joann ordil data integr teenag year proceed nd intern confer larg data base septemb seoul korea bret hull vladimir bychkovski yang zhang kevin chen michel goraczko allen miu eugen shih hari balakrishnan samuel madden cartel distribut mobil sensor comput system proceed th intern confer embed network sensor system octob novemb boulder colorado usa anthoni tomas rmi amouroux philipp bonnet olga kapitskaia hubert naack louiqa raschid distribut inform search compon disco world wide web acm sigmod record v n p june