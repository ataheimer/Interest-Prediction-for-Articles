t design use algorithm permut larg entri diagon spars matric a consid techniqu permut spars matrix diagon permut matrix entri larg absolut valu discuss variou criteria consid implement comput code indic sever case permut use includ solut spars equat direct method iter techniqu also consid use gener precondition iter method see effect reorder dramat although best priori strategi mean clear b introduct studi algorithm permut squar unsymmetr spars matrix order n diagon permut matrix larg entri use sever way wish solv system nonsingular squar matrix order n x b vector length n preorder place larg entri diagon use whether direct iter method use solut direct method put larg entri diagon suggest pivot diagon might stabl is cours noth rigor inde stabil guarante howev solut scheme like multifront method duff reid symbol phase choos initi pivot sequenc subsequ factor phase modifi sequenc stabil mean modif requir less permut appli iter method simpl techniqu like jacobi gaussseidel converg quickli diagon entri larg rel offdiagon row column techniqu like block iter method benefit entri diagon block larg addit precondit techniqu exampl diagon precondit incomplet lu precondit intuit evid larg diagon benefici consid precis mean permut section discuss algorithm perform implement issu section consid effect permut use direct method solut section use iter method section discuss effect precondit latter section final consid implic current work section throughout symbol jxj interpret context x scalar modulu intend x set cardin number entri set understood permut matrix larg diagon transvers maximum transvers say n theta n matrix larg diagon absolut valu diagon entri larg rel absolut valu offdiagon entri row column concern permut row column matrix result diagon permut matrix properti is permut matrix would like ratio larg j j n cours even possibl ensur ratio greater j simpl exampl show thu necessari first scale matrix comput permut appropri scale would scale column largest entri column algorithm describ section would effect maxim arbitrari nonsingular n theta n matrix necessari suffici condit set n entri permut diagon two row two column set entri term maximum transvers concept central paper defin rigor let denot set at n order index pair i j row index column index j appear onc call transvers matrix a ij i call maximum transvers largest possibl cardin jt j equal n matrix nonsingular inde jt defin n theta n permut matrix p p matrix transvers entri diagon spars system solut major use transvers algorithm first stage permut matric block triangular form matrix first permut unsymmetr permut make diagon zerofre symmetr permut use obtain block triangular form import featur approach block triangular form depend transvers found first stage duff maximum transvers also requir gener block triangular order develop pothen fan bottleneck transvers consid two strategi obtain maximum transvers larg transvers entri primari strategi consid paper maxim smallest valu diagon permut matrix is comput maximum transvers maximum transvers min ijt transvers call bottleneck transvers smallest valu ja ij j i call bottleneck valu a equival jt smallest valu diagon p maxim permut p equal bottleneck valu a outlin algorithm comput bottleneck transvers matrix given below assum alreadi algorithm obtain maximum transvers denot mt routin return maximum transvers matrix a start initi guess transvers let ffl denot matrix obtain set zero entri ja ij j denot transvers obtain remov transvers element algorithm bt initi set fflmin zero fflmax infin there exist begin choos we discuss chosen later fflmin ffl els endif complet transvers permut need matrix structur singular maximum transvers a henc jm j requir cardin bottleneck transvers comput nonsingular throughout algorithm fflmax fflmin maximum transvers size jm j exist fflmax exist fflmin step ffl chosen interv fflmin fflmax maximum transvers matrix ffl comput transvers size jm j fflmin set ffl term bottleneck use mani year assign problem exampl glicksberg gross otherwis fflmax set ffl henc size interv decreas step ffl converg bottleneck valu termin algorithm comput bottleneck transvers ffl correspond bottleneck valu valu ffl uniqu bottleneck transvers usual uniqu algorithm bt make use algorithm find maximum transvers current known algorithm best asymptot bound find maximum transvers hopcroft karp worstcas complex o n number entri matrix effici implement algorithm found duff wiberg depthfirst search algorithm implement duff harwel subroutin librari code mc theoret worstcas behaviour on practic behav like on latter algorithm far simpler concentr follow although note rel straightforward modifi use algorithm hopcroft karp similar way limit algorithm bt maxim smallest valu diagon permut matrix although mean diagon valu smaller may maxim consid exampl theta ffic ffi close zero algorithm bt appli matrix return either transvers f g f g clearli latter transvers prefer modif propos help choos larg entri possibl earli transvers entri benefici first permut matrix block triangular form use bt block diagon done sinc entri maximum transvers must lie block furthermor mean bt oper smaller matric also usual obtain transvers better qualiti inasmuch minimum diagon entri maxim true block diagon thu matrix combin order block triangular form follow bt would yield prefer transvers f g possibl improv diagon valu permut matrix smallest one appli row scale subsequ initi column scale matrix a increas numer valu nonzero entri row maximum absolut numer valu less one row scale appli matrix chang coeffici ffi algorithm bt comput f g bottleneck transvers matrix unfortun row scale alway help seen matrixb ffic maximum transvers legitim bottleneck transvers inde bt algorithm depend scale exampl matrix bottleneck transvers f g wherea row scale bottleneck transvers f g anoth possibl improv size diagon valu appli algorithm bt repeatedli without loss gener suppos that applic bt entri nn smallest diagon valu algorithm bt appli n gamma theta n gamma lead princip submatrix a could repeat after k step n gamma lead princip submatrix contain one on assumpt origin matrix row column scale obvious quit expens sinc algorithm bt appli on time although good start point bt algorithm stage call algorithm success bottleneck transvers algorithm fact found usual give littl improv bt consid paper maximum product transvers algorithm yield transvers independ scale maxim product moduli entri diagon find permut oe ioe j maxim strategi use pivot full gaussian elimin olschowka neumaier correspond obtain weight bipartit match olschowka neumaier combin permut scale strategi permut maxim product diagon entri permut matrix clearli product zero matrix structur singular scale transform matrix socal imatrix whose diagon entri one whose offdiagon entri less equal one maxim product diagon entri equival minim sum diagon entri matrix defin follow we assum denot n theta n nonneg nonsingular matrix log maximum absolut valu column j matrix a minim sum diagon entri state term assign problem solv on time full n theta n matric on log n time spars matric entri bipartit weight match algorithm use solv problem appli algorithm c produc vector u v transvers length n defin then scale matrix imatrix scale experi but unlik olschowka neumaier use spars bipartit weight match wherea consid full matric worst case complex algorithm on log n similar bt although practic sometim requir work bt program algorithm without final scale call algorithm mpd for maximum product diagon compar bt mc later section paper note matrixb mpd algorithm obtain transvers f g wherea exampl gaussian elimin diagon transvers would better addit fact scale influenc choic bottleneck transvers could deem use characterist implement bt algorithm consid implement detail algorithm bt previou section also illustr perform matric harwellbo collect duff grime lewi collect davi code implement bt algorithm includ futur releas harwel subroutin librari hsl updat transvers stage algorithm bt easili acceler algorithm describ section comput valu minimum entri transvers viz min ijt set fflmin valu rather ffl issu crucial effici choic ffl begin step if step choos ffl close valu fflmin highli like find maximum transvers total number step requir obtain bottleneck transvers larg worst case could requir step number nonzero entri ffl reduc one iter algorithm converg faster size interv fflmin fflmax reduc significantli step would therefor appear sensibl choos ffl step interv split two almost equal subinterv ffl fflminfflmax howev nonzero valu magnitud fflmin fflmax cluster near one endpoint possibl exist nonzero valu discard algorithm proceed slowli avoid thi ffl chosen median nonzero valu fflmin fflmax consid transvers algorithm like mc modifi implement algorithm bt effici thi use describ briefli mc work column matrix search turn call origin column either entri row transvers entri present row found made transvers entri a cheap assign entri search move previou column whose transvers entri one row entri origin column new column check cheap assign one exist cheap assign entri origin column row old transvers entri replac transvers entri therebi extend length transvers cheap assign search continu column depth first search fashion chain augment path form found transvers entri row everi odd member path transvers entri assign made column j transvers extend replac transvers entri augment path even member path transvers select algorithm like mc take account numer valu nonzero entri howev clear algorithm bt converg faster chosen valu minimum entri larg note that construct augment path often sever candid cheap assign extend path mc make arbitrari choic modifi candid largest absolut valu chosen note local strategi guarante augment path highest valu found second modif aim exploit inform obtain previou step algorithm bt algorithm bt repeatedli comput maximum transvers ffl implement mc harwel subroutin librari comput scratch modifi start partial transvers easili achiev hold set column contain entri partial transvers perform depth search search set column cours mani way implement choic ffl one altern maintain array ptr of length pointer entri first part ptr point entri form matrix ffl max first two part ptr point entri form ffl min element third part ptr point remain smaller entri a new valu ffl chosen directli o time pick numer valu entri point element second part ptr assign algorithm bt either ffl min ffl max second part ptr permut ptr divid three part altern global use fast sort algorithm entri a element ptr point entri order decreas absolut valu ptr divid three part describ previou altern choos in o time ffl equal numer valu entri point median element second part ptr ffl divid interv ffl min closetoequ size altern advantag abl choos new ffl quickli requir o extra memori repeat permut pointer prefer approach less expens memori match transvers algorithm better sinc mc alway search column order facilit construct matric ffl first sort entri column matrix decreas absolut valu spars matrix well bound number entri column done on time matrix ffl implicitli defin array len length n lenj point first entri column j matrix whose valu smaller ffl posit immedi end column j matrix ffl sinc entri column ffl contigu repeat modif ffl algorithm bt redefin matrix ffl correspond simpli chang pointer array len actual choic ffl phase algorithm bt done select matrix ffl min entri absolut valu x ffl min column ffl min search entri found ffl set absolut valu search cost on time sinc column direct access entri absolut valu ffl min ffl max pointer array len mention befor choos ffl care speed algorithm bt consider therefor instead choos arbitrari entri matrix defin ffl choos number k say entri lie ffl min ffl max random sort absolut valu set ffl absolut valu median element implement use set matric use experi unsymmetr matric taken spars matrix collect duff grime lewi davi tabl show order number entri time comput bottleneck transvers matrix matric initi row column scale mean matrix scale maximum entri row column one machin use experi follow section mhz sun ultra algorithm implement fortran matrix n time sec goodwin oneton tabl time transvers algorithm order matrix n number entri techniqu commonli use speed sort algorithm like quicksort solut equat direct method mcspars parallel direct unsymmetr linear system solver develop gallivan marsolf wijshoff use reorder identifi priori larg medium grain parallel reorder matrix border block triangular form order use initi nonsymmetr order enhanc numer properti factor subsequ symmetr order use obtain border block triangular matrix wijshoff nonsymmetr order effect modifi version mc search phase cheap assign augment path entri ij select absolut valu within bound ff ff largest entri column j instead take first entri found search satisfi threshold algorithm scan column entri largest absolut valu algorithm start initi bound ff maximum transvers cannot found valu column examin determin maximum valu bound would allow assign take place column new bound set minimum bound estim fail column algorithm restart bound less preset limit tri transvers still found bound ignor code find transvers terminolog assum initi column scale matrix mean maximum transvers size n comput matrix ff multifront approach duff reid later develop amestoy duff analysi perform structur obtain order reduc fillin assumpt diagon entri numer suitabl pivot numer factor guid assembl tree node tree step gaussian elimin perform dens submatrix whose schur complement pass parent node tree assembl or sum schur complement children origin entri matrix if howev numer consider prevent us choos pivot algorithm proceed schur complement pass parent larger usual work storag need effect factor logic first permut matrix larg entri diagon comput order reduc fillin tri reduc number pivot delay way therebi reduc storag work factor show effect tabl see even use mc benefici although bt algorithm show signific gain sometim use mpd caus signific reduct number delay pivot add numer accuraci solut sometim slightli improv permut and case good solut found matrix transvers algorithm use none mc bt mpd goodwin tabl number delay pivot factor ma indic requir real work space larger million word of byte tabl show effect number entri factor mirror result tabl show benefit transvers select algorithm effect seen tabl sometim observ dramat reduct time solut preced permut matrix transvers algorithm use none mc bt mpd oneton goodwin tabl number entri factor ma addit abl select pivot chosen analysi phase multifront code better matric whose structur symmetr nearli so transvers order case increas symmetri result reorder matrix particularli appar spars system mani zero diagon case reduct number offdiagon entri reorder matrix influenc symmetri notic that respect sophist transvers algorithm may actual caus problem sinc could reorder symmetr structur matrix zerofre diagon wherea mc leav unchang matrix transvers algorithm use none mc bt mpd goodwin tabl time in second sun ultra solut system solut equat iter method larg famili iter method socal stationari method iter scheme split a chosen system easi solv invert written ae spectral radiu that jjm converg iter x k solut gamma b guarante arbitrari x gener smaller jjm faster converg thu algorithm make entri larg n small benefici simpl method type jacobi method correspond split denot diagon l strictli lower triangular part u strictli upper triangular part matrix a howev particularli current power method conduct experi use block cimmino implement arioli duff noaill ruiz equival use block jacobi algorithm normal equat implement subproblem correspond block row matrix solv direct method similar consid previou section similar reason benefici increas magnitud diagon entri unsymmetr permut show effect tabl see number iter solut problem mahinda converg toler set gamma transvers select algorithm follow revers cuthil mckee algorithm obtain block tridiagon form matrix partit block row acceler use block cg algorithm block size acceler block row none mc bt mpd tabl number iter block cimmino algorithm mahinda everi case use transvers algorithm acceler converg method sometim signific amount howev use algorithm increas size diagon entri usual help converg further converg block cimmino depend angl subspac strongli influenc diagon entri precondit section consid effect use permut induc transvers algorithm prior solv system use precondit iter method consid precondit correspond incomplet factor form ilu ilu ilut studi converg iter method gmre bicgstab qmr refer reader standard text like saad descript discuss method sinc diagon permut matrix more domin diagon origin matrix would hope permut would enhanc converg show result run tabl maximum number iter set converg toler gamma quit clear reorder signific effect converg precondit iter method case method converg permut other greatli improv converg would appear result tabl experi perform sophist mpd transvers algorithm gener result greatest reduct number iter although best method depend overal solut time includ transvers select algorithm conclus futur work describ algorithm obtain transvers larg entri indic implement show result programm written effici perform clear reorder matric permut matrix larg diagon signific effect solv spars system wide rang techniqu somewhat less clear univers strategi best case thu start experi combin strategi mention paper and particularli block cimmino approach combin unsymmetr order symmetr order one exampl plan studi combin symmetr tpablo order benzi choi szyld possibl extend techniqu order tri increas size diagon also immedi sub super diagon use result tridiagon part matrix precondition one also build criteria weight obtain bipartit match exampl incorpor markowitz count sparsiti would also preserv choic result diagon pivot final notic experi one effect transvers select increas structur symmetri unsymmetr matric thu explor use order techniqu directli attempt increas structur symmetri acknowledg grate patrick amestoy enseeiht michel benzi cerfac daniel ruiz enseeiht assist experi direct method precondit iter method block iter method respect would also like thank alex pothen earli discuss bottleneck transvers john reid jennif scott comment draft paper matrix method transvers algorithm bicgstab qmr qmr mahinda west tabl number iter requir precondit iter method r threshold order precondit nonsymmetr problem design use frontal scheme solv spars unsymmetr equat user guid harwellbo spars matrix collect releas i product line assign problem iter method spars linear system symmetr order unsymmetr spars matric tr ctr iain s duff jennif a scott stabil border block diagon form parallel spars solver parallel comput v n p marchapril kai shen parallel spars lu factor secondclass messag pass platform proceed th annual intern confer supercomput june cambridg massachusett olaf schenk klau grtner twolevel dynam schedul pardiso improv scalabl share memori multiprocess system parallel comput v n p februari olaf schenk andrea wchter michael hagemann matchingbas preprocess algorithm solut saddlepoint problem largescal nonconvex interiorpoint optim comput optim applic v n p april olaf schenk klau grtner solv unsymmetr spars system linear equat pardiso futur gener comput system v n p april patrick r amestoy iain s duff jeanyv lexcel xiaoy s li analysi comparison two gener spars solver distribut memori comput acm transact mathemat softwar tom v n p decemb kai shen parallel spars lu factor differ messag pass platform journal parallel distribut comput v n p novemb xiaoy s li overview superlu algorithm implement user interfac acm transact mathemat softwar tom v n p septemb anshul gupta recent advanc direct method solv unsymmetr spars system linear equat acm transact mathemat softwar tom v n p septemb anwar hussein ke chen fast comput method locat fold point power flow equat journal comput appli mathemat v n p march jack dongarra victor eijkhout piotr uszczek recurs approach spars matrix lu factor scientif program v n p januari belur v dasarathi editori ident fusion unsupervis environ inform fusion v n p june xiaoy s li jame w demmel superlu_dist scalabl distributedmemori spars direct solver unsymmetr linear system acm transact mathemat softwar tom v n p june nichola i m gould jennif a scott yifan hu numer evalu spars direct solver solut larg spars symmetr linear system equat acm transact mathemat softwar tom v n pe june michel benzi precondit techniqu larg linear system survey journal comput physic v n p novemb