t communicationbas prevent useless checkpoint distribut comput a useless checkpoint local checkpoint cannot part consist global checkpoint paper address follow problem given set process take basic local checkpoint independ unknown way problem design communicationinduc checkpoint protocol direct process take addit local forc checkpoint ensur local checkpoint useless paper first prove two properti relat integ timestamp associ local checkpoint first properti necessari suffici condit timestamp must satisfi checkpoint useless second properti provid easi timestampbas determin consist global checkpoint then gener communicationinduc checkpoint protocol propos protocol deriv two previou properti actual defin famili timestampbas communicationinduc checkpoint protocol shown sever exist checkpoint protocol problem particular instanc gener protocol design gener protocol motiv use communicationinduc checkpoint protocol consist global checkpointbas distribut applic detect stabl unstabl properti determin distribut breakpoint b introduct local checkpoint snapshot local state process global checkpoint set local checkpoint one process consist global checkpoint global checkpoint messag sent process local checkpoint receiv anoth process local checkpoint so consist global checkpoint strongli depend flow messag exchang process determin consist global checkpoint fundament problem distribut comput aris mani applic detect stabl properti determin breakpoint detect unstabl properti rollback recoveri upon failur occur etc process independ take local checkpoint risk consist global checkpoint ever form except first one compos initi state caus wellknown unbound domino effect even consist global checkpoint form still possibl local checkpoint never includ consist global checkpoint local checkpoint call useless prevent useless checkpoint thu safe prevent domino effect coordin take local checkpoint requir famili coordin protocol process use addit control messag synchron checkpoint activ addit synchron may result reduc process autonomi degrad perform underli applic drawback given rise develop famili communicationinduc checkpoint protocol famili coordin achiev piggyback control inform applic messag control messag synchron ad applic precis process take local checkpoint independ call basic checkpoint protocol direct take addit local checkpoint call forc checkpoint ensur local checkpoint becom useless take forc checkpoint messag deliveri safe strategi prevent useless checkpoint ineffici given set basic checkpoint fewer forc checkpoint taken communicationinduc checkpoint protocol better pro tocol process decid whether take forc checkpoint messag receiv evalu predic predic base local control variabl receiv process control valu carri messag local control variabl manag process code causal depend appear past distinct semant control variabl distinct definit predic give rise differ protocol paper present new communicationinduc checkpoint protocol take forc checkpoint possibl ensur local checkpoint useless protocol base zpath and zcycl theori introduc netxer xu show useless checkpoint exactli correspond exist zcycl distribut comput model level protocol prevent zcycl oper level sequenc number lamport timestamp associ local checkpoint moreov messag piggyback integ lamport clock valu vector integ checkpoint sequenc number two boolean vector the size vector n number process protocol effici past dominofre communicationinduc checkpoint protocol interest featur propos protocol follow one local checkpoint a easi determin consist global checkpoint belong moreov propos protocol enjoy nice gener properti reduc size control inform even elimin altogeth protocol exampl detect unstabl properti conjunct local predic process take basic checkpoint time local predic becom true so manivannansingh classif protocol belong zcf zcyclefre famili consid number forc local checkpoint taken process jm helari a mostefaoui r netzer m raynal reduc alreadi known protocol result protocol offer gener effici framework famili dominofre communicationinduc checkpoint protocol paper divid seven section section present model distribut comput provid definit consist global checkpoint defin zpath section present design principl protocol section describ first version protocol prove main properti name given local checkpoint c easi determin consist global checkpoint c belong section reduc size data structur use protocol present improv version it final section discuss protocol show reduc exist protocol reduc control inform section conclud paper distribut comput checkpoint zpath distribut comput distribut comput consist finit set p n process fp commun synchron exchang messag assum order pair process connect asynchron reliabl direct logic channel whose transmiss delay unpredict finit note channel requir fifo process run differ processor processor share common memori bound rel speed also fail accord failstop model process execut intern send deliveri statement intern statement involv commun p execut statement sendm put messag channel p p j p execut statement deliverm block least one messag direct p arriv messag withdrawn one input channel deliv p execut intern send deliveri statement model intern send deliveri event process distribut comput sequenti word process p produc sequenc event e sequenc finit infinit everi process p initi local state denot oe i local state oe is s result execut sequenc appli intial state oe i precis event e is move p local state oe isgamma local state oe is definit say e ix belong oe js sometim denot let h set event produc distribut comput comput model partial order set b hb denot wellknown lamport happenedbefor relat local global checkpoint local checkpoint local checkpoint c record state snapshot process everi local state necessarili record local checkpoint set local checkpoint subset set local state definit commun checkpoint pattern pair b h distribut comput c b h set local checkpoint defin b c ix repres xth local checkpoint process p local checkpoint c ix correspond local state oe is x s figur show exampl checkpoint commun assum process send messag itself irisa communicationbas prevent useless checkpoint distribut comput pattern assum process p take initi local checkpoint c i correspond oe i event checkpoint eventu taken ik ik ik j figur checkpoint commun pattern messag sent process p process p j call orphan respect order pair local checkpoint c ix c jy iff deliveri belong c jy deliverm c jy send event belong c ix sendm c ix order pair local checkpoint consist iff orphan messag respect pair exampl figur show pair c k c j consist pair c i c j inconsist becaus orphan messag global checkpoint global checkpoint set local checkpoint one process exampl two global checkpoint depict figur definit global checkpoint consist iff pair local checkpoint consist exampl figur show fc i c consist global checkpoint due inconsist pair c i c j global checkpoint fc consist zpath zcycl sequenc event occur p c call checkpoint interv denot ix see figur zpath notion introduc first time netzer xu gener notion causal path messag defin lamport happenedbefor relat precis definit zpath exist local checkpoint local checkpoint b preced b process sequenc messag m exist preced sendm process erlier interv sendm i deliverym q preced b process figur zpath c k c i m two zpath c i c k definit zpath m two consecut messag ff ff form zpattern figur use usual spacetim diagram local checkpoint indic black rectangular box local state explicitli indic jm helari a mostefaoui r netzer m raynal figur see m two zpattern definit zpath causal iff includ zpattern ie deliveri event messag except last occur send event next messag sequenc zpath noncaus iff causal zpath one messag trivial causal everi noncaus zpath concaten shorter causal zpath figur m noncaus zpath concaten causal zpath m m definit zpath local checkpoint c ix local checkpoint c ix call zcycl we say involv local checkpoint c ix zpath m zcycl involv local checkpoint c k observ zcycl alway includ zpattern useless checkpoint definit local checkpoint c ix useless iff cannot belong consist global checkpoint follow import character useless checkpoint state theorem netzerxu local checkpoint c ix useless iff involv zcycl exampl figur c k useless zpath m zcycl includ c k includ zpattern m interest reader find proof theorem design principl protocol set c b checkpoint taken execut comput b h compos basic checkpoint forc checkpoint indic introduct basic checkpoint taken depend applic such properti detect protocol rollbackrecoveri protocol forc checkpoint taken communicationinduc checkpoint protocol ensur checkpoint useless aim protocol wish design keep low number forc checkpoint protocol work evalu predic upon everi messag recept possibl take forc checkpoint henc name communicationinduc checkpoint pro tocol predic base past knowledg commun checkpoint pattern forc checkpoint taken prevent zcycl form basic idea checkpoint timestamp mechan checkpoint c let us associ timestamp denot ct consid follow domain timestamp valu set posit integ protocol base follow theorem theorem for pair checkpoint c jy c kz zpath c jy there zcycl irisa communicationbas prevent useless checkpoint distribut comput proof part suppos zcycl exist c ix c ix zcycl zpath c ix c ix assumpt theorem would impli c ix t c ix t part zcycl zgraph whose vertic local checkpoint path zpath partial order follow topolog sort local checkpoint requir properti theorem idea underli theorem that design protocol manag timestamp take forc checkpoint way timestamp alway increas along zpath zcycl possibl form checkpoint useless assum process p local logic clock lc manag follow classic way ffl take basic forc checkpoint p increas local clock and associ new valu checkpoint ffl everi messag timestamp valu sender clock let mt timestamp associ m ffl process p receiv messag updat local clock lc maxlc follow classic mechan that causal zpath c jy c kz c jy t c kz t examin case noncaus zpath checkpoint checkpoint given previou timestamp mechan let us consid situat depict figur a c jy local checkpoint taken p j send c kz first checkpoint p k taken deliveri send deliveri belong interv constitut zpattern c jy c kz ckz a b figur must p take forc checkpoint two case occur case c jy henc zpattern m consist assumpt theorem case safe strategi prevent zcycl format consist direct p take forc checkpoint c ix deliv as shown figur b break longer zpattern strategi implement follow way process p manag boolean array sent n order know whether recept messag creat zpattern jm helari a mostefaoui r netzer m raynal sent k valu true iff p sent messag p k sinc last checkpoint moreov manag array integ min n min k keep timestamp first messag sent p k sinc p s last checkpoint condit express sent take forc checkpoint c true next section show safe strategi improv sharpen predic caus fewer forc checkpoint taken reduc number forc checkpoint previou strategi util inform p could concern valu local clock process k k n let us denot cl k valu p k s local clock perceiv p p obtain knowledg classic piggyback techniqu shown section obvious cl percept local clock p approxim cl k lc k consid situat depict figur a messag arriv p j creat zpattern messag sent p k follow properti hold cl zpattern m consist assumpt theorem let us consid properti p case carri valu lc j sent first relat c jy necessarili hold receiv so properti p violat if receiv t cl k cl k c kz t follow prevent format zpattern m would violat properti p and consequ could possibl inconsist assumpt theorem protocol requir p take forc checkpoint deliv applic t cl k cl question determin valu cl k approxim cl k refer let us examin two possibl case ckz ckz a b figur cl k lower bound c kz t i valu cl k brought p causal zpath start p k c kz situat illustr figur more precis cl k brought p figur a delta m figur b case cl consequ p take forc checkpoint t cl k recal ckz first checkpoint taken pk deliveri irisa communicationbas prevent useless checkpoint distribut comput ii valu cl k brought p causal zpath start p k c kz situat illustr figur more precis relev causal zpath figur a figur b note figur redrawn indic figur causal zpath bring p last valu p k s local clock delta m case cl k c kz t exactli correspond pattern describ figur so problem p recogn pattern take forc checkpoint occur let c predic describ pattern occurr a b figur cl k lower bound c kz t ckz figur causal zpath discuss follow previou condit c which p test know take forc checkpoint receiv messag refin c sent k m cl next section show express predic appropri data structur evalu onlin process first version protocol section present first version protocol directli obtain previou analysi then version theorem section provid less costli version protocol data structur addit array sent n min n previuosli describ everi process p maintain follow data structur array clock process p manag array clock n follow mean clock highest valu lc k known p note clock i lc requir lc follow array initi manag note clock vector contain lamport timestamp jm helari a mostefaoui r netzer m raynal ffl take basic forc checkpoint p increment clock i definit lc send messag m current valu clock append let mclock receiv p j perform follow updat lamport clock statement updat clock use data structur p receiv messag cl thu element c rewritten sent k next two array provid way evalu c array ckpt array vector clock count mani checkpoint taken process so ckpt number checkpoint taken p k p s knowledg vector clock manag usual way let mckpt valu append sender p ie valu array ckpt send time array taken boolean array use conjunct ckpt evalu c follow mean taken k true iff causal zpath last checkpoint p k known p next checkpoint p causal zpath includ checkpoint manag follow way p take checkpoint set true entri except ith one taken i alway remain ffl send messag p append current valu taken let mtaken valu ffl receiv m p updat taken follow way order maintain mean docas data structur condit c express follow way consid figur first part condit c state causal zpath name start c ix arriv p c ix second part c indic process taken checkpoint along causal zpath irisa communicationbas prevent useless checkpoint distribut comput protocol protocol execut process p describ figur s describ initi statement execut p send messag statement execut receiv messag respect procedur take checkpoint call time p take checkpoint basic forc indic previous basic checkpoint taken part protocol procedur take checkpoint k sent k fals enddo k min k enddo clock save current local state copi clock i ix checkpoint c ix initi k clock k ckpt k enddo taken i fals take checkpoint send messag pk sent k sent k true min k clock i endif receiv m clock ckpt taken p j mclockj lamport timestamp ie mt sent k take checkpoint forc checkpoint clock updat scalar clock lc clock case case figur first version protocol properti protocol follow theorem show consist global checkpoint c associ lamport timestamp a follow that given local checkpoint c ix timestamp ie c ix easili associ consist global checkpoint belong theorem let lamport timestamp a let c global checkpoint c x defin follow way k c kx k last checkpoint p k c kx k c consist global checkpoint proof suppos c consist so c contain pair checkpoint c ix c kz exist messag sent p p k sendm jm helari a mostefaoui r netzer m raynal assumpt c kz t p construct timestamp c ix consequ ckz ix figur messag orphan respect c ix c kz let c ix first checkpoint taken p c ix let c kz gamma last checkpoint taken c kz see figur assumpt c ix t a assumpt combin p give p moreov assumpt combin p give c kz t c ix p ckz ckz b a ikz figur causal noncaus zpath p impli two consecut local checkpoint c ix c ix clock p name clock i increment least two as assumpt local checkpoint taken p c ix c ix increment occur if interv ix p receiv least one messag whose timestamp equal c ix t gamma let first messag deliverm figur a c kz contradict p thu situat depict figur b arriv have ffl becaus sent ffl min from p p j sender t conclud clockj min k p recal condit c test p know take forc checkpoint receiv sent k arriv shown p p first two line condit satisfi show case analysi checkpoint necessarili taken p c ix c ix contradict hypothesi ffl case clock case have receiv maxclock t combin p get maxclock irisa communicationbas prevent useless checkpoint distribut comput p p p follow p take checkpoint c ix c ix contradict hypothesi ffl case clock exist causal zpath c kz c ix the zpath figur b case receiv m p p p p follow p take checkpoint c ix c ix contradict hypothesi ffl case clock case causal zpath start c kz arriv p c ix thi situat describ figur a let messag end receiv p note messag receiv p send if case would c kz recept see discuss section sent receiv becaus lamport clock strictli increas along causal zpath name m checkpoint taken pattern describ figur detect condit c follow p taken checkpoint c ix c ix receiv contradict hypothesi theorem improv version protocol section first prove invari protocol then invari use simplifi condit c and consequ deriv less costli version protocol invari theorem follow assert invari sent k proof let k two given process number must show properti ii sent k execut p end show properti hold p initi base case and that properti hold event still hold execut induct event consid modifi valu variabl involv properti name take checkpoint send recept messag denot take checkpoint s s figur respect remind that lamport clock properti relat clock i clock k alway true and consequ messag sent p j mclockj mclockk event trigger action modifi valu variabl x denot x valu event x valu event jm helari a mostefaoui r netzer m raynal base case sent k initi valu fals properti initi hold induct take checkpoint properti hold begin checkpoint interv sinc array sent reset fals send messag p p k note array clock modifi s ffl sent k valu fals first send p k then s min thu s min k clock k clock i s follow hold s ffl sent k valu true not first send p k array clock min modifi send follow still hold s recept p messag sent p j modifi valu clock i clock k arriv forc p take checkpoint ii trivial hold s as sent reset fals so examin case arriv forc p take checkpoint mean condit c protocol satisfi ie sent k fals s s modifi variabl ii still hold s thu examin case one two last term satisfi note impli eas proof use follow notat ck follow assumpt ag hold event ck ck properti lamport clock mck properti lamport clock checkpoint taken must prove relat r c remain true s two case consid accord two term assumpt g irisa communicationbas prevent useless checkpoint distribut comput first case g mcj a get c m thu c mcj so b reduc c c get maxck m maxck m thu use success a e get maxck m conclud replac b c mcj valu defin a respect get due mcj maxck mck g reduc to due c reduc c theorem simplifi condit condit use process p decid whether take forc checkpoint receiv messag m is sent k mclockj min k follow theorem show condit simplifi theorem sent k c j d proof let us consid follow set predic j sent k ffl first show c condit c introduc section character situat depict figur messag sent p j termin causal zpath m delta delta deltam that start arriv p c ix becaus along zpath process p l taken checkpoint c lz becaus mtakeni true lamport timestamp decreas increas checkpoint taken have jm helari a mostefaoui r netzer m raynal figur c character follow that c sent k min k mclockj previou notat ffl use classic logic rule have definit c definit d becaus due invari i e c becaus e independ definit d theorem reduc size data structur theorem show array min n use condit consequ suppress finer analysi show array clock n replac singl integ lc plu boolean array greater n come follow two observ consid see that ffl element array clock use clock i ie lamport clock p ffl mclockj mclockk alway true remind mclockj highest clock valu known p j send m follow subcondit mclockj mclockk equival mclockj mclockk follow that process p array clock n replac singl lamport clock lc whose valu equal clock i plu boolean array greater n whose mean new data structur condit rewritten consequ messag piggyback lamport clock valu boolean array instead array lamport clock valu result protocol describ figur updat integ array clock replac updat boolean array greater process manag clock n checkpoint sequenc number n boolean messag piggyback boolean irisa communicationbas prevent useless checkpoint distribut comput procedur take checkpoint k sent k fals enddo save current local state copi lc ix checkpoint c ix initi k ckpt k enddo taken i fals greater i fals take checkpoint send messag pk sent k true receiv m lc greaterckpt taken p j mlc lamport timestamp take checkpoint forc checkpoint case case docas enddocas figur final protocol discuss section discuss protocol show provid gener framework exist protocol obtain ffl let us suppress data structur except array sent n replac singl boolean sent follow mean sent sent k ie sent true iff messag sent p sinc last checkpoint protocol becom drastic simplifi reduc wellknown russel protocol shown figur russel protocol character follow properti consid deliv send checkpoint event behavior process correspond follow regular languag deliv send checkpoint word deliv event follow immedi send event cours protocol may take forc checkpoint and never less propos protocol ffl anoth protocol obtain consid subset data structur exampl elimin array ckpt n taken n obtain protocol character follow condit c protocol adapt context mobil comput jm helari a mostefaoui r netzer m raynal procedur take checkpoint sent fals enddo save current local state local checkpoint initi take checkpoint send messag pk sent true sendm pk receiv m p j sent take checkpoint forc checkpoint endif figur russel protocol may take forc checkpoint and never less propos protocol requir messag piggyback one integ name mlc the valu lc j time p j sent m ffl simplifi protocol elimin array sent n get follow condit c simplic result protocol shown figur variant protocol describ quasisynchron version propos manivannan singhal procedur take checkpoint save current local state copi lc initi take checkpoint send messag pk receiv m lc p j take checkpoint forc checkpoint figur variant manivannansingh quasisynchron protocol origin quasisynchron protocol propos differ variant follow way process take basic checkpoint accord local logic period s lc updat done part call take checkpoint within procedur take checkpoint variabl lc increas checkpoint basic irisa communicationbas prevent useless checkpoint distribut comput new protocol design consid simplif basic protocol discuss show tradeoff number forc checkpoint taken size control inform piggyback applic messag gener smaller control inform greater number forc checkpoint rais interest question propos protocol optim one ie communicationinduc checkpoint protocol that without priori knowledg basic checkpoint taken take fewest number forc checkpoint ensur checkpoint useless optim question remain open problem communicationinduc checkpoint protocol use heurist approach prevent useless checkpoint protocol condit test messag recept safe sens basic checkpoint may remain useless protocol famili describ use experiment result author show protocol reduc rollback distanc less one checkpoint interv per process number forc checkpoint number basic checkpoint propos protocol encompass heuristicbas protocol easi show heurist use weaken condit use propos protocol conclus useless checkpoint local checkpoint cannot part consist global checkpoint paper address follow import problem given set process take basic local checkpoint independ unknown way design communicationinduc checkpoint protocol direct process take as possibl addit local forc checkpoint ensur local checkpoint useless protocol gener effici also shown take fewer forc checkpoint exist protocol solv problem improv obtain use control inform compos boolean n number process also shown size control inform reduc or even elimin price addit forc checkpoint so protocol easili tune desir control informationoverhead perform tradeoff design protocol motiv wide use communicationinduc checkpoint protocol applic requir consist global checkpoint detect stabl unstabl properti rollbackrecoveri determin distribut breakpoint r checkpoint distribut applic mobil comput independ checkpoint concurr rollback recoveri optimist approach distribut dominoeffect free recoveri algorithm determin global state distribut sy tem consist detect global predic distribut checkpoint detect messagepass program survey rollbackrecoveri protocol messagepass system logic time distribut comput system proc th ieee int detect strong unstabl predic distribut program detect stabl properti distribut ap plicat effici distribut detect conjunct local predic asynchron comput scheme coordin execut independ design recover distribut process checkpoint rollbackrecoveri distribut system inform process letter low overhead recoveri techniqu use quasisynchron check point breakpoint halt distribut program necessari suffici condit consist global snapshot system structur softwar faulttoler state restor system commun process lazi checkpoint coordin bound rollback propag consist global checkpoint contain given set local checkpoint adapt independ checkpoint reduc rollback propag tr checkpoint rollbackrecoveri distribut system distribut snapshot detect stabl properti distribut applic logic time distribut comput system consist detect global predic necessari suffici condit consist global snapshot distribut snapshot unifi framework specif runtim detect dynam properti distribut comput adapt recoveri mobil environ detect strong unstabl predic distribut program distribut breakpoint detect messagepass program consist global checkpoint contain given set local checkpoint theoret analysi communicationinduc checkpoint protocol rollbackdepend trackabl rollbackdepend trackabl evalu dominofre communicationinduc checkpoint protocol time clock order event distribut system checkpoint distribut applic mobil comput communicationinduc determin consist snapshot onthefli detect conjunct local predic distribut comput lowoverhead recoveri techniqu use quasisynchron checkpoint ctr jiang wu yi luo d manivannan enhanc modelbas checkpoint protocol proceed th confer proceed th iast intern multiconfer parallel distribut comput network p februari innsbruck austria gyungleen park hee youn yong new approach high perform comput system variou checkpoint scheme journal supercomput v n p juli emmanuel anceaum jeanmichel hlari michel raynal track immedi predecessor distribut comput proceed fourteenth annual acm symposium parallel algorithm architectur august winnipeg manitoba canada adnan agbaria hagit attiya roy friedman roman vitenberg quantifi rollback propag distribut checkpoint journal parallel distribut comput v n p march j m hlari a mostefaoui m raynal interv consist asynchron distribut comput journal comput system scienc v n p march b gupta s k banerje rollforward recoveri scheme solv problem coast forward distribut system acm sigop oper system review v n p juli jichiang tsai properti rdt communicationinduc checkpoint protocol ieee transact parallel distribut system v n p august