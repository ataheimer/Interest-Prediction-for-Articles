t find separ cut planar graph within twice optim a factor approxim algorithm problem find minimumcost bbalanc cut planar graph present b leq over assum vertex weight given unari case binari vertex weight pseudoapproxim algorithm present problem consider practic signific especi vlsi designth natur algorithm problem accumul sparsest cut iter one main idea give definit sparsiti call netspars reflect precis cost cut accumul algorithm howev definit precis believ nphard comput minimumnetspars cut even planar graph rest machineri built work definit still make comput feasibl toward end use sever idea work rao proceed th annual ieee symposium foundat comput scienc pp proceed th annual acm symposium theori comput pp park phillip proceed th annual acm symposium theori comput pp b introduct given undirect graph edg cost vertex weight balanc cut ratio weight vertic smaller side total weight graph cut balanc least b call bbalanc cut balanc cut given special name separ paper present factor approxim algorithm find minimumcost bbalanc cut planar graph b assum vertex weight given unari also give exampl show analysi tight case binari vertex weight use scale give pseudoapproxim algorithm ff b find ffbalanc cut cost within twice cost optim bbalanc cut b time polynomi n ff previou best approxim guarante known bbalanc cut planar graph olog n due rao gener graph approxim algorithm known problem break graph small size piec remov small set edg vertic attract much attent sinc semin work lipton tarjan open possibl divideandconqu strategi solut sever problem graph small balanc cut numer applic see exampl sever maxplanckinstitut fur informatik im stadtwald saarbrucken germani depart comput scienc engin indian institut technolog new delhi india z colleg comput georgia institut technolog atlanta ga support nsf grant ccr applic pertain planar graph import one circuit partit vlsi design sparsiti cut defin ratio cost cut weight smaller side cut minimum sparsiti graph call sparsest cut rao gave approxim algorithm problem find sparsest cut planar graph recent park phillip show problem polynomi time solvabl sparsest cut limit multicommod flow way mincut limit maxflow leighton rao deriv approxim maxflow mincut theorem uniform multicommod flow process gave olog napproxim algorithm find sparsest cut gener graph find remov cut iter one show find planar gener graph b balanc cut within o factor olog n factor optim b balanc cut instanc use parkphillip algorithm sparsest cut planar graph approach give balanc cut within time cost best balanc cut planar graph notic howev true approxim algorithm sinc best balanc cut may much higher cost best balanc cut iter algorithm shortcom due lead good true approxim algorithm illustr via exampl section one main idea give definit sparsiti call netspars overcom shortcom notion netcost definit netspars base reflect precis cost cut accumul iter inde precis directli use comput believ comput sparsest cut definit nphard even planar graph rest machineri built work definit still make comput feasibl manag scrape narrowli planar exploit sever way first cut planar graph correspond set cycl dual secondli notion transfer function turn use given planar graph weight face notion use defin function edg graph cycl evalu sum weight face enclos cycl idea use past kasteleyn comput number perfect match planar graph polynomi time kasteleyn defin function gf park phillip first defin function real therebi demonstr full power notion park phillip shown problem find sparsest cut minimum b balanc cut planar graph weakli nphard ie problem nphard vertex weight given binari inde algorithm give find sparsest cut planar graph pseudopolynomi time algorithm consequ algorithm follow p np find sparsest cut planar graph strongli nphard hand known bbalanc cut problem planar graph strongli nphard pseudopolynomi time algorithm the present paper give pseudopolynomi approxim algorithm park phillip leav open question find fulli polynomi approxim scheme sparsest cut planar graph ie vertex weight given binari give algorithm use scale techniqu preliminari e connect undirect graph edg cost function c vertex weight function function defin element univers extend set element obviou manner valu function set sum valu element set let w sum weight vertic g partit s s v defin cut g cut consist edg one end point s set vertic s said connect subgraph induc connect either connect cut s s call simpl cut connect cut s s call bond given set vertic ae v defin cost set cost sum cost edg cut s s weight set s wt sum weight vertic includ s cut s s separ w wt wt w cost separ sum cost edg separ lemma connect graph g exist minimumcost separ s s simpl cut further side connect connect compon weight strictli less w proof let s s minimumcost separ g consid connect compon obtain remov edg separ clearli compon weight strictli larger w compon weight strictli less wthen connect arriv contradict follow first pick two compon edg pick remain one one arbitrari order till accumul weight least w accumul weight exceed wsinc compon weight wthu obtain separ cost strictli less cost separ s s contradict henc least one compon weight wand w two compon compon sinc switch side third compon obtain cheaper separ one compon weight wand wthen separ optimum iff compon form one side cut remain compon side thu s s bond side cut connect compon side weight strictli less w henc alway exist minimumcost separ simpl cut let opt denot set vertic side separ connect overview algorithm let set vertic wt wt sparsiti usual defin quotient cost weight set ie figur graph vertex weight edg cost show minimum sparsiti increas natur approach find good separ repeatedli find set minimum sparsiti remov graph eventu report union remov vertic easi concoct bad exampl approach ensur pick vertic alway come smaller side optim separ therebi ensur minimum sparsiti avail remain graph keep increas illustr figur first cut pick sparsiti wherea last cut sparsiti approach two shortcom remov vertic pick iter deal remain graph subsequ iter assum edg cut found iter pick perman even though may need final cut one main idea give definit sparsiti algorithm suffer either shortcom two set vertic defin netcost respect as netcost netweight respect as netweight thu alreadi pick set vertic netcost s measur extra cost incur netweight s weight ad pick set final defin net sparsiti respect netspars netcost s netweight algorithm pick cut accumul set vertic notion netcost give precis extra cost incur iter precis comput sparsest cut definit turn nphard even planar graph although answer question believ ye inde rest machineri built work definit still make comput feasibl manag scrape let us first show suffici keep pick set minimum netspars consid follow exampl suppos spars set weight wgamma ffl set high sparsiti weight ffl small ffl pick might pick anoth set sparsiti almost weight wgamma ffl henc cost incur would arbitrarili high compar optimum get around difficulti ensur iter set vertic pick total weight accumul strictli w formal let igamma set vertic pick end i th iter t th iter pick set minim minimum netweight among set satisfi condit call set dot denot ffl thu end th iter set vertic pick given augment partial solut iter ever obtain complet solut a separ th iter besid augment partial solut igamma partial solut also augment complet solut ie pick set vertic b find set b correspond find minimumcost separ avoid circular argument restrict b smaller class set bond w wtt call set b box denot notic box set need bond count cost rather netcost done simplifi algorithm analysi exampl show analysi algorithm tight also show count netcost would led improv approxim guarante so iter obtain separ solut report algorithm one minimum cost among separ algorithm call dotbox algorithm follow algorithm dotbox algorithm minsol oe wtt find ffl set b respect ffl set exit minsol minminsol costt end make two remark regard step first conjectur find ffl set nphard procedur find ffl set may alway succeed howev prove fail set found current iter give separ within twice opt second iter might case subset vertic satisfi weight criterion ffl sinc set take total weight accumul w more case dotbox algorithm halt output best separ found far analysi dotbox algorithm first prove properti netcost netweight use analysi definit netcost netweight netcost netcost netweight follow properti also follow definit properti let two set vertic necessarili disjoint netcost netcost netcost ts netweight properti netcost s netcost st s proof figur show edg set properti immedi netcost respect may higher includ cost edg gamma gamma s follow properti immedi figur figur comput netcost s netcost st s edg signifi edg count positiveneg term netcost comput figur comput netcost netcost s netcost s properti let two disjoint set vertic edg them netcost netcost netcost s remark posit real number a b c d min max further let posit real number then lemma netspars ffl increas ie proof sinc set i satisfi weight requir ffl th iter netspars properti netcost netcost netcost netweight use remark give us minnetspars now first inequ must case maxnetspars lemma follow let k first iter connect compon opt meet weight requir lemma proof sinc opt igamma connect compon opt complet contain igamma assumpt none compon satisfi weight requir henc compon meet weight requir ffl henc ffl pick iter netspars compon properti netcost opt sum netcost compon opt true netweight henc compon opt minimum netspars netspars less opt lemma follow two lemma impli netspars ffl pick increas iter k th netspars less netspars opt iter lemma proof establish inequ consid two process first process algorithm pick set vertic j j th step second process pick vertic opt j th step th step pick remain vertic opt let p j set vertic pick second process first j step opt j th step second process pick addit weight netweight p cost netcost p fact second process pick subset first process pick step have netcost netcost p further netweight henc netspars claim follow sinc p j satisfi weight requir ffl j pick ffl claim follow lemma claim impli iter i first process pick vertic lower netspars second process process pick addit weight iter fact alon would impli cost vertic pick first process less cost vertic pick second case true howev fact iter i first process pick larger addit weight second process th iter second process pick enough addit weight accumul total weight strictli larger pick first process sinc wtopt w wtt netspars second process pick vertic th iter maximum over iter i netspars first process pick vertic follow cost vertic pick first process strictli less cost vertic pick second ie consid separ found k th iter ie cut t solut form pick ffl first k step k th step lemma costt figur tight exampl analysi vertex weight edg cost given proof connect compon opt bond k th iter exist connect compon opt say opt j w wtt henc k th step cost costopt j ie lemma know costt henc sinc dotbox algorithm output best separ found have theorem cost separ found dotbox algorithm twice cost opt analysi dotbox algorithm tight run exampl figur pick separ cost almost twice optimum exampl ffl ffl n ffl first iter set c set a separ also one return dotbox algorithm cost henc approxim ratio structur properti solut comput easier definit netcost section prove structur properti solut found dotbox algorithm allow us redefin netcost manner becom comput easier yet analysi previou section continu hold lemma proof contradict assum connect let connect compon three case w set satisfi weight requir ffl i th iter sinc edg vertic netcost respect neg henc netspars a neg contradict lemma cut separ cost costt contradict condit case impli wta w wta w contradict sinc cut a a separ cost costopt thu must case wta w sinc argument impli connect compon weight greater must one connect compon lemma proof contradict assum connect let connect compon rest also denot a b correspond set vertic ffl th iter netcost netcost disjoint set vertic edg them properti netcost netcost netcost further netweight thu either case one a b smaller netspars contradict assumpt ffl els a b netspars contradict minim requir lemma everi iter exist ffl satisfi d connect compon igamma contain edg compon igamma proof set togeth subset igamma also ffl th iter form new ffl merg connect compon edg connect further sinc graph connect everi remain compon igamma edg also connect thu d bond follow definit edg compon sinc everi ffl iter condit lemma restrict search ffl th iter set satisfi condit addit requir d connect compon igamma contain edg compon igamma graph obtain shrink connect compon igamma singl vertex remov selfloop form replac set parallel edg one edg cost equal sum cost edg set find ffl th iter consid set s connect compon igamma split across s s s s bond therefor need look subset v correspond bond g let subset vertic g trap cost respect igamma denot trappedcost igamma s sum cost compon igamma contain s redefin netcost respect igamma netcost trappedcost note subset vertic g netcost new definit least larg previou definit howev crucial netcost ffl set remain unchang lemma edg compon igamma therefor ffl new definit netcost also ffl previou definit analysi dotbox algorithm continu hold onto planar graph know complex comput ffl set suspect nphard even planar graph yet implement dotbox algorithm planar graph use properti cut planar graph show iter algorithm find ffl set fact separ found use set found iter within twice optim thi proven theorem associ cycl set let g planar dual g fix embed g proposit onetoon correspond bond g simpl cycl g proof let s s bond g sinc connect face correspond g adjac edg g correspond s s form simpl cycl convers let c simpl cycl g correspond cut s s g let u v two vertic g side cut s s prove s s bond suffic show path u v g use edg s s emb g g r theta r consid two face g correspond vertic u v pick arbitrari point face instanc point correspond u v sinc c simpl cycl g and henc r theta r continu curv in r theta r connect two point without intersect c consid face g curv visit edg g curv intersect obtain path g connect vertic u v without use edg s s sinc find ffl need consid set s s s bond restrict simpl cycl g furthermor two orient simpl cycl use distinguish two side cut cycl correspond to notat adopt is cycl c direct clockwis associ set face g and henc vertic g enclos c the side includ infinit face said enclos c side contain infinit face said outsid c let g graph obtain g replac undirect edg u v two direct edg u preced discuss exist correspond set vertic s g s s bond direct simpl cycl g transfer function associ cost function c edg g obviou manner edg g assign cost correspond dual edg g thu direct cycl c cc denot sum cost edg along cycl would also like associ function edg g set correspond direct simpl cycl c trappedcost achiev mean transfer function notion transfer function introduc park phillip view extens function given kasteleyn function g defin edg g u notic function c defin symmetr r function vertic g transfer function correspond f antisymmetr function f edg g sum valu f take edg clockwis anticlockwis simpl cycl g equal neg the sum valu f take vertic correspond face enclos cycl transfer function exist everi function defin vertic g comput effici follow follow simpl argument pick span tree g set f zero correspond edg g now add remain edg g order edg ad one face graph complet note edg e ad edg face e complet assign valu f one two direct edg correspond e use clockwis travers face anticlockwis travers sinc valu f face known sinc f sum valu the neg valu clockwis anticlockwis travers face valu f two direct edg correspond e determin note function obtain manner antisymmetr togeth fact edg simpl cycl g written gf sum edg belong face contain cycl impli f desir properti find ffl set recal ffl th iter bond graph g henc restrict search ffl th iter direct simpl cycl g obtain netweight netcost transfer function let two function defin vertic g follow vertic v obtain shrink connect compon igamma equal cost correspond compon igamma remain vertic denot transfer function correspond function relat valu function c direct simpl cycl netcost netweight netspars set correspond cycl let c direct simpl cycl g ae v set correspond it c clockwis netweight trappedcost given valu transfer function c ie netweight trappedcost c anticlockwis valu transfer function w equal neg netweight trappedcost set enclos c which notat henc netweight trappedcost trappedcost recal new definit netcost netcost trappedcost conclud c clockwis netspars anticlockwis c netspars henc simpl direct cycl c know valu transfer function w easi determin netweight netspars correspond set s note orient c determin sign w c sinc w impli c clockwis anticlockwis approach find ffl fix valu w c netspars igamma s minim suggest follow approach find ffl w rang w w comput mincyclew direct simpl cycl minimum direct cycl c w find netspars set correspond cycl set minimum netspars ffl iter howev implement weaker version procedur mincycl follow construct graph h whose vertic tupl kind v vertex g j integ gammanw nw edg g have possibl choic j edg u e shortest path v v w h give shortest cycl among direct cycl g contain v w comput choic v find shortest cycl two question aris neg cycl essenti comput shortest path effici cycl obtain g answer question no interestingli enough thing still work out first tackl second question in theorem first in lemma overcom nonsimpl cycl discuss get problem need better understand structur nonsimpl cycl c c simpl cycl g arbitrarili collect edgedisjoint direct simpl cycl c let s cut in g correspond cycl c side cut smaller netweight further let collect set j one c j c trappedcost gammatrappedcost trappedcost trappedcost figur relationship netweight s w c four case valu transfer function w sum valu cycl c j collect c also cycl c need relat netweight trappedcost j valu transfer function w might either clockwis anticlockwis j might either insid c j outsid c j give us total four differ case relationship netweight trappedcost figur captur succinctli follow trappedcost gammag henc get decomposit rule relat valu function w nonsimpl cycl c netweight trappedcost set induc cycl trappedcost integ key theorem let ffl th iter i direct simpl cycl g correspond it further let c direct cycl report mincyclew c theorem c simpl separ found iter cost delta costopt ie proof sinc c direct cycl among cycl claim follow c clockwis ie w c netcost c anticlockwis ie w c netcost substitut w c c decomposit rule get gammaz delta costt trappedcost netcost z x c clockwis x prove exist j meet weight requir cost cost ie w wtt netcost assum contradict exist follow observ costnetcost set j immedi observ netweight netcost impli netcost netcost observ netweight netspars henc netcost two observ follow observ set j nonneg netcost ie netcost idea behind obtain contradict follow everi integr choic z use equat provid lower bound total netweight set j equat provid upper bound total netcost set j s use observ costnetcost set j argu way set larg total netweight littl total netcost shall consid case depend upon whether z positivenegativezero equat impli netcost trappedcost netcost equat netweight netweight sinc netcost set nonneg observ set netcost netcost d turn impli everi set netweight strictli less w gamma wtt thu everi set meet weight requir ffl sinc netcost everi set nonneg remark appli two inequ impli either exist j lower netspars everi set netspars sum netweight set equal netweight first set lead contradict sinc everi set satisfi weight requir ffl ffl iter second set turn contradict minim requir denot collect set j yield netcost trappedcost trappedcost second inequ follow fact set nonneg netcost shall develop contradict show cost set gamma left hand side inequ lower bound total netweight set gamma obtain equat follow netweight cheapest way pick set netweight least zw gamma wtt netweight set j netweight pick netspars least netspars hand observ say could pick set larg netweight cost littl costt netcost set netweight cost pick larg set could small netcost netcost netcost netweight netspars last inequ follow fact sparsityt turn consequ lemma thu cheapest possibl way pick set pick set netweight w gammawtt incur cost littl costt netcost set pick sinc need pick netweight least zw gamma wtt would pick least z gamma set cost incur least netcost netcost last inequ follow fact z henc howev contradict upper bound sum cost set gamma deriv begin case denot collect set j equat yield netcost trappedcost netcost total netweight set bound use equat follow netweight netweight last inequ follow fact netweight nonneg cheapest way pick set netweight least gammazw gamma wtt observ set j netweight less w pick netspars least netspars hand observ say could pick set netweight larg w gamma wtt igamma netcost strictli larger netcost netcost netcost netweight netspars cheapest possibl way pick set pick set netweight w gammawtt incur netcost strictli larger netcost set pick sinc need pick netweight least gammazw gamma wtt igamma pick least gammaz set sinc z gamma total netcost set strictli larger netcost contradict upper bound deriv begin case thu establish exist set j meet weight requir cost costt further j correspond direct simpl cycl g procedur find return set cost less cost set meet weight requir correspond direct simpl cycl g henc therefor last inequ follow lemma fact k gamma w rang w suffic find g direct cycl not necessarili simpl minimum among direct cycl c w shortest cycl simpl discard cycl consid w purpos comput ffl process discard cycl theorem separ found iter within twice optimum els obtain simpl cycl c w set correspond cycl ffl final deal case neg cycl h neg cycl h correspond cycl c g w lemma c cycl g w separ found iter cost delta costopt proof proof lemma along line theorem decompos c collect c direct simpl cycl c side cycl smaller netweight let collect set j one c j c use decomposit rule gammaz delta costt trappedcost contradict assum everi j satisfi weight requir cost costt observ everi set j nonneg netcost henc equat yield z trappedcost trappedcost impli z lower bound total netweight set gamma obtain use equat netweight beyond point argument almost ident case z proof theorem contradict assumpt everi set j meet weight requir cost costt proof theorem pick iter cost costt henc cost separ output lemma need comput shortest path graph h neg cycl find set use rao algorithm find set let weight function vertic g th iter b bbalanc bond g weight vertic given w find need find minimumcost simpl cycl g correspond bbalanc bond g rao give algorithm find minimum cost bbalanc connect circuit g connect circuit g set cycl g connect acycl set path intuit connect circuit view simpl cycl pinch portion correspond path cost connect circuit defin cost close walk goe pinch portion twice cycl onc connect circuit g defin simpl cut g vertic correspond face includ cycl connect circuit form one side cut connectedcircuit bbalanc cut correspond bbalanc note cost cut defin connect circuit sum cost cycl it henc definit cost connect circuit upper bound cost underli cut two equal connect circuit simpl cycl notic realli need find minimumcost bbalanc bond g cut bbalanc cost minimumcost bbalanc bond serv purpos henc use rao algorithm find total time taken rao algorithm obtain optim bbalanc connect circuit cut on w run time clearli algorithm termin n iter run time iter domin time find ffl iter comput ffl involv on singl sourc shortest path comput graph on w vertic on w edg edg length may neg requir on w log nw use johnson extens allpair shortest path algorithm floyd warshal henc total run time dotbox algorithm on w log nw polynomi w polynomi bound theorem dotbox algorithm find edgesepar planar graph cost within twice optimum run time on w log nw w sum weight vertic deal binari weight size graph comput shortest path and henc run time dotbox algorithm depend sum vertex weight use scale make algorithm strongli polynomi howev result algorithm pseudoapproxim algorithm sens compar cut obtain optim cut better balanc final use scale idea extend algorithm park phillip fulli polynomi approxim scheme find sparsest cut planar graph vertex weight given binari therebi settl open problem bbalanc cut let us scale vertex weight sum weight ffn ff done defin new weight function process obtain new weight view two step process first scale weight constant factor ffn w truncat first step affect balanc cut sinc vertex weight scale factor howev second step could affect balanc cut thu cut s s balanc b weight function wt might wors balanc wt sinc vertic side smaller weight might weight truncat howev total loss weight due truncat n vertex balanc would worst total weight stay ffn not drop truncat loss weight smaller side ff fraction total weight thu balanc cut s s wt might b gamma ff wors similarli cut s s balanc b wt might wors balanc wt easi show similar argument wt s s balanc wors let opt denot cost optimum bbalanc cut weight assign wt sinc cut might b gamma ffbalanc wt use dotbox algorithm find b gamma ff balanc cut cost within opt cut return algorithm b gamma ff balanc wt might b gamma ffbalanc wt thu obtain b gamma ffbalanc cut cost within twice optimum bbalanc cut theorem ff b dotbox algorithm weight scale find b gamma ff balanc cut planar graph cost within twice cost optimum bbalanc cut b off n log nff time sparsest cut assum vertex weight planar graph g given binari let p least power bound weight vertex let w sum weight vertic construct edg cost g g vertex weight assign follow let ff posit integ ff determin approxim guarante describ below vertic weight rang assign origin weight weight assign weight ie delet graph weight i log nff assign weight i log nff sparsest cut comput graph use algorithm park phillip purpos comput weight vertic g divid notic leav weight integr total weight vertic o ff n run time on w log nw w total weight vertic graph so comput take time off ff n log w log n polynomi size input fix ff sparsiti cut obtain comput origin graph sparsest one chosen let s s optim sparsest cut g let lighter side let weight t let q weight heaviest vertex s pick smallest integ lemma cut found g cost s s weight least therefor cut sparsiti within factor sparsiti s s proof algorithm park phillip search cheapest cut weight choic weight half weight given graph output sparsest cut first notic choic given abov weight g say t inde set vertic whose weight i log nff g satisfi weight drop factor hand set vertic contain vertex weight i log nff g weight exceed g therefor cut found g target weight satisfi condit lemma given choic ffi pick smallest posit integ ff then get follow theorem algorithm give fulli polynomi time approxim scheme minimumspars cut problem planar graph ffi algorithm find cut sparsiti within factor ffi optim o log n time open problem sever open problem remain problem find cheapest bbalanc cut planar graph strongli nphard pseudopolynomi time algorithm it complex find minimum netspars cut planar graph assum vertex weight given unari complex find ffl set planar graph assum vertex weight given unari algorithm given paper extend submodular function extend class graph particular notion transfer function extend class graph r framework solv vlsi graph layout problem dimer statist phase transit approxim maxflow mincut theorem uniform multicommod flow problem applic approxim algorithm separ theorem planar graph applic planar separ theorem find minimumquoti cut planar graph find near optim separ planar graph faster algorithm find small edg cut planar graph tr ctr eyal amir robert krauthgam satish rao constant factor approxim vertexcut planar graph proceed thirtyfifth annual acm symposium theori comput june san diego ca usa