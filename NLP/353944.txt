t data depend analysi assembl code a determin data depend task typic perform highlevel languag sourc code today optim parallel compil littl work done field data depend analysi assembl languag code area grow import eg increas instructionlevel parallel central element data depend analysi case method memori refer disambigu decid whether two memori oper may access or definit access memori locat paper describ new approach determin data depend assembl code method base sophist algorithm symbol valu propag deriv valuebas depend memori oper instead addressbas depend integr method salto system assembl languag optim experiment result show approach greatli improv precis depend analysi mani case b introduct determin data depend nowaday often done parallel optim compil system level sourc code eg c fortran intermedi code eg rtl data depend analysi level assembl code aim increas instruct level parallel use variou schedul techniqu like list schedul trace schedul percol schedul new sequenc instruct construct regard data control depend properti target processor today instruct schedul determin data depend regist access consid memori one cell everi two memori access must assum data depend thu analyz memori access becom import global instruct schedul paper describ intraprocedur valuebas data depend analysi see maslov detail addressbas valuebas data depend implement context salto tool salto framework develop optim transform techniqu variou processor user describ target processor use mixtur rtl c languag program written assembl code analyz modifi use interfac c salto alreadi implement kind conflict analysi approach determin addressbas depend regist access assum memori one cell analyz data depend assembl code must distinguish access regist memori case deriv data depend reach definit reach use inform obtain monoton data flow analysi regist analysi make complic set use defin regist one instruct establish easili regist alias therefor determin data depend regist access scope paper memori refer solv alias problem whether two memori refer access locat see landi ryder detail alias prove two refer alway point locat mustalia must show never refer locat cannot prove thi would like conserv approxim alia pair mayalia ie memori refer might refer locat deriv possibl address might access one memori instruct use symbol valu propag algorithm compar memori address use modif gcd test experiment result indic mani case method accur determin data depend previou method program model assumpt follow assum risc instruct set memori access load ld store st instruct memori refer follow offset use scale factor provid model addit would difficult memori access normal read write word four byte global memori access address which label first move regist read written use memori instruct initi regist copi content one regist anoth done use mv instruct logic arithmet oper follow dest oper op execut operand src operand result written regist dest operand regist integ constant control flow model use uncondit b condit bcc branch instruct runtimememori divid three class static global memori stack heap mem ori address unequivoc refer one class simpl memori refer disambigu feasibl see section unfortun easi prove address alway refer stack interprocedur analysi done one obtain inform frame pointer approach make assumpt alia analysi assembl code section briefli review techniqu alia analysi memori refer alia analysi lead assumpt store instruct alway depend load store instruct common techniqu compiletim instruct schedul alia analysi instruct inspect schedul look two instruct see obviou differ memori referenc techniqu independ memori refer fig a b prove base regist differ offset use a differ memori class referenc b fig c show exampl techniqu fail look regist o must assum regist point memori locat therefor determin data depend s local analysi disabl notic definit regist o first statement exampl make clear twofold improv need first need save inform address arithmet secondli need kind copypropag provid algorithm would easi show statement regist o valu fp gamma therefor overlap byte memori block start symbol valu set propag section present extens wellknown constant propag algorithm target determin possibl symbol valu set content regist program statement subsequ step analysi inform use determin data depend storag memori accessesmean store load instruct calcul symbol valu set perform data flow analysi therefor model problem data flow framework l f l call data flow inform set union oper f set semant function semant function monoton l form bound semilattic one element zero element use gener iter algorithm alway termin yield least fixpoint data flow system data flow inform set method describ content regist form symbol valu therefor defin initi point program p statement j call initi point r ij p j load instruct defin content r call node entri node procedur finit set initi point p given initp finit set sv symbol valu consist symbol proper symbol valu polynomi ij variabl r ij symbol valu repres valu store regist r initi point r ij use valu cannot make assumpt content regist perform static analysi abl infer direct branch taken program execu tion therefor could happen regist r one symbol valu valid specif program point consequ must describ possibl regist content socal kbound symbol valu set limit set ensur termin analysi let k n arbitrari fix kbound symbol valu set set ld fpo st ofp ld fpo sethi hillco st oolollc add fpo st oo ld fpo a b c figur sampl code differ techniqu alia detect a b solv instruct inspect wherea c need sophist analysi follow let reg stand set regist call total map ff state mean data flow inform set use calcul symbol valu set given set possibl state sv union oper node control flow graph one pre decessor must integr inform stem predecessor data flow framework join path flow graph implement union oper let union oper data flow problem defin shown fig union oper simpl componentwis union set addit ensur welldefinit oper map aris set cardin greater k special valu proven fix k n set state sv conjunct union oper constitut bound semilattic one element zero element semant function control flow graph chosen analysi node stand uniqu label program statement therefor unambigu assign semant function node semant function use updat symbol valu set assign reg ister fig specifi semant function use method specif ff stand state execut semant function ff correspond state execut semant function execut initi point r ij knowledg defin valu regist r main idea method describ regist content r definit symbol valu mention befor entri node procedur well load instruct initi point semant function entri node n initi symbol valu set regist r correspond initi point r in so execut n symbol valu r in stand valu store r execut procedur code semant function assign load instruct initi symbol valu set regist whose valu defin oper similar descript correspond initi point oppos entri node initi valid initi point safe call initi point safe correspond statement part loop con trast initi point insid loop call unsaf problem unsaf initi point valu affect regist may chang loop itera tion therefor cannot make safe assumpt initi valu obtain safe approxim case symbol valu set regist set special valu fig use oper phi extens add oper polynomi result applic phi pairwis addit term b ensur welldefinit oper result set cardin greater k map further one operand valu oper return proven semant function monoton gener iter algorithm use solv data flow problem improv valu set propag without limit cardin symbol valu set propag algorithm may lead infinit set regist whose content could chang loop iter respons phenomenon calcul symbol valu set regist compris special valu inaccuraci analysi cannot accept practic therefor propos improv symbol valu set propag algorithm use regist nsv regist section introduc concept nonsymbol valu regist hereaft call nsv regist nsv regist loop g regist r use g content figur union oper symbol valu set n entri n mv arj copi z regist r j ff r j fag n add rirjrm add valu r r j store result r ff n ld memrj load valu address mem regist r j ff r j ae fr jn g r jn safe initi point figur semant function instruct chang modifi propag algorithm work follow first determin nsv regist loop program set nsv regist contain among thing induct regist regist defin load instruct g thereaft nsv regist r insert addit node control flow graph begin loop bodi attach statement n uniqu unus statement number end loop bodi node control flow graph reach execut loop insert statement thi perform symbol valu set propag modifi control flow graph further insert node defin semant function set symbol valu set r initi point r in init resp setbot consid everi initi point safe improv version algorithm two advantag number iter gener iter algorithm use data flow analysi reduc ad dition compar memori address even though depend nsv regist determin nsv regist follow let g loop statement insid g statement call loop invari destin regist r defin valu loop iter determin loop invari statement g perform two step mark statement loop invari use constant operand operand defin outsid g iter mark untag statement g loop invari use operand defin loop invari statement algorithm termin statement mark use concept loop invari determin nsv regist loop g simpl way thi regist r nsv regist g iff r defin statement g loop invari statement g fig show result improv symbol valu set propag simpl program nsv regist loop r r r r nsv regist init instruct resp setbot instruct insert program consequ data flow algorithm termin third iter concept regist allow accur analysi memori refer insid loop without nsv regist valu regist r would set eventu contrast improv symbol valu propag alway lead proper valu data depend analysi determin data depend achiev differ mean commonli use calcul reach definit resp reach use statement describ problem de termin specif statement memori locat statement valu memori locat written last resp use last reach definit use determin abl infer defus defdef usedef associ defus pair statement indic true depend them defdef pair output depend usedef pair antidepend scalar variabl determin reach definit perform wellknown standard algorithm describ use algorithm data depend analysi assembl code deriv mayalia inform ie check whether two storag access could refer storag object improv accuraci data depend analysi mustalia inform need ie check whether two storag access refer alway storag object achiev inform need mechan check whether index express two storag could repres valu solv problem appli modifi gcd test therefor replac appear regist x element correspond symbol valu set check possibl combin whether equat solut exampl refer fig obvious instruct reach use memori instruct deriv memori address r respect assumpt instruct execut loop iter prove differ memori address access mean loopindepend data depend two instruct instruct execut differ loop it erat r may differ valu modifi gcd test show instruct may refer memori locat therefor assum loopcarri data depend instruct implement result method determin data depend assembl code present last section implement user function salto sun sparc workstat run solari present assembl code sparc v processor analyz extens processor requir minim technic effort result analysi use tool salto evalu method taken closer look two aspect comparison number data depend use method method implement salto show differ addressbas valuebas depend analysi concern regist access comparison number data depend use addressbas valuebas depend analysi memori access sampl chose procedur sixth public releas independ jpeg group free jpeg softwar packag compress decompress jpeg imag distinguish follow four level accuraci level determin addressbas depend regist access memori model one cell everi pair memori access assum data depend level model memori way level valuebas depend analysi regist access level on regist access determin way level analyz memori access symbol valu set propag level deriv depend addressbas level perform valuebas depend analysi level analysi perform salto salto consid control flow two instruct assum data depend even cannot execut one anoth level common techniqu use today instruct schedul eg iter iter init r ld rr ld rr st rr add rr setbot r ble ll setbot r figur symbol valu set propag regist r mention valu fr i g one gcc one use laru et al system kind valu propag determin addressbas depend classifi level section closer look techniqu valu propag method classifi level yet know method also determin valuebas depend tabl contain procedur improv ie less de pendenc notic level level fig show number depend sum true anti output depend distinguish differ level accuraci well regist memori access fig also show two rightmost column effect valuebas analysi addressbas analysi everi procedur clear see proport data depend method disprov relat work far work done field memori refer disambigu elli present method deriv symbol express memori address chase back reach definit symbol regist express simplifi use rule al gebra two express compar use gcd test method implement bulldog compil work intermedi level close highlevel lan guag author inspir elli eg lowney et al bockl ebcioglu et al approach present ebcioglu implement chameleon compil work assembl code first procedur transform ssa form loop nor maliz gather possibl regist valu procedur name loc level level level level improv reg mem reg mem reg mem reg mem reg mem testfunct shift sign jpeg createcompress jpeg suppress tabl jpeg finish compress emit byte emit dqt emit dht emit sof emit so marker write frame header scan header tabl jpeg abort jpeg createdecompress jpeg start decompress post process pass jpeg read coeffici select file name jround jcopi sampl row read byte read byte next marker first marker process com process sofn scan jpeg header read byte read colormap read non rle pixel read rle pixel jcopi sampl row flush packet start output tga figur number depend sum true anti output depend found four level accuraci result divid registerbas memorybas depend two rightmost column show improv valuebas depend analysi addressbas depend analysi techniqu bulldog compil use regist multipl definit algorithm describ chase reach definit wherea concret implement chameleon compil seem support thi compar memori address make use gcd test banerje inequ result method alia inform debray et al present approach close our use address descriptor repres abstract address ie address contain symbol regist address descriptor instruct set mod gamma k residu denot set offset rel regist defin instruct note address descriptor depend one symbol regist data flow system use propag valu control flow graph mod gamma k set use bound semilattic need in test howev lead approxim address represent make imposs deriv mustalia inform second drawback definit regist differ control flow path join set map compar address descriptor reduc comparison modgammak set use domin inform handl loop cor rectli deriv data depend inform conclus paper present new method detect data depend assembl code work two step first perform symbol valu set propag use monoton data flow system comput reach definit reach use regist memori access deriv valuebas data depend compar memori refer use modif gcd test known approach memori refer disambigu propag valu memori cell rememb load memori caus destin regist symbol valu compar two memori refer must mind regist defin differ instruct may differ valu even load memori address handl situat plan extend method propag valu memori cell softwar pipelin one major applic present work near futur famili techniqu overlap execut differ iter origin loop therefor requir precis depend analysi addit inform distanc depend develop work entail particular discov induct variabl possibl postpass soon loop invari known coupl known depend test banerje test omega test consid final extend method interprocedur analysi would lead accur depend analysi present assum content almost regist memori cell may chang evalu procedur call first step could make assumpt use global memori loca tion could deriv exact depend acknowledg thank refere comment help improv paper r depend analysi supercomput global instruct schedul superscalar machin exploit finegrain parallel effici method comput static singl assign form experi local microcod compact horizont machin alia analysi execut code compil vliw architectur trace schedul techniqu global microcod compact monoton data flow analysi framework detect conflict structur access lazi array dataflow depend analysi studi number memori port multipl instruct issu machin compilerarchitectur interact treebas vliw processor percol schedul parallel compil techniqu omega test fast practic integ program algorithm depend analysi salto system assemblylanguag transform optim instruct schedul execut edit gnu instruct schedul limit instructionlevel parallel supercompil parallel vector comput tr compil principl techniqu tool detect conflict structur access array expans effici method comput static singl assign form depend flow graph algebra approach program depend pointerinduc alias problem taxonomi limit instructionlevel parallel practic algorithm exact array depend analysi abstract interpret applic logic program binari translat instructionlevel parallel process multiflow trace schedul compil hierarch approach instructionlevel parallel abstract interpret instruct schedul execut edit studi number memori port multipl instruct issu machin alia analysi execut code pathsensit valueflow analysi advanc compil design implement depend analysi supercomput design analysi comput algorithm walktim techniqu exact method analysi valuebas array data depend data depend analysi assembl code percol schedul parallel compil techniqu bulldog ctr thoma rep gogul balakrishnan junghe lim intermediaterepresent recoveri lowlevel code proceed acm sigplan symposium partial evalu semanticsbas program manipul januari charleston south carolina saurabh chheda osman unsal israel koren c mani krishna csaba andra moritz combin compil runtim ipc predict reduc energi next gener architectur proceed st confer comput frontier april ischia itali patricio buli veselko gutin extend ansi c processor multimedia extens intern journal parallel program v n p april