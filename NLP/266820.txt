t procedur base program compress a cost power consumpt two import design factor mani embed system particularli consum devic product person digit assist pager integr data servic smart phone fix perform requir unlimit appetit reduc cost increas batteri life program compress one techniqu use attack problem compress program requir less memori thu reduc cost direct materi manufactur furthermor reli compress memori total number memori refer reduc reduct save power lower traffic highcapacit buse paper discuss new approach implement transpar program compress requir littl hardwar support procedur compress individu directori structur use bind togeth runtim decompress procedur explicitli cach ordinari ram complet unit thu resolv refer within procedur approach evalu set embed multimedia commun applic result averag memori reduct runtim perform overhead b introduct present techniqu save power reduc cost embed system concern primarili datarich consum devic use comput commun eg socal inform applianc current product categori includ devic simpl person digit assist pager cell phone futur emerg industri vision ubiquit multimedia devic java applianc product extrem tight constraint compon cost uncommon memori one expens compon product thu provid need reduc size store program second import design goal low power consumpt product batteri power reduc power consumpt directli translat extend batteri life batteri life often import factor product class pager cellular phone function verifi batteri life one effect techniqu product differenti larg number embed system power use access memori processor bu domin factor system power consumpt unlik desktop comput perform often primari factor devic inform applianc classic form missioncrit comput tend import realtim aspect exampl certain amount processor perform necessari decod page messag littl benefit provid more face factor decid investig benefit store program compress form compress program may resid type memori often depend whether system support softwar field upgrad basic approach store program imag compress form dynam decompress demand effect compress scheme would reduc amount system memori requir variou applic thu save cost board space static power consumpt addit benefit involv significantli reduc power consumpt due dynam memori refer believ effect compress scheme reduc power consumpt cannot current provid direct evid relationship previou approach relev previou work divid four group whole program transform cachebas dictionari scheme highli encod instruct set architectur direct techniqu compress program involv explicit compress decompress complet program portion ram dedic decompress buffer program expand compress form ram prior execut approach appli file system save disk space virtual memori explicit file cach usual effect reduc impact decompress algorithm latenc unfortun approach well suit embed system inform applianc singl applic exampl datarich pager verticalmarket applic motorola sportstrax news devic whole program decompress system would result ram size exceed rom size increas cost power consumpt wolf chanin kozuch present scheme block base decompress respons dynam demand goal improv code densiti generalpurpos processor architectur consid number compress algorithm conclud huffman code reduc code size origin effect program decompress brought instruct cach thu compress transpar execut applic one problem wolf et al identifi involv translat memori address program space ie decompress compress program back store exampl program pc rel jump hit cach ordinari cach hardwar resolv refer howev case cach miss refil hardwar must determin compress space target store problem requir set jump tabl patch refer program space compress space link time tool use automat gener necessari jump tabl liao devada keutzer develop dictionari approach reduc code size dsp processor correl done across basic block program compil link purpos correl identifi common instruct sequenc exceed minim length sequenc written dictionari origin occurr replac mini subroutin call sic ie procedur call argument applic code skeleton procedur call bit uncommon code sequenc approach implement hardwar support result present indic might achiev code size reduct approxim minor modif hardwar addit code size reduct also achiev approach result extrem high rate procedur call discuss impact call perform issu could particularli signific face tight code schedul constraint target machin texa instrument tmsc dsp ernst et al investig use bytecod machin languag compress approach hearken back origin goal tightli encod isa format cisc processor much work focus minim impact perform procedur cach wolf et al develop effect techniqu transpar code compress approach two specif featur may prove disadvantag first sinc compress process transpar supervisor code well applic entir decompress translat process must implement hardwar dedic decompress hardwar benefit low overhead option use approach stock hardwar interest scheme leverag exist hardwar option but necess hardwar acceler secondli map problem compress space program space complic hardwar well link process pcach applic directori rom compress util compress tabl processor core rom hardwar acceler figur embed system architectur pcach system place dedic hardwar transpar code block propos use demand driven decompress trigger procedur invoc procedur decompress atom unit store dedic region ram explicitli manag runtim system figur approach effici solv problem address map refer contain within one procedur eg loop condit code experi show common form branch remain interprocedur global refer must resolv use directori servic call softwar cach procedur cach pcach pcach abl store procedur small enough fit within it result goal pcach algorithm must manag variabl size object may align boundari conveni address unlik convent hardwar cach manag fix size line block issu maximum procedur size problemat number solut present decid yet upon recommend path runtim bind procedur call bound togeth runtim consult directori servic link tool translat call request uniqu identifi directori servic look locat call target activ target proper linkag need return oper tabl store program use translat procedur identifi address compress memori case scheme wolf et al tabl must gener program link process use runtim bind broken follow stage sourc invok directori servic uniqu identifi target procedur target pcach go step find target address compress memori consult directori servic enough contigu free space exist pcach target go step enough fragment free space exist pcach target go step mark procedur evict enough space avail coalesc fragment space contigu block decompress target procedur assign pcach locat patch state allow target return caller invok target procedur tradit execut environ bind one procedur anoth call instruct typic execut one memori refer updat program counter two call instruct use process abov one step one step let l repres time requir lookup target procedur identifi directori servic data structur step let repres time requir manag rel stabl steadi state let requir decompress procedur pcach hit rate repres h signific calcul expect case perform worstcas execut time involv compact free space identifi procedur replac follow time requir decompress target procedur worst case call time expect case ie cach hit call time case clearli import increas hit rate howev limit case hit rate high directori scheme still impos cost c l everi procedur invoc better approach cach address target procedur call site avoid directori servic overhead subsequ call target similar approach use high perform objectori runtim system specul bind method invoc type method runtim directori bind call site target patch call site subsequ invoc jump straight target test runtim type inform determin processor end right locat test succe execut continu fail directori servic consult approach work cach target address guarante start valid code sequenc difficult guarante code block move within address space load approach would work pcach cach replac compact make align restrict prohibit expens procedur need align standard boundari thu risk exist jump would end middl procedur free space altern approach advoc test valid cach target address call site scheme involv test oper pcach test destin sinc procedur singl entri point may call multipl target order test call site procedur must prologu contain procedur identifi conceptu call site load word preced cach target address compar target wish invok jump cach address match sequenc chang best case invoc sequenc two jump directori servic lookup one load test condit jump pcach larg number procedur thu expens directori servic lookup cach target result perform improv pure directori scheme possibl procedur identifi correspond legal code sequenc introduc danger fals posit test problem avoid introduc tag byte identifi word procedur identifi specif tag byte use depend processor architectur must correspond illeg opcod place proper word align unfortun approach foolproof processor variabl length instruct intel x k case possibl guarante target identifi match code sequenc embed data though likelihood event reduc tag procedur identifi also make easi implement refer scheme order approxim lru data pcach manag runtim system period clear tag byte thu forc cach target fail invok directori servic machin bit word use tag byte reduc procedur identifi space bit feel rang prove suffici need embed system procedur return return instruct bit complic tradit code sequenc cannot explicitli name destin return oper pcach runtim system solv problem store three piec data sourc procedur identifi predict address start return procedur that address caller time invok activ procedur offset call site start sourc procedur regular return procedur replac test predict prologu sourc jump address plu displac event success failur caus directori servic lookup and possibl reload destin return oper jump address plu displac replac algorithm task alloc space pcach new procedur involv two step process first pcach search free block larg enough satisfi new demand experi best fit firstfit stage found approach produc similar result result present respect firstfit simplifi implement enough free space avail singl block runtim system must invok pcach compactor pcach compact move live procedur start pcach free fragment end pcach event runtim system find must invok replac algorithm identifi procedur evict pcach experi two algorithm replac least recent use lru neighbor lru runtim system scan lru list mark procedur sequenc evict enough space freed accomplish compactor invok coalesc free space singl block larg enough new procedur lru easi implement conceptu simpl tend caus signific amount memori traffic pcach coalesc fragment free space exampl consid case togeth two lru procedur enough space satisfi new request happen resid first third quadrant pcach subsequ compact stage need move approxim half pcach data order combin space freed evict two procedur may case third lru procedur could combin one first two resid adjoin region memori case compact procedur trivial sinc interven procedur need move pcach primari benefit optim reduc data movement pcach secondari benefit avoid subsequ tag miss move procedur result lookup event directori servic experi two scheme reduc amount data movement within pcach respons pcach miss first scheme call neighbor involv look set adjac procedur good candid evict set procedur evalu basi sum squar lru valu least recent use procedur lru valu increas sequenti approach bias toward avoid procedur use recent though explicitli exclud consider neighbor scan pcach adjac block memori larg enough new request consid free occupi space algorithm select set block lowest sum squar lru valu gener form neighbor involv evalu function fs set neighbor f arbitrari function advantag use sum squar easi evalu runtim provid strong bia select recent use procedur modif approach use limit term cap valu set adjac block exclud consider set exce limit goal approach make imposs remov frequent use procedur even case one procedur would otherwis select eg neighbor larg procedur least frequent use experi approach trace driven simul use evalu effect cach whole procedur pcach simul must know procedur activ either direct call result return oper asynchron transfer eg except unix longjmp trace collect special augment version lsim impact compil system tool allow us dynam gener larg set activ event support sophist trace sampl applic current exist signific void regard effect benchmark embed system number industri academ effort propos date littl progress toward suit repres program workload one part problem field embed system cover extrem wide rang comput system difficult imagin benchmark suit would reveal use inform design machin cellular phone drastic differ use product hope emerg unif area inform applianc cohes focu devic current option choos from unfortun state affair best reflect continu use dhryston benchmark deriv metric dhryston per milliwatt purpos paper adopt number program mediabench benchmark suit six addit program select five spec benchmark set along backwat basic interpret figur figur show cumul distribut function cdf procedur size bwbasic go repres typic distribut worst case widest spread respect data present static program imag memori well dynam distribut seen execut data suggest modest size pcach often succeed captur work set gener dynam data exhibit slightli slower growth static data show sharper break phenomena result skew distribut call frequenc among proceduresstat dynam figur procedur size distribut bwbasic pcach miss rate tabl show raw miss rate lru replac tabl present data neighbor use replac miss rate calcul count refer gener program regardless whether procedur actual cacheabl ie smaller simul pcach size signific low cach miss rate much difficult evalu tradit hardwar cach fix size object exampl signific differ miss averag static procedur go k miss frequent procedur k nevertheless simul mark singl miss eventstat dynam figur procedur size distribut go sever applic particular raw audio encod decod achiev extrem low miss rate gener trend lru neighbor similar hit rate two notabl except djpeg mpegenc show high miss rate k pcach lru neighbor rate stay rel high k neighbor drop lru case specif procedur frequent call captur lru dynam though neighbor procedur size cdf go figur suggest dynam refer stream much larger footprint bwbasic figur thu surpris bwbasic show reduc miss rate compar pcach size hand rel small pcach size eg k k still effect miss rate data display interest result neighbor gener achiev lower miss rate lru certainli possibl patholog pedagog case exhibit behavior like thi gener lru expect achiev highest hit rate behavior consequ cach variabl size object consid case hardwar cach fix block size certain amount space must made avail entir cach alloc specif number block must evict cach cach lru proven effect provid best guess block evict softwar pcach use number procedur evict pcach depend upon specif procedur select explain result consid three differ type pcach small medium larg small pcach neighbor tend approach lru perform smaller spread lru valu least recent use procedur larg pcach evict rare perform approach compulsori miss regardless replac algorithm medium case number refer satisfi avail free space replac algorithm inconsequenti assum cdf procedur size correl lru valu new procedur activ caus runtim invok replac algorithm half case size newli activ procedur equal less size lru procedur thu lru neighbor select lru procedur remain case lru algorithm travers list least frequent use procedur mark evict amount space freed least equal new request neighbor howev look contigu block good candid accord specif cost function reli squlru cost function neighbor bias combin multipl procedur best set figur illustr phenomenon assum three unit space must freed up lru algorithm choos first three procedur lru list procedur evict may hold case believ assumpt valid gener invok compactor coalesc space hand neighbor use squar lru count select procedur evict found that gener case lru neighbor select differ set procedur replac neighbor tend select fewer procedur continu exampl figur may good idea evict either procedur procedur seem intuit would best evict three rather proc lru cost proc proc lru cost proc lru cost proc lru cost select lru select neighbor figur exampl lru choos optim set neighbor evict fewer procedur pcach miss rate gcc direct result dynam program size cdf frequent use procedur gcc k byte correspond procedur activ second common procedur byte correspond procedur activ although procedur exceed pcach size exclud still contribut count procedur activ thu gcc simul low hit rate pcach k byte interest phenomenon may occur one larg common procedur final admit pcach impact introduc larg procedur pcach caus lru evict huge number procedur discuss neighbor tend evict fewer result impact pcach miss rate lru dramat seen gsmencod k k compact event tabl tabl show rate compact event per procedur activ rather raw event count order make present consist across test program data illustr effect neighbor algorithm neighbor lru achiev roughli compar result pcach hit rate neighbor much effect reduc number compact event data neighbor algorithm gener produc much note posit procedur with high lru cach block neighbor merg procedur along free space adjac flatter respons function pcach size perform consequ neighbor compact pcach alreadi enough free space procedur evict requir amount expect free space pcach monoton pcach size rather complic function size dynam refer fact illustr pcach size k go illustr rate compact event actual increas respons increas pcach size again gcc show sharp respons soon admiss k procedur gcc cjpeg djpeg gsmdecod mipmap pgpdecod rasta rawdaudio unep figur perform impact pcach oper rel base case perform pcach structur reduc perform due three type event cach manag includ lru manag directori servic memori movement due compact event within pcach decompress data transfer memori impact factor evalu result perform shown figur larg volum memori traffic within pcach manag compon compar littl impact perform byte memori move within pcach due compact charg half clock cycl assum two bit memori oper requir loop unrol use hide loop manag overhead compress techniqu use base algorithm requir averag cycl sparc compress byte sparc binari achiev compress ratio howev number algorithm could select balanc demand perform compress particular applic huffman code in hardwar briefli discuss later averag slowdown applic kbyte pcach howev go gcc exclud pcach averag slowdown number climb kbyte cach clearli import exclud illbehav applic pcach problem easi manag embed system softwar gener highli tune execut environ discuss benefit consid scheme requir addit hardwar pcach architectur still take advantag hardwar acceler avail number research design hardwar instruct decompress particularli good exampl provid mb huffman decompress mip instruct stream devic requir cm micron process technolog use hardwar decompress pcach still effect increas compress rate increas significantli increas block size furthermor dictionari size reduc sinc instead entri everi possibl jump target entri subroutin imposs say pcach interact tradit hardwar cach without discuss specif hardwar configur pcach memori nearbi highspe sram cach ignor it transpar cach hardwar provid direct latenc benefit consum valuabl resourc hand pcach memori rel slow cach hardwar well almost sophist embed processor includ memori control hardwar function chipselect waitstat insert bu size hardwar augment allow block memori becom noncach common featur highperform processor conclus present new approach appli compress store program imag techniqu easili reduc program storag approxim correspond signific cost reduct embed product target consum market compress complet procedur rather smaller subblock abl avoid cost dedic hardwar result perform impact measur approxim wide rang sophist embed applic trace driven simul use evalu opportun use compress associ tradeoff point result suggest small softwar control cach perhap k byte standard sram effect cach work set reduc dynam memori traffic addit effect compress traffic system bu decreas main memori traffic thu help attack problem power consumpt r combin concept compress cach twolevel filesystem execut compress program embed risc architectur compress embed system program a method construct minimum redund code code densiti optim embed dsp processor use data compress techniqu code compress effici implement smalltalk system impact architectur framework multipleinstruct issu processor tool evalu multimedia commun system an extrem fast zivlempel data compress algorithm a highspe asynchron decompress circuit embed processor tr combin concept compress cach twolevel filesystem impact execut compress program embed risc architectur code compress compress embed system program code densiti optim embed dsp processor use data compress techniqu highspe asynchron decompress circuit embed processor effici implement smalltalk system ctr israel waldman shlomit s pinter profiledriven compress scheme embed system proceed rd confer comput frontier may ischia itali saumya debray william s evan cold code decompress runtim commun acm v n august youtao zhang jun yang rajiv gupta frequent valu local valuecentr data cach design acm sigplan notic v n p nov youtao zhang jun yang rajiv gupta frequent valu local valuecentr data cach design acm sigop oper system review v n p dec stacey shogan bruce r childer compact binari code compress softwar dynam translat proceed confer design autom test europ p februari g hallnor steven k reinhardt compress memori hierarchi use indirect index cach proceed rd workshop memori perform issu conjunct st intern symposium comput architectur p june munich germani keith d cooper nathaniel mcintosh enhanc code compress embed risc processor acm sigplan notic v n p may jun yang youtao zhang rajiv gupta frequent valu compress data cach proceed rd annual acmiee intern symposium microarchitectur p decemb monterey california unit state marc l corliss e christoph lewi amir roth dise implement dynam code decompress acm sigplan notic v n juli charl lefurgi eva piccininni trevor mudg evalu high perform code compress method proceed nd annual acmiee intern symposium microarchitectur p novemb haifa israel bita gorjiara daniel gajski fpgafriendli code compress horizont microcod custom ip proceed acmsigda th intern symposium field programm gate array februari monterey california usa o ozturk h saputra m kandemir i kolcu access patternbas code compress memoryconstrain embed system proceed confer design autom test europ p march susan cotterel frank vahid synthesi custom loop cach corebas embed system proceed ieeeacm intern confer computeraid design p novemb san jose california susan cotterel frank vahid tune loop cach architectur program embed system design proceed th intern symposium system synthesi octob kyoto japan oliv rthing jen knoop bernhard steffen spars code motion proceed th acm sigplansigact symposium principl program languag p januari boston ma usa marc l corliss e christoph lewi amir roth implement evalu dynam code decompress use dise acm transact embed comput system tec v n p februari guilin chen mahmut kandemir optim address code gener arrayintens dsp applic proceed intern symposium code gener optim p march milenko drini darko kirovski hoi vo code optim code compress proceed intern symposium code gener optim feedbackdirect runtim optim march san francisco california bjorn de sutter bruno de bu koen de bosscher sift mud low level c code reus acm sigplan notic v n novemb milenko drini darko kirovski hoi vo ppmex program compress acm transact program languag system topla v n pe januari bjorn de sutter ludo van put dominiqu chanet bruno de bu koen de bosscher linktim compact optim arm execut acm transact embed comput system tec v n februari rpd beszd rudolf ferenc tibor gyimthi andr dolenc konsta karsisto survey codes reduct method acm comput survey csur v n p septemb bjorn de sutter bruno de bu koen de bosscher linktim binari rewrit techniqu program compact acm transact program languag system topla v n p septemb