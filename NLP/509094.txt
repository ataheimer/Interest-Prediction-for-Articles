t tune strassen matrix multipl memori effici a strassen algorithm matrix multipl gain lower arithmet complex expens reduc local refer make challeng implement algorithm effici modern machin hierarch memori system report implement algorithm use sever unconvent techniqu make algorithm memoryfriendli first algorithm intern use nonstandard array layout known morton order base quadtre decomposit matrix second dynam select recurs truncat point minim pad without affect perform algorithm virtu cach behavior morton order techniqu critic perform combin done code multipli effectivenessperform comparison implement compet implement show implement often outperform altern techniqu up howev also observ wide variabl across platform across matrix size indic time singl implement clear choic platform matrix size also note time requir convert matric tofrom morton order notic amount execut time elimin overhead reduc execut time b introduct central role matrix multipl build block numer code gener signific amount research techniqu improv perform basic oper sever effort focu algorithm whose arithmet complex work support part darpa grant dabt nsf grant cda cda duke univers equip donat intel corpor technolog educ program chatterje partial support nsf career award ccr lebeck partial support nsf career award mip on log instead convent on algorithm strassen algorithm matrix multipl variant practic algorithm classic exampl theoret highperform algorithm challeng implement effici modern highend comput deep memori hierarchi strassen algorithm achiev lower complex use divideandconqu approach unfor tunat techniqu two potenti drawback first divis proce level singl matrix element recurs overhead measur instanc recurs depth addit temporari storag becom signific reduc perform overhead gener limit stop recurs earli perform convent matrix multipl submatric recurs truncat point second divis step must effici handl oddsiz matric solv one sever scheme embed matrix insid larger one call static pad decompos submatric overlap singl row column call dynam overlap perform special case comput boundari case call dynam peel previou implement address two drawback independ present novel solut simultan address issu specif dynam peel introduc method avoid larg amount static pad larg amount static pad artifact use fix recurs truncat point minim pad dynam select recurs truncat point rang size howev scheme induc signific variat perform use canon storag scheme such columnmajor matric use hierarch matrix storag scheme dynam select recurs truncat point within rang size ensur high stabl perform comput leaf recurs tree limit amount static pad measur execut time implement modgemm two altern im plement dgefmm use dynam peel dgemmw use dynam overlap dec alpha sun ultrasparc ii result show wide variabl perform three implement alpha implement modgemm rang slower faster dgefmm matrix size ultra mod gemm gener faster up dgefmm larg matric larger dgefmm gener faster small matric up also determin time convert matric tofrom morton order rang total execut time elimin convers time assum matric alreadi morton order modgemm outperform dgefmm nearli matrix size alpha ultra greater benefit ultra remaind paper organ follow section review convent descript strassen algorithm section discuss implement issu affect memori effici solut issu section present perform result code section cite relat work compar techniqu them section present conclus futur work background strassen origin algorithm usual describ follow divideandconqu form let b two n theta n matric n even integ partit two input matric b result matrix c quadrant follow symbol ffl equat repres matrix multipl comput four quadrant result matrix follow a ffl b paper discuss implement winograd variant strassen algorithm use seven matrix multipl matrix addit wellknown minimum number multipl addit possibl recurs matrix multipl algorithm base divis quadrant divis matric quadrant follow equat comput proce follow c u compar origin algorithm noteworthi featur winograd variant identif reus common subexpress share comput respons reduc number addit also contribut wors local refer unless special attent given aspect comput discuss paper numer issu concern fast matrix multipl algorithm cover elsewher interfac order stay consist previou work area permit meaning comparison implement winograd variant follow call convent dgemm subroutin level bla librari thu implement comput c ff scalar opa theta k real matrix opb k theta n real matrix c theta n real matrix opx either x x matric a b c store columnmajor order lead dimens lda ldb ldc respect memori effici issu techniqu use practic implement strassenwinograd algorithm must answer three question truncat recurs handl arbitrari rectangular matric lay array data memori promot better use cach memori question independ although past implement treat thu review implement issu identifi possibl solut strategi justifi specif choic recurs truncat point seven product comput recurs invok strassen algorithm smaller sub problem switch convent algorithm matrix size call recurs truncat point strassen construct longer advantag one estim run time count arithmet oper recurs truncat point would around howev empir observ valu paramet least order magnitud higher discrep direct result poor algorithm local refer strassen algorithm implement strassen algorithm encount use empir chosen cutoff criterion determin matrix size termin recurs handl arbitrari matric divideandconqu techniqu effect matric evenli partit recurs invoc algorithm first note rectangular matric present particular problem partit matrix dimens even troubl aris encount matric one dimens odd size sever possibl solut problem ffl simplest solut static pad pad n theta n matric addit row column contain zero pad n theta n matrix satisfi evendimens condit level recurs ie n recurs depth strassen origin solut solut often quot algorithm textbook howev static predetermin valu overhead static pad becom quit sever ad almost three time number origin matrix element worst case furthermor naiv implement idea arithmet done addit zero element pure overhead final base relat n interfer phenomena reduc perform interfer effect mitig use nonstandard data layout discuss section ffl second solut dynam peel peel extra row column level separ add contribut overal solut later fixup comput elimin need extra pad reduc portion matrix strassen algorithm appli thu reduc potenti benefit recurs strategi fixup comput matrixvector oper rather matrixmatrix oper limit amount reus reduc perform ffl third solut dynam overlap finess problem subdivid matrix submatric conceptu overlap one row column comput result share row column subproblem ignor one copi interest solut complic control structur perform extra comput ideal would like avoid implement complex dynam peel dynam overlap possibl excess static pad figur mortonord matrix layout small squar theta tile laid contigu columnmajor order number tile give rel posit sequenc tile data layout signific fraction comput strassenwinograd algorithm occur routin multipli submatric recurs truncat perform matrix product larg determin cach behavior issu explicitli consid previou work implement fast recurs matrix multipl algorithm default columnmajor layout array data assum primari condit perform choos tile size tile fit firstlevel cach thu avoid capac miss easili achiev use tile size rang shown figur second achiev perform stabil vari also import tile contigu memori thu avoid selfinterfer miss given hierarch natur algorithm the decomposit quadrant within quadrant within hierarch layout morton order natur suggest store matric oper definit morton order follow divid origin matrix four quadrant lay quadrant memori order nw ne sw se submatrix larger side laid recurs use morton order theta tile laid use columnmajor order see figur secondari benefit keep tile contigu memori matrix addit oper perform singl loop rather two nest loop thu reduc loop overhead connect among issu begin observ recurs truncat point determin amount pad sinc matrix must evenli divid recurs invoc algorithm also note recurs truncat point multipli theta submatric use convent algorithm care select truncat point minim amount pad requir figur show effect tile size select pad four line correspond size size pad tiles best case pad tiles best case pad matrix size figur effect tile size pad minim pad tile chosen rang origin matrix size n pad matrix size n tile size chosen minim pad pad matrix size n fix tile size tile size achiev minimum pad figur demonstr abil select rang tile size dramat reduc amount extra storag make independ matrix size n contrast fix tile size requir signific pad proport matrix size worst case consid squar matrix size fix tile size static pad requir pad matrix size nearli twice origin matrix dimens contrast flexibl choos tile size allow us select tile size requir pad our worst case amount extra element dimens pad matrix size recurs divid four time achiev theta tile howev exploit flexibl tile size select ensur perform matrix multipl algorithm tile sensit choic tile size import consider sinc signific portion algorithm comput occur routin multipli tile figur figur b show perform matrix multipl c theta b vari function relat tile size lead dimens line graph correspond differ submatrix size submatric oper chosen base matrix m follow noncontigu submatric creat set lead dimens submatrix lead dimens base matrix m correspond xaxi contigu submatric form set lead dimens submatrix tile size t correspond line graph figur see contigu submatric exhibit much stabl perform noncontigu submatric expect noncontigu submatric exhibit dramat drop perform base matrix power two case due selfinterfer alpha contigu submatric clearli outperform noncontigu perform differenti pronounc ultra howev instabl noncontigu matrix sizemflop contigu submatric noncontigu submatric matrix sizemflop contigu submatric noncontigu submatric a dec miata b sun ultra figur effect data layout matrix multipli perform submatric still exist result justifi use morton order within implement implement detail envis three differ altern storag layout input output matric assum laid morton order interfac level input output matric copi columnmajor storag morton order interfac level convers morton order done increment across level recurs first altern feasibl librari implement among two option convert matric morton order top level easier implement perform rel fast practic total execut time see section incorpor necessari matrix transposit oper convers columnmajor morton order handi requir singl core routin strassenwinograd algorithm altern solut requir multipl code version indirect use pointer handl case correctli choos tile size rang describ gener induc small constant amount pad implement explicitli pad matrix zero perform redund comput pad could afford pad guarante small altern scheme avoid overhead would creat tile uneven size requir control overhead keep track tile start offset similar piec inform handl rectangular case treat two dimens separ tile dimens chosen minim pad dimens method choos tile dimens independ work ratio column row or row column within certain limit highli rectangular matric pose problem two recommend tile dimens may requir differ level recurs follow exampl illustr difficulti method matric consid highli rectangular matrix dimens x choos tile dimens independ first consid matrix row choos number row x x x a lean wide b b wide lean b figur handl highli rectangular matric tile minim row pad ie number addit row case chosen recurs requir unfold depth next consid matrix column number column tile chosen minim number column pad again choos recurs must unfold depth clearli naiv choos two tile dimens independ work highli rectangular matric sinc unfold recurs depth depth overcom limit matrix divid submatric submatric requir depth recurs unfold dimens matrix product reconstruct term submatrix product given matrix ffl wide mean columnstorow ratio exce desir ratio ffl lean mean rowstocolumn ratio exce desir ratio ffl wellbehav mean columnstorow ratio rowstocolumn ratio within desir ratio sinc two input matric b one form total nine possibl combin figur figur b show two exampl input matric b divid result c reconstruct result submatrix multipl final note common valu ff fi paramet order avoid perform extra arithmet paramet valu core routin strassenwinograd algorithm comput ffl b set c temporari otherwis postprocess comput c ff postprocess necessari section compar perform implement modgemm strassen algorithm previou implement use dynam peel dgefmm we use au thor origin code previou implement use dynam overlap dgemmw measur execut time variou implement mhz dec alpha miata mhz sun ultra alpha machin processor kb directmap level cach kb way associ level cach mb directmap level cach mb main memori ultra two ultrasparc ii processor level cach mb level cach mb main memori use one processor ultra matrix sizenorm execut time modgemm matrix sizenorm execut time a modgemm vs dgefmm b dgemmw vs dgefmm figur perform strassen winograd implement dec miata time execut implement use unix system call getrusag matrix size rang dgefmm use empir determin recurs truncat point matric less comput averag invoc algorithm overcom limit clock resolut execut time larger matric larg enough overcom limit reduc experiment error execut experi three time matrix size use minimum valu comparison program compil vendor compil cc f fast option sun compil workshop compil dec compil dec c v digit fortran vf figur figur show result alpha ultrasparc respect report result execut time normal dynam peel implement dgefmm alpha see dgefmm gener outperform dynam overlap dgemmw see figur b contrast implement modgemm vari slower faster dgefmm also observ modgemm outperform dgefmm mostli rang matrix size wherea dgefmm faster smaller larger matric final compar figur figur b see modgemm gener outperform dgemmw result quit differ ultra see figur strike differ perform dgemmw see figur b outperform modgemm dgefmm matrix size ultra anoth signific differ modgemm gener faster dgefmm larg matric larger dgefmm gener faster small matric import observ result variabl perform across platform across matrix size ongo research effort target understand variat section report preliminari find follow section analyz penalti convert morton order matrix sizenorm execut time modgemm matrix sizenorm execut time a modgemm vs dgefmm b dgemmw vs dgefmm figur perform strassen winograd implement sun ultra matrix size convers cost age execut matrix size convers cost age execut a dec miata b sun ultra figur morton convers time percentag total execut time matrix sizenorm execut time modgemm matrix sizenorm execut time modgemm a dec miata b sun ultra figur perform modgemm without matrix convers morton convers time import aspect implement recurs data layout provid stabl perform dynam tile size select previou perform result includ time convert two input matric columnmajor morton order convert output matrix morton order back columnmajor figur figur b show cost convers percentag entir matrix multipli platform graph see morton convers account overal execut time small matric approxim larg matric result show morton convers notic fraction execut time elimin convers cost ie assum matric alreadi morton order produc commensur improv perform implement figur figur b show without convers cost modgemm inde execut faster increas number matrix size outperform dgefmm specif alpha figur a modgemm superior matrix size larger ultra figur b see matrix size dgefmm outperform modgemm furthermor without morton convers modgemm competit dgemmw outperform mani matrix size cach effect initi effort gain insight perform variabl implement begin analysi cach behavior here present preliminari result use atom perform cach simul kb directmap cach block dgefmm modgemm implement figur show miss ratio implement matrix size rang first observ graph modgemm miss ratio lower dgefmm match expec tation second observ unexpect dramat drop modgemm miss ratio matrix size preliminari investig use cprof reveal drop due reduct conflict miss matrix sizemiss figur cach miss ratio kb directmap understand phenomenon consid matrix size pad matrix size recurs truncat point tile size convent algorithm appli submatric kb size xx correspond four quadrant x submatrix morton order quadrant alloc contigu memori quadrant separ multipl cach size kb conflict cach exampl sinc nw sw quadrant separ ne quadrant map locat cach ie first element nw sw quadrant separ kb therefor oper involv two quadrant incur signific number cach miss current examin way elimin conflict miss relat work discuss three separ area relat work implement strassentyp algorithm hierarch scheme matrix storag compil technolog improv cach behavior loop nest implement previou implement strassen algorithm includ bailey implement cray dgemmw implement dougla et al dgefmm implement husslederman et al bailey code fortran use static twolevel unfold recurs code duplic dougla et al introduc dynam overlap method handl oddsiz dimens husslederman et al introduc dynam peel method implement care limit amount temporari storag specif consid perform memori hierarchi code case such cray issu aris memori system cachebas section give extens perform comparison implement vs dgefmm dgemmw kreczmar propos eleg memoryeffici version strassen algorithm base overwrit one input argument scheme space save directli applic two reason cannot assum input matric overwritten scheme requir sever copi oper reduc perform hierarch scheme matrix storag wise coauthor investig algorithm advantag quadtre represent matric morton order also appear parallel comput literatur use load balanc irregular problem recent fren wise discuss implement recurs on matrix multipl algorithm use hierarch matrix layout sequenc recurs call unusu manner get better reus cach carri recurs level singl matrix element do truncat recurs reach tile size fit upper level memori hierarchi cach behavior sever author discuss loop transform tile attempt reduc number cach miss incur loop nest thu improv perform loop transform specif matrix multipl convent threeloop algorithm matrix multipl fall categori code handl lam rothberg wolf investig model influenc cach interfer perform tile program emphas import tile contigu memori avoid selfinterfer miss propos data copi satisfi condit toplevel convers columnmajor layout interfac level morton order use intern view logic extens propos ghosh et al present analyt represent cach miss perfect loop nest use guid select code optim problem work like work cite abov reli linear row columnmajor storag array therefor immedi appli code conclus futur work matrix multipl import comput kernel perform dictat overal perform mani applic strassen algorithm matrix multipl achiev lower arithmet complex on log convent algorithm on cost wors local refer furthermor sinc strassen algorithm base divideandconqu implement must handl oddsiz matric reduc recurs overhead termin recurs reach individu matrix element issu make difficult obtain effici implement strassen algorithm paper present practic implement strassen algorithm winograd vari ant exploit abil dynam select recurs truncat point base matrix size effici handl oddsiz matric achiev use nonstandard array layout call morton order convert standard layout eg columnmajor intern morton layout interfac level exploit dynam select recurs truncat point minim pad compar implement two altern implement use dynam peel dgefmm dynam overlap dgemmw execut time measur dec alpha sun ultrasparc ii reveal wide variabl perform three impl mentat alpha implement modgemm rang slower faster dgefmm matrix size ultra modgemm gener faster dgefmm larg matric larger dgefmm gener faster small matric elimin time convert matric tofrom morton order total execut time modgemm outperform dgefmm nearli matrix size ultra matric alpha futur work includ investig techniqu improv perform stabil strassen algorithm minim code complex also plan examin effect rectangular input matric implement support interfac level bla dgemm routin plan examin perform varieti input paramet r experi quadtre represent matric extra high speed matrix multipl cray tile size select use cach organ data layout set level basic linear algebra subprogram gemmw portabl level bla winograd variant strassen matrixmatrix multipli algorithm effici procedur use matrix algorithm cach miss equat analyt represent cach miss accuraci stabil numer algorithm evalu associ cpu cach tensor product formul strassen matrix multipl algorithm implement strassen algorithm matrix multipl ibm engin scientif subroutin librari guid refer memori requir strassen algorithm cach perform optim block algorithm cach profil spec benchmark case studi dynam partit nonuniform structur workload spacefil curv data transform elimin conflict miss atom system build custom program analysi tool gaussian elimin optim cost quadtre represent nondens matric tr extra high speed matrix multipl cray evalu associ cpu cach set level basic linear algebra subprogram cach perform optim block algorithm lapack user guid atom gemmw tile size select use cach organ data layout dynam partit nonuniform structur workload spacefil curv multilevel block cach miss equat autoblock matrixmultipl track bla perform sourc code data transform elimin conflict miss implement strassen algorithm matrix multipl accuraci stabil numer algorithm cach profil spec benchmark effici procedur use matrix algorithm experi quadtre represent matric ctr siddhartha chatterje alvin r lebeck praveen k patnala mithuna thottethodi recurs array layout fast matrix multipl ieee transact parallel distribut system v n p novemb hossam elgindi georg ferizi improv memori access pattern execut strassen matrix multipl algorithm proceed th australasian confer comput scienc p januari dunedin new zealand k fatahalian j sugerman p hanrahan understand effici gpu algorithm matrixmatrix multipl proceed acm siggrapheurograph confer graphic hardwar august grenobl franc kang su gatlin larri carter architecturecogniz divid conquer algorithm proceed acmiee confer supercomput cdrom pe novemb portland oregon unit state john mellorcrummey david whalley ken kennedi improv memori hierarchi perform irregular applic proceed th intern confer supercomput p june rhode greec john mellorcrummey david whalley ken kennedi improv memori hierarchi perform irregular applic use data comput reorder intern journal parallel program v n p june igor kaporin aggreg cancel techniqu practic tool faster matrix multipl theoret comput scienc v n p may sandeep sen siddhartha chatterje toward theori cacheeffici algorithm proceed eleventh annual acmsiam symposium discret algorithm p januari san francisco california unit state lillian lee fast contextfre grammar pars requir fast boolean matrix multipl journal acm jacm v n p januari sandeep sen siddhartha chatterje neeraj dumir toward theori cacheeffici algorithm journal acm jacm v n p novemb paolo dalberto alexandru nicolau adapt strassen matrix multipl proceed st annual intern confer supercomput june seattl washington nico galoppo naga k govindaraju michael henson dinesh manocha lugpu effici algorithm solv dens linear system graphic hardwar proceed acmiee confer supercomput p novemb siddhartha chatterje alvin r lebeck praveen k patnala mithuna thottethodi recurs array layout fast parallel matrix multipl proceed eleventh annual acm symposium parallel algorithm architectur p june saint malo franc moham f mokbel walid g aref ibrahim kamel analysi multidimension spacefil curv geoinformatica v n p septemb chunyuan lin yehch chung jenshiuh liu effici data parallel algorithm multidimension array oper base ekmr scheme distribut memori multicomput ieee transact parallel distribut system v n p juli moham f mokbel walid g aref irregular multidimension spacefil curv applic multimedia databas proceed tenth intern confer inform knowledg manag octob atlanta georgia usa siddhartha chatterje vibhor v jain alvin r lebeck shyam mundhra mithuna thottethodi nonlinear array layout hierarch memori system proceed th intern confer supercomput p june rhode greec richard vuduc jame w demmel jeff a bilm statist model empir searchbas perform tune intern journal high perform comput applic v n p februari