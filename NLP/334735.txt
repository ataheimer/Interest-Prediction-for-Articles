t transpar replic fault toler distribut ada a paper present foundat rapid replic ada partit distribut system implement pc support transpar replic partit distribut ada use semiact replic inher nondeterminist execut multitask partit model piecewis determinist histori discuss valid correct model comput show use effici semiact replic rapid prototyp ensur replica partit go histori henc consist b introduct virtual node ie partit ada distribut applic render faulttoler replic failur replica replic partit mask thank remain replica ensur partit remain avail spite failur despit ada strong posit develop depend system ada languag standard address issu replic distribut system implement permiss claus an implement may allow separ copi partit configur differ process node provid appropri interact copi present consist state partit activ partit statement standard argu favor transpar solut replic distribut applic configur program com pile follow intent replic offer way transpar replica replic partit replica transpar note although distribut quit transpar ada impli replic either quot paragraph also clearli address issu replic transpar state replic partit present consist state activ partit take mean behavior indistinguish singleton parti tion replic therefor also seen transpar toward activ partit system paper present result work replic fault toler distribut ada wol replic ada complic inher nondetermin partit simpl state machin approach sch applic assum follow system model distribut ada applic execut asynchron distribut system no time assumpt synchron clock distribut system may heterogen partit share memori ie passiv partit system activ partit commun remot procedur call reliabl channel network partit subject crash failur onli partit multitask incom rpc handl concurr separ task viewsynchron group commun system provid consist membership inform variou reliabl multicast primit replica organ group goal replic render partit faulttoler crash failur way ideal preserv replica replic transpar applic rest paper structur follow briefli review variou caus nondetermin ada section section present piecewis comput model abstract vagari nondeterminist execut section give brief consider activ passiv replic scheme describ detail semiact replic section section give brief overview rapid implement replic manag gnat system use semiact replic nondetermin ada determinist partit replic activ replic use state machin approach sch use replica consist ensur fulfil follow two condit atom one replica handl request r replica do order replica handl request order insuffici replica nondeterminist multitask partit instanc task schedul may well violat order impos request lead differ state evolut replica instead sequenc state access must order ident replica sever caus nondetermin ada besid behavior task system eg choic made select accept statement explicit time depend delay statement obviou sourc nondetermin implicit time depend also may caus nondeterminist behavior eg use preemptiv timesl task schedul simpli differ messag deliveri time even order preserv origin network delay coordin time distribut ada applic depend time make use determinist task schedul ie one alway make decis correspond task dispatch point given set task impract guarante replica determin even explicit time depend delay forbidden eg pragma restrict implicit time differ may caus replica diverg overcom difficulti refin model concurr execut ada need piecewis determinist comput model sy eln view execut sequenc determinist state interv separ nondeterminist occur event model appli ada well signal model languag iso guarante access object share two task actual happen sequenti order result share object must protect use appropri applicationlevel synchron protect object rendezv partit consid erron contain two task access unprotect object without signal between execut piecewis determinist comput model character event occur distinguish two differ class event intern event account nondetermin languag model cover task dispatch point signal action event relat abort deferr choic made select accept statement outcom condit time entri call enter leav protect action lock unlock protect object queue requeu entri call task creation abort termin abort atc initi final assign control object extern event basic account nondetermin network deliveri rpc request anoth partit send rpc request partit send rpc result back call partit deliveri rpc result partit addit intern event concern local call subprogram whose result depend upon state outsid applic eg system call like call adacalendarclock piecewis determinist comput model replica synchron make sure follow execut histori ie go sequenc event signal action task dispatch point subsum list event two concurr state access must separ signal action ensur set task state replica consist abort abortdef region includ otherwis abort atc might basic caus replica diverg abort happen precis logic moment replica consid exampl fig assign variabl x abort x may abnorm iso henc subsequ use special case though task could eg write valu unprotect variabl creat anoth task read it howev task creation also signal action erron iso even true central applic even there asynchron abort may caus problem applic make sure state access asynchron select statement remain consist face abort critic section abort part in sens make state modif may influenc execut applic must therefor encapsul within abortdef region languag defin sever construct defer abort iso particular protect action also initi final assign control object cannot abort abort delay abortdef region com plete enter leav abortdef region subsum list event coordin replica ensur follow sequenc event suffici guarante consist semant ada preserv abort occur two abortdef region replica activ passiv replic activ replic attract offer high avail replic partit replica execut parallel failur incur addit overhead seem one could use activ replic piecewis determinist comput model reach consensu bmd event fact sever system employ method see eg howev specialpurpos reliabl hard realtim system gener system synchron system use sever constrain task model intertask commun strongli reduc task schedul restrict even perform offlin prior runtim static schedul eg mar cons quenc rel event thu need interact agreement limit still sift report overhead replica synchron pra p admittedli assum byzantin failur maft achiev better perform deleg consensu protocol dedic hardwar nevertheless approach seem feasibl gener system too one assum determinist task schedul impli disallow use explicit time depend delay statement call packag adacalendar adareal_tim assump tion progress measur task dispatch point pass consensu must reach task dispatch point messag deliv messag deliveri sole remain sourc non determin advanc task dispatch point must taken common consensu valu replica lag behind continu execut task dispatch point reach deliv messag then way deliv messag task dispatch point henc set task continu evolv ident replica overhead addit consensu messag deliveri may signific seem still toler howev method violat replica transpar forbid use delay statement sever restrict certainli transpar delay allow replica must reach consensu everi event messag deliveri time entri call instanc replica must agre whether entri call time out so timeout occur respect task schedul decis taken delay suffici agre first condit whether timeout occur thu forc track synchron task schedul decis timeout word activ replica support full task model ada commun network run consensu protocol everi task schedul decis seem impract would tremend slow replic partit fact one lose main advantag activ replic high avail passiv replic hand suffer commun overhead primari replica execut request interact agreement protocol need howev case failur there higher latenc one backup taken over further more passiv replic either requir checkpoint coordin output remot call must semant nest transact latter approach besid earlier consensu need total order multicast necessari ensur order condit given section although replica make schedul decis execut lockstep one replica may alreadi advanc anoth task bodi begin select triggerev abort loop exit someth x use x erro neou increment must encapsul abortdef region abort fig abort atc wol cannot implement transpar applicationdefin schedul through partial oper ie entri call may conflict constraint impos schedul serializ correct criterion transact conflict may result deadlock cannot resolv transpar manner transact natur remot call would expos applic wol transact offer ada must therefor integr languag level semiact replic sinc activ passiv replic defici use replic nondeterminist partit ada focuss semiact replic piecewis determinist comput model lend readili form replica organ pioneer delta project pow replica organ viewsynchron group ss replica execut incom rpc request one replica design leader respons take nondeterminist decis replica follow forc make choic replica synchron thu achiev log event leader leader synchron follow use fifoord reliabl multicast ht follow replay event occur leader result replica go sequenc determinist state interv ensur replica consist event instead messag deliveri order synchron semiact replic less stringent requir group commun layer activ replic partit may use rel simpl reliabl multicast commun group replica instead expens total order multicast the fifo multicast need synchron within group built easili upon basic primit reliabl multicast nevertheless synchron follow everi event would probabl impract sinc intern event bound occur frequent would entail prohibit high perform overhead task schedul decis would involv commun network reach agreement fortu checkpoint multitask partit trivial complet task state program counter stack etc must includ checkpoint also limit replica run homogen physic node case transact rpc would constitut invers abstract opinion transact built upon rpc way round nate necessari synchron need observ event send rpc result back client send rpc request partit long effect state interv remain pure local leader follow need inform event follow must brought date effect becom visibl rest system ie leader send messag beyond group repli ca so leader must updat follow order guarante reach state otherwis failur might corrupt overal consist distribut applic one follow becom new leader observ event leader log event buffer event log execut observ event multicast log follow er may proceed perform observ event log record extend state interv may contain mani simpl state interv or rather event delimit them observ event start new extend state interv follow recreat extend state interv replay event log receiv replay event receiv log wait next extend state interv arriv leader becom leader due failur former leader follow reexecut observ event begin extend state interv would result duplic messag sent use log outcom event execut leader replay event leader thu replica interact rest system beyond group replica extend state interv gener start observ event leader free synchron follow tightli may necessari event log buffer leader threaten overflow case leader send log current content follow order make room new event given reason size event buffer synchron interv still kept larg enough obtain accept perform scheme follow particip interact beyond group failur follow complet transpar replica organ upon failur leader howev one follow must take role new leader first replay pend event alreadi receiv fail leader bring date last known state latter simpli continu execut henceforth log event synchron remain follow fig show failur leader l replic par tition start execut request req made nest remot call req b partit wait result continu process req fail sent event extend state interv follow recreat extend state interv replay log event l final fail view chang occur follow f chosen new leader continu execut note extend state interv may well differ sinc could possibl affect part system except l itself overal state system remain consist failur view chang occur repli rep b nest remot call arriv new leader f would way tell whether former leader l still send req b failur point p indistinguish one point r cons quentli new leader f choic reexecut observ event req b l fail point r or later result duplic request analog situat aris f final send repli rep back client fail synchron synchron new leader f know whether rep sent impli partit must abl deal duplic messag messag must tag uniqu systemwid identifi repeat rpc result messag simpli ignor repeat invoc difficult handl partit handl first rpc request messag receiv later messag messag identifi ignor arriv rpc still progress return result first invoc rpc alreadi complet latter case necessit result remot subprogram call retain therefor kind garbag collect retain result must provid see section semiact replic base piecewis determinist comput model offer transpar replic nondeterminist ada partit replic transpar ie transpar toward partit given applic level although partit must abl handl duplic messag correctli system level yet applic level remain unaffect thi replica transpar ie transpar toward applic level replic partit also main tain piecewis determinist comput model support full task model ada howev replica transpar heterogen system given long failur consid thu hold kresili recoveri includ model replica transpar cannot fulli maintain gener case new follow join run group must get group current state state transfer done transpar homogen system take systemlevel checkpoint one old group member instal checkpoint newli join replica replica execut heterogen physic node state transfer possibl restrict subset possibl partit furthermor requir cooper applic wol case replica transpar cannot upheld total rapid rapid replic ada partit distribut sy tem wol implement semiact replic scheme base piecewis determinist comput model present gnat com piler implement within runtim support thu larg transpar applic core rapid event log buffer implement within pc child packag garlic kpt call systemgarlicrapid choic made synchron leader reliabl multicast primit assum commun client server replic partit ie group replica alreadi make duplic messag detect necessari howev one need second duplic messag detect scheme higher level would benefici highlevel duplic messag detect could exploit fact facil alreadi exist hidden lowlevel protocol group commun layer rep sync sync view chang client r fig failur semiact replic follow trigger observ event ie send messag event occur within pc further more actual synchron involv multicast messag within group done conveni new protocol ad garlic new protocol interfac thirdparti viewsynchron group commun system current rapid use phoenix mfsw toolkit group commun system use long satisfi view synchroni offer reliabl multicast primit pc also modifi includ uniqu messag identifi messag use these duplic messag detect implement garbag collect retain result also includ garlic whenev partit send messag anoth partit b piggyback inform messag alreadi receiv b partit b discard messag rapid actual offer three differ interfac log replay event transfer event log leader follow pc use direct call first interfac given systemgarlicrapid handl extern event handl intern event task support gnarl modifi use callback interfac rapid log replay event task schedul decis packag runtim support also use callback rapid eg sy temfinalization_implement use log replay event regard entri exit abort defer region given initi final control object final public interfac event log systemrpcrepl shown fig use standard librari also may log replay event eg adacalendarclock file access event log buffer organ heterogen fifo list store event descriptor deriv abstract tag type event leader append event log use log subprogram multicast log follow use send_log oper also empti log event also contain uniqu groupwid task identifi task involv follow replay event order log get subprogram block call task event match tag actual paramet e taskss groupwid id frontmost log return event valid set true on leader get return immedi valid set fals remov opera tion follow actual remov frontmost event log replay event make next event log becom new frontmost event thu call get may unblock log follow empti ie wholli replay get also block either next extend state interv receiv leader match event appear front log follow becom leader old leader fail case get return even match event appear onc log exhaust cf section valid set fals former follow leader may make choic interfac event log replay implement follow pattern shown fig packag systemrpcrepl type event abstract tag privat procedur log procedur get procedur remov procedur privat fig public interfac event log fig pattern event log replay systemrpcrepl packag exampl packag repl renam systemrpcrepl type event new replev record character data event eventexternal_tag use exampleev procedur the_oper the_ev begin replget the_ev is_follow is_follow use descript the_ev replay event remov it els leader observ event send log follow observ event log event the_ev replev repllog the_ev event replay follow atom task also might call get event remain block event remov leader event log must done right place do_oper caus addit nondeterminist event if did do_oper instead the_oper implement use pattern also event must log right moment consid exampl event lock protect object obvious task must first get lock log event it log event first task might actual get lock first event log would inconsist actual execut histori groupwid task identifi implement task creation event event contain groupwid id creat task newli creat task follow replay event therefor also know groupwid id must assign new task refer time delay statement call adacalendarclock gener event rapid implement map time valu replica alway run logic initi leader time base avoid time suddenli jump backward failur occur thu guarante monoton time applic intern event log rapid make distinct system task local runtim support applic task event involv applic task log replay system task howev execut independ repli ca to runtim support must differ thing leader follow interfac pc task may chang statu applic task call eg systemrpcdo_rpc becom system task insid call convers system task becom applic task time execut remot call subprogram rapid current nov still prototyp stage still need seriou optim effort yet handl dynam bound remot call remot accesstosubprogram remot accesstoclasswid valu also event due assign control object yet handl seem requir cooper compil part conclus model execut ada partit use piecewis determinist comput model overcom problem due nondetermin occur replic model togeth abstract languag stan dard abstract time depend thu make replic possibl seem semiact replic appropri replic scheme gener ada partit use full task model languag prototyp replic manag call rapid replic ada partit distribut system develop guarante replica consist log nondeterminist event leader replay follow although project still earli prototyp stage first result encourag indic effici replic attain use model r the delta extra perform architectur xpa the consensu problem faulttoler comput ing manetho fault toler distribut system use rollback recoveri process replic a modular approach faulttoler broadcast relat problem iso intern standard isoiec realtim system develop program model mar gar lic gener ada reusabl librari interpartit commun the maft architectur distribut fault toler phoenix toolkit build fault toler distribut applic largescal network implement faulttoler servic use state machin approach understand power virtuallysynchron model optimist recoveri distribut system sift design analysi faulttoler comput aircraft control fault toler distribut ada replic nondeterminist object tr