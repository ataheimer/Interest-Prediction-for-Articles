t improv code densiti use compress techniqu a propos method compress program embed processor instruct memori size domin cost postcompil analyz examin program replac common sequenc instruct singl instruct codeword microprocessor execut compress instruct sequenc fetch code word instruct memori expand back origin sequenc instruct decod stage issu execut stage appli techniqu powerpc arm instruct set achiev averag size reduct respect spec cint program b introduct accord recent predict instat inc merchant processor market set exceed billion nearli half embed processor howev unit count embed processor exceed number gener purpos microprocessor factor compar gener purpos microprocessor processor embed applic much less studi figur suggest deserv attent embed processor highli constrain cost power size gener purpos microprocessor control orient embed applic common type signific portion final circuitri use instruct memori sinc cost integr circuit strongli relat die size memori size proport die size develop want program fit smallest memori possibl addit pressur program memori rel recent adopt highlevel languag embed system need control develop cost typic code size grown cost balloon rate compar seen desktop world thu abil compress instruct code import even cost execut speed high perform system also impact program size due delay incur instruct cach miss studi digit perl show sql server dec alpha bandwidth limit factor two instruct cach miss alon problem increas gap processor perform memori perform grow reduc program size one way reduc instruct cach miss achiev higher perform chenb paper focus compress embed applic execut speed trade compress borrow concept field text compress appli compress instruct sequenc propos modif microarchitectur level support compress program postcompil analyz examin program replac common sequenc instruct singl instruct codeword microprocessor execut compress instruct sequenc fetch codeword instruct memori expand back origin sequenc instruct decod stage issu execut stage demonstr techniqu appli powerpc instruct set code gener compil gener code use syntax direct translat scheme sdt aho syntact sourc code pattern map onto templat instruct implement appropri semant consid simpl schema translat subset integ arithmet pattern show syntact fragment right hand side two product replac or reduc simpler syntact structur two express ad or multipli togeth result singl new express regist number hold operand express encod add multipl oper emit gener object code result regist pass pars tree use parent oper two pattern reus arithmet oper throughout program compil complex action such translat control structur gener instruct albeit still driven templat structur sdt gener differ instruct sequenc given sourc code fragment differ point object modul regist number arithmet instruct operand offset load store instruct consequ object modul gener mani common subsequ instruct high degre redund encod instruct program program examin small number instruct bit pattern encod repeat elsewher program inde found small number instruct encod highli reus program illustr redund instruct encod profil spec cint benchmark spec benchmark compil powerpc gcc use o opti mizat figur show compil program consist mani instruct ident encod averag less instruct benchmark bit pattern encod use exactli program go benchmark exampl frequent instruct word account program size frequent instruct word account program size clear redund instruct encod provid great opportun reduc program size compress techniqu overview compress method compress method find sequenc instruct byte frequent repeat throughout singl program replac entir sequenc singl codeword rewritten or encod sequenc instruct kept dictionari which turn use program execut time expand singleton codeword instruct stream back origin sequenc instruct codeword assign compress algorithm mere indic instruct dictionari final compress program consist codeword interspers uncompress instruct figur illustr relationship uncompress code compress code dictionari complet descript compress method present section compress gcc go ijpeg li benchmark program instruct distinct instruct encod use program distinct instruct encod use multipl time program figur distinct instruct encod percentag entir program uncompress code clrlwi rr addi rr cmplwi crr ble crc cmplwi crr bgt crd stb rr clrlwi rr addi rr cmplwi crr bgt crc compress code codeword ble crc cmplwi crr bgt crd codeword codeword bgt crc dictionari clrlwi rr addi rr cmplwi crr stb rr figur exampl compress background relat work section discuss strategi text compress method current employ microprocessor manufactur reduc impact risc instruct set program size text compress text compress method fall two gener categori statist dictionari statist compress use frequenc singleton charact choos size codeword replac them frequent charact encod use shorter codeword overal length compress text minim huffman encod text wellknown exampl dictionari compress select entir phrase common charact replac singl codeword codeword use index dictionari entri contain origin charact compress achiev codeword use fewer bit charact replac sever criteria use select use dictionari statist compress techniqu two import factor decod effici overal compress ratio decod effici measur work requir reexpand compress text compress ratio defin formula eq dictionari decompress use codeword index dictionari tabl insert dictionari entri decompress text stream codeword align machin word dictionari lookup constant time oper statist compress hand use codeword differ bit size align machin word bound ari sinc codeword align statist decompress stage must first establish rang bit compris codeword text expans proceed shown everi dictionari method equival statist method achiev equal compress improv upon give better compress bell thu statist method alway achiev better compress dictionari method albeit expens addit comput requir decompress note how ever dictionari compress yield good result system memori time constraint one entri expand sever charact gener dictionari compress provid faster and simpler decod statist compress yield better compress ratio compress risc instruct set although risc instruct set easi decod fixedlength instruct format wast program memori thumb armmpr mip kissel two compress ratio compress size origin size recent propos instruct set modif defin reduc instruct word size effort reduc overal size compil program thumb subset arm architectur consist arm bit wide instruct reencod requir bit instruct includ thumb either requir full bit frequent use import compil gener small object code program compil thumb achiev smaller code comparison standard arm instruct set arm mip defin bit fixedlength instruct set architectur isa subset mipsiii instruct use mip chosen statist analyz wide rang applic program instruct frequent gener compil code written bit mipsiii typic reduc size compil mip kissel thumb mip act preprocessor underli architectur case bit instruct fetch instruct memori expand bit wide instruc tion pass base processor core execut thumb mip shrink instruct width expens reduc number bit use repres regist design immedi valu field confin thumb mip program regist base architectur significantli reduc rang immedi valu subset base architectur thumb mip neither capabl gener complet program oper underli machin thumb reli bit instruct memori manag except handl mip reli bit instruct floatingpoint oper moreov thumb cannot exploit condit execut zero latenc shift rotat underli arm architectur thumb mip requir special branch instruct toggl bit bit mode fix set instruct compris thumb mip chosen assess instruct use rang applic neither architectur access regi ter instruct mode underli bit core architectur contrast deriv codeword dictionari specif characterist program execut thi compress program access resourc avail machin yet still exploit compress individu program ccrp compress code risc processor ccrp describ wolfewolf instruct cach modifi run compress program compiletim cach line byte huffman encod runtim cach line fetch main memori uncom press put instruct cach instruct fetch cach address uncompress program therefor core processor need modif support compress howev cach miss problemat miss instruct cach resid address main memori ccrp use line address tabl lat map miss instruct cach address main memori address compress code locat lat limit compress program execut processor line size compil one shortcom ccrp compress granular byte rather full instruct mean ccrp requir overhead encod instruct scheme encod group instruct moreov scheme requir less effort decod program sinc singl codeword encod entir group instruct addit compress method need lat mechan sinc patch branch use new instruct address compress program liao et al pure softwar method support compress code propos liao author find minisubroutin common sequenc instruct program instanc minisubroutin remov program replac call instruct minisubroutin place text program end return instruct minisubroutin constrain basic block may contain branch instruct restrict condit prime advantag compress method requir hardwar support howev subroutin call overhead slow program execut liao suggest hardwar modif support code compress consist primarili calldictionari instruct instruct take two argument locat length common instruct sequenc program save dictionari sequenc replac program calldictionari instruct execut processor jump point dictionari indic locat execut length instruct implicitli return liao limit dictionari use sequenc instruct within basic block onli liao explor tradeoff field width locat length argument calldictionari instruct codeword instruct word size consid requir dictionari contain sequenc least instruct respect sinc shorter sequenc would bigger calldictionari instruct compress would result sinc singl instruct frequent occur pattern import use scheme compress them paper vari paramet dictionari size the number entri dictionari dictionari entri length the number instruct dictionari entri thu allow us examin efficaci compress instruct sequenc length compress method algorithm compress method base techniqu introduc birdchena dictionari compress algorithm appli compil gener program take advantag sdt find common sequenc instruct place dictionari algorithm divid step build dictionari replac instruct sequenc codeword encod codeword dictionari content arbitrari text choos entri dictionari achiev maximum compress npcomplet size text storer dictionari method use greedi algorithm quickli determin dictionari entri everi iter algorithm examin potenti dictionari entri find one result largest immedi save algorithm continu pick dictionari entri termin criteria reach usual exhaust codeword space maximum number dictionari entri determin choic encod scheme codeword obvious codeword bit index larger rang dictionari entri limit dictionari entri sequenc instruct within basic block allow branch instruct branch codeword may branch within encod sequenc also compress branch offset field restrict simplifi code gener replac instruct codeword greedi algorithm combin step build dictionari step replac instruct sequenc dictionari entri defin instanc program replac token token replac effici encod encod step encod encod refer represent codeword compress program discuss section variablelength codeword such use huffman encod expens decod fixedlength codeword hand use directli index dictionari make decod simpl tabl lookup oper baselin compress method use fixedlength codeword enabl fast decod also investig variablelength scheme howev restrict variablelength codeword multipl basic unit exampl present compress scheme codeword bit bit bit bit instruct compress uncompress align size smallest codeword shortest codeword encod frequent dictionari entri maxim save achiev better compress fixedlength encod complic decod relat issu branch instruct one side effect compress scheme alter locat instruct program present special problem branch instruct sinc branch target chang result program compress greedi algorithm often nearoptim practic studi compress rel branch instruct ie contain offset field use comput branch target make easi us patch offset field branch instruct compress allow compress rel branch might need rewrit codeword repres rel branch compress pass would affect rel branch target thu requir rewrit codeword etc result npcomplet problem szymanski indirect branch compress studi sinc branch take target regist branch instruct need patch compress cannot creat codeword rewrit problem outlin abov howev jump tabl contain program address need patch reflect address chang due compress gcc put jump tabl data text section immedi follow branch instruct assum tabl could reloc data section patch postcompress branch target address branch target fixedlength instruct set fixedlength instruct set typic restrict branch use target align instruct word boundari sinc primari concern code size tradeoff perform advantag align fixedlength instruct exchang compact code use codeword smaller instruct word boundari align size smallest codeword bit studi therefor need specifi method address branch target fall instruct word boundari one solut pad compress program branch target align defin origin isa obviou disadvantag solut decreas compress ratio complex solut the one adopt experi modifi control unit processor treat branch offset align size smallest codeword exampl size codeword bit bit align instruct set would branch offset rang reduc factor tabl show branch benchmark use entir rang offset field postcompil compressor modifi branch offset use align codeword branch requir larger rang modifi load target jump tabl cours result slight increas code size branch sequenc compress program processor gener design compress program processor given figur assum level memori hierarchi contain compress instruct conserv memori sinc compress program may contain compress uncompress instruct two path program memori processor core uncompress instruct proceed directli normal instruct decod compress instruct must first translat use dictionari decod execut usual manner dictionari could load varieti way dictionari small one possibl place perman onchip memori altern dictionari larger might kept data segment compress program dictionari entri could load need experi section integr compress techniqu powerpc instruct set compil spec cint benchmark gcc use o optim optim includ common subexpress elimin includ function inlin loop unrol sinc optim tend increas code size link done static tabl usag bit branch offset field bench number rel branch branch offset wide enough provid byte resolut branch target branch offset wide enough provid byte resolut branch target branch offset wide enough provid bit resolut branch target number percent number percent number percent compress li perl vortex cpu core figur overview compress program processor uncompress instruct stream dictionari compress program memori usual rom librari includ result compress program size includ overhead dictionari recal interest dictionari size number codeword dictionari entri length number instruct dictionari entri baselin compress method baselin compress method use codeword byte first byte escap byte illeg powerpc opcod valu allow us distinguish normal instruct compress instruct second byte select one dictionari entri dictionari entri limit length byte powerpc instruct powerpc illeg bit opcod use illeg opcod possibl pattern remain bit byte differ escap byte combin second byte codeword specifi differ codeword sinc compress instruct use illeg opcod processor design execut program compress baselin method abl execut origin program well first experi vari paramet baselin method figur show effect vari dictionari entri length interestingli dictionari entri allow contain instruct overal compress begin declin attribut greedi select algorithm gener dictionari select larg dictionari entri remov opportun format smaller entri larg entri chosen result immedi reduct program size howev guarante best entri use achiev good compress larg sequenc replac destroy small sequenc partial overlap it may save use multipl smaller sequenc would greater save singl larg sequenc howev greedi algorithm detect case potenti save lost gener dictionari entri size instruct improv compress notic figur illustr happen number codeword entri dictionari increas compress ratio program continu improv maximum amount codeword reach uniqu singl use encod remain uncompress tabl list maximum number codeword program baselin compress method repres upper bound size dictionari compress gcc go ijpeg li benchmark compress ratio maximum number instruct dictionari entri figur effect dictionari entri size compress ratio benchmark contain numer instruct occur time dictionari becom larg codeword avail replac numer instruct encod occur infrequ save compress individu instruct tini multipli length program compress notic achiev good compress import increas number codeword dictionari rather increas length dictionari entri thousand codeword enough spec cint program usag dictionari sinc usag dictionari similar across benchmark show result use ijpeg repres benchmark extend baselin compress method use dictionari entri instruct figur show composit dictionari number instruct dictionari entri contain number dictionari entri singl instruct rang surprisingli larger dictionari higher proport short dictionari entri figur show dictionari entri contribut compress dictionari entri instruct achiev compress save short entri contribut larger portion save size dictionari increas compress method liao cannot take advantag tabl maximum number codeword use baselin compress max dictionari entri bench maximum number codeword use compress go ijpeg li perl vortex compress gcc go ijpeg li benchmark compress number codeword figur effect number codeword compress ratio sinc codeword size singl instruct singl instruct compress compress use small dictionari implement compress code processor may constrain use small dic tionari investig compress dictionari rang byte byte size present one compress scheme demonstr compress benefici even small dictionari compress scheme small dictionari use byte codeword dictionari entri instruct size figur show result dictionari entri averag dictionari size byte suffici get code reduct variablelength codeword baselin method use byte codeword improv compress ratio use smaller encod codeword figur show baselin compress use codeword compress program byte codeword sinc baselin compress use byte codeword mean final compress program size due escap byte investig sever compress scheme use variablelength codeword size dictionari number entri percentag dictionari figur composit dictionari ijpeg max dictionari length dictionari entri number instruct size dictionari number entri program byte remov length dictionari entri due compress figur byte save compress ijpeg accord instruct length dictionari entri number instruct align bit nibbl although higher decod penalti use variablelength codeword abl achiev better compress restrict codeword integ multipl bit given decod process regular bit align huffman encod wolf lack choic encod base spec cint benchmark present best encod choic discov use codeword bit bit bit bit length program may benefit differ encod exampl mani codeword necessari good compress bit bit code word could use reduc codeword overhead diagram nibbl align encod shown figur scheme predic observ unlimit number codeword use final compress program size domin codeword byte therefor use escap code indic less uncompress instruct rather codeword first bit codeword determin length codeword scheme provid bit codeword thousand bit bit codeword offer flexibl mani short codeword thu minim impact frequent use instruct allow larg overal number codeword one nibbl reserv escap code uncompress instruc compress gcc go ijpeg li benchmark compress number codeword number codeword figur compress ratio byte codeword instructionsentri figur composit compress program byte codeword instructionsentri compress gcc go ijpeg li benchmark compress program size dictionari codeword escap byte codeword index byte uncompress instruct tion reduc codeword overhead encod frequent sequenc instruct shortest codeword use encod techniqu effect redefin entir instruct set encod method compress use exist instruct set avail escap byte unfortun also mean origin program longer execut unmodifi processor execut compress program without mode switch result bit align compress present figur obtain code reduct depend benchmark comparison extract instruct byte benchmark compress unix compress compress use adapt dictionari techniqu base zivlempel code modifi dictionari respons chang characterist text addit also use huffman encod codeword thu abl achiev better compress method figur show compress inde better compress ratio still within benchmark figur nibbl align encod instruct bit codeword bit codeword bit codeword bit uncompress instruct figur comparison nibbl align compress unix compress compress gcc go ijpeg li benchmark compress compress nibbl align codeword unix compress conclus futur work propos method compress program embed microprocessor program size limit approach combin element two previou propos first use dictionari compress method as liao allow codeword expand sever instruct second allow codeword smaller singl instruct as wolf find size dictionari singl import paramet attain better compress ratio second import factor reduc codeword size size singl instruct find much save come compress pattern singl instruct aggress compress spec cint achiev code reduct compress ratio similar achiev thumb mip thumb mip design complet new instruct set compil instruct decod achiev result process compil object code slightli modifi instruct fetch mechan sever way compress method improv first compil could attempt produc instruct similar byte sequenc could easili compress one way accomplish alloc regist common sequenc instruct use regist anoth way gener gener std code sequenc would less effici would semant correct larger varieti circumst exampl optim compil function prologu sequenc might save regist modifi within bodi function prologu sequenc standard alway save regist instruct sequenc could compress singl codeword space save optim would decreas code size expens execut time tabl show prologu epilogu combin typic account program size type compress would provid signific size reduct also plan explor perform aspect compress examin tradeoff partit onchip memori dictionari program tabl prologu epilogu code benchmark bench static prologu instruct percentag entir program static epilogu instruct percentag entir program compress gcc go ijpeg li perl vortex r compil principl advanc risc machin ltd instruct stream compress techniqu impact instruct compress icach perform enhanc instruct fetch mechan use data com pression highdens mip embed market code gener optim embed digit signal processor thumb squeez arm code size studi window nt perform use dynam execut trace npcomplet result concern data compress assembl code machin spandepend instruct execut compress program embed risc architectur compress embed system program tr text compress execut compress program embed risc architectur studi window nt perform use dynam execut trace assembl code machin spandepend instruct compress embed system program code gener optim embed digit signal processor enhanc instruct fetch mechan use data compress ctr seokwon seong prabhat mishra bitmaskbas code compress techniqu embed system proceed ieeeacm intern confer computeraid design novemb san jose california heidi pan krste asanovi head tail variablelength instruct format support parallel fetch decod proceed intern confer compil architectur synthesi embed system novemb atlanta georgia usa chang hong lin yuan xie wayn wolf lzwbase code compress vliw embed system proceed confer design autom test europ p februari chang hong lin yuan xie wayn wolf code compress vliw embed system use selfgener tabl ieee transact larg scale integr vlsi system v n p octob hari lekatsa jrg henkel wayn wolf design simul pipelin decompress architectur embed system proceed th intern symposium system synthesi septemb octob montral pq canada seokwon seong prabhat mishra effici code compress techniqu use applicationawar bitmask dictionari select method proceed confer design autom test europ april nice franc hari lekatsa jrg henkel wayn wolf code compress low power embed system design proceed th confer design autom p june lo angel california unit state x h xu c t clark s r jone high perform code compress architectur embed armthumb processor proceed st confer comput frontier april ischia itali jari heikkinen jarmo takala effect program compress journal system architectur euromicro journal v n p octob paulo centoducatt guido araujo ricardo pannain compress code execut dsp architectur proceed th intern symposium system synthesi p novemb timothi sherwood brad calder patchabl instruct rom architectur proceed intern confer compil architectur synthesi embed system novemb atlanta georgia usa talal bonni joerg henkel effici code densiti lookup tabl compress proceed confer design autom test europ april nice franc youtao zhang jun yang rajiv gupta frequent valu local valuecentr data cach design acm sigop oper system review v n p dec youtao zhang jun yang rajiv gupta frequent valu local valuecentr data cach design acm sigplan notic v n p nov hari lekatsa jrg henkel wayn wolf code compress variabl hardwaresoftwar codesign proceed eighth intern workshop hardwaresoftwar codesign p may san diego california unit state shlomo weiss roman tsikel approxim prefix code systemonachip program journal system architectur euromicro journal v n p may darko kirovski johnson kin william h mangionesmith procedur base program compress intern journal parallel program v n p e wanderley netto r azevedo p centoducatt g araujo multiprofil base code compress proceed st annual confer design autom june san diego ca usa guido araujo paulo centoducatt mario cart ricardo pannain code compress base operand factor proceed st annual acmiee intern symposium microarchitectur p novemb dalla texa unit state jack liu fred chow timothi kong rupan roy variabl instruct set architectur compil support ieee transact comput v n p juli jun yang youtao zhang rajiv gupta frequent valu compress data cach proceed rd annual acmiee intern symposium microarchitectur p decemb monterey california unit state israel waldman shlomit s pinter profiledriven compress scheme embed system proceed rd confer comput frontier may ischia itali montserrat ro peter sutton postcompil regist reassign techniqu improv ham distanc code compress proceed intern confer compil architectur synthesi embed system septemb san francisco california usa brad calder chandra krintz ur hlzle reduc transfer delay use java class file split prefetch acm sigplan notic v n p oct alberto macii enrico macii fabrizio crudo roberto zafalon new algorithm energydriven data compress vliw embed processor proceed confer design autom test europ p march andrea dandali viktor k prasanna configur compress fpgabas embed system proceed acmsigda ninth intern symposium field programm gate array p februari monterey california unit state montserrat ro peter sutton ham distanc base vliwep code compress techniqu proceed intern confer compil architectur synthesi embed system septemb washington dc usa kelvin lin chungp chung jean jyhjiun shann compress mip code multipl operand depend acm transact embed comput system tec v n p novemb montserrat ro peter sutton compil optim order effect vliw code compress proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa shaoyang wang rongguey chang code size reduct compress repeat instruct sequenc journal supercomput v n p june mat brorsson mikael collin adapt flexibl dictionari code compress embed applic proceed intern confer compil architectur synthesi embed system octob seoul korea talal bonni joerg henkel use linkernighan algorithm lookup tabl compress improv code densiti proceed th acm great lake symposium vlsi april may philadelphia pa usa arvind krishnaswami rajiv gupta dynam coalesc bit instruct acm transact embed comput system tec v n p februari kelvin lin jean jyhjiun shann chungp chung code compress regist operand depend journal system softwar v n p august keith d cooper nathaniel mcintosh enhanc code compress embed risc processor acm sigplan notic v n p may john gilbert david m abrahamson adapt object code compress proceed intern confer compil architectur synthesi embed system octob seoul korea greiv gunnar braun andrea andrea rainer leuper oliv schliebusch heinrich meyr instruct encod synthesi architectur explor use hierarch processor model proceed th confer design autom june anaheim ca usa ahmad zmili christo kozyraki simultan improv code size perform energi embed processor proceed confer design autom test europ proceed march munich germani stephen hine david whalley gari tyson adapt compil techniqu enhanc pack instruct regist proceed intern confer compil architectur synthesi embed system octob seoul korea marc l corliss e christoph lewi amir roth dise implement dynam code decompress acm sigplan notic v n juli charl lefurgi eva piccininni trevor mudg evalu high perform code compress method proceed nd annual acmiee intern symposium microarchitectur p novemb haifa israel lar rder clausen ulrik pagh schultz charl consel gill muller java bytecod compress lowend embed system acm transact program languag system topla v n p may stephen hine joshua green gari tyson david whalley improv program effici pack instruct regist acm sigarch comput architectur new v n p may stephen hine gari tyson david whalley reduc instruct fetch cost pack instruct registerwindow proceed th annual ieeeacm intern symposium microarchitectur p novemb barcelona spain subash chandar mahesh mehendal r govindarajan area power reduct embed dsp system use instruct compress reconfigur encod journal vlsi signal process system v n p septemb chandra krintz brad calder han bok lee benjamin g zorn overlap execut transfer use nonstrict execut mobil program acm sigop oper system review v n p dec yuan xie wayn wolf hari lekatsa code decompress architectur vliw processor proceed th annual acmiee intern symposium microarchitectur decemb austin texa jeremi lau stefan schoenmack timothi sherwood brad calder reduc code size echo instruct proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa marc l corliss e christoph lewi amir roth dise programm macro engin custom applic acm sigarch comput architectur new v n may marc l corliss e christoph lewi amir roth implement evalu dynam code decompress use dise acm transact embed comput system tec v n p februari luca benini francesco menichelli mauro olivieri class code compress scheme reduc power consumpt embed microprocessor system ieee transact comput v n p april y larin thoma m cont compilerdriven cach code compress scheme embed ilp processor proceed nd annual acmiee intern symposium microarchitectur p novemb haifa israel stephen roderick hine gari tyson david whalley address instruct fetch bottleneck use instruct regist file acm sigplan notic v n juli oliv rthing jen knoop bernhard steffen spars code motion proceed th acm sigplansigact symposium principl program languag p januari boston ma usa christoph w fraser instruct direct interpret lzcompress program softwarepractic experi v n p april rpd beszd rudolf ferenc tibor gyimthi andr dolenc konsta karsisto survey codes reduct method acm comput survey csur v n p septemb