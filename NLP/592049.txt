t explanationbas scenario gener reactiv system model a reactiv system control mani use complex realworld devic toolsupport specif model help softwar engin design system correctli one tool scenario gener construct input event sequenc spec model reach state satisfi given criteria uncov counterexampl desir safeti properti explain featur interact concret term requir analyst even provid onlin help end user learn use system howev exhaust search algorithm model checker work limit case problem highli intract function rich model correspond natur complex system engin wish design paper describ novel heurist approach problem applic larg class infinit state reactiv system key idea piec togeth scenario achiev subgoal singl scenario achiev conjunct subgoal scenario mine librari captur independ requir acquisit explanationbas gener abstract may coinstanti interleav approach implement present result appli tool scenario gener problem aris case studi telephoni featur valid b introduct reactiv system control mani use complex realworld devic telephon switch air space craft softwar agent featurerich system difficult design correctli particularli distinct function featur design differ peopl differ time lifecycl product famili specif model allow engin appli rel sophist valid tool simul coverag analysi model check theorem prove rel abstract model system behavior order find design error implement abstract model make mani reason techniqu tractabl valid spec model use start point code genera tion document behavior system support mainten evolut spec model tool suit benefit significantli scenario gener construct input event sequenc spec model reach state satisfi given criteria tool uncov counterexampl desir safeti properti explain featur interact concret term requir analyst increas test coverag even function document show end user achiev goal still learn use system howev model checker capabl gener scenario certain limit class reactiv system finit state machin small or highli symmetr state space problem intract function rich model aris natur abstract system engin wish design exampl addit requir search infinit state space model incorpor arithmet oper requir scenario gener find satisfi instanc arbitrari arithmet constraint undecid paper describ novel heurist approach call izat applic larg class infinit state reactiv system key idea instanti piec togeth abstract scenario achiev subset conjunct goal predic singl scenario achiev conjunct sub set scenario mine librari concret scenario captur independ requir acquisit critic abstract via explanationbas gener approach sound incomplet succeed find scenario case satisfi goal predic howev intend fast even fail case practic interact tool moreov approach power increas ad scenario librari so requir uncov specifi power tool grow natur even incomplet gener quit use ful typic engin discov eg via static analysi proof attempt descript state spec inconsist may aris correct properti may violat scenario gener run descript whenev gener success definit design flaw found engin focu attent first case may even satisfi put later design process known problem fix fix first problem may either alter elimin one anyway gener fail put scenario come close goal possibl help well paper sum three key idea ffl current limiteddomain exhaust search approach such model check scenario gener enough need usabl scenario gener accommod express logic larg state space even though problem highli intract ffl heurist sgen approach base mine abstract requir knowledg use explanationbas gener appli richli express logic larg state space ffl moder size case studi involv featur interact telephoni give initi empir evid sgen practic use section defin term describ tool suit sgen implement next three section make key point conclud discuss relat work limit futur work model work perform within interact specif acquisit tool isat framework isat prototyp tool suit reactiv system design intend support fulllifecycl spec model well code gener reactiv system not necessarili finit state machin react parameter input event chang state perform act thought output event isat base two hypothes ffl function requir reliabl elicit valid requir concret formal behavior scenario ffl specif must execut amen automat analysi design construct reactiv system model execut spec languag requir specifi function requir concret scenario latter interleav sequenc input event act state observ requir true thu crucial sgen natur part design lifecycl acquisit librari valid concret scenario describ system behavior model formal backpropag isat spec model consist theori definit togeth set event handler theori defin type function semant axiom pure comput logic well signatur state relat event act make system order support model simul execut primit function declar model theori must includ total oper function capabl comput valu function input domain non error typecompat output valu input outsid declar domain isat model theori somewhat similar comput logic describ thu isat support arbitrari function rich ness bound user willing abil code implement function provid logic axiom support reason tool see below exampl model oper arbitrari data structur use rich good advantag work appli isat specif implement email channel system isat model oper messag data structur list user messag even databas relat object event handler express limit procedur languag pebf procedur eventbas formal ism semant relat rulebas ebf describ detail pebf crucial paper except support predic backpropag oper backprop note pebf need input languag seen design mani domainappropri frontend formal eg domainspecif languag graphic program environ may compil p ebf formal beyond scope present paper howev formal state isat model repres collect parameter partial function relat data domain type exampl relat address call store address ie phone number object repres ongo call if ani state valu refer within p ebf express via lookup oper exampl lookup call return current call extens involv ani state predic booleantyp isat express predic may parameter type formal paramet state predic one address paramet usr and member usr lookup knownaddress equal idl lookup mode usr not equal nocal lookup call usr predic repres state idl address nevertheless still valid call object negat desir state invari thu gener scenario reach state prove exist design error backprop oper formal isat backprop take six argument return three valu a p state predic list actual concret paramet p p true evalu model s state state model appli concret input event e result new state pictori true return valu e event schema variabl of concret event e defin fresh formal paramet p state predic take argument p plu formal e list actual p p a true s moreov specifi a state actual paramet appli eae model result state p ap clarifi formal p union formal p event schema e thu actual list valu formal e formal p intuit backprop comput suffici not necessarili necessari condit event e state prior appli e p true afterward backprop appli explanationbas gener pebf formal other describ similar oper dijkstra predic transform igerashi et al verif condit gener beyond scope paper explain algorithm detail exam ple state user mode idl event result state mode dial backprop appli paramet predic equal dial lookup mode return event schema offhook y predic and equal idl lookup mode x equal x y the actual list bind x y intuit mean offhook idl user user move dial mode backprop note succeed scenario trace involv sequenc input event iter appli backprop get entir gener scenario initi predic depend state becaus isat scenario defin never succeed depend uniniti state valu rest paper refer oper backprop take model scenario trace predic backpropag togeth satisfi actual list return fulli backpropag predic actual list list event schema make gener scenario isat tool overview isat exploit two hypothes provid suit analysi tool help design produc specif meet true need requir isat includ follow tool ffl scenario simul take scenario model execut model determin whether scenario repres correct behavior model thu requir scenario directli valid ffl coverag analysi report state never reach by statement model execut by requir scenario help design elicit adequ requir requir ffl layer theorem prove techniqu prove arbitrari correct properti state invari pseudost diagram ffl conflict detect return predic describ state model reach them deriv inconsist next state potenti caus either crash simul or wors implement system inconsist result set state relat two inconsist valu rais conflict output event play ringback tone busi tone time phone coverag analysi conflict detect proof attempt produc state predic appli scenario gener order discov whether repres reachabl state model scenario gener problem formal scenario gener problem take model state predic p find sequenc l concret input event list actual paramet execut l start undefin initi state result state satisfi concentr conjunct state predic ie whose express consist logic collect predic method appli disjunct conjunct state predic appli concurr disjunct requir engin effici beyond scope paper section discuss way tool suit benefit solv problem rich formal model checker symbol model checker guarante find properti valid model return concret counterexampl scenario illustr vi olat thu explor circumst tool solv scenario gener problem invent differ way solv it model checker exhaust search state space system test properti state thu limit size state space handl model checker exploit limit form state space symmetri handl system larger space eventu run state explos problem symbol model checker check properti impress larg space clear techniqu extend handl nonboolean logic survey model check relat theorem prove verif see simpli avoid model larg state space believ answer no sever common type design problem manifest complex larg unbound state space model system exampl complex system frequent design modular fashion design function featur independ combin featur set meet custom market need telephon switch system good exampl approach yet mani system built way problem even though individu featur valid isol combin may lead undesir interact lead faulti behavior way tool discov interact model featur combin follow featur system ha complex must model order detect interact anoth reason limitedspac approach final answer difficult enough abstract make problem tractabl yet retain enough detail manifest problem interest particular properti check may requir differ handconstruct model ab straction sinc design know advanc problem system ha could lot wast effort andor fals confid result deal complex model abstract rel straightforward singl one use properti final anoth reason prefer singl easili produc abstract clearli faith system possibl gener implement directli model either code synthesi direct manual implement of ten abstract necessari tractabl miss much detail allow direct map implement exampl alur et al report model check effort phone switch necessari model queue data structur bit integ repres number item queue implement must suppli detail queue implement well system behavior depend actual content queue scenario gener hard soon represent languag allow event state parameter function ad uncomput constraint satisfact problem problem combinatori search larg state space exampl design commonli need model arithmet list data structur text manipul function pattern match etc possibl defin system properti satisfi system reach state satisfi arbitrari sentenc rich theori prove state reachabl undecid godel incomplet theorem gener scenario actual reach even harder combinatori search thu summari want abl appli scenario gener complex model formal yet problem goe mere search un comput hope case find approach solv problem use mani case take long it also requir whenev tool return scenario actual satisfi goal predic sound goal sgen approach sgen approach let us term overal conjunct state predic goal predic individu conjunct make conjunct predic simpli conjunct two key insight behind algorithm first librari requir scenario unlik scenario reach state satisfi goal predic nevertheless like scenario reach state satisfi set conjunct thu might find scenario somehow past togeth singl scenario achiev full conjunct typic two scenario oper differ data item exampl scenario may achiev set conjunct address scenario achiev set address thu two concret scenario cannot interleav form scenario achiev union set singl address howev second key insight solv subproblem abstract two scenario use backprop find common instanti bind variabl data valu union two predic subset satisfi common instanti found heurist search merg two event sequenc one achiev union conjunct set appendix give precis highlevel pseudocod descript sgen algorithm follow illustr exampl taken case studi consid goal predic and member y lookup knownaddress lookup fpractiv y equal dial lookup mode x lookup tcsactiv y member x lookup tcsscreenedlist y describ state known address y two featur fpr tc activ x tcsscreenedlist x dial initi sgen first mine librari discov scenario init initaddress activatetc offhook result state satisfi conjunct and member y lookup knownaddress equal dial lookup mode x lookup tcsactiv y member x lookup tcsscreenedlist y bind x y sinc unlik find anoth scenario fortuit achiev rest goal constant appli backprop predic trace scenario get gener scenario init initaddress x activatetc y x offhook x subject backpropag condit equal x y sgen also record actual bind recurs step sgen rec continu search mine librari inform satisfi remain conjunct goal case discov among other scenario activatefpr achiev remain conjunct lookup fpractiv y y bound note sinc oper differ constant cannot directli interleav get scenario reach desir conjunct appli backprop remain conjunct trace get gener activatefpr y t t w subject constraint other implicit type constraint actual bind g call coinstanti routin attempt find common instanti g g obey set constraint case sinc constraint set g empti coinstanti quickli find common instanti set final call mergescenario two scenario g i g i denot instanc g g obtain appli mergescenario also take two predic satisfi g i respect check whether result satisfi simultan case abov mergescenario find follow interleav doe inde satisfi conjunct set init initaddress activatetc activatefpr offhook point still unsatisfi conjunct goal sgen rec would call backprop gener result scenario recur search yet anoth scenario satisfi next subset coinstanti mergescenario fail move next candid search cf appendix a librari mine first step sgen search librari execut trace requir scenario state set conjunct satisfi subroutin minelibrari accomplish follow scenario requir librari first gener execut trace call simul extract trace set data valu group type appear trace then possibl welltyp assign data valu formal paramet goal predic search state execut trace conjunct first becom true for paramet as signment creat predic group satisfi pg state record assign set conjunct satisfi set satisfi conjunct term satset pg minelibrari return entir collect pgss found way trace sort list decreas order size satset sgen consid earlier pgss satisfi predic onc minelibrari linear total number state trace librari importantli howev proport number paramet assign exponenti number goal predic paramet current implement seem work adequ fast case studi exampl paramet each may necessari limit number assign consid goal predic mani paramet coinstanti coinstanti heurist attack in gen eral uncomput problem coinstanti simpli tri possibl welltyp assign constant paramet g g constant pool simpli union constant actualbind pgss g g gener proven effect case studi take neglig time see statist below necessari coinstanti made consid larger constant pool scenario scenario merg mergescenario take two scenariopred pair scenario result state satisfi predic goal return interleav two scenario satisfi predic mergescenario attempt check possibl interleav would requir check exponenti mani in sum length two input scenario interleav worst case note worst case occur time interleav exist fairli common design input scenariopred pair left scenario predic right scenario predic approach sequenti select front event either left right scenario add end result scenario left right empti possibl way wait left right empti check predic would result exponenti worst case mention abov instead mergescenario heurist limit search follow time select event e l left scenario check see whether result scenario extend point remaind right scenario right predic would satisfi not e l veto otherwis proce next choic by induct one show instead extend result remaind left scenario left predic would also satisfi dual check done event select right front event left right ident algorithm also attempt third option ad one event discard other note sinc interleav satisfi predic end contain intermedi point check would fail approach less power brute forc search how ever case studi mergescenario fail total scenario satisfi attempt gener scenario satisfi tabl sgen success case studi brute forc search would succeed yet much time faster averag x case studi ran sgen distinct scenario gener problem aros larger case studi featur interact telephon switch specif the studi actual produc problem three duplic discard paper larger studi actual tool contest associ featur interact workshop system model telephon switch implement plain old telephon servic pot plu function featur call forward cf termin call screen tc freephon rout nine other sgen case studi perform four twelv model pot eight featur includ here relat paper explain use isat tool set model spec detect variou type featur interact among them mani predic describ state undesir thing may happen featur inconsist becom manifest conflict featur correct properti violat absenc scenario genera tor left user determin whether state predic describ reachabl state model thu problem provid moder complex test power use scenario gener repres problem may encount tool full data avail result predic averag paramet conjunct each tabl show result run gener scenario gener refer trial sgen succeed find scenario satisfiableno scenario refer case fail find scenario even though predic satisfi not satisfi refer case determin through extern mean unsatisfi and henc exist scenario gener scengen scengen total librari mine backprop coinstanti merg tabl sgen aggreg run time round nearest second tabl show run time statist tri al time measur mhz macintosh clone mb memori run isat system macintosh common lisp tabl noscengen onli condit includ case tool find scenario whether goal predic satisfi sinc user equival wait tool finish discuss case possibl gener scenario sgen succeed time thu user sure least case illustr real design error therefor concentr first fix them note one error caus scenario fail due conflict would otherwis succeed far enough reach second error state thu fix error caus sgen succeed fail previous know one definit case and other suspect sort error interfer occur case studi first ran studi case fail individu conjunct cover scenario librari cours known way satisfi singl conjunct goal predic satisfi either fortun rel easi discov scenario cover singl conjunct member x lookup tcsscreenedlist x easili creat three scenario cover case result one success sever failur result reflect addit scenario turn time see averag time per trial second overal succeed case take second averag sec maximum fail case requir second sec maxi mum note distribut time radic differ succeed fail case mergescenario domin fail case minelibrari domin succeed case coinstanti never signific suggest room improv power by check larger constant pool exampl without significantli harm overal run time hand must extrem care increas power mergescenario sinc bottleneck fail case result intend suggest futur algorithm improv believ significantli reduc care reengin effort the current isat system exploratori prototyp note also result depend model scenario librari well summari seem least valid purpos imperfect scenario gener still quit use long take long cours alway hope better success av erag futur work go improv heurist howev desir keep time rel low case includ failur case tool still usabl thu must engin powerspe tradeoff care relat work discuss model checker abov summar here model checker use solut problem scenario gener long one effect gener model limit formal necessari run tool tractabl howev reason believ need handl complex formal address work least reason discuss section addi tion may wish use scenario gener way beyond valid onlin help system comparison amus estim state space size necessari model telephoni case studi spec finit state formal model featur n user estim least reachabl state log base consid callwait similar featur need least user add forward multius featur one easili imagin properti refer user lead would challeng even best model checker note even infinitest model checker bultan et al highli restrict system restrict state space cross product boolean state space one repres integ inequ higher dimension polyhedra increas model check power ad special constraint reason show promis even clear reactiv system peopl design express within restrict formal due common occurr function mix argument sever differ type anoth class approach problem may seem applic aibas planner strip prodigi problem appli system spec model provid plan oper plan oper must explicitli list consequ exampl strip oper must add delet list simi larli macro oper learn ebgbas prodigi system must explicitli includ goal achiev limit user scenario gener may give goal statement wish term function defin logic plan oper deriv spec model potenti achiev mani infinit mani fact differ goal far mani store explicitli even could bound vocabulari sgen avoid problem abstract reason fli minelibrari backprop knowledg store raw scenario trace unadorn goal inform also work tradit test literatur gener test input cover given path program exampl gotlieb et al describ constraintbas approach essenti reduc tri find satisfi assign boolean function express is cours uncomput enrich formal includ eg arithmet howev constraint base approach may prove use improv coinstanti minelibrari address state space search need handl reactiv system final spec model tool suit provid and mani contrast tool isat scr tool suit environ may incorpor model check none capabl deal rich formal scenario gener knowledg limit futur work basic limit sgen fundament hillclimb algorithm particu lar exampl case studi easili solv merg two scenario li brari sgen cannot find exampl one scenario achiev particular conjunct set halfway event sequenc sever step remov backprop irrelev achiev set turn necessari howev one wish later merg second scenario achiev rest goal these extra step thing like hang phone activ featur subsequ scenario must start idl state power come rich scenario librari therefor like use develop process environ encourag formal scenario sgen pro vide perhap new argument favor integr formal scenario softwar process sgen still earli youth mani way improv exampl search sgen consid first pg given satset better expens approach tri pg backprop gener isomorph one seen previous effect runtim must monitor how ever mergescenario time bottleneck fail case may profit work limit search minelibrari need search fewer case predic take mani paramet cours result one case studi con clusiv futur work investig sgen s effect domain system conclus scenario gener tool use specif model tool suit focus attent design error demonstr present help commun error requir even implement onlin help system exhaustivesearch approach model check use tractabl rich formal allow direct system model express sgen heurist approach highli uncomput problem base simpl idea piec togeth partial satisfi scenario requir librari use explanationbas gener abstract order abl coinstanti them result case studi encourag sgen seem succeed often enough use yet effici enough engin interact tool work need empir valid seem promis pursu r model check realtim system telecommun applic comput logic hand book verifi system integ constraint boolean predic composit approach state beyond formal method state art futur direct featur interact detect tool contest learn execut gener robot plan automat test data gener use constraint solv techniqu systemat increment valid reactiv system via sound scenario gener reactiv system valid use autom reason fragment librari avoid unwant email featur combin interact detect via foregroundbackground model complet case studi data paper autom consist check requir specifi cation design valid comput protocol automat program verif i logic basi impl mentat quantit result concern util explanationbas learn seven layer knowledg represent reason support softwar develop tr