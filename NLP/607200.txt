t parallel mine outlier larg databas a data mine new import fast grow databas applic outlier except detect one kind data mine appli varieti area like monitor credit card fraud crimin activ electron commerc everincreas size attribut dimens databas previous propos detect method two dimens longer applic time complex nestedloop nl algorithm knorr ng proc th vldb linear dimension quadrat dataset size induc unaccept cost larg dataseta effici version enl parallel version penl introduc theori improv perform penl linear number processor shown perform comparison enl penl use bulk synchron parallel bsp model great improv verifi experi parallel comput system ibm sp result show good choic mine outlier cluster workstat lowcost interconnect commod commun network b introduct data mine knowledg discoveri task classifi four gener categori a depend detect eg associ rule b class identif eg classif data cluster c class descript eg concept gener d excep tionoutli detect research concentr first three categori exist work outlier detect lie field statist although author current depart comput scienc univers maryland colleg park work paper done univers hong kong hung cheung outlier also consid exist algorithm main target algorithm tri remov toler fact identif outlier appli area electron commerc credit card fraud detect analysi perform statist profession athlet even explor satellit medic imag exampl databas transact contain sale inform transact would involv small amount money item thu typic fault detect discov except amount money spent type item purchas time locat second exampl satellit nowaday use take imag earth use visibl light well electromagnet wave detect target potenti oil field suspici militari base detect except high energi temperatur reflect certain electromagnet wave use locat possibl target simpl algorithm call nestedloop algorithm nl propos which howev complex okn k number dimens n number data object number pass dataset linear n real implement perform studi find major cost calcul distanc object though nl good choic dataset high dimension larg number calcul make unfavor cellbas algorithm propos need three dataset pass howev suitabl high dimens time complex exponenti number dimens nl alway outperform cellbas algorithm four dimens paper improv nl high dimension dataset common data warehous one approach improv nl algorithm parallel it paper definit outlier origin nl describ next subsect introduct nl improv reduc number calcul result algorithm enl given section section enl parallel reduc execut time sharednoth system section perform improv analyz use bulk synchron parallel bsp model that perform studi given section final give discuss relat work section paper mainli focus identif distancebas outlier although parallel algorithm also modifi perform expens step find densitybas outlier relat work densitybas outlier describ section distancebas outlier given definit outlier follow given paramet p d object dataset dbp doutlier least fraction p object lie greater distanc o definit maximum number object within distanc outlier number object let f underli distanc function give distanc pair object then object o d parallel mine outlier larg databas neighbourhood contain set object q within distanc ie notion outlier suitabl situat observ distribut fit standard distribut reader refer gener notion distancebas outlier support statist test standard distribut work densitybas outlier describ section assumpt notat nl algorithm algorithm nl blockori nestedloop design block involv one disk io ie may necessari take one disk io read block paper page need one disk io access onli thu total number page particular dataset constant total number block dataset chang size block nl algorithm design uniprocessor system one local memori one local disk effect cach insignific here make assumpt gener accept real system addit disk buffer oper system besid buffer use algorithm disk access sequenti let n number block dataset k dimension n number object dataset p number page contain block number object page let time access page disk io time comput distanc object comp linear dimension origin nl origin nl algorithm clarif describ here assum buffer size for store dataset b dataset size buffer first divid equal halv call first second array dataset read first second array predefin order object first array distanc object array directli comput count object dneighbourhood maintain algorithm nl fill first array of size b dataset block object object first array do a count number object first array close distanc d count nonoutli repeat block compar first array do a fill second array anoth block but save block never serv first array last hung cheung b unmark object first array do i increas count number object second array close distanc d count mark nonoutli report unmark object first array outlier second array serv first array befor stop otherwis swap name first second array repeat step time complex state okn k dimension n number object dataset disk io time consid briefli fact cpu time io time consid detail analysi comput time disk io time given below comput time total time calcul distanc pair object upper bound n comp ie number calcul distanc quadrat number object dataset actual number calcul depend distribut data locat data block distanc d number turn depend fraction p sinc usual case number outlier small small calcul particular object done count exce result actual number calcul much less n usual within half shown section disk io time sinc dataset divid block total number block read nngammangamma number pass dataset n total number page read np p note p directli proport buffer size fix buffer size n directli proport n complex on exampl follow exampl consid buffer block dataset denot a b c d ie block contain dataset order fill array compar follow a b c d total block read no read requir no read b c total block read c c d a b total block read b b c a d total block read tabl show order block load block stay two array buffer row show snapshot step step a parallel mine outlier larg databas block buffer disk io order b c array array l c buffer unchang total number disk io n block total number dataset pass enhanc nl nl redund block read comparison section new order propos result reduc comput time disk io time arrang that turn block read second array predefin order end seri readi block reach block first array mark done name two array swap order revers repeat block done result enhanc nl enl algorithm describ below object dataset count algorithm enl label block readi the block either readi done state fill first array of size b dataset block object object first array do a increas count number object first array close distanc d count mark nonoutli set blockread order forward repeat readi block without mark done compar first array specifi blockread order do a fill second array next block b object first array do i object j second array object j unmark hung cheung a increas count count j count mark nonoutli proceed next nonoutli report unmark object first array outlier second array mark done stop otherwis mark block first array done revers blockread order swap name first second array repeat step although time complex enl still okn k dimension n number object dataset cost comput disk io reduc compar nl comput time upper bound total time calcul distanc pair object still linear dimension origin nl algorithm count object first array updat howev enl count object updat comparison thu upper bound number calcul distanc reduc almost half compar nl actual reduct number calcul again depend distribut data locat data block distanc d number turn depend fraction p comparion perform nl enl shown section simplic upper bound number distanc calcul object block said np p fact need np p np time disk io time dataset divid block total number block read number pass dataset n total number page read fix buffer size n directli proport n disk io time complex nearli half nl exampl exampl extend illustr enl consid buffer block dataset denot a b c d ie block contain dataset order fill array compar follow a b c d total block read no read requir c b total block read parallel mine outlier larg databas b b c total block read c c total block read tabl show order block load block stay two array buffer row show snapshot step step a block buffer disk io order b c array array buffer unchang total number disk io block total number dataset pass parallel enl penl parallel enl parallel version enl run sharednoth system actual run processor penl almost reduc enl block read enl replac transfer block among processor commun network major advantag distribut costli comput nearli evenli among processor assumpt notat extend enl penl assumpt notat extend simplic assum sharednoth system node one processor node memori local disk dataset distribut equal size local disk node without overlap commun done messag pass network architectur design node send messag receiv messag time for simplic analysi later section make previou assumpt requir strict least requir internod commun possibl among node besid node arrang logic ring node two neighbour node logic arrang mean physic network architectur eg bu affect effect algorithm perform let n number block dataset np total number page dataset k dimension n number object dataset p number page contain block number object page number hung cheung object block n let time comput distanc object comp time internod commun node transfer page data comm time access page local disk io let p number processor node size local memori use disk buffer simplifi algorithm analysi assum local memori buffer size node data local disk number data block local disk integ ie number page dataset np multipl product number processor number page contain block pp algorithm node part dataset local disk number page local data np number object local data n node local memori size m divid array array contain block size p page first second array function similarli enl third array use temp buffer store data receiv neighbor node besid count object dneighbor object maintain penl modifi enl basic principl is node time block read node local disk distanc calcul done block transfer node neighbor node distanc calcul done use block receiv node anoth neighbour node repeat block pass neighbor node read anoth block local disk repeat again disk io oper replac rel fast internod commun huge number calcul distribut node greatli reduc execut time ie respons time algorithm penlnod id x label block readi the block either readi done state fill first array block object set blockread order forward set counter b set counter repeat readi block compar first array specifi blockread order do a set counter c object first array do i increas count number object first array close distanc d count mark nonoutli c set b go step f parallel mine outlier larg databas d b fill second array next block object first array do i object j second array object j unmark distt a increas count otherwis increas count count j count nonoutli revers order execut step g h send data first array neighbor node send data second array neighbor node receiv data neighbor node store temp buffer third array i increment counter c swap name second array third array counter continu iter step otherwis go step e second array mark done report unmark object first array outlier otherwis mark block first array done revers blockread order swap name first second array repeat step time analysi penl given briefli later detail analysi given use bulk synchron parallel bsp model node oper similar enl except block transfer node comput done it thu brief upper bound comput time node is node n block local data local disk io time enl execut n block data disk io time node internod commun time node obviou upper bound comput time linear reciproc number processor internod commun time decreas increas number hung cheung processor disk io time quadrat reciproc number processor pleas note p chang size buffer total size local memori fix ie pp constant internod commun time node vari dataset size number processor comput time local disk io time node linear reciproc number processor although upper bound comput time shown actual calcul distribut quit evenli among node nearli linear reciproc number processor shown perform studi section exampl follow give exampl execut penl dataset block use four node node four local block block evenli distribut four node four local block node x denot ax bx cx dx order fill array disk io internod commun compar node follow io commun total block read commun no read requir nicat b io b b b commun total block read commun b b no read requir b nicat total block read commun c c no read requir c c c commun total block read commun node number disk io block number dataset pass internod commun time tabl appendix show detail order block load node block transfer node block stay two array buffer node run enl use singl node amount memori node penl total number disk io block total number dataset pass ratio disk io enl penl use node improv signific howev give enl amount memori total sum memori node gain benefit disk io size block larger now total number block much less nevertheless still signific improv perform comput time major cost nearli evenli distribut node penl shown section parallel mine outlier larg databas optim follow optim penl outer iter step a i approxim first half inner iter e i reduc redund block transmiss comput exampl section inner iter comput block c skip upper bound cost comput outer iter reduc pnp p therefor upper bound total comput cost reduc therefor computationcostreductionratio the ratio reduct upper bound comput cost optim penl pgammak n number block node exampl section reduct practic larg number local block reduct signific paper refer origin penl algorithm unless specifi simplic implement analysi parallel algorithm theoret analysi use bsp model studi perform real execut algorithm theoret analysi given here bsp bulk synchron parallel model use analyz penl algorithm hardwar softwar characterist model match penl platform requir work principl bsp comput consist set processormemori pair commun network deliv messag pointtopoint manner mechan effici barrier synchron processor bsp comput twolevel memori model ie processor physic local memori modul memori nonloc access uniformli effici way penl requir node local memori buffer access block buffer node done synchron commun block transfer done nodetonod manner bsp comput oper follow way comput consist sequenc parallel superstep superstep sequenc step follow barrier synchron point nonloc memori access take effect penl requir barrier synchron block transfer hung cheung superstep processor carri set program thread follow i perform number comput step set thread valu held local start superstep ii send receiv number messag correspond nonloc read write request superstep penl perform comput item one two block access disk load new block execut block transmiss simpl model bridg hardwar softwar bsp model provid portabl across divers platform predict effici seen model suitabl penl penl coars granular superstep consist lot distanc calcul follow messag pass cost analysi defin follow variabl l barrier synchron cost d ratio time cost local disk io access object ie time local disk io access page time comput distanc two object g ratio time internod commun transfer object ie time internod commun transfer page time comput distanc two object cost barrier ad penl algorithm shown below algorithm penlnod id x label block readi the block either readi done state fill first array block object page block np object page set blockread order forward set counter b repeat readi block compar first array specifi blockread order do a set counter c set counter object first array do i increas count number object first array close distanc d count mark nonoutli parallel mine outlier larg databas c set b go step f d b fill second array next block object first array do i object j second array object j unmark distt a increas count otherwis increas count count j count nonoutli f set barrier revers order execut step g h send data first array neighbor node send data second array neighbor node receiv data neighbor node store temp buffer third array i set barrier increment counter c swap name second array third continu iter step otherwis go step second array mark done report unmark object first array outlier otherwis mark block first array done revers blockread order swap name first second array repeat step therefor total cost algorithm deriv found appendix b first term comput second one disk io third one commun last one synchron pleas notic time comput upper bound therefor theoret analysi give reliabl valu actual execut time still act good refer comparison enl later block size page size object size constant found that dataset size larg n ae pnp ie local block number larg ffl comput cost quadrat dataset size linear reciproc number processor ffl disk io cost quadrat dataset size quadrat reciproc number processor hung cheung ffl commun cost quadrat dataset size linear reciproc number processor ffl synchron cost quadrat dataset size linear reciproc number processor pleas note p chang size buffer total size local memori fix ie pp constant cost still quadrat dataset size dataset size larg n ae pnp ie local block number larg besid ffl comput cost still linear reciproc number processor ffl disk io cost linear reciproc number processor ffl synchron cost linear number processor analysi tell us total memori fix still benefici increas number processor shown major cost comput linear reciproc number processor hand number processor kept unchang buffer size node ie block size p vari comput cost linear proport number page block p thu smaller block size fewer comput necessari besid local block number increas make computationcostreductionratio optim algorithm in section becom smaller howev recommend use small buffer p small n ae pnp p effect reduct comput cost small p small besid smaller block size also increas cost disk io commun synchron comparis penl enl compar penl enl given amount memori enl correspond cost is ii number page block enl enl buffer divid two array total amount memori p penl local buffer divid three array total amount memori pp give amount memori penl enl better implement made suffici divid local buffer two array howev later section still choos three array order give advantag sequenti algorithm comparison still show parallel algorithm outperform them parallel mine outlier larg databas assum that wors case ratio number calcul actual done enl total sum number calcul actual done node penl let f fraction number calcul actual done enl fraction penl f enl comput cost in penl comput cost cpenlcomp linear number processor thu alway better choic use penl even total buffer size fix perform studi experiment setup implement experi base dataset object dataset consist trade index number hksar march object one four categori import domest export reexport total export four categori equal number object object six attribut index valu yearonchang percentag chang index valu index unit valu yearonchang percentag chang index unit valu index quantum yearonchang percentag chang index quantum sinc reallif dataset quit small want test algorithm larg diskresid dataset gener larg number object simul distribut orgin dataset test distanc defin number outlier restrict within percent object simul real situat program run ibm sp system instal univers hong kong system consist three frame frame consist mhz ibm psc risc processor individu node local ram mb mb local disk storag gb system file local scratch space node frame interconnect high perform switch three frame also link interfram high perform switch theroret peak perform processor mflop test sequenti program parallel program run dedic mode use loadlevel the batch job schedul section nl enl run anoth system sp system time limit hour run sun enterpris ultra ultrasparcii cpu run mhz gb ram four gb hard disk sp order make comparison fair fix total amount memori node penl nl enl abl hold object number object chosen number block test reason hung cheung result number object block np p nl penl processor respect number object impli number block penl nl implement three algorithm nl enl penl use c mpi messag pass interfac librari use penl messag pass among multipl processor penl better implement made suffici divid local buffer two array rather three array howev still chose three array simplic order give advantag sequenti algorithm comparison still show parallel algorithm penl outperform them note penl node part memori need act count object decreas memori act count decreas p the number page block increas total cost howev addit cost small compar improv nl object databas usual contain ten even hundr attribut may integ float point even string size count small compar size object p decreas bit total number object huge undesir hold count memori count store local disk total size count small compar size dataset thu extra disk io time access count affect perform bit onli implement enl penl count resid disk load requir method good induc extra disk io experi decid defin object six dimens long integ data type order make effect read write count signific howev result show effect minor compar reduct comput cost besid need extra commun transfer count object node contain object disk outlier report soon possibl better way that end count gather node outlier report combin count extra commun cost littl compar comput cost chose second method implement final point note comput architectur processor cach processor larger total cach capac thu hit ratio larger perform enhanc besid exist workstat cluster form low cost perform penl rather instal new advanc costli supercomput although experi conduct supercomput result show commuic cost minor thu commun network low cost suffici nl vs enl section compar perform nl enl parallel mine outlier larg databas object number execut time comput time disk io time calcul number enl execut time nl execut time figur tabl comparison nl enl object number execut time comput time disk io time calcul number enl execut time nl execut time figur tabl comparison nl enl cont figur see enl better nl although improv great moreov tabl figur found major cost comput distanc greatli reduc penl show later besid see increas execut time approxim quadrat increas object ie execut time complex on indic unlik use nl enl deal larg number object howev penl help reduc time sequenti vs parallel compar perform sequenti program nl parallel program penl figur show penl variou number processor outperform nl whatev number object is even number processor two onli perform improv percent said total amount memori given penl nl clear penl alway better choic multiprocessor system cluster workstat avail result nl object penl processor object avail execut time exce time limit job sp system hung cheung object number figur comparison execut time nl enl processor number number object figur tabl comparison execut time nl penl secondsnl processor number execut time sec object object object object theta theta theta theta theta object figur execut time number processor parallel mine outlier larg databas processor number execut cpu io commun synchron figur tabl comparison differ cost nl penl object second variat processor number section see perform penl relat number processor figur see nearli straight line drop steadili almost parallel indic scalabl stabl case execut time almost halv number processor doubl near theoret analysi predict ie execut time approxim linear reciproc number processor again increas execut time approxim quadrat number object ie execut time complex on note execut time linear dimension thu still prefer databas high dimension comparison comput disk io commun time synchron time section look clearli contribut execut time com putat disk io commun synchron time penl figur show percent execut cost come comput time sinc penl distribut comput oper among processor nearli evenli execut time reduc greatli improv consid focu reduc comput oper hand disk io commun synchron time much minor trend theoret analysi disk io time increas slowli number processor read write count block size smaller number block load transfer larger when new block come count old block written count new block read sum number page access processor close matter mani processor use total number page access count increas number processor count read written time thu disk time increas bit commun time synchron time depend much system moment execut eg bandwidth condit commun network hung cheung discuss relat work nl algorithm straight forward method mine outlier databas enl propos reduc comput disk io cost furthermor algorithm penl propos parallel enl analysi show total buffer size system fix comput cost linear reciproc number processor verifi perform studi great improv caus nearli even distribut comput oper among processor perform studi indic percent execut time come comput execut time also linear reciproc number processor result show penl effici compar nl enl improv focus reduc comput oper sinc cost like commun time minor lowcost cluster workstat commod processor interconnect lowcost commun network chosen platform run penl rather much expens supercomput cluster also much cheaper easier build maintain upgrad achiev similar perform nl singl high perform processor system breunig et al introduc definit new kind outlier densitybas outlier investig applic heurist identifi meaning local outlier notion distancebas outlier cannot find first step comput lof local outlier factor materi minptsubnearest neighborhood page modif made parallel algorithm perform step also expens step comput lof instead updat count object dneighborhood object node store temporari minptsubnearest neighborhood object final minptsubnearest neighborhood object obtain combin temporari minptsubnearest neighborhood object calcul node choos parallel nl algorithm instead use penl algorithm simplifi implement reduc disk storag space temporari minptsubnearest neighborhood case node store minptsubnearest neighborhood object block stay first array onli differ read order block increas number block io comput by amost doubl similar search highdimension vector space use vafil method outperform method known detect outlier base vafil approach differ approach nestedloop cellstructur take use vafil consider futur work r mine associ rule set item larg databas outlier statist data scientif comput bulk synchron parallel architetur lof identifi densitybas local outlier trade index number a densitybas algorithm discov cluster larg spatial databas nois knowledg discoveri databas attributeori approach outlier parallel algorithm mine outlier larg databas digit money card technolog find aggreg proxim relationship common spatial data mine a unifi notion outlier properti comput algorithm mine distancebas outlier larg dataset effici effect cluster method spatial data mine a quantit analysi perform studi similaritysearch method hifhdimension space birch effici data cluster method larg databas tr mine associ rule set item larg databas find aggreg proxim relationship common spatial data mine quantit analysi perform studi similaritysearch method highdimension space algorithm mine distancebas outlier larg dataset knowledg discoveri databas effici effect cluster method spatial data mine unifi approach mine outlier digit money card technolog