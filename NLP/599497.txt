t analysi optim activ databas a introduc new formal semant activ databas reli transact rewrit techniqu userdefin transact view sequenc atom databas updat form semant atom unit translat mean activ rule induc one transact embodi activ rule semant either immedi defer rule semant confluenc equival optim formal investig character solid framework natur extend known model relat databas transact b introduct activ databas base rule allow us specifi action taken system automat certain event occur condit met wide recogn activ rule provid power mechan manag sever import databas activ eg constraint mainten view materi reason larg use modern databas applic extens studi last year howev variou approach activ rule execut gener specifi inform naturallanguag descript follow often number rule increas activ rule process becom quickli complex unpredict even rel small rule set goal paper provid formal approach activ rule process reli method rewrit user defin transact reflect behavior set activ rule show known result transact equival extend framework preanalyz properti transact rule start introduc simpl transact languag base well known model relat databas transact view collect basic updat oper form semant unit quit gener activ rule languag whose comput model setori like differ approach consid two differ execut model activ rule immedi defer or delay former tempor decoupl event condit action part latter tempor decoupl event part one side condit action part side defin context rewrit process take input user defin transact set activ rule produc new transact embodi activ rule semant sens explicitli includ addit updat due activ process defer modal new transact origin one augment induc action wherea immedi modal new transact interleav origin updat action defin activ rule follow execut new transact passiv environ correspond execut origin transact within activ environ defin given rule approach consid rewrit techniqu usual appli restrict context formal con vers believ formal simpl approach improv understand sever activ concept make easier show result said execut model transact extend relat transact model extens investig reason choic twofold firstli wish use well known framework formal set solid transact execut model secondli wish take full advantag result alreadi avail transact equival optim way abl formal investig static sever interest properti activ rule process ing first check whether two transact equival activ databas then due result transact equival also abl provid result confluenc final optim issu address final remark note that approach activ rule process requir specif runtim support simpler implement other built scratch remaind paper organ follow section detail overview relat databas system confluenceoptim transact rewrit loop check figur compon approach approach present use sever practic exampl section defin basic framework section introduc systemat way notion activ databas rewrit transact techniqu respect properti equival investig section studi sever result activ rule process deriv section final section draw conclus overview approach section inform present approach describ figur basic idea express activ rule process four step comput given user defin transact set activ rule p first step check whether p present kind recurs time be present simpl character address issu detail present paper second step take p t transform transact induc one embodi semant rule p gener step sever transact gener differ induc transact take account fact updat origin transact may trigger sever rule time correspond action execut differ order yield differ result third step confluenc optim issu activ rule process investig analyz transact comput second step done extend known techniqu test equival databas transact then last step accord result analysi one transact final submit relat databas manag system point two import aspect approach firstli reli formal basi allow us deriv solid result secondli rewrit confluenceoptim step done static without access underli databas therefor perform effici compil time said consid immedi defer activ rule execut model immedi modal reflect intuit rule process soon trigger defer modal suggest rule evalu execut end origin transact thu two differ rewrit procedur given specif consid user defin transact sequenc updat transact transform immedi modal induc one denot sequenc updat comput immedi reaction updat respect set activ rule p reaction deriv match updat u event part activ rule clearli obtain updat trigger rule henc reaction comput recurs note abov sever transact obtain way note immedi modal induc transact interleav user defin updat rule action defer modal induc transact form henc reaction defer or postpon end user transact induc updat trigger rule reaction origin updat recurs comput use immedi modal give number practic exampl clarifi discuss follow activ rule react updat personnel databas compos two relat empnamednames depdnamemgr rule express gener languag refer specif system whose intend mean evid inde rule easili express practic activ rule languag r delet dep delet emp dnameddnam r insert new emp namenewenam dnamenewednam r insert new emp newes k insert dep valu dnamenewednam mgrnewenam intuit first rule state depart delet employe work depart must remov cascad delet second one serv enforc constraint employe work one depart onli state employe tupl say johntoyk insert relat emp old tupl john associ depart differ toy must delet final last rule state insert employe salari greater k elig manag depart work so accord that tupl name depart new employe insert relat dep now provid follow simpl user defin transact first toy depart remov employe ad depart salari k insert emp valu namebilldnametoysalk inspect given activ rule easili realiz that run time first updat trigger rule r wherea second updat trigger rule r r therefor immedi modal rewritten compil time follow transact ti where denot immedi modal unfold respect activ rule new transact prefix denot induc updat insert emp valu namebilldnametoysalk insert dep valu dnametoynamebil obtain transact describ behavior transact take account activ rule immedi modal note anoth possibl translat last two updat switch second updat origin transact trigger two rule time name r r therefor two possibl execut order effect rule follow that gener user defin transact actual induc set transact one goal paper show that mani case possibl static check whether transact equival induc transact equival state activ program confluent respect transact t case execut one obtain transact implement expect behavior user defin transact within activ framework note assum presenc partial order rule framework easili extend take account let us turn attent defer execut model assum want move employe john toy book depart implement mean follow transact t insert emp valu namejohndnamebooksalk inspect transact rule static decid first updat trigger rule r sinc condit satisfi the salari new employe greater k thu rewrit transact take account activ rule defer modal follow possibl translat td d denot defer modal effect rule postpon end transact execut transact observ fact second updat discard without alter overal effect transact sinc effect includ effect third updat show optim perform induc transact transact implement expect behavior follow contrast user defin transact updat induc transact independ updat inde induc other fact consequ execut semant induc transact assum instanc runtim execut updat u induc transact null effect databas becaus exampl condit hold effect invalid subsequ updat then reason updat induc directli indirectli u execut well interpret need defin new transact semant take account inducerinduc relationship among updat clearli techniqu achiev confluenc optim must take account fact clarifi point consid transform transact defer modal accord previou discuss rewrit process gener follow transact insert emp valu namebilldnametoysalk insert dep valu dnametoynamebil howev easi see third updat invalid effect second one follow last two updat transact td induc updat must execut run time so rewrit transact defer modal simplifi follow thu need develop specif techniqu check equival optim induc transact done extend alreadi exist framework equival optim relat databas rest paper devot formal character issu discuss section model transact notion transact use paper base model relat transact introduc abiteboul vianu inform transact mean sequenc basic updat oper name insert delet tupl view semant unit specif restrict attent import class domainbas transact select tupl involv inspect individu valu tupl differ model describ also allow comparison predic preliminari let u finit set symbol call attribut and u let doma infinit set constant call domain a usual use notat indic singl attribut singleton fag also indic union attribut or set thereof mean juxtaposit name moreov assum technic reason domain disjoint total order relat scheme object rx r name relat x subset u databas scheme u collect relat scheme fr x distinct relat name union x s u tupl v set attribut x function x union domain that x va doma relat relat scheme rx finit set tupl x databas instanc databas scheme function that rx s srx relat rx denot tupx set tupl set attribut x inst set databas instanc databas scheme s throughout rest paper alway refer fix databas scheme set attribut u condit let x set attribut attribut x atom condit x express form ac c doma comparison predic mean symbol gamma evid gamma c equival c reason allow form atom condit clarifi shortli definit condit complex condit or simpli condit set attribut x finit set atom condit x tupl v x satisfi atom condit ac condit c satisfi everi atom condit occur c assum condit alway satisfi is contain atom condit alway fals eg c doma atom condit mutual exclus eg condit c set attribut x uniqu identifi set tupl x satisfi condit set call target c definit target condit target condit c set attribut x denot targc set tupl fv tupx j v satisfi cg note targc empti c satisfi say condit specifi complet tupl transact let us first introduc basic updat oper definit insert insert relat scheme r j express form r j c c condit x j specifi complet tupl effect insert r j c map eff r j c inst inst defin r definit delet delet relat scheme r j express form gammar j c c condit x j effect delet gammar j c map eff gammar j c inst inst defin r updat relat scheme insert delet note that sake simplic consid modifi oper here actual similarli modif accommod framework complex notat would increas dramat updat oper gener execut within transact is collect data manipul oper view semant atom unit definit user transact user transact finit sequenc updat effect transact composit effect updat contain is map eff exampl sql transact describ section easili express use notat introduc abov instanc transact page express follow two user transact equival alway produc result appli databas instanc is effect definit equival user transact two user transact equival denot case eff t normal transact accord describ character section transact satisfi properti call normal form transact syntact distinct updat disjoint target and therefor interfer conveni form sinc simplifi result algorithm moreov make easier specif reaction activ rule updat involv transact also show transact brought special form mean preprocess phase call normal oper perform polynomi time definit normal form transact normal form if pair updat u u j relat condit c c j c c j case targc follow result easili follow definit state that transact normal form two updat differ target target empti intersect two updat target condit lemma transact normal form target pair updat either ident disjoint condit pair updat target syntact equal proof assum way contradict transact normal form two updat u u j condit c c j targc target u u j differ c c j definit impli target disjoint contradict assum transact normal form two updat target differ condit definit transact normal form impli target inde disjoint contradict transact transform equival transact normal form split target condit suffici mani target end introduc number axiom call split axiom use transform transact equival transact normal form intuit axiom show transform transact equival transact contain atom condit form axiom sasa transform transact way possibl interfer pair updat two form avoid axiom sa sa axiom sa sa use order appli other specif former show gener condit compos singleton variou attribut latter show add condit attribut condit mention it definit split axiom follow axiom call split axiom c condit x x cj denot set atom condit c clearli one possibl way enforc normal form g g c i atom condit cg cg cg c element doma c follow result easili prove lemma split axiom sound is proof let us consid instanc axiom sa let let easi see definit eff similar consider appli axiom show axiom practic use normal transact let us first introduc properti condit use algorithm follow properti let c condit x z set attribut c finit set constant then attribut x z cja form g c doma c split algorithm use normal transact report figur follow result theorem let transact c set constant appear t z set attribut mention t then algorithm split termin t c z gener transact split polynomi time split t split normal form hereinaft polynomi time mean time polynomi respect length transact algorithm split input transact t set constant c set attribut z output new transact split begin there updat u r whose condit satisfi properti set attribut x z set constant c transact obtain split u accord split axiom gammafupd unsatisfi conditionsg end figur algorithm split proof assum contain one updat structur split axiom iter loop algorithm split jt moreov algorithm tri enforc properti allow updat atom condit form follow number differ form atom condit i take execut algorithm bound by correspond number order pair k symbol for atom condit form plu cardin c for atom condit form c sinc updat split respect constant follow everi i jt j bound ju j is number complex condit univers u attribut form differ atom condit thu sequenc s strictli increas bound therefor algorithm termin contain multipl updat split algorithm appli separ updat result concaten obtain split follow algorithm split termin transact gener output transact polynomi time part easili shown basi lemma induct number transform appli algorithm split way contradict assum split normal form is pair updat set attribut x syntact differ condit say c whose target disjoint let attribut x condit properti be output algorithm split c j c j j form then two possibl case a c j form form target would disjoint b c j form c form c as abov case least one two condit satisfi condit properti contradict split output algorithm split exampl let domain integ consid transact transact normal form sinc tupl target two updat contain appli algorithm split obtain by axiom algorithm termin second step output normal form let us consid transact normal form note satisfi properti sinc first updat even mention attribut b appli algorithm split obtain algorithm termin first step output inde normal form activ databas section introduc formal notion activ rule program consid simpl form activ rule howev captur consider portion rule describ literatur implement system particular consid core sever concret activ rule languag whose rule execut specifi inform descript shown framework possibl describ main featur languag activ rule program repres activ rule use notat introduc express transact allow us easili describ way updat activ rule interact specif event condit part rule describ updat wherea action part describ transact accord definit section differ variabl use place constant variabl use describ bind pass event condit action rule simplic exampl write thu let us fix set symbol call variabl call gener updat updat condit variabl occur place constant gener transact transact compos gener updat activ rule defin follow definit activ rule activ rule form where u e gener updat that case insert condit necessarili specifi complet tupl gener transact variabl occur also occur u e left hand side right hand side rule also call event part action part respect definit activ databas activ program p set activ rule activ databas pair s p databas instanc p activ program note that event part activ rule allow us specifi updat trigger rule condit met effect execut rule intuit semant rule follow updat u match u e execut databas perform transact use bind match u u e exampl activ rule describ section page easili express use notat introduc abov said one import point tempor relationship execut compon rule event action tempor decoupl defer execut model wherea immedi execut model tempor decoupl approach semant activ databas respect transact given term execut new transact induc t defin section along definit rewrit techniqu trigger rule describ updat activ rule interact first introduc preliminari notion let union domain attribut u v set variabl substitut oe function v v ident constant then match atom condit defin follow ground atom condit ca that is atom condit without variabl match gener atom condit c attribut if either c contain variabl substitut oe call bind c ground least one tupl v x v satisfi ca c that is targca let c ground condit c gener condit set attribut x say attribut x occur them c j match c j so composit bind if ani variou atom condit form bind c c easi show two condit match match uniqu renam variabl definit trigger let updat r activ rule u e say that is u u e perform type oper relat c match c e updat u trigger rule r u e oe bind say u induc sequenc updat oet rule r note condit variabl activ rule see definit ground updat alway induc ground updat exampl updat empnamebilldnametoysalk trigger follow activ rule bind associ bill variabl n toy variabl note salk match salk follow updat induc updat depdnametoymgrbil transact transform section present algorithm transform user defin transact induc one embodi activ rule behavior consid immedi defer case transact transform figur report recurs algorithm comput reaction singl updat algorithm symbol ffl denot concaten oper sequenc note that gener differ output gener algorithm depend order trigger rule select first step loop clearli algorithm gener way possibl reaction updat gener moreov accord sever approach describ literatur algorithm modifi first step loop order take account partial order rule unfortun algorithm guarante termin possibl input sinc kind recurs occur activ program howev syntact restrict given algorithm reaction guarante termin result follow base construct special graph g p describ relationship rule p construct graph base notion unif updat gener notion match follow algorithm reaction input updat u activ program p set constant c set attribut z output sequenc p updat induc directli indirectli u p begin trigger trigger ug trigger u p empti pick rule r trigger u p let oe bind u u e u ffl end figur algorithm reaction say two gener updat u u possibl contain variabl unifi ground substitut oe call unifi targoeu then graph g p node repres rule p edg rule r updat unifi u e lemma graph g p acycl algorithm reaction guarante termin p updat u k proof algorithm reaction perform recurs call updat oeu u updat occur action part trigger rule r oe match caus trigger call caus turn trigger set rule and rule number recurs call algorithm reaction let rule trigger oeu definit mean substitut oe target oeu oe e nonempti intersect sinc assum rule differ variabl oe ffi oe unifi r r therefor two rule p caus recurs call edg r r g p sinc g p acycl follow number recurs call alway finit algorithm termin hereinaft consid activ program p graph g p acycl inde less restrict condit given achiev termin also algorithm modifi order take account presenc kind recurs discuss issu elsewher readi present notion induc transact definit induc transact let user defin transact p activ program c set constant includ constant occur constant occur p z set attribut includ attribut mention attribut mention p output algorithm t c z then consid follow transact say induc p immedi defer modal respect actual follow refer induc transact without make explicit refer modal transact transform comput sinc variou result hold independ aspect induc transact follow properti hold lemma let user defin transact p activ program then transact induc p normal form comput polynomi time proof definit updat occur transact induc split use algorithm split either preprocess step execut algorithm reaction respect set constant set attribut includ occur t therefor theorem normal form let us consid complex construct hypothesi acycl graph g p easili follow one execut algorithm reaction requir worst case number recurs call equal jp j number rule p bound jp j moreov call algorithm reaction involv one execut algorithm split requir polynomi time theorem number concaten oper bound maximum number updat occur action part rule p follow algorithm reaction requir polynomi time and sinc algorithm use updat occur origin transact induc transact comput polynomi time point given user defin transact activ program may sever differ induc transact depend possibl differ output algorithm reaction even number induc transact alway finit may larg howev number reduc check instanc certain one obvious equival eg certain rule trivial commut problem effici gener induc transact manag beyond goal paper address elsewher semant induc transact said section induc updat induc transact execut if induc updat effect execut invalid afterward then new notion effect transact need defin accord that call new semant activ effect induc transact sinc take account relationship induc updat induc one due activ rule relationship known alway made explicit gener induc transact sever way instanc mean label techniqu describ let u updat databas instanc say effect u visibl if also let transact j n denot tj j transact compos first j compon t definit activ effect activ effect eff ff induc transact map eff ff t inst inst recurs defin follow induc updat u effect u visibl eff ff final readi defin semant transact respect activ databas definit effect transact activ databas potenti effect user transact activ databas s p coincid eff ff t s transact induc p equival activ databas mani interest problem systemat studi formal framework defin among them equival optim confluenc activ databas section shall consid equival show properti decid polynomi time equival induc transact transact equival extens investig relat model major result studi concern decid whether two transact equival transform transact equival less expens one unfortun result cannot directli use within framework differ semant defin transact so let us introduc new definit equival refer induc transact definit equival induc transact two induc transact equival denot ff case eff ff algorithm summari input induc transact output summari sigma t begin u induc u embed sigma sigma els case u end figur algorithm summari present simpl method test equival induc transact actu alli method work transact normal form base represent behavior transact call summari annot condit follow syntax hr ci r relat c complex condit then summari induc transact pair set annot condit gener summari algorithm report figur algorithm make use follow notion given summari sigma say updat u condit c embed sigma either summari sigma describ succinct way behavior induc transact t specif let n cardin sigma sigma gamma respect consid transact b defin follow hr ci updat gammarc one first n posit hr ci updat rc one posit m actual sinc sigma sigma gamma set sever differ way build b howev sinc transact obtain alway delet follow insert nonact effect alway same thu order updat occur b immateri consid determinist construct follow lemma eff ff proof proof proce induct length n t basi sinc case easi see so definit eff ff regard induct step assum eff ff definit instanc s updat u j execut eff ff tj j gamma s induc updat u occur tj j gamma visibl eff ff condit induct hypothesi u visibl also eff b construct simpli impli u occur b tj j gamma mean u embed so execut algorithm summari annot condit correspond u j includ sigma j therefor u j occur b j j follow that instanc s u j effect execut eff ff activ effect semant u j occur b tj j have eff ff tj complet induct part theorem let two induc transact set constant set attribut then ff sigma proof if let sigma assum without loss gener b lemma eff ff onli if let eff ff instanc and relat scheme rx let v tupl srx v eff ff t srx clearli also v eff ff t srx consid transact b updat u updat u induc transact set constant set attribut therefor concaten transact normal form sinc non empti intersect lemma follow thu annot condit hr c occur sigma gamma consider appli insert follow that interest aspect point notion activ effect induc transact inde gener notion effect userdefin transact impli character equival also hold ordinari transact passiv environ equival user transact notion equival user transact natur extend activ environ sinc seen transact potenti produc differ result activ databas depend differ induc transact gener it assum two transact equival abl produc alway result databas instanc definit equival transact activ framework two user transact equival respect activ program p transact induc p transact induc p vice versa result section state follow result theorem equival two user transact activ framework decid polynomi time proof given user transact t lemma construct transact induc polynomi time number transact induc singl updat activ program p bound constant depend size p specif bound denot cardin p then number transact induc bound k theta jtj definit equival two user transact requir test equival pair transact induc respect is number test bound k theta jt j theta jt j now theorem equival two induc transact requir construct summari mean algorithm summari requir time linear respect length transact bound jtj theta jp j test equal two summari requir time proport jt j theta jt j theta jp j follow equival decid polynomi time axiomat transact equival close section present two simpl intuit axiom prove equival induc transact provid much insight relationship updat induc transact sinc axiom show transact manipul without alter overal effect call manipul axiom also show axiom suggest way optim effici transact activ environ order present axiom need introduc preliminari notion first use notat inducedu denot updat induc directli indirectli updat u induc transact moreov say two updat collid relat scheme condit ident final introduc notion valid updat transact syntact counterpart notion visibl recurs defin follow updat u induc transact valid if induc induc directli updat u j preced u t valid updat u k u j collid u j definit manipul axiom follow axiom call manipul axiom involv induc transact eventu empti subtransact switch axiom where u u j collid u valid updat u j collid updat u k occur u merg axiom where u u j collid u j valid updat updat inducedu intuit axiom ma state updat u u j collid u j cannot invalid effect updat induc u if ani switch instead axiom ma state u collid u j execut equival execut u j provid that updat induc directli indirectli execut well updat induc directli indirectli howev execut thi happen u j induc u lemma manipul axiom sound man impli ff proof let us first consid ma sinc u u j collid u cannot invalid u j execut latter first moreov definit switch effect execut u depend updat occur u j collid updat induc u switch execut u still depend updat occur final switch effect execut u j depend updat occur u therefor u j induc u switch effect execut u j still depend updat occur hand u j induc u problem aris sinc u valid u j execut anyway follow that given condit activ effect coincid activ effect let us consid ma sinc u u j collid u j valid u j invalid u therefor u delet without alter effect transact moreov sinc u invalid u j effect visibl execut updat induc directli indirectli u delet except induc also u j in case u j induc u given condit activ effect coincid activ effect theorem sound complet set axiom prove equival induc transact proof lemma sound prove complet axiom consid two induc transact ff then use manipul axiom transform transact two new transact delet perform insert done two step first one updat transact collid anoth updat delet second one delet move front transact insert first step perform use manipul axiom follow start second updat iter updat transact move forward use axiom ma updat preced one current consider collid it then updat delet use axiom ma easi show work alway done first step pair updat transact collid so second step easili move delet front transact use axiom ma sinc axiom sound lemma also sinc pair updat collid easili follow sinc theorem sigma sigma then construct b coincid permut delet permut insert follow b transform b use repeatli axiom ma sum have man man man analysi activ rule process basi result transact equival deriv section number result import properti activ databas confluenc confluenc strong properti applic may actual need weaker notion propos two notion confluenc former weaker latter sinc refer specif transact howev notion nice character turn practic import definit weak confluenc activ program p confluent respect user transact transact induc p equival definit strong confluenc activ program p strongli confluent confluent respect user transact follow result show practic method test weak confluenc theorem weak confluenc decid test polynomi time proof given user transact t lemma construct transact induc polynomi time definit confluenc respect p requir test equival pair transact induc t number test done bound squar maximum number transact induc t is k theta jtj k constant depend size p see proof theorem sinc theorem test equival two induc transact requir polynomi time follow confluenc respect p also perform polynomi time introduc anoth interest notion confluenc independ specif transact let p activ program c set constant occur p r u e rule p denot u r set updat obtain r follow atom condit ca u e involv variabl x let set interv constant c ca c sinc ca finit psi actual finit partit doma now let k set constant contain one element whichev be everi note sinc psi finit partit doma ka alway finit then set u r contain possibl updat obtain appli u e substitut that attribut occur u e map variabl u e occur ca constant ka intuit set u r contain repres trigger updat rule r specifi differ way rule r trigger updat definit local confluenc activ program p local confluent rule confluent respect updat u r activ program p local confluent confluent everi rule p note that theorem follow check local confluenc activ program polynomi time follow result state local confluenc although restrict desir properti activ program theorem activ program local confluent strongli confluent proof let user transact normal form respect set constant occur p set attribut mention p note restrict hypothesi sinc theorem transact transform transact satisfi properti use algorithm split proof proce show that updat u trigger rule r p sequenc updat induc u map constant that u u r u induc sequenc updat specif map defin follow atom condit ca occur u ident constant ka map constant c ka constant c ka belong interv contain c clearli u ka moreov definit trigger algorithm split easi show induct number step algorithm reaction sequenc updat gener algorithm start u algorithm abl gener sequenc start u but definit local confluenc sequenc updat induc u equival easili follow sequenc updat induc u also equival thu p confluent respect sequenc updat induc updat if ani easili shown that given transact t partit sequenc adjac updat confluent respect confluent respect t therefor definit induc transact follow that independ modal transact t p confluent respect p strongli confluent possibl show that local confluenc impli strong confluenc convers true gener even weak confluenc is activ program local confluent confluent respect certain transact notion local confluenc give us suffici condit confluenc check effici let p activ program p conf set rule p local confluent note set deriv one all definit time follow character weak confluenc simpli requir updat transact one test match event part rule p corollari let p activ program user defin transact then p confluent respect updat trigger rule p conf proof p conf inde strongli confluent program therefor theorem confluent respect p conf respect p optim major object research provid tool optim induc transac tion particularli import sinc approach optim techniqu induc transact yield method optim overal activ activ rule process accord two type optim criteria transact consid first relat syntact aspect eg length complex updat transact wherea second relat oper criteria number atom updat perform transact criteria formal investig section let us first introduc preliminari notion let p partit tupl space is partit set tupl v tupx everi rx scheme s say transact base p if condit c occur updat t targc p accord implement assum delet oper complex insert oper denot u order may invalid certain implement updat howev chang order affect result follow definit transact base p syntact optim everi transact base p equival t exist permut given transact t denot nopt map inst theta associ instanc pair i d number tupl insert s number tupl delet s moreov denot order relat theta defin follow k ratio cost insert oper cost delet oper intuit order relat take account number updat oper togeth prefer attribut insert delet definit transact base p oper optim everi transact base p equival t instanc inst note definit refer possibl pair equival transact rather transact base partit tupl space howev conveni form sinc possibl show transact base partit syntact oper optim cannot attain simultan gener definit transact optim oper syntact optim let us consid manipul axiom introduc previou section defini tion easi see one applic merg axiom yield strictli simpler transact wherea switch axiom affect complex translat howev use order appli merg axiom simpl observ lead method optim induc transact intuit method consist appli number time switch axiom follow applic algorithm optim input induc transact output new transact opt begin repeat collid updat u j j i preced u i transact obtain delet u j updat inducedu j els all updat examin end figur algorithm optim merg axiom modif perform method effect implement simpl way mean algorithm figur recal inducedu denot induc transact updat induc directli indirectli updat u follow theorem confirm algorithm alway termin in polynomi time produc optim transact theorem let induc transact then algorithm optim termin gener transact opt polynomi time opt ff t opt optim proof algorithm simpli involv iter updat requir worst case time linear length transact note howev step involv reduct so averag execut algorithm even effici part prove show that step loop algorithm new transact t i equat transact previou step t obtain number applic switch axiom to move close u follow one applic merg axiom show thi note algorithm elimin collis updat soon encount iter updat transact impli that step sequenc updat preced updat u consider pair updat collid updat valid therefor step freeli use switch axiom see definit and particular updat u j collid u move u j close u then appli merg axiom thu obtain exactli transact i lemma follow that i ff so termin opt ff t first note that consequ shown part opt pair updat collid assum way contradict opt syntact optim let transact base partit p equival opt less updat oper opt accord order impli that updat u opt condit c visibl eff ff t opt s instanc s must updat u condit c therefor sinc opt updat least updat u x opt visibl s possibl u x invalid anoth updat opt opt normal form obtain delet updat transact normal form lemma impli two updat opt collid contradict assum now way contradict opt oper optim let transact base partit p equival opt nopt opt s instanc inst impli opt either perform two time insertiondelet tupl tupl first insert or delet delet insert opt normal so lemma possibl two updat opt collid contradict conclus present formal techniqu allow us reduc sever import case activ rule process passiv transact execut specif user defin transact translat new transact embodi expect rule semant immedi defer execut modal shown mani problem easier understand investig point view tackl formal set natur extend alreadi establish framework relat transact fact turn sever import result deriv transact passiv environ taken across activ one firstli abl formal investig transact equival framework activ databas secondli result transact equival use check interest practic use notion confluenc final optim issu address believ approach activ rule process suitabl interest investig practic point view studi effici way gener keep induc transact context implement method top commerci relat dbm theoret point view believ variou result extend sever way take account gener framework final rewrit techniqu appli data model one base object r equival optim relat transact static analysi techniqu predict behavior activ databas rule model activ objectori databas automat gener product rule integr maintenanac chimera model languag activ dood sy tem deriv product rule constraint mainten deriv product rule increment view mainten structur approach definit semant activ databas ode activ databas constraint trigger design implement chimera activ rule languag combin theori practic integr control declar approach specif transact modif subsystem rule process activ databas system simplif rule complet axiomat relat updat transact architectur activ data base manag system activ databas paradigm enhanc comput environ ment rewrit techniqu implement activ object system rewrit techniqu analysi optim activ databas transact transform approach activ rule process framework specif activ rule languag semant implement larg product system dbm environ concept algorithm integr rule system databas system rule tr equival optim relat transact architectur activ databas manag system theori rule trigger system deriv product rule constraint mainten setori product rule relat databas system rule procedur cach view data base system simplif rule complet axiomat relat updat transact rule process activ databas system termin confluenc rule execut automat gener product rule integr mainten static analysi techniqu predict behavior activ databas rule structur approach definit semant activ databas logicbas integr activ deduct databas design implement chimera activ rule languag activ rule analysi optimis rock myampersandamp roll deduct objectori databas foundat databas integr rule system databas system refin trigger graph transact transform approach activ rule process rewrit techniqu analysi optim activ databas express complex activ databas ode activ databas deriv product rule increment view mainten implement languag specifi activ databas execut model algebra approach rule analysi expert databas system use delta relat optim condit evalu activ databas investig termin activ databas system express rule languag rewrit techniqu implement activ object system framework specif activ rule languag semant combin theori practic integr control termin analysi activ databas ctr burcin bostankorpeoglu adnan yazici fuzzi petri net model intellig databas data knowledg engin v n p august