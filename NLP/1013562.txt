t finit state machin string infinit alphabet a motiv formal model recent propos context xml studi automata logic string infinit alphabet conserv extens classic automata logic defin regular languag finit alphabet specif consid regist pebbl automata extens firstord logic monad secondord logic type automaton consid oneway twoway variant well determinist nondeterminist altern control investig express complex automata connect logic well standard decis problem result answer open question kaminski francez regist automata b introduct one signific recent develop relat world wide web www emerg extens markup languag xml standard data exchang web sinc xml document tree structur usual defin dtd xml queri model map tree tree tree transduc tion schema languag close relat tree automata automata theori natur emerg central tool formal work xml connect logic automata prove fruit understand languag develop optim algorithm static analysi techniqu howev abstract ignor import aspect xml name presenc data valu attach leav tree comparison test perform xml queri data valu make big dierenc inde case differ decid undecid eg see therefor import extend automata logic formal tree data valu initi investig model data valu infinit alphabet consid simpler case string rather tree string also relev tree case formal allow reason along path tree case xml would accur consid string label finit alphabet attach data valu posit preliminari version titl toward regular languag infinit alphabet appear proceed th intern symposium mathemat foundat comput scienc mfc czech republ postdoctor research fund scientif research flander author support part nation scienc foundat grant number ii string howev would render formal complic bear result although limit string believ result provid use start point investig gener problem particular lowerbound result easili extend tree consid model accept precis regular languag restrict finit alphabet use observ infinit alphabet longer sucient equip automata state alon inde automata least abl check equal symbol two main way thi store finit set posit allow equal test symbol posit store finit set symbol allow equal test symbol first approach howev lead multihead automata immedi go beyond regular languag therefor instead equip automata finit set pebbl whose use restrict stack disciplin automaton test equal compar pebbl symbol second approach follow kaminski francez extend finit automata finit number regist store alphabet symbol process string automaton compar symbol current posit valu regist base comparison decid store current symbol regist addit automata consid anoth wellknown formal monad secondord logic mso precis associ string firstord structur standard way consid extens mso fo denot mso fo done gradel gurevich context metafinit model mso proven good yardstick gener regular languag investig eg tree infinit string graph result concern express power variou model provid lower upper complex bound consid standard decis problem mention automata model consid determinist d nondeterminist n altern a control well oneway twoway variant denot automata model dcx stand one twoway respect d n stand determinist nondeterminist altern pa ra pebbl regist automata main result follow the express result also repres figur regist pursu investig regist automata initi kaminski francez particular investig connect ra logic show essenti incompar inde show mso cannot defin dra furthermor even properti fo cannot express ara proof latter base commun complex next consid relationship variou ra mod el separ nra dra nra ara subject standard complexitytheoret assumpt pebbl consid two kind pa one everi new pebbl place first posit string one everi new pebbl place posit current pebbl refer strong weak pa respect clearli pebbl placement make dierenc case oneway pa oneway case strong dpa simul fo weak npa cannot whenc name proof latter separ base commun complex furthermor show pebbl automata variant defin mso final provid evid strong pa robust notion show power strong dpa strong npa dpa npa coincid decis problem final consid decis problem ra pa answer sever open question kaminski francez first show univers contain nra nonempti dra und cidabl next obtain nonempti undecid even weak dpa ra orthogon logic defin class one might argu pa better suit defin notion regular languag infinit alphabet inde reason express lie fo mso furthermor strong pa form robust notion ad twoway nondetermin increas express class defin languag close boolean oper concaten kleen star captur exactli mso like requir signific extens pa mso one express complet problem everi level polynomi hierarchi comput apa p relat work kaminski francez first consid ra which call finitememori automata handl string infinit alphabet show nra close union intersect concaten kleen star show nonempti decid nra contain decid nra automaton contain test two regist input restrict finit alphabet pa recogn regular languag even presenc altern point pebbl mechan employ base one milo suciu vianu liber one use globerman harel inde case pebbl place automaton still walk whole string sens presenc pebbl globerman harel prove certain lower bound gap succinct express automata overview paper organ follow section provid formal framework section studi regist automata section examin pebbl automata conclud section compar regist pebbl model section consid decis problem end discuss section consid string infinit alphabet d formal dstring w finit sequenc n languag set dstring often deal way automata delimit input string two special symbol left right end string neither d ie automata alway work string form denot domw set w w length w domw also write val w i regist automata explain introduct regist automata finit state machin equip finit number regist regist hold valu d process string automaton compar symbol current posit valu regist base comparison decid store current symbol regist stress allow oper regist apart assign comparison symbol current process transit depend current state whether current symbol alreadi present regist transit relat specifi chang state movement head possibl whether current symbol store regist follow definit kaminski francez tupl q q f p q finit set state q q initi state f q set final state initi regist assign and p finit set transit form i q q d q q i d given string w configur b w tupl j initi configur q configur j q q f accept given transit i p respect p appli i val w j i k given defin one step transit relat configur follow i transit i q q d appli respect transit q q i d appli j defin previou case obtain set i val w j denot transit closur intuit transit i q q d appli valu current posit regist i transit d appli valu current posit dier valu regist case current valu copi regist i requir initi regist assign contain symbol automata recogn boundari input furthermor right transit lefttransit allow usual string w accept b accept configur languag lb accept b defin v v accept b automata defin far gener nondeterminist automaton determinist configur one transit appli lefttransit automaton oneway altern automata defin subsect explain introduct refer automata dcra clearli input restrict finit alphabet ra accept regular languag pebbl automata pebbl automata finit state machin equip finit number pebbl ensur regular behavior use pebbl restrict stack disciplin is pebbl number k pebbl place pebbl present string highestnumb pebbl present string act head automaton transit depend current state pebbl place current posit head equal type data valu place pebbl transit relat specifi chang state movement head possibl whether head pebbl remov new pebbl place pebbl remov pebbl becom current head formal definit borrow notat milo suciu vianu kpebbl automaton tupl q q finit set state q q initi state f q set final state and finit set transit form form i s p v q i p v q k form q d q q stay left right placenewpebbl liftcurrentpebbl given string w configur w form k q q i domw call pebbl assign depth configur and pebbl assign sometim denot depth configur pebbl assign depth depth initi configur q configur i q q f accept transit i s p v p appli configur val w transit i p v q appli hold transit i s p v q appli intuit i s p v p appli configur pebbl current head p current state v set pebbl see symbol top pebbl p set pebbl sit posit top pebbl current symbol seen top pebbl s finit set transit automaton identifi finit number distinguish symbol s henc everi regard constant regist model constant determin initi regist assign defin transit relat follow i q i q i transit p d appli q liftcurrentpebbl definit accept languag determinist oneway analog case regist automata refer automata dcra c befor definit new pebbl place posit recent pebbl altern would place new pebbl begin string choic make dierenc twoway case signific oneway case refer model defin weak pebbl automata latter strong pebbl automata strong pebbl automata formal defin set placenewpebbl case definit transit relat altern automata automata model also defin altern version altern automata addit set u q univers state set q u call existenti automaton nondeterminist run w tree node label configur follow root label initi configur everi inner node label existenti configur exactli one child and everi inner node label univers configur children label accept run run everi leaf node label final configur languag accept a defin w accept run w logic consid firstord monad secondord logic dstring represent well logic special instanc metafinit structur logic defin gradel gurevich string w repres logic structur domain domw natur order domain function instanti val w atom formula form x y d obviou semant logic fo obtain close atom formula boolean connect firstord quantif domw henc quantif allow logic mso obtain ad quantif set domw again quantif allow sentenc defin set string usual way precis l w exampl consid defin set string everi posit carri dierent symbol complex class infinit alphabet separ result rel complexitytheoret assumpt end consid straightforward gener standard complex class like logspac nlogspac ptime case infinit alphabet defin class use gener ture machin gtm devic introduc hull su model comput queri infinit alphabet inform gtm ture machin two rightinfinit tape tape alphabet infinit input consist string tape alphabet initi place leftmost first tape move similar classic ture machin except equal symbol head test move symbol one head written tape cell head gtm also test equal constant distinguish finit subset tape alphabet write constant either tape classic complex class c one defin analog c gtm model natur way exampl p consist languag accept gtm alway stop polynomi mani move respect length input immedi show usual complex terminolog sequel present sever express complex result first introduc notat b two formal defin languag dstring write everi languag defin defin b is everi b b a final write b i b b addit express power formal interest comput complex follow problem let formal defin languag dstring membership problem determin given w whether w la consid data complex is consid fix henc complex measur size w two problem interest univers contain a first problem decid whether given a second determin whether a here complex measur respect a respect regist automata start investig ra particular compar fo mso main result ra orthogon logic cannot even express fo properti express properti defin mso further separ variant ra subject standard complexitytheoret assumpt express show properti dstring defin mso easili express dra rest paper make extens use symbol delimit we therefor assum d theorem dra mso proof consid string form uv u v d defin n u n v set symbol occur u v respect denot n u n v cardin show dra accept uv i n mso sentenc first introduc notat string w denot lmow d posit w leftmost occurr d suppos n everi j lmo u a n u n v visit lmo u a sequenc henc n b reach simultan automaton reject input string otherwis accept remain explain dra visit lmo u a sequenc clearli lmo u a lmo v b first posit u v re spectiv valu b store regist comput i b i inde comput i proce follow first move head posit lmow a go left boundari afterward walk right encount test posit lmow a start carri leftmost occurr symbol d done follow posit lmow a goe left either see reach left end string former case goe back lmow a identifi first d proce lmow a latter case lmow a carri leftmost d therefor i identifi comput b i done similar way assum toward contradict mso sentenc uv c set dsymbol occur call string uv admiss dsymbol occur u v and c occur u v let obtain replac occurr y everi occurr everi admiss string n e would mso defin therefor regular lead desir contradict mso proven good yardstick gener regular string languag tree graph theorem suggest ra behav nonregular manner follow proposit show essenti due abil move head direct proposit mso simul everi nra proof let describ construct mso formula hold input accept comput w first all guess posit w state b read done existenti quantifi set s q qq next guess posit i transit b appli read w done quantifi set t tt assum accept comput b w s q qq t tt chosen accordingli then regist j regist content b read posit determin follow form q q j d straightforward express mso even fo abil determin regist content easi check again fo s q qq t tt consist transit relat b far one might think way regist automata simpli strong compar mso logic next result provid evid comput model base regist simpli compar logic precis show ra cannot captur fo even altern proof base commun complex argument commun complex see eg input string divid predetermin manner two parti gener refer ii send messag accord given protocol languag accept protocol string parti decid execut protocol whether string belong languag parti unlimit comput power part string protocol restrict way parti commun typic restrict form number messag next sketch main idea separ dra fo basic idea extend deal altern proof theorem consid string form uv u v encod set set dsymbol suitabl way seen languag u v repres set set defin fo show languag accept dra note dra work string form uv simul protocol follow way given u ii given v first parti simul dra comput tri cross delimit right point send present state q data valu k current regist henc ii get full inform configur as posit symbol fix iisend turn current configur i process continu one parti detect final state kind protocol simul behavior first need messag everi configur suppos restrict n dierent data valu string uv q n k dierent messag need here k number regist q set state d ra call sequenc messag dialogu need consid dialogu length as everi messag sent everi direct henc dierent dialogu input string consist n dierent dsymbol latter valu exponenti n howev n set set n dierent dsymbol larg enough n must dierent string uu vv accept protocol via dialogu but mean uv also accept henc protocol defin l impli dra accept l proof theorem extend idea altern requir exchang partial comput tree ara appli count trick consid deepli nest hyperset proof techniqu inspir proof abiteboul herr van den buss che separ tempor queri languag etl tsfo end show everi queri etl special sort databas evalu commun protocol constant number messag wherea case tsfo case simul dra and ara need power protocol number messag depend number dierent data valu u v theorem fo ara proof start terminolog let finit infinit set hyperset finit subset d ihyperset finit set i hyperset d often denot ihyperset superscript i i eas present assum contain natur number d j next let j fix induct defin encod ihyperset j first string encod hyperset j encod w w n i hyperset iw iw iw n encod ihyperset hw languag uv u v encod mhyperset dm lemma m l defin fo proof let k fix k defin express input w interv x x r y r encod ihyperset x y z abbrevi xx z clean abbrevi formula i formula hyp express x x r encod ihyperset therefor let and clean formula induct defin follow languag l k express formula here max refer first last element string respect successor function next show ara recogn l describ abov underli idea larg enough m ara simpli cannot commun enough inform two side input string check whether hu definit let p binari predic ihyperset let k l say p comput k lcommun protocol two parti denot ii polynomi p finit set finit alphabet size pd that ihyperset x i i comput follow get x i ii get i know send messag d x i ii ii repli messag b i messag khyperset send messag ii ii repli messag b exp l pd round messag exchang ii enough inform decid whether p x i i hold precis appli boolean function r d x i b r for i b r d i r for ii evalu true so formal protocol consist function r b b r note comput power ii complet arbitrari lemma l cannot comput commun protocol proof suppos protocol comput l everi finit set el ement number dierent possibl messag number hyperset exp pd call complet sequenc exchang messag b b dialogu everi dialogu exp pd round henc dierent dialogu howev number dierent mhyperset exp d henc larg enough mhyperset m protocol give dialogu p x m x m mean also give dialogu p x m m lead desir contradict refer string form uv u v contain split string commun protocol comput string assign u v ii lemma split string languag defin ara recogn commun protocol proof let work split string d assum wlog transit possibl final configur assum b never chang direct symbol henc split string uv leav u right enter v vice versa defin p polynomi pn qn k is number configur assum posit label string n dierent data valu let uv input split string let set data valu occur w let posit string split symbol e then set e q set configur assum posit split symbol refer configur note essenc parti comput partial run send configur b walk o part string parti concret comput run b u leav run consist configur final configur inner vertex label configur send ii set set configur appear leav run parti ii turn comput inform run start set configur receiv send i process repeat exp messag messag contain empti set input accept as final configur transmit presenc empti set indic run leav accept configur next describ formal configur i q call uconfigur e vconfigur configur call uconfigur assum left vconfigur assum right note that assumpt never chang direct distinguish two set configur introduc follow notion arbitrari configur run run root label leav label final configur configur inner vertex besid possibl root label configur run t defin leaflabelst set configur occur leav t set c configur defin c set set configur note c comput set c configur final set set configur defin s s c singleton hyperset contain singleton set is recal initi configur defin sequenc hyperset configur s i note that even hyperset vconfigur odd hyperset uconfigur let us call run ipass run leaf configur either accept configur reach comput visit exactli time clearli c ipass run b w c vice versa henc b accept w i c contain empti set protocol work follow parti start send parti ii receiv i respond parti receiv respond i parti accept whenev hyperset empti set transmit exp dierent hyperset parti reject empti set never obtain exp round messag lemma l comput ara henc theorem follow control previou section relat ra logic section compar ra variou kind control kaminski francez alreadi show dra weaker nra properti are data valu dierent dra nra separ class reli complex theoret assumpt explain next main observ string special shape ra simul multi head automata string even length odd posit contain pairwis distinct element even posit carri symbol finit alphabet say a b store uniqu id preced as bs ra rememb posit head multihead automaton note dra check whether input string desir form determinist nondeterminist altern multihead automata recogn precis logspac nlogspac ptime languag respect membership dra nra ara hard class respect furthermor easi see respect membership problem also belong infinit alphabet variant class actual even complet class one alway encod string infinit alphabet binari alphabet thu show follow proposit proposit membership dra complet logspac membership nra complet nlogspac membership ara complet ptime index techniqu cannot use nra cannot check whether odd posit form uniqu index howev extend nra use direct reduct nlogspacecomplet problem order reachabl proposit membership nra complet nlogspac proof clearli membership nlogspac hard use reduct order reachabl given order graph properti edg u v u v path first node last one problem hard nlogspac inde ordinari reachabl complet nlogspac nlogspac follow logspac reduct ordinari reachabl order reachabl given graph g n node sourc sink t construct graph g vertic i graphic edg i j i edg g sourc sink s n t respect clearli reachabl g i n t reachabl s g further g comput logspac henc order reachabl hard nlogspac next reduc latter membership problem nra input nra form n here j j ji j encod edg j jl nra accept n reach follow edg everi order graph encod list henc sinc order reachabl hard nlogspac membership nra consequ proposit four class defin mention automata model dierent unless correspond complex class collaps refer reader figur visual represent relationship pebbl automata next focu pebbl automata show pa better behav ra respect connect logic sens pa regular ra inde show strong dpa simlat fo even liber pebbl model apa defin mso furthermor separ ara mso usual complexitytheoret assumpt next show weak oneway pa suce captur fo again proof base commun complex final prove strong pa oneway twoway determinist nondeterminist variant collaps togeth straightforward closur boolean oper concaten kleen star result suggest strong pa defin robust class languag express proposit fo strong dpa proof clearli fo cannot defin dstring even length dpa strong easili so inclus note fo sentenc prenex normal form evalu straightforwardli strong dpa use one pebbl quantifi pebbl use outermost quantifi pebbl largest number use innermost quantifi automaton cycl possibl assign posit pebbl henc variabl so record state inform equal inequ among symbol pebbl posit next show pa subsum mso thu behav regular manner theorem mso simul apa proof proof extens infinit alphabet proof shown altern treewalk pebbl automata finit alphabet simul mso brief reduc simul problem kpebbl automaton altern graph access problem agap altern graph or andor graph graph e whose node v partit andnod or node consist pair g x g altern graph x access vertex g access defin follow andnod access successor access ornod access least one successor access note andnod successor definit access shown set access node defin mso therefor mso inde consid formula reverseclos is here d d unari relat contain or andnod respect given altern kpebbl automaton string construct follow andor graph e ornod configur w whose state existenti andnod configur whose state univers togeth addit distinguish andnod set edg e accept follow directli definit la agap string w la i initi configur access graph gaw henc remain show express agap problem gaw mso here diculti lie fact node gaw tupl node input structur w a configur repres itupl i q depend w encod separ henc set longer unari circumv that reli special properti gaw name two node describ itupl i jtupl j connect edg either tupl agre last posit follow stack disciplin pebbl onli last pebbl move allow us quantifi independ dierent portion graph construct reli observ outlin construct next simplic assum wlog univers state q i s either i s p v q two state q q i s p v q also conveni assum q partit disjoint state q control pebbl i furthermor enumer state q consid first case use singl pebbl illustr one encod state configur encod transit simplic consid transit involv constant deal transit without constant easi gener case one pebbl configur assimil pair q x transit simplifi s q p d stayleftright mso formula a defin accept use dierent unari relat j state q j q name a is reverseclos reverseclos formula state close revers transit accord andor semant thu a state initi configur access andor graph gaw follow a hold i accept w formula reverseclos direct represent transit and edg gaw mso transit a q u q u existenti reverseclos includ one conjunct exampl correspond conjunct succx y fo formula defin successor relat domw q u univers d q u s transit a q u reverseclos includ conjunct see a hold w i accept w suce notic similar that one need observ formula reverseclos gener graph becom formula instanti gaw exampl notic andnod gaw zero two successor henc univers quantifi becom conjunct extend case k arbitrari defin predic reverseclos i state n i n close revers transit a then mso formula equival a reverseclos replac reverseclos predic reverseclos i assum pebbl fix posit describ free variabl x x also free variabl predic consid move aect pebbl partit as transit set transit state q then reversedclos i transit lift place pebbl reverseclos abov except also inspect presenceabs previou i pebbl test equalityinequ correspond valu current valu exampl correspond gener transit i s p v q use formula new transit liftcurrentpebbl placenewpebbl transit determin follow conjunct reverseclos i reverseclos i v note resembl i q v act initi state pebbl note q u act termin state pebbl i complet proof translat mso note stack disciplin impos use pebbl essenti construct proof open whether inclus strict howev show follow proposit everi n mso formula membership problem hard p respect contrast membership apa ptimecomplet proof ajtai fagin stockmey show everi level polynomi hierarchi ph mso formula graph model check hard level henc suce observ graph readili encod string describ translat mso formula mso formula translat graph e string wg g henc model check hard level ph model check correspond level ph end defin wg string consist block form i k ei j further let vertexx obtain replac everi occurr ex y induct replac insid outsid everi occurr subformula xx x xvertexx xvertexx xx xx vertexx xx xx vertexx complet descript translat latter statement proposit recal configur kpebbl apa consist state k posit pebbl take logarithm space size input therefor apa simul alogspac equal ptime hard follow reduct agap defin proof theorem proposit theorem show pa fall nice fo en mso next subsect show that determin nondetermin one twoway coincid strong pa open whether altern control yield addit power end subsect consid weak pa recal weak pa place new pebbl locat current head rather begin string clearli make dierenc oneway model unlik strong counter part show weak pa cannot simul fo justifi name proof base commun complex show languag defin proof theorem cannot comput weak npa howev use dierent kind commun protocol better reflect behaviour weak npa theorem fo weak npa proof proof similar theorem show commun complex argument fo express languag l defin proof theorem cannot recogn weak npa recal l consist string form uv u v encod hyperset let k fix let set new protocol one agent arbitrari access string u limit access string v u comput power unlimit access v restrict follow let d fix function agent evalu f argument v d s tupl length k symbol u base inform u agent decid whether uv accept first show function f agent recogn toward contradict assum otherwis let f correspond finit set advic function respect let uv input string let denot set symbol occur u contain u correctli encod hyperset let assum wlog agent alway evalu f possibl argument k argument k dierent interact agent function f import protocol nonadapt ie order question matter let let u u h encod h possibl hyperset d larg enough respect k hyperset dierent interact henc must encod u u hyperset hu hu interact uu u u same henc agent accept uu accept contradict remain show split string weak npa simul protocol intuit work follow input uv consid oneway weak pa whenev current pebbl enter v comput remain v pebbl lift therefor set state obtain lift pebbl depend v symbol pebbl place u placement inform is pebbl locat posit henc defin fv d s set state reach pebbl enter v state q pebbl place symbol with indic pebbl present here q code s addit also contain posit placement pebbl u function provid enough inform agent simul npa control next result show variant strong pebbl automata without altern collaps suggest strong pa provid robust automaton model theorem follow express power npa dpa strong npa strong dpa proof show that npa a strong dpa b accept languag actual construct b use number pebbl a therefor let pebbl technic simplic assum wlog lift pebbl right delimit instead lift pebbl arbitrari posit rememb target state q go right delimit lift pebbl there move state q first inform describ idea construct recal classic powerset construct translat nondeterminist way automaton over finit alphabet without pebbl determinist one intuit comput prefix u input string set state might reach read u perform onlin simul sens step comput correspond exactli one step one cannot expect onlin simul work way automata even finit alphabet nondeterminist behaviour way automaton might involv move dierent direct instead in finit case without pebbl determinist automaton comput posit input string w function f describ aggreg behaviour w w ie portion input lefthand side ith posit function f comput induct left right forget f i f comput end f n knowledg possibl first state automaton assum right delimit input provid necessari inform decid whether w accept mayb bit surpris approach can larg adapt case pebbl present alphabet infinit proceed follow first assum normal accept input configur q ie one pebbl virtual ad two step view accept comput consist first step first pebbl place first posit comput alway least one pebbl present final step remain pebbl remov write virtual configur without pebbl determin whether accept one find whether q q final state q latter done recurs solv subproblem form i q i i q subscript indic subcomput consid which everi step pebbl present formal show follow claim induct start claim k finit set r strong dpa b with k pebbl that whenev b start configur i p p r next configur depth b i p s i q particular set state b contain r r qq first note theorem follow claim end set intend initi state b obtain automaton end state p s set q q q q q set final state b simpli consist state p s contain pair proof claim trivial configur depth k henc b k comput p s staytransit therefor let k suppos claim hold j i intuit set comput one lefttoright pass ist pebbl pass b comput posit l string set pair q q subcomput start state q posit l posit respect end state q posit l without move pebbl posit l l note subcomput might move pebbl j posit l comput inform automaton b i use repeatedli first introduc notat let input string w length n fix l n let l denot i pebbl assign coincid first pebbl l i l write s l set pair q q state comput start i q l reach i includ configur j q fulfil j j intuit say pebbl allow move right posit l write s l set pair q q state i l reach i subcomput satisfi properti readi complet proof claim set s l comput follow let r l set pair q q one follow hold a exist dra nra mso wdpa wnpa figur inclus class consider solid line indic inclus strict shown dot line indic class incompar dash line indic strict inclus subject complexitytheoret assumpt straightforward see s simpli transit closur r inform need a comput one lefttoright pass pebbl induct assum subautomaton b i comput posit l part r contribut condit b note c comput transit closur requir pebbl movement pass automaton comput posit l set s l comput s l make use set s s n s n transit relat one deduc lift pebbl step set claim note n posit right delimit recal lift pebbl posit complet proof claim theorem regist versu pebbl known inclus class consid depict figur pebbl regist model rather incompar inde connect logic deduc follow dra alreadi express nonmso defin properti twoway regist model subsum pebbl model convers strong dpa alreadi express fo strong pebbl model subsum regist model open problem relationship regist pebbl automata given section decis problem briefli discuss standard decis problem ra pa kaminski francez alreadi show nonempti nra decid decid whether la lb nra nra b regist next show univers doe automaton accept everi string nra un decid impli contain arbitri nra undecid kaminski francez ask whether decid nonempti extend dra show cannot regard pa show nonempti alreadi undecid weak dpa due fact that pa lift pebbl i control transfer pebbl therefor even weak dpa make sever lefttoright sweep input string proof use reduct post correspond problem pcp wellknown undecid instanc pcp sequenc pair instanc solut n m n x x ask whether given instanc problem solut suppos wlog integ number n valu a b d denot latter set symbol sym consid input string form delimit u v string repres candid solut m pcp instanc suitabl way check whether candid inde solut roughli check whether i is correspond pair taken string same is correspond posit x xm carri symbol check use doubl index system base uniqu data valu describ encod detail item x j encod string here separ d sym repres j uniqu data valu a b x j repres posit x uniqu data valu achiev uniqu symbol allow occur u correspondingli j encod string j correspond condit hold string uv syntact correct properti describ far fulfil follow two condit project u ie string consist entri u equal project v project u equal project v syntact correct string uv repres solut pcp instanc if numer right u v symbol a b right u v next show univers nra weak dpa undecid former case construct nra accept input string w syntact correct repres solut henc accept input pcp instanc solut construct nondetermin come play automaton simpli tri guess error encod repres input string show undecid univers weak dpa construct automaton check whether error occur encod repres input string happen sever sweep input string regist automata theorem undecid whether nra univers proof initi regist assign assign valu sym first n regist construct nra accept input string w syntact correct repres solut henc accept input pcp instanc solut check one follow condit hold input string w w wrong form a w form uv u v form i i n b x k entri u k entri v project wrong a first u dier first v b last u dier last v c two s u same d two s v same successor u v latter three condit involv nondeterminist guess posit failur take place project wrong done complet analog fashion w repres solut a valu u dierent correspond valu v b abvalu u dierent correspond abvalu v clearli w solut i one condit hold corollari contain nra undecid next question also rais kaminski francez section observ twoway ra simul multihead automata string special shape nonempti multihead automata undecid next proposit easili follow proposit undecid dra whether pebbl automata next result impli standard decis problem undecid class pebbl automata theorem undecid whether weak dpa nonempti proof weak dpa first check whether input desir form accept input encod solut pcp instanc pebbl move right keep first pebbl first posit invok subroutin posit perform pebbl put first pebbl first posit oper follow check whether u v form k respect entri u v achiev one left right scan second pebbl reach end string pebbl simpli lift check w syntact correct verifi follow a s u dierent place second pebbl first scan s u third pebbl dierent first one second pebbl move next process repeat b check s v dierent similar c first u equal first w put second pebbl first use third pebbl run first w d check last u equal last w similar successor u also successor v involv four pebbl number second pebbl cycl u valu d automaton proce follow third pebbl place right second pebbl fourth pebbl cycl symbol v find d found fifth pebbl place right consist check check fail found v input reject otherwis three recent pebbl remov f analog way also verifi s form index check w repres solut pcp instanc proce follow a check x pick u correspond choic v hereto second pebbl cycl valu u keep correspond valu finit memori use third pebbl run v check whether entri latter conform entri former b analog way also check avalu correspond entri same complet descript construct a straightforward check accept input repres solut pcp instanc henc pcp instanc solut la nonempti discuss investig sever model comput string infinit alphabet one main goal identifi natur notion regular languag correspond automata model particular notion agre finit alphabet case classic notion regular languag consid two plausibl automata model ra pa result tend favor pa natur two inde express pa lie fo mso inclus fo provid reason express lower bound mso upper bound indic languag defin pa remain regular natur sens moreov strong pa quit robust variant without altern one twoway determinist nondeterminist express power result paper quit intric proof bring play varieti techniqu confluenc commun complex languag theori logic along way answer sever question ra left open kaminski francez sever problem remain open i weak dpa weak npa simul dra ii dra nra subsum pebbl model we know defin mso nra hard nlogspac like cannot simul dpa iii weak npa strictli power weak dpa iv apa strictli power npa r data web closur monad np xml data valu typecheck revisit formal model express fragment xslt monad secondord logic graph handbook formal languag metafinit model theori complex result twoway multipebbl automata logic limit parallel comput introduct automata theori commun complex parallel comput algebra calculu queri languag recurs type complex object structur document transform base xsl type check xml transform extens attribut grammar structur document queri queri automata express e dtd infer view xml data tapebound complex class multihead finit au tomata tr graph rewrit finitememori automata limit parallel comput complex result twoway multipebbl automata logic commun complex parallel comput languag automata logic metafinit model theori temport connect versu explicit timestamp queri tempor databas altern data web intract decis problem finitememori automata typecheck xml transform dtd infer view xml data express effici pattern languag treestructur data extend abstract closur monad np web odyssey xml data valu power walk queri treestructur data foundat databas queri automata finit tree introduct automata theori languag comput formal model express fragment xslt automata logic xml ctr michael kaminski toni tan regular express languag infinit alphabet fundamenta informatica v n p august mikolaj bojaczyk clair david anca muschol thoma schwentick luc segoufin twovari logic data tree xml reason proceed twentyfifth acm sigmodsigactsigart symposium principl databas system june chicago il usa stphane demri ranko lazi david nowak freez quantifi constraint ltl decid complex inform comput v n p januari luc segoufin static analysi xml process data valu acm sigmod record v n march thoma schwentick automata xmla survey journal comput system scienc v n p may