t equalitybas flow analysi versu recurs type a equalitybas controlflow analysi studi henglein bondorf jrgensen defouw grove chamber other faster subsetbasedcfa also approxim heintz assert program safeti check equalitybas controlflow analysi type recurs type articl falsifi heintz assert present type system equival equalitybas controlflow analysi new type system contain recurs type unusu notion subtyp unfold regular tree bottomttop function type particular nontrivi subtyp function type b introduct controlflow analysi done determin approxim set function may call call site program paper address instanc question question flow analysi relat type system focu on equalitybas controlflow analysi studi henglein bondorf jrgensen defouw grove chamber other recurs type which exampl present restrict form java form recurs interfac equal subtyp base name rather structur equalitybas controlflow analysi simplif subsetbas controlflow analysi use abbrevi subsetbas controlflow analysi equalitybas controlflow analysi cfa also known as simpli cfa illustr differ cfa cfa consid analyz call site e e function program suppos xe function program want flow analysi express that xe becom result evalu e flow relat establish actual argument e formal argument x bodi e call site e e subsetbas analysi flow relat subset inclus model valu flow actual argument formal argument bodi function back call site equalitybas analysi flow relat equat thu flow inform actual formal argument forc same flow inform bodi call site also forc same intuit equat establish bidirect flow inform cfa approxim cfa implement mani time variou purpos gener function objectori languag cfa execut cubic time program finit type cfa execut quadrat time specif flowori question identifi function call one call site answer linear time comparison cfa alway execut almostlinear time one cfa cfa better choic practic languag like ml function finit polymorph type data may recurs type experi heintz mcallest indic good choic use cfa implement variant quadratictim algorithm cfa treat data much simplifi way problem pointer analysi algorithm close cousin cfa cfa problem condit finit type hold gener shapiro horwitz present experiment comparison two algorithm confirm theoret conclus cfa faster approxim cfa objectori languag like java condit finit type seldomli satisfi of exampl binari method defouw grove chamber experiment compar famili flowanalysi algorithm whose time complex cubic time cfa variant well comparison ashley also present flow analysi time complex less cubic time remain open relat cfa bondorf jrgensen implement cfa cfa scheme part partial evalu similix scheme condit finit type hold gener conclud two analys compar precis applic cfa much faster summari cfa experi prove prefer altern cfa mani applic flow analys cfa formul use constraint see exampl approach proce two step deriv flow constraint program text comput least solut constraint least solut desir flow inform precis analysi stem choic constraint exampl one choic lead cfa anoth choic lead cfa kind flow constraint use in exampl paper alway admit least solut turn flow analysi predic accept reject program extend safeti constraint exampl call site e e function program safeti constraint might express doe flow inform e denot safeti constraint alway solut deriv program text like flow constraint mean flowbas safeti analysi program two step deriv flow safeti constraint program text decid constraint satisfi safeti analysi perform task akin type infer sens safe like typabl palsberg okeef show program safeti check cfa type amadio cardelli type system subtyp recurs type proof connect make explicit close relationship flow subtyp heintz assert program safeti check cfa type recurs type assert reason say that intuit replac subset inclus equal need subtyp disappear heintz assert also consist observ cfa type infer recurs type execut almostlinear time perhap surprisingli heintz assert fals exampl consid term variabl f appli number function xx thu term type type system recurs type subtyp still base safeti analysi accept program assign f g empti flow set see section detail anoth exampl consid term remind bit previou exampl f appli a bxx again term e type type system recurs type subtyp conserv flow analysi cannot assign empti flow set f flow set least contain y still cfa base safeti analysi accept program assign flow set contain a bxx given heintz assert fals left two question type system correspond cfa controlflow analysi correspond recurs type palsberg okeef result impli e e type recurs type amadiocardelli subtyp result also seem indic ad recurs type amadiocardelli subtyp match cfa would overkil thu answer first question make sens ask much subtyp necessari suffici match cfa answer second question must ask restrict cfa must impos match recurs type paper answer first question give partial answer second question show program safeti check cfa type recurs type unusu restrict amadiocardelli subtyp unfold regular tree function type particular nontrivi subtyp function type see nontrivi subtyp function type requir match cfa consid program xee let hxi flow variabl bind occurr x let xee xe flow variabl occurr xee xe e e respect map flow variabl flow set satisfi cfa constraint particular satisfi also use hxi variabl type system simpl type nontrivi subtyp function type get among other follow constraint type correct unif give type must satisfi constraint thu get form relationship type flow set allow nontrivi subtyp function type constraint type correct becom particular open possibl nontrivi relationship henc constraint close relat flow constraint use cfa also show program safeti check certain restrict cfa type recurs type restrict cfa flow set must nonempti consist consist mean two function xe ye occur flow set flow set x equal also flow set e e equal sloganform result read tini drop subtyp recurs type key understand second result empti flow set flow set two inconsist function counterpart type system recurs type restrict version cfa fulli match recurs type program may type flow set exist next section present heintz definit cfa section present new type system section prove result exampl languag calculu defin grammar succ denot successor function integ equalitybas controlflow analysi given term p assum p ffconvert bound variabl distinct differ free variabl let varp set bound variabl p let x p set variabl consist one variabl hxi x varp let p set variabl disjoint x p consist one variabl occurr subterm e p the notat ambigu may one occurr e p howev alway clear context occurr meant set absp set occurr subterm xe p set clp flowbas safeti analysi term p phrase term constraint system variabl rang clp ffl everi occurr p subterm form constraint ffl everi occurr p subterm form succ e two constraint ffl everi occurr p subterm form xe constraint ffl everi occurr p subterm form e e constraint ffl everi occurr p variabl x constraint ffl everi occurr p subterm form xe everi occurr p subterm form e e constraint last two constraint creat connect call site e e potenti calle xe notic two constraint equal subset inclus key reason subtyp need match safeti analysi constraint system mix flow constraint safeti constraint safeti constraint are ffl succ e succ ffl e rest flow constraint notic int function cannot occur flow set constraint effect fintg denot cp system constraint gener p fashion let cmapp set total function constraint cp say p cfa safe cp exampl consid label two occurr f f f notat conveni have constraint system ce pointwis least solut next consid again label occurr f f f notat conveni constraint system ce pointwis least solut etc type system use v rang type variabl drawn countabl infinit set tv type defin grammar restrict type allow contain anyth form identifi type infinit unfold rule infinit unfold elimin use type follow type class regular tree alphabet subtyp relat type straightforward show partial order notic lower bound upper bound function type int suggest notat might type environ partial function finit domain map variabl type use rang type environ use notat ax t denot environ map x t map y x ay type judgment form e t mean type environ a express e type t formal hold deriv use rule below notic subsumpt rule instead subtyp use restrict way rule say e rstypabl e deriv a t rs stand restrict subtyp type system subject reduct properti is e deriv e betareduc e e deriv prove straightforward induct structur deriv e t follow type deriv two term section first type deriv use abbrevi notic four use subtyp notic also possibl type f second deriv use abbrevi notic possibl common type a bxx reason subsumpt rule form want disallow use subsumpt immedi use rule variabl add subsumpt rule term becom typabl exampl consid subsumpt rule give yy type give x last occurr f type straightforward complet type deriv e notic fragment type deriv last occurr f form without subsumpt rule type deriv possibl inde type deriv use rule possibl see that let type yy let type f yy type x moreov ff u type ff henc ff consid fx type x form case cannot argument function type ffff ff conclud e rstypabl equival result theorem term p cfa safe p rstypabl prove theorem two step lemma show p cfa safe p rstypabl prove lemma use techniqu lemma show p rstypabl p cfa safe prove lemma use techniqu direct one use show similar result cfa flow type first consid map flow type given program p map cmapp absp say consist x given program p cmapp defin equat system gammap ffl rang let v type variabl contain equat contain equat two case either consist gammap contain equat otherwis gammap contain equat everi equat system gammap uniqu solut see thi notic everi type variabl exactli one equat variabl lefthand side thu intuit obtain solut use equat unfold rule possibl infinit often lemma cmapp uniqu solut proof support first w suppos w inconsist w w also suppos final w consist two case w inconsist v w lemma satisfi cp uniqu solut gammap e subterm p deriv e v e proof proceed induct structur e base case consid first deriv x v hxi desir deriv consid e j deriv induct step consid first induct hypothesi deriv e also deriv succ e consid next e j xe fxe g xe lemma get induct hypothesi deriv thu also deriv xe final consid e e absp everi xe e e induct hypothesi deriv two case e deriv e use e absp conclud e consist thu v e deriv e exampl consid term recal function section satisfi ce constraint system plug construct proof lemma get type deriv shown section leav reader carri construct lead type deriv shown section type flow next consid map type flow delta type deriv defin f delta map type element clp set occurr xe p delta contain judgment form occurr xe p delta contain judgment form occurr e p delta contain judgment form lemma delta type deriv proof consid turn constraint cp occurr constraint delta contain judgment form fintg occurr succ e constraint delta contain judgment form fintg occurr x constraint delta contain judgment form ax occurr xe constraint fxeg xe delta contain judgment form two case fxeg occurr e e constraint also constraint everi occurr xe absp delta contain judgment form two case constraint vacuous satisfi definit f conclud remark remov section type notion subtyp get tradit system recurs type given program p map cmapp say consist rang consist add section condit contain contain inconsist map get notion flowbas safeti analysi refer restrict cfa safeti easi modifi proof lemma show follow result theorem term p restrictedcfa safe p typabl recurs type intuit theorem say want flow analysi weaker recurs type start cfa outlaw insist intern consist flow set convers theorem fals exampl attempt modifi proof lemma run troubl case e e guarante type e situat aris program recurs type subtyp one type deriv e use abbrevi straightforward show x fintg x fxsuccxg e therefor counterexampl convers theorem leav open problem find flow analysi equival recurs type unusu aspect heintz definit cfa int function cannot occur flow set allow might defin chang constraint section constraint succ e becom systemat way obtain modifi flow analysi begin constraint cfa ffl chang constraint remain same type system match modifi flow analysi obtain chang type system section smallest reflex transit relat type t type rule succ e becom notic modifi type system least type greatest type r subtyp recurs type practic flexibl flow analysi higherord languag effici analys realist offlin partial evalu binari method fast interprocedur class analysi java languag specif dynam type definit standard ml closur analysi constraint form type system equival flow analysi polyvari flow inform intersect union type fast accur flowinsensit pointsto analysi tr definit standard ml controlflow analysi higherord languag tame lambda dynam type subtyp recurs type objectori type system closur analysi constraint form type system equival flow analysi binari method pointsto analysi almost linear time practic flexibl flow analysi higherord languag lineartim subtransit control flow analysi fast accur flowinsensit pointsto analysi polyvari flow inform intersect union type fast interprocedur class analysi java languag specif controlflow analysi type system ctr jen palsberg mitchel wand cp transform flow inform journal function program v n p septemb naoki kobayashi typebas useless variabl elimin acm sigplan notic v n p nov naoki kobayashi typebas uselessvari elimin higherord symbol comput v n p septemb neal glew jen palsberg typesaf method inlin scienc comput program v n p august jen palsberg christina pavlopoul polyvari flow inform intersect union type journal function program v n p may michael hind pointer analysi solv problem yet proceed acm sigplansigsoft workshop program analysi softwar tool engin p june snowbird utah unit state