t design evalu switch cach architectur ccnuma multiprocessor a abstractcach coher nonuniform memori access ccnuma multiprocessor provid scalabl design share memori but continu suffer larg remot memori access latenc due compar slow memori technolog larg data transfer latenc interconnect network paper propos novel hardwar cach techniqu call switch cach improv remot memori access perform ccnuma multiprocessor main idea implement small fast cach crossbar switch interconnect medium captur store share data flow memori modul request processor store data act cach subsequ request thu reduc need remot memori access tremend implement cach crossbar switch need effici robust yet flexibl chang cach protocol design implement detail cach embed switch architectur caesar use wormhol rout virtual channel present explor design space switch cach model caesar detail execut driven simul analyz perform benefit result show caesar switch cach capabl improv perform ccnuma multiprocessor percent reduct remot memori access applic serv remot read request variou stage interconnect observ improv execut time high percent applic conclud switch cach provid costeffect solut design high perform ccnuma multiprocessor b introduct allevi problem high memori access latenc share memori multiprocessor employ processor small fast onchip cach addit larger offchip cach symmetr multiprocessor smp system usual built use share global bu howev content bu memori heavili constrain number processor connect bu build high perform system scalabl sever current system employ cach coher nonuniform memori access ccnuma architectur system share memori distribut among node system provid closer local memori sever remot memori local memori access latenc toler remot memori access gener execut bring perform applic drastic reduc impact remot memori access latenc research propos improv cach strategi within cluster multiprocessor cach techniqu primarili base data share among multipl processor within cluster nayfeh et al explor use share l cach benefit share work set processor within cluster anoth altern use network cach remot data cach network cach reduc remot access penalti serv capac miss l cach provid addit layer share cach processor within cluster hp exemplar implement network cach configur partit local memori sequent numaq dedic mb dram memori network cach dash multiprocessor provis network cach call remot access cach recent propos moga et al explor use small sram instead dram network cach integr page cach use kb sram chip reduc access latenc network cach tremend goal reduc remot memori access latenc implement global share cach abstract central processor ccnuma system observ network cach provid abstract limit processor within cluster explor implement issu perform benefit multilevel cach scheme incorpor current ccnuma system embed small fast sram cach within switch interconnect network call switch cach captur share data flow interconnect provid futur access processor reus data scheme consid multilevel cach scheme without inclus properti studi applic behavior indic enough spatial tempor local request processor benefit small switch cach recent studi mohapatra et al use synthet workload show increas buffer size crossbar switch beyond certain valu much impact network perform applicationbas studi confirm observ hold true ccnuma environ run sever scientif applic thu think larg amount buffer current switch spider overkil better util buffer accomplish organ switch cach sever issu consid design cach techniqu includ cach design issu technolog organ cach coher issu switch design issu arbitr messag flow control issu appropri rout strategi messag layout etc first issu design analyz cach organ larg enough hold reusabl data yet fast enough oper time request pass switch second issu involv modifi directorybas cach protocol handl addit cach layer switch element cach block system properli invalid write third issu design buffer arbitr switch guarante certain cach action within switch delay period exampl read request travel switch cach must incur addit delay even case switch cach hit request must pass home node updat directori gener memori read oper final issu deal messag header design enabl request encod network rout etc contribut paper detail design perform evalu switch cach interconnect employ caesar cach embed switch architectur caesar switch cach made small sram cach oper speed wormhol rout crossbar switch virtual channel switch design optim maintain crossbar bandwidth throughput time provid suffici switch cach throughput improv remot access perform perform evalu switch cach interconnect conduct use six scientif applic present sever sensit studi cover entir design space identifi import paramet experi show switch cach offer great potenti use futur ccnuma interconnect applic rest paper organ follow section provid background remot access characterist sever applic ccnuma environ build motiv behind propos global cach approach switch cach framework cach protocol present section section cover design implement crossbar switch cach architectur call caesar perform benefit switch cach framework evalu analyz great detail section sensit studi variou design paramet also present section final section summar conclud paper memori interconnect network memori network interfacerout network interfacerout remot memori node xs figur ccnuma system memori hierarchi applic characterist motiv sever current distribut share memori multiprocessor adopt ccnuma architectur sinc provid transpar access data figur show dispar proxim access time ccnuma memori hierarchi system load store issu processor x serv cycl upon l l cach hit less hundr cycl local memori access incur hundr cycl due remot memori access latenc store memori write transact hidden use weak consist model stall time due load read transact memori sever degrad applic perform global cach benefit trace analysi reduc impact remot read transact would like exploit local share pattern processor figur plot read share pattern six applic processor use cach line size byte six applic use evalu floydwarshal algorithm fwa gaussian elimin gauss gramschmidt gs matrix multipl mm success relax sor fast fourier transform fft xaxi repres number share processor x yaxi denot number access block share x number processor figur observ four six applic fwa gauss gs mm multipl processor read block two consecut write block share read form major portion applic read miss take advantag readshar pattern across processor a fwa b sor c gauss d gs e fft f mm figur applic read share characterist introduc concept ideal global cach central access processor first request serv memori data sent back repli messag store global cach sinc cach access processor subsequ request data item satisfi global cach low latenc two question aris here ffl time lag two access differ processor block defin tempor read share local processor somewhat equival tempor local uniprocessor system question rais particularli relat size organ global cach gener would translat to longer time lag bigger size requir global cach ffl given block held central locat mani request satisfi cach block call term attain read share estim perform improv employ global cach again metric give indic requir size global cach answer question instrument simul gener execut trace inform regard cach miss fed trace trace analysi tool share identifi local analyz order evalu potenti global qwhuduulydolphsffohv a fwa b gs c gauss d sor e fft f mm figur tempor local share access cach sila gener two differ set data tempor read share local figur attain share figur data set interpret follow tempor read share local figur depict tempor read share local function differ block size point fxyg data set indic probabl two read transact from differ processor block occur within time distanc x lower ie averag interarriv time two consecut read request block seen figur applic inher tempor reus cach block processor interarriv time two consecut share read transact differ processor block found less processor cycl pcycl share read transact applic ideal indic potenti atleast one extra request satisfi per global cach block attain read share figur explor probabl multipl request satisfi global cach techniqu term attain share degre point fxyg data set indic block held x cycl global cach averag number subsequ request per block serv figur depict attain read share degre applic base resid time block global cach resid time cach block defin amount time block held cach replac invalid invalid cannot avoid note resid time directli relat sever cach design issu cach size block size associ qwhuduulydolphsffohv a fwa b gs c gauss d sor e fft f mm figur attain share degre figur observ fwa gs gauss high read share degre close number processor system in case processor howev found attain share degre vari accord tempor local applic gauss attain share degre global cach resid time processor cycl gs requir resid time fwa requir time mm applic share degre approxim four five wherea attain share degre much lower sor fft much interest sinc low percentag share block access see figur interconnect global cach section identifi need global cach improv remot access perform ccnuma system section explor possibl use interconnect medium central cach locat ffl make interconnect medium suitabl candid central cach interconnect topolog benefici incorpor central cach scheme commun share memori system occur transact consist request repli request repli travers one node anoth network node node c interconnect overlap path cach potenti figur cach potenti interconnect medium interconnect network becom global yet distribut medium entir system keep track transact occur node global share framework effici employ network element coher cach data potenti network cach strategi illustr figur path two read transact memori modul emerg differ processor overlap point network common element network act small cach repli memori later request recent access block x potenti find block cach common rout element illustr shade circl benefit scheme twofold processor point view read request get servic latenc much lower remot memori access latenc secondli memori reliev servic request hit global interconnect cach thu improv access time request sent memori modul exampl observ incorpor scheme interconnect requir signific amount path overlap processor memori request repli follow path request order provid intersect rout flow request repli depend entir upon topolog interconnect ideal topolog system global bu howev global bu scalabl medium bu content sever affect perform number processor increas beyond certain threshold con sequent multipl bu hierarchi fattre structur consid effect solut scalabl problem tree structur provid next best altern hierarch cach scheme switch cach framework section present new hardwar realiz ideal global cach solut improv remot access perform share memori multiprocessor switch cach interconnect network topolog play import role determin path sourc destin system treebas network like fat tree heirarch bu network multistag interconnect network min provid hierarch topolog suitabl global cach addit min highli scalabl provid bisect bandwidth scale linearli number node system featur min make attract scalabl high perform interconnect commerci system exist system butterfli cm ibm sp employ bidirect min illinoi cedar multiprocessor employ two separ unidirect min one request one repli paper switch cach interconnect bidirect min take advantag inher tree structur note howev logic tree also embed popular direct network like mesh hypercub baselin topolog node bidirect min bmin shown figur a gener nnode system use bmin compris nk switch element a k theta k crossbar log k n stage connect bidirect link chose wormhol rout virtual channel switch techniqu preval current system sgi origin share memori system commun node accomplish via readwrit transact coher requestsacknowledg readwrit request coher repli processor memori use forward link travers switch similarli readwrit repli data coher request memori processor travers backward path shown bold figur a separ path enabl separ resourc reduc possibl deadlock network time rout switch provid ident path request repli processormemori pair essenti develop switch cach hierarchi bmin tree structur enabl hierarchi shown figur b basic idea cach strategi util tree structur bmin path overlap request repli coher messag provid coher share data intercon nect incorpor small fast cach switch element bmin serv share processor switch element use term switch cach differenti cach processor cach exampl bmin employ switch cach serv invalid respons ack writeback request a bidirect min structur rout processorcach interfac memori interfac b multipl tree structur bmin processorcach interfac memori interfac c switch cach bmin servic memori switch cach servic switch cach differ level figur switch cach interconnect multipl processor shown figur c initi share read request processor p block serv remot memori j repli data flow interconnect network block captur save switch cach switch element along path subsequ request block share processor p j p k take advantag data block switch cach differ stage thu incur reduc read latenc cach protocol incorpor processor cach multiprocessor introduc wellknown cach coher problem mani hardwar cachecoher system employ fullmap directori scheme scheme node maintain bit vector keep track sharer block local share memori space everi write ownership request sent home node invalid sent sharer block ownership grant correspond acknowledg receiv process node cach employ threestat msi protocol keep track state cach line incorpor switch cach come requir cach remain coher data access remain consist system consist model cannot reach state write initi anoth processor expect state share dirti uncach readrepli readrepli invtyp invalid share readrepli readrepli a switch cach state diagram add sharer directori vector send invalid requestor increment ack_count wait addit ack protocol b chang directori protocol switch hit read figur switch cach protocol execut adopt sequenti consist model paper basic cach scheme repres state diagram figur explain follow switch cach store block share state system block read processor cach dirti state cach switch effect switch cach need employ state protocol state block either share valid transit block one state anoth shown figur a illustr differ block invalid inv type block replac readrepli figur show valid state conceptu separ two state invalid present respect read request read request messag enter interconnect check switch cach along path event switch cach hit switch cach respons provid data send repli requestor origin messag mark switch hit continu destin memori ignor subsequ switch cach along path sole purpos inform home node anoth sharer read block messag call mark read request request necessari maintain fullmap directori protocol note memori access need mark request repli gener destin memori mark read request find block two state share transient see figur b directori state share request updat share vector directori howev possibl write initi cach line differ processor invalid write yet propag switch cach present due fals share applic allow data race condit exist occur mark read request observ transient state physic address swc hit dest bit flit req age bit bit addr contd src bit bit bit bit figur messag header format directori event directori send invalid processor request read wait addit acknowledg commit write read repli read repli origin two differ sourc name memori node owner cach dirti state read repli enter interconnect follow backward path read repli origin memori node check switch cach along path line present switch cach data carri read repli written cach state cach line mark share messag origin owner cach repli whose home node request node ident allow check switch cach along way repli find line absent cach enter data cach home node request same repli ignor switch cach repli allow enter switch cach subsequ modif block owner visibl interconnect network thu path owner request coher overlap write request invalid request respons coher as explain next summari read repli nonident home node request node enter data switch cach alreadi present write writeback coher messag request flow switch check switch cach invalid cach line present cach so switch cach coher maintain somewhat transpar messag format messag format network interfac request repli coher messag prepar sent network wormholerout network messag made flow control digit flit flit byte cavallino messag header contain rout inform data flit follow path creat header format messag header shown figur implement cach techniqu requir header consist addit bit inform two bit reqtyp encod denot switch cach access type follow cach line switch cach present mark read header gener repli messag w w w forward link input backward link input forward link output link output backward input block input block input block input block arbit crossbar w rout tabl w w w w figur convent crossbar switch line switch cach invalid cach line present cach switch cach process requir note descript cach protocol read request encod sc read request read repli whose home node requestor id differ encod sc write coher messag write ownership request writeback request encod sc inv request request encod sc ignor request addit bit requir mark sc read request earlier switch cach hit request call mark read request use avoid multipl cach servic request discuss mark request updat directori avoid memori access switch cach design implement crossbar switch provid excel build block scalabl high perform interconnect crossbar switch mainli differ two design issu switch techniqu buffer manag use wormhol rout switch techniqu input buffer virtual channel sinc preval current commerci crossbar switch begin present organ design altern theta crossbar switch cach later subsect extens requir incorpor switch cach modul larger theta crossbar switch present w w w forward link input backward link input forward link output link output backward input block input block input block input block rout tabl crossbar w arbit input block switch cach modul w w w w w w w forward link input backward link input forward link output link output backward input block input block input block input block crossbar w rout tabl w w w w switch cach modul arbit input block a arbitrationindepend b arbitrationdepend figur crossbar switch cach organ switch cach organ base bidirect crossbar switch four input four output shown figur input link crossbar switch two virtual channel thu provid possibl input candid arbitr arbitr process age techniqu similar employ sgi spider switch arbitr cycl maximum highest age flit select possibl arbitr candid flit size chosen byte w link similar intel cavallino thu take four link cycl transmit flit output one switch input next buffer crossbar switch provid input block link input block organ fix size fifo buffer virtual channel store flit belong singl messag time virtual channel also partit base destin node avoid outoford arriv messag origin sourc destin also provid bypass path incom flit directli transmit output input buffer empti organ switch cach particularli interest maxim perform serv flit within cycl requir oper base crossbar switch thu organ depend highli delay experienc link transmiss crossbar switch process present two differ altern organ switch cach modul within convent crossbar switch arbitrationindepend organ base crossbar switch oper similar sgi spider arbitrationdepend organ base crossbar switch oper similar intel cavallino arbitrationindepend organ switch cach organ base link switch process delay similar experienc sgi spider intern switch core run mhz link transmiss oper mhz switch take four mhz clock move flit input link transmitt output link hand transmit byte flit singl mhz clock four mhz clock figur show arbitrationindepend organ switch cach organ arbitr independ switch cach perform critic oper parallel arbitr oper begin arbitr cycl maximum four input flit store input link regist transmit switch cach modul order maintain flow control requir switch cach process perform parallel arbitr transmiss delay switch cycl arbitrationdepend organ switch cach organ base link switch process delay similar experienc intel cavallino intern switch core link transmiss oper mhz take cycl crossbar switch pass flit input output transmitt cycl link transmit one flit one switch anoth figur b show arbitrationdepend organ switch cach organ arbitr depend perform critic oper end arbitr cycl parallel output link transmiss end everi arbitr cycl maximum four flit pass crossbar input buffer output link transmitt also transmit switch cach sinc output transmiss take four mhz cycl switch cach need process maximum four flit within cycl organ advantagesdisadvantag arbitrationindepend organ cach oper switch core frequenc remain independ link speed hand organ lack arbitr inform could use complet oper orderli manner issu affect theta switch drawback evid studi design larger crossbar switch arbitrationdepend organ benefit complet arbitr phase use result inform time complet switch cach process howev organ cach requir run link transmiss frequenc order complet critic switch cach oper intel cavallino possibl run switch core switch cach link transmiss speed final note that case repli messag switch cach modul store anoth input block shown figur two virtual channel per input block crossbar switch size expand also case maximum number switch cach input request process time limit switch cach cycl cach size in byte cach access time in direct cach size in byte cach access time in direct a byte cach line b byte cach line figur cach access time in fo cach design area access time issu access time area occupi sram cach depend sever factor asso ciativ cach size number wordlin number bitlin section studi impact cach size associ access time area constraint aim find appropri design paramet crossbar switch cach cach access time cacti model quantifi relationship cach size associ cach access time ran cacti model measur switch cach access time differ cach size set associ valu order use measur technolog independ manner present result use delay measur techniqu known fanoutoffour one fo delay signal pass invert drive load capacit four time larger input known kbyte data cach cycl time fo figur show result obtain fo unit figur xaxi denot size cach curv repres access time particular set associ find direct map cach lowest access time sinc direct index method use locat line howev direct map cach may exhibit poor hit ratio due map conflict switch cach setassoci cach provid improv cach hit ratio longer cycl time due higher data array decod delay current processor employ multiport set associ l cach oper within singl processor cycl chosen way set associ design base crossbar switch cach maintain balanc access time hit ratio howev also studi effect vari set associ switch cach perform cach output width also import issu primarili affect data readwrit delay studi wilton et al increas data array width increas number sens amplifi requir organ cach also make signific differ term a byte cach line b byte cach line figur cach rel area chip area narrow cach provid data multipl cycl thu increas cach access time averag read request exampl cach byte block width bit decreas cach throughput one read four cycl within rang bit data output width know bit provid worst possibl perform scenario design switch cach use bit output width show overal perform affect paramet cach rel area order determin impact cach size set associ area occupi onchip cach use area model propos mulder et al area model incorpor overhead area driver sens amplifi tag control logic compar data buffer differ organ technolog independ manner use regist bit equival rbe one rbe equal area bit storag cell use area model obtain measur differ cach size associ figur show result obtain rel area xaxi denot size cach curv repres differ set associ valu small cach size rang byte kb find amount area occupi direct map cach much lower way set associ cach figur find increas associ lower impact cach area increas observ think way set associ cach design would suitabl organ term cach area cach access time measur earlier cach embed switch architectur caesar section present hardwar design crossbar switch cach call caesar cach embed switch architectur block diagram caesar implement shown figur theta switch maximum flit latch switch cach regist w w f w f w w r u switch cach modul cach access control switch cach modul arbit crossbar select sourc linkbuff inform process incom flit flit transmit crossbar header vector input block block info updat read header cach data unit cach tag unit snoop regist ri buffer wr buffer figur implement caesar arbitr cycl oper caesar switch cach divid process incom flit switch cach access switch cach repli gener switch cach feedback section cover design implement issu oper detail process incom flit incom flit store regist belong differ request type request type flit identifi base bit r r store header header flit request contain relev inform includ memori address requir process read invalid subsequ flit belong messag carri addit inform essenti switch cach process write request switch cach requir header flit address inform data flit written cach line final ignor request need discard sinc requir switch cach process addit type request requir process mark read request read request swc hit bit set header inform switch cach serv previou switch cach classifi type flit enter cach switch cach process broken two basic oper first oper perform flit process unit propag appropri flit switch cach mention earlier flit need enter cach read header invalid header write flit thu process unit mask ignor flit mark read flit data flit invalid read request done read r r bit header vector swc hit bit util header inform subsequ data flit messag switch cach maintain regist store bit flit requir cach process pass request queue one everi cycl request queue organ two buffer ri buffer set wr buffer shown figur ri buffer hold header flit read invalid request wr buffer store write flit organ num vc theta k differ buffer multipl buffer requir associ data flit correspond header data flit write request accumul buffer request readi initi cach line fill oper second oper complet process incom flit follow unmark read header flit need snoop cach gather hitmiss inform inform need within cycl switch delay link transmiss abl mark header set last bit swc hit perform snoop oper cach tag read header also copi snoop regist shown figur requir two snoop regist maximum two read request enter cach singl arbitr cycl switch cach access figur illustr design cach subsystem cach modul shown figur way set associ sram cach cach oper frequenc intern switch core set associ cach organ use two subarray tag data cach output width bit thu requir cycl data transfer read line tag array dual port allow two independ request access tag time describ switch cach access oper associ access delay request switch cach broken two type request snoop request regular request snoop request read request requir snoop cach determin hit miss outgo flit transmit next switch arbitr independ switch cach organ figur a take minimum four cycl move flit switch input output thu need snoop oper within last cycl mark messag link transmiss similarli arbitr depend organ figur b take cycl transmit bit header bit output link header load bit w output regist messag format figur phit contain swc hit bit mark transmit fourth cycl thu requir cach access complet within maximum cycl figur copi first read snoop regist perform flit process unit complet one cycl dedic one port tag array primarili snoop request snoop cach take addit cycl complet sinc maximum read header arriv switch cach singl arbitr cycl complet snoop oper cach within cycl note figur snoop oper done parallel pend request ri buffer qsize gen repli data buffer header bit directori queue statu send replyrepli unit request address address write data data inout data inout hitmiss block info input block figur design caesar cach modul wr buffer snoop oper complet hitmiss inform propag output transmitt updat read header output regist snoop oper result switch cach miss request also dequeu ri buffer regular request regular request request chosen either ri buffer wr buffer request process maximum cycl absenc content request ri buffer handl fcf basi avoid depend violat read invalid request buffer howev candid cach oper ri buffer well one wr buffer absenc address depend request buffer progress order switch cach depend exist two request need make sure cach state correct preserv identifi two type depend request ri buffer request wr buffer ffl invalid from ri buffer cach line x write from wr buffer cach line x preserv consist simplest method discard write cach line thu avoid incorrect cach state thu invalid enter switch cach write address pend write request wr buffer compar invalid parallel cach line invalid ffl read from ri buffer cach line x write from wr buffer cach line map cach entri write occur first cach line x replac event read request cannot serv sinc occurr rare remedi send read request back home node destin satisfi typic remot memori read request switch cach repli gener invalid write cach gener repli switch cach read request need servic read cach line cach send repli messag request processor read header contain inform requir send repli request read header cach line data directli fed repli unit shown figur repli unit gather header begin cach access modifi sourcedestin requestrepli inform header parallel cach access entir cach line read repli packet gener sent switch cach output block repli messag switch cach act messag enter switch form flit get arbitr appropri output link progress use backward path request processor switch cach feedback anoth design issu caesar switch select queue size section identifi method preserv crossbar switch throughput block request violat correct shown figur finit size queue exist input switch cach ri buffer wr buffer repli unit virtual channel queue switch cach output block limit size buffer get full two option process readwrit request first option block request space avail buffer second option probabl wiser one allow request continu path memori perform switch cach depend chosen scheme buffer size extrem limit final invalid messag process switch cach sinc requir maintain coher messag need block ri buffer get full modif requir arbit make possibl quit simpl implement block flit input switch cach need inform arbit statu queue end cycl switch cach inform crossbar statu queue form free space avail queue modif arbit perform requir block minor depend free space queue appropri request base r r block other travers switch normal fashion design theta crossbar switch cach previou section present design implement theta cach embed crossbar switch current commerci switch sgi spider intel cavallino six hitmiss way bankbank select addrdata pair way way way bankbankbankqs gen repli repli unit queue statu repli addrdata pair address address figur design caesar bidirect input ibm sp switch input output section present extens earlier design incorpor switch cach modul theta switch maintain base paramet switch core frequenc core delay link speed link width flit size main issu expand switch number input switch cach modul doubl thu arbitr cycl maximum four read request come switch requir snoop oper switch cach within cycl switch core delay link transmiss depend switch cach organ shown figur shown figur take one cycl move flit snoop regist thu requir complet snoop oper request within cycl mark header flit last cycl depend snoop result order perform four snoop two cycl propos use multiport caesar cach modul multiport implement either duplic cach interleav two independ bank sinc duplic cach consum tremend amount onchip area propos use way interleav caesar caesar shown figur interleav split cach organ two independ bank current processor mip r use even odd address bank cach howev problem remain four even address four odd address request still requir four cycl snoop due bank conflict propos interleav bank base destin memori use outgo link id theta switch four outgo link transmit flit switch toward destin memori viceversa cach bank serv request flow two link thu partit request base destin memori arbitrationindepend organ figur a possibl four incom read request direct memori modul result bank conflict howev arbitr depend organ figur b conflict get resolv arbitr phase guarante arbitr flit flow differ link theta switch would advantag use arbitr depend organ thu assur maximum request per bank arbitr cycl result snoop oper four request complet requir two cycl final note bit rout tag need identifi bank cach interleav organ chang aspect ratio cach may affect cycl time cach wilson et al show increas cycl time measur use fanoutoffour bank interleav cach singl port cach minim way interleav implement also doubl cach throughput sinc two request simultan access switch cach repli unit need provid twice buffer space store data cach similarli header flit two read request also need store shown figur buffer connect output differ bank gather cach line data perform evalu section present detail perform evalu switch cach multiprocessor base executiondriven simul simul methodolog evalu perform impact switch cach applic perform ccnuma multiprocessor use modifi version rice simul ilp multiprocessor rsim rsim execut driven simul share memori multiprocessor accur model current processor exploit instructionlevel parallel section present variou system configur correspond modif rsim conduct simul run base system configur consist node node consist mhz processor multiprocessor system processor processor memori speed mhz access time issu way interleav cach network l cach kb switch size x line size byte core delay set size core freq mhz access time link width bit l cach kb xfer freq mhz line byte flit length byte set size virtual ch access time buf length flit switchnetwork cach switch cach byteskb network cach kb applic workload fwa x ge x gs x mm x tabl simul paramet capabl issu instruct per cycl kb l cach kb l cach portion local memori directori storag local bu interconnect compon l cach way set associ access time singl cycl l cach way set associ access time cycl raw memori access time cycl take cycl submit request memori subsystem read data memori bu system employ fullmap threestat directori protocol msi cach protocol maintain cach coher system use releas consist model modifi rsim employ wormhol rout bidirect min use theta switch organ stage shown earlier figur virtual channel also ad switch element simul behavior commerci switch like cavallino spider input link switch provid virtual channel buffer capabl store maximum flit singl messag crossbar switch oper similar descript section detail list simul paramet also shown tabl figur percentag reduct memori read evalu switch cach modifi simul incorpor switch cach switch element in switch cach system improv base system follow respect switch element bidirect min employ variabl size cach model function caesar switch cach present section sever paramet cach size set associ vari evalu design space switch cach select numer applic investig potenti perform benefit switch cach interconnect applic floydwarshal allpairshortestpath algorithm gaussian elimin ge qr factor use gramschmidt algorithm gs multipl matric mm success overrelax grid sor sixstep fast fourier transform fft splash input data size shown tabl share characterist discuss section base simul result subsect present analyz result obtain extens simul run compar three system base system base network cach nc switch cach sc base system employ cach techniqu beyond l l cach simul system nc enabl kb switch cach switch element stage min note stage stage close processor stage stage close remot memori shown figur sc system employ switch cach switch element min main purpos switch cach interconnect serv read request travers memori enhanc perform reduc number read miss serv remot memori figur present reduct number read miss memori appl hit distribut share gs ge tabl distribut switch cach access employ network cach nc switch cach sc base system base order perform fair comparison compar sc system kb switch cach stage overal kb cach space nc system kb network cach figur show network cach reduc remot read miss applic except fft multipl layer switch cach capabl reduc number memori read request upto fwa gs ge applic tabl show distribut switch cach hit across two stage st st network tabl note high percentag request get satisfi switch cach present lowest stage interconnect note howev three six applic roughli request switch cach hit stage close memori st also interest note number request satisfi store block switch cach tabl present data share defin number differ processor request serv block encach switch cach find share degre rang across applic applic high overal read share degre fwa gs ge find degre share approxim stage closer processor processor connect switch mani read request find block first stage get satisfi subsequ stage thu find higher approxim read share degre stage closer remot memori applic mm applic overal share degre approxim see figur data typic share four processor physic connect switch first stage network thu request get satisfi first stage attain read share degre final sor fft applic read share request satisfi first stage network figur impact averag read latenc figur applic execut time improv figur show improv averag memori access latenc read applic use switch cach interconnect applic figur consist three bar correspond base nc sc system averag read latenc compris processor cach delay bu delay network data transfer delay memori servic time queue delay network memori modul shown figur employ network cach improv averag read latenc atmost applic switch cach multipl stage interconnect find averag read latenc improv high fwa gs ge applic read latenc reduc matmul applic again sor fft unaffect network cach switch cach due neglig read share ultim paramet perform execut time figur show execut time improv bar figur divid comput synchron time read stall time write stall time releas consist system find write stall time neglig howev read stall time base system compris high overal figur impact cach size number memori read figur impact cach size execut time execut time use network cach find read stall time reduc maximum for fwa gs ge applic thu translat improv execut time use switch cach multipl stage interconnect observ execut time improv high three applic execut time mm applic compar network cach sor fft unaffect switch cach sensit studi sensit cach size order determin effect cach size perform vari switch cach size mere byte larg kb figur show impact switch cach size number memori read overal execut time cach size increas find switch cach size byte provid maximum perform improv up read hso qy figur effect cach size evict rate figur effect cach size switch cach hit across stage execut time three six applic mm sor applic requir larger cach addit improv mm applic attain perform improv execut time switch cach size kb increas cach size neglig impact perform sor found reduct number memori read contrari neglig amount share applic shown figur upon investig found switch cach hit come replac l cach word block switch cach access highli processor whose initi request enter block switch cach switch cach act victim cach applic use switch cach affect perform fft applic figur investig impact cach size evict rate type switch cach fwa applic xaxi figur repres size cach byte block switch cach evict either due replac due invalid bar figur divid two portion repres amount replac versu invalid switch cach figur normal number evict system byte figur effect line size number memori read switch cach first observ figur reduct number evict cach size increas note number evict remain constant beyond cach size kb small cach also observ roughli block switch cach invalid other replac word block invalid process switch cach sinc alreadi evict replac due small capac cach size increas find fraction invalid increas sinc fewer replac occur larger cach kb switch cach find roughli block invalid cach next look impact cach size amount share across stage figur show amount hit obtain stage network fwa applic bar divid two segment repres stage switch cach denot stage number note stage stage closest processor interfac figur interest note small cach equal amount hit obtain stage network hand cach size increas find higher fraction hit due switch cach closer processor interfac st benefici fewer hop requir network access data therebi reduc read latenc consider sensit cach line size earlier section analyz data line section vari cach line size studi impact switch cach perform figur show impact larger cach line byte switch cach perform three applic ge vari cach size byte kb compar perform base system line byte cach line note result normal base system byte cach line found number memori read figur effect line size execut time figur effect associ switch cach hit reduc increas cach line size base system howev use switch cach still signific impact applic perform kb switch cach reduc number read request serv remot memori high execut time high summari switch cach perform depend highli cach line size highli read share applic good spatial local sensit set associ section studi impact cach set associ applic perform figur show percentag switch cach hit cach size associ vari find set associ impact switch cach perform believ frequent access block need resid switch cach short amount time observ earlier trace analysi higher degre associ tri prolong resid time reduc cach conflict sinc requir higher resid time switch cach perform neither improv hinder figur effect applic size execut time sensit applic size anoth concern perform switch cach rel small data set use faster simul order verifi switch cach perform chang drastic larger data set use fwa applic increas number vertic note data set size increas squar number vertic base system execut time increas factor respect byte switch cach execut time reduc vertic vertic vertic summari believ switch cach requir small cach capac provid suffici perform improv larg applic frequent access read share data conclus paper present novel hardwar cach techniqu call switch cach improv remot memori access perform ccnuma multiprocessor detail trace analysi sever applic show access share block great deal tempor local thu remot memori access perform greatli improv cach share data global cach make global cach access processor system interconnect seem best locat sinc abil monitor internod transact system effici yet distribut fashion incorpor small cach within switch element min share data captur flow memori processor design switch cach framework sever issu dealt with main hindranc global cach techniqu maintain cach coher organ cach techniqu hierarch fashion util inher tree structur bmin so cach kept coher transpar fashion regular processor invalid sent home node control infor mation maintain fullmap directori inform read request hit switch cach mark allow continu path memori sole purpos updat directori cach techniqu also kept noninclus thu devoid size problem multilevel inclus properti import issu design switch cach incorpor cach within typic crossbar switch such spider cavallino manner request delay switch element detail design cach embed switch architectur caesar present analyz size organ cach depend heavili switch transmiss latenc present dualport way set associ sram cach organ theta crossbar switch cach also propos linkbas interleav cach organ scale size caesar modul theta crossbar switch simul result indic small cach size kb byte suffici provid reduct memori servic thu improv execut time applic relat fact applic lot tempor local share access current switch spider maintain larg buffer underutil share memori multiprocessor seem organ buffer switch cach improv perform realiz paper studi use switch cach store recent access data share state reus subsequ request processor system addit request applic also signific amount access block dirti state improv perform request directori embed within switch element provid share data switch cach ownership inform switch directori perform ccnuma multiprocessor significantli improv latenc hide techniqu data prefetch forward also util switch cach reduc risk processor cach pollut use switch cach along latenc hide techniqu improv applic perform ccnuma multiprocessor tremend r an overview hpconvex exemplar hardwar butterfli parallel processor overview version perform multistag bu network distribut share memori multiprocessor the impact switch design applic perform share memori multiprocessor cavallino teraflop router nic a new solut coher problem multicach sy tem scalabl pipelin interconnect distribut endpoint rout sgi spider chip tutori recent trend processor design reclimb complex curv high frequenc clock distribut the sgi origin ccnuma highli scalabl server the network architectur connect machin cm the stanford dash multiprocessor sting ccnuma comput system commerci mar ketplac the effect sram network cach cluster dsm a perform model finitebuff multistag interconnect network an area model onchip memori applica tion design analysi cach coher multistag interconnect network the impact sharedcach cluster smallscal sharedmemori mul tiprocessor rsim refer manual version splash stanford parallel applic share memori the sp high perform switch the perform cedar multistag switch network hierarch cachebu architectur share memori multiprocessor design high bandwidth onchip cach an enhanc access cycl time model onchip cach the mip r superscalar microprocessor reduc remot conflict miss numa remot cach versu coma tr ctr takashi midorikawa daisuk shiraishi masayoshi shigeno yasuki tanab toshihiro hanawa hideharu amano perform snail a sssmin connect multiprocessor cach coher mechan parallel comput v n p marchapril