t lambda calculu type theori formal a survey substanti bodi knowledg lambda calculu pure type system formal develop construct type theori use lego proof system lambda calculu work abstract simplifi proof standard beta reduct mention redex posit residu outlin meta theori pure type system lead strengthen lemma one novelti use name variabl formal along way point feel learn gener issu formal mathemat emphas search formal definit conveni formal proof convincingli repres intend inform concept b introduct thi paper hobbi first sentenc mp first report formal develop lambda calculu type theori written autumn continu pursu hobbi ever sinc develop substanti bodi formal knowledg includ churchross standard theorem beta reduct basic theori pure type system pt lead strengthen theorem type check algorithm pt work report mp vbjmp polb pol present paper survey work includ new proof point feel learn gener issu formal mathemat technic side describ abstract simplifi proof standard beta reduct previous publish mention redex posit residu gener issu emphas search formal definit conveni formal proof convincingli repres intend inform concept lego proof develop system lp use check work implement extend calculu construct induct type luo lego refin style proof checker publicli avail ftp www user manual lp larg collect exampl section contain submit journal autom reason version paper appear technic report ecslfc univers edinburgh z laboratori foundat comput scienc univers edinburgh x basic research comput scienc univers aarhu centr danish nation research foundat inform access formal develop describ pa per interest exampl formal lego includ program specif data refin luo strong normal system f alt synthet domain theori reu reu oper semant imper program sch whi pt beauti metatheori develop inform bar ber gn vbj geu paper unusu clear mathemat littl doubt correct re sult write machinecheck develop inform present leav mani decis unspecifi mani fact unprov far detail represent need write comput program typecheck pt lemma need prove correct program start longterm goal fill gap order increas confid proofcheck program such lego base type theori goal larg met pol also basic inform theori pt well under stood difficulti formal suggest reformul clarifi present anoth goal project develop realist exampl formal mathemat mathemat comput scienc prove one big theorem throw away work lead theorem want build bodi formal knowledg continu extend suggest design criteria formal represent definit must suitabl whole develop special singl theorem theori structur like comput program abstract provid isol compon sever part theori work simultan perhap sever worker inevit wrong decis underli represent later fix without affect serious larg theori depend them bodi knowledg want formal still grow ing eg vbjmp report advanc typecheck pt done later origin formal becam part formal develop work typecheck benefit basic formal pt sinc proof sever relat system could easili adapt proof alreadi done pt further new subject includ eg standard theorem use type theori formal first author hand claim type theori realist exampl formal math emat especi suitabl formal object induct construct properti prove induct structur littl equal reason perhap compel reason continu fascin work lure complet concret yet simpl proof result whose convent present seem requir notion messi formal eg standard theorem discuss section see proof beauti simplic concret tendenc formal throw simplic wind frustrat get proof work all check beautifi rel easili improv definit argument mechan check easili point new glitch suggest fix them also formal develop easi come back year later detail would otherwis written explicit rediscov relat work mani formal churchross theorem sha hue nip pfe formal standard theorem know coqa lazi combin express formal type theori includ db bar address limit aspect special type theori essenti calculu construct although bar interest work program extract mechan coq use extract execut typecheck proof decid typecheck contrast cite work except bar develop termin reach one specifi theorem continu grow variou direct guid interest work come across feel need check exampl author check part type theori paper ask refere novelti present use name variabl formal type theori lambda calculu know use de bruijn indic nameless variabl sha alt hue nip bar higher order abstract syntax pfe avoid formal renam variabl prevent unintend captur substitut de bruijn notat concret suitabl formal reason formal theori name variabl one thing implement must use name level whether intern pars print either case use name must formal explain interest insight gain mean bind mani research agre de bruijn represent realli is inform mean lambda term sens need quotient term alphaconvers ie intension equal de bruijn term correspond inform meant ident term nonetheless de bruijn represent code inform notion bind address relationship free bound variabl name free variabl becom bound formal syntact term use name variabl concret name bound variabl actual occur parametr metaformula contain them name free variabl do done use formul suggest coquand coq base syntact distinguish free bound variabl work formal bind substitut use name includ coqb gm owe sat sto work larg exampl use bind notion would interest compar develop similar exampl use term upto alpha convers gm present type theori base treat term name variabl concret martinlof calculu explicit substitut ta present close alphaconvers present section view failur concret martinlof system paper formal develop sourc file develop describ paper along readm file explain check them avail lego www homepag httpwwwdcsedacukhomelego lego use modul system describ jp base cardelli mock modul car sourc file modul modul header say modul depend on thu directori modul associ paper contain parallel even incompat develop type load strengthen file strengtheningl which contain proof strengthen pt load preceed everi modul depend distinct alreadi present gentzen gen page prawitz pra depend determin modul header examin proof sourc file extens l contain definit lemma larg amount formal knowledg survey here paper use inform mathemat notat almost everi definit lemma mention given formal name typewrit font often parenthes use grep find file defin file use particularli eleg too keep track larg amount formal knowledg seriou problem address well notat mention paper use inform notat arriv manual translat formal lego notat l e x further translat pure syntact chose surpress technic detail readabl present error quit like aris translat interpret paper may inform outlin formal work want believ one result must read formal statement formal definit use statement see pol discuss believ larg formal develop mp use formal notat verbatim text manual extract lego sourc file translat error occur reason believ verbatim text paper actual appear file inde document file drift apart time polb use formal notat mechan extract mark section sourc file follow idea knuth web could rerun extract updat document formal sourc mani reader complain document unread formal sourc present formal develop seriou problem perhap mechan extract mechan translat inform notat right direct pursu better wors sanitis present littl pure formal detail show through exampl mostli sur press distinct boolean valu proposit valu howev want hide fact formal requir mani detail appear inform present actual depend file l file one wrote lego gener compil file o extens fulli annot term gener lego tactic call l file basic notat develop use lego builtin librari impred definit usual logic connect properti use standard notat connect quantifi type ecc reserv symbol rang certain type drop type label almost everywher eg p reserv rang paramet pp well known comput scienc notat use eg ifthenels list type list or sometim concaten list append funtion ecc total as oppos function object theori lambda term pt oper take extra argument failur valu eg assoc b l return b first element pair occur l pure languag section discuss formal languag pt includ term occurr substitut deriv strong induct principl wellform term pure languag pl tripl pp vv ss ffl pp infinit set paramet rang p q r global free variabl ffl vv infinit set variabl rang v x local bound variabl ffl ss set sort rang u constant pp vv ss decid equal pp vv infinit captur assumpt everi list paramet variabl exist paramet variabl occur list eg assum mathemat principl work parametr type pp vv ss state properti instanti particular type provabl properti eg natur number list finit enumer type work parametr preserv abstract state properti use proof formula memberp l decid pp decid equal term term pl trm rang n e b given grammar atom variabl paramet sort binder lambda pi applic precis trm induct gener six constructor everi term thought wellfound tree whose leav variabl paramet sort whose interior node lambda pi have three branch each applic have two branch often defin function trm structur primit recurs induct definit usual intend vab fvagb bind v b howev intend bind structur determin definit trm made explicit definit substitut occurr below equal term defin recurs trm inherit decid pp vv ss remark notat often case analysi term structur want say binder lambda pi behav way introduc notat hvaia allow combin case actual formal notat would save much cut past develop proof length term use measur wellfound induct two properti measur use applic proper subterm b use induct length term everi term posit length use reason pt induct sum length term context occurr paramet sort list paramet occur term comput primit recurs term structur boolean judgement whether given paramet occur given term decid member function list paramet paramsp p paramshvaia paramsa paramsa similarli defin substitut machineri term need two kind substitut paramet variabl defin primit recurs term structur write apm formal psub substitut paramet p entir textual prevent captur sinc paramet bind instanc term hide paramet name binder apq ifpq a q apff ff ff vv ss aphvbib hvapbiapb substitut variabl v written avm formal vsub respect hide bound instanc substitut prevent captur avx ifvx a x avff ff ff pp ss avhxbib hxavbiifvx b avb use safe way type theori theori reduct convers prevent unintend captur variabl note oper total function renam variabl also occurr a share regardless whether occur within differ bind scope contrast situat de bruijn indic import lemma prove vclatom vclosedff ff pp ss vclbind tabl induct definit relat vclose readi suppli term shape pvm mani properti oper prove formal develop free occurr variabl intuit paramet free name term variabl intend bound name consid term free variabl well form defin induct predic vclose variableclos term tabl analag way type relat specifi anoth kind wellformed it turn everi pt typabl term vclose thu vclose use induct principl well form term relat simpl case idea recur mani time follow discuss length cours term form p vclose rule vclatom term shape v vclose there rule introduc vclosedv defin vclose binder approach go binder central idea formal handl name hvaia vclose requir vcloseda vclose pva paramet p is go binder first fill hole paramet p p appear conclus rule vclbind paramet use definit vclose say paramet do anoth possibl choic vclose pvb deriv p formal question one task reader formal mathemat decid formalis correctli captur inform understand formalis help reader point altern formal prove relationship them especi interest altern definit lead easier proof case see vclose remark vclose equival free variabl vclose vclose vclose vclose observ may inform interest the definit vclose reason use formal vclose allow us avoid talk vclose gener lemma suppos proof examin know must construct vclbind proof vcloseda rule vclose conclus shape vclose hvaib fact relat induct defin mean judgement deriv use rule often call case analysi gener lemma express properti call gener lemma bar invers principl dfh note invers principl determin shape definit extens lego new use tactic autom use invers mcb describ paper done tactic avail frequent use invers induct definit rest paper without comment gener lemma definit vclose notic existenti quantifi case binder express failur subformula properti vclose better induct principl vclose three obviou fact vclose alpha vclose lem vclose alpha directli provabl appear need length induct which appeal wellfound induct subsidiari case analysi eg proof claim avclos alpha below usual reason statement chang name prove length induct rather structur induct eg qvm gener subterm n shorter n deriv new induct principl packag argument all consid altern definit call avclos differ rule binder right premis requir avclbind show vclose avclos deriv judgement induct avclos principl melham gordon rediscov gm section worth say vclose type finit branch wellfound tree ie vclatom leav vclbind vclapp binari branch node hand avclos contain infinit branch wellfound tree avclbind creat branch paramet p notic also term one deriv avcloseda may mani deriv vcloseda differ paramet use left premis instanc avclbind equival vclose avclos avclos vclose vclose avclos direct follow easili structur induct follow claim avclos alpha proof claim prove induct lngthb work everi term appear premis rule avclos shorter term appear conclus type relat consid later properti subtl proof requir section wellfound induct lngthb goal use term structur induct case sort vari abl paramet binder applic onli case analysi necessari here use structur induct hypothes consid case binder must show avclos qv hnaib ie assumpt ie avclosedhnpvaiifvn b pvb avclos invers appli assumpt vclp also know avclbind suffic show notic pv chang lngth first hold ih h second let r arbitrari paramet consid case done h ie qvb actual appear goal pvb actual appear h final interest case v n use straightfoward lemma alpha commut alpha rewrit goal avclos qv rnb ih suffic show avclos pv rnb follow h rewrit order substitut p r gain defin avclos show extension equival vclose view induct principl avclos induct principl extens vclose clearli stronger induct principl vclose insist extens point avclosedinduct may use prove statement judgement vclose deriv judgement notic could directli prove analogu claim avclos alpha vclose the proof outlin work stronger premis avclos ie gener lemma stronger induct hypothes technic digress renam sequenti oper use notion simultan substitut except follow special case renam finit function paramet paramet renam repres formal graph list order pair rp pp theta pp renam pair renam listrp ae oe rang renam action renam rentrm paramet lookup repres list extend composit term aep assoc p p ae aeff ff ff vv ss aehvaia hvaeaiaea aem n aem aen tricki represent first pair p q ae return p action renam alway total finit support also assumpt renam graph function relat action renam func tional assoc find first match pair convers cons new pair front renam shadow old pair first compon formal observ renam commut substitut natur way renam iter substitut analys action renam term substitut rentrm conjug psub lemma easi show renam respect relat substitut paramet respect psub resp rentrm resp similar result hold n ari relat r inject surject renam use biject renam eg section definit standard surprisingli difficult construct biject renam gener tricki represent mention abov howev clear renam swap paramet biject swap sur swap inj enough purpos reduct convers section outlin theori reduct convers pure languag main result churchross standard theorem definit vclose section interest point defin reduct relat goe binder understand reduct work consid inform onestep betareduct untyp lambda calculu style fi rule are substitut nxm rh fi prevent captur restrict requir obviou captur occur n close usual inform sens distinguish paramet variabl enough n vclose actual restrict want reason vclose term anyway wellform term use fi binder allow must preserv invari fi appli vclose term fill hole left strip binder fresh paramet instanc incorrect captur might occur contract underlin redex remov outer binder x replac bound instanc fresh paramet q contract vclose redex thu obtain must rebind hole occupi q sinc q fresh instanc q mark hole rebound accord requir variabl term n qyn contractum vclose redex xq exampl pair xy the one use abov z xz z x howev deriv incorrect judgement thu incorrect captur avoid parallel reduct rather use ordinari fi reduct take parallel reduct a la taitmartinlof basic reduct relat parallel reduct conveni churchross standard theorem emphasis takahashi beauti account tak develop follow tak refin onestep parallel reduct relat par red defin tabl vclose abov depend congruenc rule binder choic paramet p appar howev someth new aris here name side condit p eigenvari pratom ff prbeta vclosedu prbind prapp tabl step parallel reduct condit ensur paramet p correctli indic posit bound variabl compound term vclose term particip par red vclose reflex vclose term par red refl stronger induct principl rule pratom pr bind prapp congruenc rule languag vclose section introduc strong congruenc rule binder pr bind prove extension equival give us stronger induct invers principl eigenvari condit prbind techniqu use renam requir kleen kle x notion pure variabl proof explain treat condit howev must explicitli consid oper deriv henc depend elimin wherea method requir rule induct ie nondepend elimin second author grate n shankar refer show equival omit detail similar argument use section strong induct principl use show close substitut par red psub manystep parallel reduct par redn transit closur inherit properti par redn vclose par redn refl correspond properti mention abov alphaconvers defin ff convers ff least congruenc ie ff exactli without rule prbeta ff definit symmetr inspect show transit requir stronger induct principl ff prove way abov henc ff equival relat decid vclose term decid alpha conv ff straightfoward messi proof doubl induct avclosedb inform alphaconvers use chang name vari abl hxaib ff prevent captur howev true alpha conv pi closur ff convers one coquand origin motiv distinguish variabl paramet avoid need reason ff convers mani argument churchross standardis subject reduct achiev goal namecarri syntax regard abbrevi quotient modulo ff convers formalis relat r parallel reduct abov realli intend r modulo quotient structur ie ff say relat r is contrast gallier meticul longwind treatment gal close ff ffffir rffiff strongli close ffffir r full wrt ff rffiff ffffir strongli full rffiff r remark strongli close ff convers proof transit ff addit case redex handl observ ff variant redex redex howev full wrt ff class exampl ff variant lh reduc y qy although ff variant rh churchross theorem use argument tait martinlof modern tak prove first cr theorem par redn dp usual strip lemma argument diamond properti comp dev par red dp so introduc induct characteris complet develop gamma comp dev given rule except applic rule cdapp gamma ab gamma lambda side condit cdapp forc contract redex determinist subrel theorem finit develop becom combin of ffl induct definit gamma may think partial correct assert ffl exist for vclose term complet develop comp dev exist may think termin argument cf definit gamma function structur recurs term tak separ concern give us advantag takahashi inform proof consid proof gamma subsidiari induct caseanalysi resolv redexnon redex distinct case applic handl exist proof induct definit gamma alreadi delin redexnonredex distinct price pay longer work objectlevel function rather function relat cours simplifi matter consid develop entir set redex term suffici purpos refin analysi eg hue would take us beyond simpl datastructur term diamond properti comp dev par red dp follow easili follow takahashi lemma comp dev precr whose proof induct gamma invers m n usual interest case redexredex appeal par red psub remark proof make appeal ff convers gamma relat strongli close ff convers inde may show follow two properti strengthen comp dev exist name comp dev uniqu comp dev exist uniqu convers defin convers conv symmetr transit closur inherit properti conv vclose conv refl mention abov second churchross theorem straightfoward prove convers convcr normal form term beta normal beta norm beta redex may defin rule avclos except rule applic bnapp beta norm a beta norm b beta norm ab lambda beta norm term vclose beta norm vclose relat reduct normal form defin n beta norm n normal reflex reduct normal form everi reduct normal form normal form parrednbnormisbnorm reduct normal form alphaconvert normal form parrednbnormisalphaconv henc churchross normal form term uniqu alphaconvers nfuniqu sinc ff convers also hold nfalphaclass thu class normal form vclose term either empti exactli alphaconvers equival class decid convers convers decid normal term proof depend churchross sinc normal form uniqu alphaconvers also depend decid alphaconvers section standard theorem work typecheck requir us go beyond theorem churchross analysi reduct particular talk syntaxdirect system must consid determinist reduct relat weakhead reduct simplest typic wh tabl one step weakhead reduct properti requir relat follow counterpart quasinormalis theorem wh standardis lemma takahashi show approach theorem analysi parallel reduct head reduct follow intern reduct socal semistandard lemma mit adapt method case weakhead reduct correspond modifi notion intern reduct simplifi somewhat particular remov need complex invari n moreov argument employ replic context head reduct intern reduct classic sens recent round line develop prove standard theorem pure languag main novelti remov mention residu so reader may unconvinc formalis standard theorem thing observ desir consequ standard requir analys typecheck lemma abov alreadi corollari semistandard lemma three main ingredi theorem weakhead reduc tion intern parallel reduct standard reduct itself weakhead reduct one step weakhead reduct wh red shown tabl invers see weakhead reduct lambda may assum without loss gener lambda rule whapp built vclose assumpt definit alway use context term vclose reader may valid definit consid weak head normal form tabl variou lemma relat wh whatom whnfff ff pp ss whbind lambda tabl weakhead normal form ipatom ff ipbind tabl one step intern parallel reduct whnf wh red determin wh nf nf alpha conv resp wh nf manystep weakhead reduct iwh wh redn defin reflex transit closur wh close renam ing substitut psub resp wh redn applic right intern parallel reduct classic notion head reduct lead notion intern redex nonhead redex adapt notion weakhead re duction give us definit intern parallel reduct ipar red shown tabl allow arbitrari parallel reduct compound term except rator posit applic restrict intern reduct immedi structur induct intern parallel reduct parallel reduct also import abstract properti ipar red refl wh nf preserv reflect weak head normal form fortiori shape outermost constructor term reflect weakhead normal form togeth lemma below key proof quasinormalis result open discuss semistandard par red wh redn ipar red proof proof proce induct m tricki case parallel fi step induct hypothesi obtain introduc skolem constant aw bw requir show exist mw sinc psub resp wh redn psub vsub alpha may conclud result stitch weakhead reduct sequenc togeth provid establish follow claim easi base case lemma tak wh ipar red psub prove way show closur parallel reduct substitut induct m detail observ must explicitli assum reduct n n parallel takahashi build invari wherea use wh ipar red psub obtain assumpt free premis associ reduct show case applic b induct hypothesi exist pa npa iwh pa proof claim henc whole lemma complet take p def pa npb appeal psub resp wh redn ipar red app par red psub establish full semistandard result must also show commut result ipar wh redn commut corollari by induct mw iwh follow lemma ipar wh red commut proof induct m ancillari hypothesi case trivial except applic show case whredex have use fact ipar red reflect weakhead normal form infer uu a moreov sinc a invers u v p pua pva choos p p appli prsub obtain bua appeal lemma final conclud p requir throughout use induct definit variou reduct relat establish lemma contrast takahashi treatment induct term structur with invers relat hypothes lead slightli weaker argument consequ need stronger induct in variant refin argument would inconceiv without machin support standard reduct properti standard reduct gamma usual state eg mitschk mit term highli intension geometr definit term formalis definit directli would enrich datatyp term order abl speak stdatom ffgamma ff ff pp ss stdbind stdapp stdwh tabl standard reduct standard adapt plotkin redex posit term approach taken hue chosen instead present tabl adapt plotkin notion standard sequenc plo essenc present defin standard reduct least congruenc close prefix weakhead reduct leav implicit sequenc redex contract may comput recurs lefttoright charact thu avoid mention residu redex posit remark defin standard reduct arbitrari length all without consider reduct normal note furthermor howev may easili achiev end ad side condit stdapp rule whnfb stdwh rule also definit strongli close ff convers strongli full final aim follow standard theorem the standardis lemma induct suffic show notion standard reduct absorb singl step parallel reduct lemma stdwh suffic prove follow lemma standard reduct absorb singl step intern parallel reduct standard absorb ipar red proof proof induct b gamma c avoid reconsid tricki applic case commut lemma abov may exploit fact preserv reflect shape term price pay need strong induct b gamma c ancillari hypothesi a expans step nonatom case make subsidiari appeal semistandard order abl exploit induct hypothes give rather mechan abstract nonsens flavour argument emphasis real complex lie proof lemma focu case binder hypothes invers h conclud p pwb c pub semistandard c iwh aw induct hypothesi iha aw gamma use stdwh fold back reduct c iwh aw final obtain c gamma exactli way modulo choic paramet obtain pwb c gamma pvb c gamma hva ib construct conclud proof standard reduct absorb intern reduct henc parallel reduct final may conclud everi parallel fi reduct sequenc may standard pure type system pt class type theori given set deriv rule tabl parameter pl pp vv ss two relat inform ax s start weak lda app tabl type rule pt formal name gt ffl rule rl ss theta ss theta ss written inform rl usual intend ax rl decid assumpt use basic theori pt interest algorithm typecheck polb pol even stronger assumpt decid need type judgement shape mean type the formal name relat gt old name gener type system call or gamma m subject predic judgement context rang gamma delta bind paramet type context formal list pp theta trm gamma particip deriv judgement gener abstract convers gener pt parameter rule tabl anoth relat call abstract convers occur side condit rule tconv convent present pt bar actual relat betaconvers use sever reason interest parameter pt convers relat one thing type theori ecc implement lego actual pt use gener notion convers call cumul ecc special interest us formal extens pt includ ecc formal develop includ typecheck algorithm ecc polb even pt notori open problem expans postpon problem vbjmp polb ask convers relat tabl replac betareduct without chang typabl term know one work pt use abstract convers relat bm properti necessari prove substitut lemma section reflex transit invari substitut cnv tran a prove subject reduct theorem section final need convers relat contract redex inter nal churchross properti notic contravari last properti easi prove properti formal instanti or cumul ecc discharg assumpt work abstractli make assumpt equival relat partial order which use asymmetr symbol signific properti gener hold includ differ abstractconvers pt fi convers detail polb kind analysi properti actual use bodi work greatli aid formal rule formal pt leav asid abstract convers rule tabl differ standard inform present bar sever way first handl paramet variabl pi lda rule similar rule tabl differ restrict weaken atom subject lda rule bind substitut treatment oper binder tabl analog reduct relat consid abov see discuss rule lda below substitut use rule app may caus captur variabl must show n vclose fact gt vclose lem structur induct also follow easili valid context vclose obviou sens atom weaken standard present weaken pt allow term subject weaken restrict atom term ff see rule weak rule deriv judgement weaken seen admiss section allow fewer deriv those deriv weaken push leav give cleaner meta theori induct deriv treat fewer case exampl given applic subject confus whether deriv app weak thu atom weaken judgement may deriv tconv exactli one remain rule lambda rule rule type lambda inform present bar geu convent understand bound variabl x realli occur conclus rule notat refer alphaequival class thu concret notat subject predic lambda rule may bind differ variabl formal rule lda one might instead rule first attempt surprisingli system deriv judgement system tabl lemma rlt gt gt rlt howev use lda subject reduct theorem difficult prove deriv distort need use convers rule alphaconvers see polb detail pt abstract convers survey develop lead subject reduct theo rem main differ section present bar use atom weaken rule section simpler proof subject reduct section basic fact sampl mani small fact establish usual simpl structur induct paramet lemma paramet occurr judgement bound context bind instanc valid context distinct paramet free param lem howev left premis rule free instanc actual symbol intend refer context entri xa thu convent read rule make sens concret notat start lemma everi axiom deriv everi valid context global bind valid context deriv better induct principl pt previou relat defin altern type relat apt identifi deriv judgement inessenti differ paramet occur deriv conclus differ right premis pi rule left premis lda rule alda premis avoid choos particular paramet requir premis hold paramet reason hold is suffici fresh paramet befor show deriv judgement interest compar side condit pi api pi need side condit p b unintend occurr p ie aris occurr variabl x bound right premis need p valid gammapa obviou right premis api cannot requir right premis p gammapa remain valid ie p occur gamma howev condit requir gener is right premis api must hold infinit mani paramet occur finit mani instanc occur b equival previou relat equival give us stronger induct principl stronger gener invers lemma apt gt gt apt proof direct straightfoward structur induct prove direct first prove lemma biject renam respect bij ren resp apt structur induct proceed prove structur induct deriv case trivial except rule pi lda consid case pi must prove assumpt l prem prem rule api use l ih suffic show gammara arbitrari paramet r gamma thu use free paramet lemma section know l prem noccg prem prem take deriv use bijrenrespapt renam r ih recal section swapp q alway biject thu finish show clear first equat hold nopg noccg nora nopa second equat notic done trivial assum r p henc r pnb from r prem noccg now use vsub rentrm commut section actual inject renam enough preserv cannot prove know requir thin lemma weaken thin lemma import formul show full weaken weaken admiss system justifi use atom weaken definit section subcontext relat defin also say delta extend gamma definit use inform bar gn vbj much complic definit requir express properti represent use de bruijn indic global variabl state thin lemma naiv attempt prove thin lemma structur induct encount seriou difficulti paramet side condit see mp polb discuss proof straightfoward use induct justifi previou section full weaken rule corollari thin lemma cut type correct substitut lemma substitut lemma prove induct deriv gammap get commonli use case cut rule instanti delta empti context among correct criteria type system everi type well form pt theorem type correct proof structur induct nontrivi case rule app use substitut lemma vsubispsubalpha section subject reduct theorem closur reductio import properti type system term lose type reduct thu type classif term preserv comput fact show entir judgement close reduct need five properti abstract convers section nonoverlap reduct goal prove usual call subject reduct theorem naiv strategi show one step reduct preserv type induct critic case rule app applic actual redex contract order simplifi case want avoid overlap redex allow fi rule want reduct relat overlap whose transit closur equal anoth difficulti rule pi lda subterm subject conclus the typelabel appear context part premis thu case induct argument reduct subject conclus may result reduct context premis suggest induct hypothesi strengthen simultan treat reduct context subject lead goal ordinari onestep fi reduct approach use gn bar produc larg number case distinct base subterm subject contain one redex contract subcas inessenti except isol one nontrivi case redex contract applic construct rule app simultan treatment one reduct either context subject suggest us proof would smoother use reduct relat congruent simultan branch forbid overlap redex one step nonoverlap reduct no red defin rule tabl except fi rule modifi prevent overlap redex norbeta uu b assum properti cnv conv section extend composit context redcxt pair context term redsubj write gamma hgamma mi also defin no redn transit closur show no par redn par redn main lemma subject reduct lem proof structur induct show interest case rule app given l prem prem red must show induct hypothes type correct gtsdm pigener lemma p b cut rule gtsdl gtsdb we also use vsubispsubalpha section here sever time case two subcas m l goal rule app induct hypothes easili use rule tcnv gt dbsub expand l predic back l requir thi use cnvconv goal lambdagener lemma w b cnvcrpi c thi time use proof gener lemma gtsdpi tcnv cnva gtsdl gtsda tcnv cnvb gtsdbsub suffic show follow cut gtsdl gtsdb closur reduct easi show subject reduct theorem gtssr use corollari predic reduct final extend composit context close betareduct gtsallr relat equival transit close composit extens context trivial use lemma predic conv unlik rule tcnv ask evid type side condit use prove lemma requir technic restrict eg ecc type hierarchi chop finit level fail properti sort top hierarchi closur alphaconvers gtsallr fact ff follow judgement preserv ff gt alpha close henc implement may typecheck judgement state user rather search alpha equival judgement deriv see polb pola anoth present pt sever rule context gamma occur list premis order build complet deriv gamma must construct by start weak branch appear much effici assum start valid context check rule extend context ie right premis pi left premis lda maintain valid keep implement actual use work current context mathemat assumpt present system tabl show equival idea origin due martinlof mar use hue system two judgement type judgment shape lvtyp valid judgement shape gamma lv lvcxt note mutual induct valid depend type convers prove lv character iff gt lvcxt lvtyp direct proof subtl formal use auxiliari mutual induct definit wellfound induct requir depend elimin place entir develop either mutual induct depend elimin use abstractli direct claim termin function replac proof annot omit lv fastgrow function termin strong result proof describ polb lvlda lvcon tabl system local valid context lvtyp lvcxt pt fi convers remark littl need theori describ far section polb pursu theori pt abstract convers correct typecheck algorithm cumul pt includ luo system ecc here point standard theori pt fi convers ie instanti preceed actual relat in lego command cut execut admiss rule substitut lemma section theori lead strengthen theorem typecheck algorithm class pt detail vbjmp strengthen strengthen tricki result pt first prove jut ting vbj gammaqc gt strengthen develop formal strengthen corollari work typecheck describ detail vbjmp particularli interest prove strengthen lego use discharg command function pt function pt well behav are perhap one interest practic function ae function pt ax rl graph partial function necessarili procedur comput function uniqu type definit function pt make sens abstractconvers pt use set give kind uniqu build deriv type judgement guid syntax subject determinist axiom use instanc ax rule use instanc pi polb idea behind definit function uniqu mention propag whole deriv give properti type uniqu convers conv uniqu type fi convers pt prove function conv uniqu type type unic structur induct howev proof use properti cannot modifi prove similar properti abstractconvers pt type unic linear partial order correct gener princip type lemma say type princip type cannot hope everi two type compar polb subject expans fi pt uniqu type also subject expans properti subject expans conv uniqu type subject reduct say term lose type reduc tion lemma say term gain type reduct princip premis wellformed premis exampl two differ way subject expans fail nonfunct pt vbjmp r formal strong normal proof system f lego lambda calculi type coq en coq type depend construct mathemat ic subject reduct properti algebra type system fsub system algorithm test convers type theori combin share reduct infinit object type theori algorithm typecheck depend type toward check proof checker girard collect paper gerhard gentzen logic type system five axiom alpha con version modular proof strong normal calculu construct construct engin residu theori increment chang lego introduct metamathemat lego proof develop sy tem user manual technic report ecslfc lfc comput scienc dept univers edinburgh king build program specif data refin type theori comput reason type theori comput scienc per martinlof invert induct defin predic lego standardis theorem pure type system for maliz churchross proof in isabellehol code bind substitut explicitli is abel proof churchross theorem represent logic framework closur alphaconvers theori lego proof checker extend calculu construct verifi typecheck believ machinecheck proof natur deduct program verif synthet domain the ori synthet domain theori type theori anoth logic comput function theori symbol express auxiliari variabl recurs procedur mechan proof churchross theorem substitut revisit parallel reduct formul martinlof theori type explicit substitut master thesi tr ctr michael norrish mechanis hankin barendregt use gordonmelham axiom proceed acm sigplan workshop mechan reason languag variabl bind p august uppsala sweden christian urban michael norrish formal treatment barendregt variabl convent rule induct proceed rd acm sigplan workshop mechan reason languag variabl bind p septemb tallinn estonia yasuhiko minamid koji okuma verifi cp transform isabellehol proceed acm sigplan workshop mechan reason languag variabl bind p august uppsala sweden michael norrish mechanis calculu use classic first order theori term permut higherord symbol comput v n p septemb s j ambler r l crole alberto momigliano definit approach primitivex recurs higher order abstract syntax proceed acm sigplan workshop mechan reason languag variabl bind p august uppsala sweden dimitri hendrik proof reflect coq journal autom reason v n p jonathan ford ian a mason formal foundat oper semant higherord symbol comput v n p septemb conor mcbride jame mckinna function pearl numberi free variabl proceed acm sigplan workshop haskel septemb snowbird utah usa jame cheney scrap namepl function pearl acm sigplan notic v n septemb thierri coquand randi pollack makoto takeyama logic framework depend type record fundamenta informatica v n p januari ren vestergaard jame brotherston formalis firstord confluenc proof calculu use onesort variabl name inform comput v n p june andrew m pitt nomin logic first order theori name bind inform comput v n p novemb conor mcbride jame mckinna view left journal function program v n p januari riccardo pucella sigact news logic column acm sigact new v n decemb