t highspe architectur reedsolomon decod a new highspe vlsi architectur decod reedsolomon code berlekampmassey algorithm present paper speed bottleneck berlekampmassey algorighm iter comput discrep follow updat errorloc polynomi bottleneck elimin via seri algorithm transform result fulli systol architectur singl array processor comput errorloc errorevalu polynomi contrast convent berlekampmassey architectur critic path pass two multipli logt adder critic path propos architectur pass one multipli one adder compar critic path architectur base extend euclidean algorithm interestingli propos architectur requir approxim fewer multipli simpler control structur architectur base popular extend euclidean algorithm blockinterleav reedsolomon code embed interleav memori decod result reduct critic path delay one xor gate one multiplex lead speed up much order magnitud convent architectur b introduct reedsolomon code employ numer commun system deep space digit subscrib loop wireless system well memori data storag system continu demand ever higher data rate make necessari devis highspe implement decod reedsolomon code recent report decod implement quot data rate rang mb gb high throughput achiev architectur innov pipelin parallel process major implement employ architectur base extend euclidean ee algorithm comput greatest common divisor two polynomi key advantag architectur base upon ee algorithm regular addit critic path delay architectur best tmult tmult add tmux delay niteeld multipli adder multiplex respect sucient small applic contrast rel decod implement employ architectur base berlekampmassey bm algorithm draft june presum architectur found irregular longer critic path delay also depend errorcorrect capabl code paper show that fact possibl reformul bm algorithm achiev extrem regular decod architectur surprisingli new architectur oper data rate compar architectur base ee algorithm also lower gate complex simpler control structur paper begin brief tutori overview encod decod reedsolomon code section ii convent architectur decod base bm algorithm describ section iii section iv show possibl algorithm transform bm algorithm homogen systol array architectur decod develop final section v describ pipelin architectur blockinterleav reedsolomon code achiev order magnitud reduct critic path delay architectur present section iii iv ii reedsolomon code provid brief overview encod decod reedsolomon code a encod reedsolomon code data symbol byte transmit commun channel or store memori byte regard element nite eld also call galoi eld gf encod codeword c n k byte codeword symbol transmit commun channel or store memori reedsolomon code gf odd code correct n k byte error encod process best describ term data polynomi transform codeword polynomi polynomi cz polynomi addit and subtract gf bitbybit xor byte nonzero element also regard power primit element where product eld element june draft multipl gz gener polynomi code dene typic howev choic sometim simplifi decod process slightli sinc consecut power root gz cz multipl gz follow codeword polynomi cz fact arbitrari polynomi degre less n codeword polynomi satis systemat encod produc codeword compris data symbol follow paritycheck symbol obtain follow let qz p z denot quotient remaind respect polynomi z n k dz degre n divid gz degre multipl gz furthermor sinc lowest degre term z n k dz z n k p z degre n k follow codeword given consist data symbol follow paritycheck symbol b decod reedsolomon code let cz denot transmit codeword polynomi let rz denot receiv word polynomi input decod rz assum where e error occur transmiss error polynomi ez written convent say error valu occur error locat note decod know ez fact draft june even know valu e decod task determin ez input rz thu correct error subtract ez rz e t calcul alway possibl is fewer error alway correct decod begin task error correct comput syndrom valu syndrom valu zero rz codeword assum is error occur otherwis decod know e use syndrom polynomi sz dene calcul error valu error locat dene error locat polynomi z degre e error evalu polynomi z degre e e e e polynomi relat sz key equat solv key equat determin z z sz hardest part decod process bm algorithm to describ section iii ee algorithm use solv e t algorithm nd z z e t algorithm almost alway fail nd z z fortun failur usual easili detect z z found decod nd error locat check whether j j n usual decod comput valu jth receiv symbol r j leav decod circuit process call chien search one error locat say x word r j error need correct leav decod decod june draft submit ieee tran vlsi system calcul error valu subtract r j via forney error valu formula z z z j denot formal deriv z note formal deriv simpli sinc consid code gf thu z term odd degre z henc valu z z found evalu z z j requir separ comput note also simpli choos c reedsolomon decod structur summari reedsolomon decod consist three block syndrom comput sc block keyequ solver ke block chien search error evalu csee block block usual oper pipelin mode three block separ simultan work three success receiv word sc block comput syndrom via usual receiv word enter decod syndrom pass ke block solv determin error locat error evalu polynomi polynomi pass csee block calcul error locat error valu via correct error receiv word read decod throughput bottleneck reedsolomon decod ke block solv contrast sc csee block rel straightforward implement henc paper focu develop highspe architectur ke block mention earlier key equat solv via ee algorithm see impl mentat via bm algorithm see implement paper develop highspe architectur reformul version bm algorithm believ reformul algorithm use achiev much higher speed achiev implement bm ee algorithm furthermor shall show section ivb new architectur also lower gate complex simpler control structur architectur base ee algorithm draft june iii exist berlekampmassey bm architectur section give brief descript dierent version berlekampmassey bm algorithm discuss gener architectur similar paper reed et al implement algorithm a berlekampmassey algorithm bm algorithm iter procedur solv form origin propos berlekamp algorithm begin polynomi iter determin polynomi r z satisfi polynomi congruenc thu obtain solut t z t z key equat two scratch polynomi br z hr z initi valu b use algorithm success valu r algorithm determin r z br z r z br z similarli algorithm determin z hr z r z hr z sinc sz degre polynomi degre larg t algorithm need store roughli eld element iter complet one clock cycl clock cycl need nd errorloc errorevalu polynomi recent year research use formul bm algorithm given blahut r z br z comput iter follow complet iter errorevalu polynomi t z comput term degre less polynomi product t zsz implement version thu need store eld element comput t z requir addit clock cycl although version bm algorithm trade space time also suer problem berlekamp version viz iter necessari divid coecient r z quantiti r divis ecient handl rst comput r invers r multipli coecient r z r unfortun regardless whether method use whether one construct separ divid circuit coecient r z divis occur insid iter loop timeconsum multipl obvious divis could replac multipl result circuit implement would smaller critic june draft submit ieee tran vlsi system path delay higher clock speed would usabl less wellknown version bm algorithm precis properti recent employ practic focu version bm algorithm paper inversionless bm ibm algorithm describ pseudocod shown below ibm algorithm actual nd scalar multipl z z instead z dene howev obviou chien search nd error locat follow error valu obtain henc continu refer polynomi comput ibm algorithm z z minor implement detail thu requir latch storag ibm algorithm must store note also b r occur step ibm ibm constant valu r ibm algorithm initi t begin step ibm step ibm step ibm r kr begin els astut reader notic forney error valu formula also involv divis fortun divis pipelin feedforward comput similarli polynomi evalu need csee block as well sc block feedforward comput pipelin unfortun divis ke block occur insid iter loop henc pipelin comput becom dicult thu note section ii throughput bottleneck ke block draft june begin t r t step ibm includ term r r r involv unknown quantiti fortun known deg r z r therefor unknown aect valu r notic also similar step ibm ibm fact use simplifi architectur describ next b architectur base ibm algorithm due similar step ibm ibm architectur base ibm algorithm need two major comput structur shown fig discrep comput dc block implement step ibm error locat updat elu block implement step ibm ibm parallel dc block contain latch store syndrom gf arithmet unit comput discrep r control unit entir architectur connect elu block contain latch store r z br z well gf arithmet unit updat polynomi shown fig clock cycl dc block comput discrep r pass valu togeth r control signal mcr elu block updat polynomi clock cycl oper complet one clock cycl assum mbit parallel arithmet unit employ architectur galoi eld arithmet unit found numer refer includ discuss here june draft block in cycl t t block syndrom block l r l t r fig ibm architectur b dc block architectur dc block architectur shown fig latch constitut ds shift regist initi latch ds contain syndrom rst clock cycl multipli comput product step ibm ad binari adder tree depth dlog e produc discrep r thu delay comput r typic control unit one illustr fig counter variabl r kr storag r follow comput r control unit comput bit r determin whether r nonzero requir twoinput gate arrang binari tree depth dlog me counter kr implement twoscompl represent kr signic bit counter delay gener signal mcr thu final mcr signal avail counter kr updat notic twoscompl arithmet addit need kr hand negat twoscompl represent complement bit add henc updat kr complement bit kr counter note possibl use ring counter r kr case kr draft june sc block syndrom control msb cntr r fig discrep comput dc block updat tmux second mcr signal comput follow clock cycl bm algorithm dc block comput errorloc polynomi z next clock cycl achiev thi ds ds latch reset zero tth clock cycl that begin t cycl content ds regist see fig also output elu block frozen chang comput z step ibm follow discrep comput next clock june draft cycl coecient z architectur fig enhanc version one describ latter use slightli dierent structur dierent initi ds regist dc block requir storag make less adapt subsequ comput errorloc polynomi note total hardwar requir dc block mbit latch tiplier adder miscellan circuitri counter arithmet adder ring counter gate invert latch control unit fig critic path delay dc block b elu block architectur follow comput discrep r mcr signal dc block polynomi coecient updat step ibm ibm perform simultan elu block processor element pe hereinaft pe processor updat one coecient z bz illustr fig a complet elu architectur shown fig b see signal r r mcr broadcast pe processor addit latch pe processor initi zero except latch initi element latch multipli adder multiplex need critic path delay elu block given b ibm architectur ignor hardwar use control section total hardwar need implement ibm algorithm multiplex total time requir solv key equat one codeword clock cycl altern t z comput iter comput requir clock cycl howev sinc comput requir updat r z neardupl elu block need increas hardwar requir t z t array pe processor draft june r r l r r l a r pel l l l t b fig elu block diagrama pe processor b elu architectur latch initi gf pe initi either case critic path delay ibm architectur obtain fig delay direct path begin dc block start ds latch multipli adder tree height dlog gener signal r feed elu block multipli adder latch assum indirect path taken r control unit gener signal mcr feed elu block multiplex faster direct path ie tmult dlog reason assumpt technolog note half ibm due delay dc block contribut increas logarithm error correct capabl thu reduc delay dc block key achiev higher speed next section describ algorithm reformul ibm algorithm lead june draft submit ieee tran vlsi system systol architectur dc block reduc critic path delay telu iv propos reedsolomon decod architectur critic path ibm architectur type describ section iii pass two multipli well adder tree structur dc block multipli unit contribut signicantli critic path delay henc reduc throughput achiev ibm architectur section propos new decod architectur smaller critic path delay architectur deriv via algorithm reformul ibm algorithm reformul ibm ribm algorithm comput next discrep r time comput current polynomi coecient updat is b r s possibl reformul discrep comput use explicitli furthermor discrep comput block structur elu block block critic path delay a reformul ibm algorithm a simultan comput discrep updat view step ibm ibm term polynomi see step ibm comput step ibm set br z either r z zbr z next note discrep r comput step ibm actual r r coecient z r polynomi product much faster implement possibl decod comput coecient r z and r even though r r need comput r decid whether br set r z z br z suppos begin clock cycl decod avail coecient r z r z and cours r z br z well thu avail begin clock cycl decod comput r draft june furthermor follow set either r z r z br z sz short r comput exactli manner r furthermor four polynomi updat comput simultan polynomi coecient well r r thu avail begin next clock cycl a new errorevalu polynomi ribm algorithm simultan updat four polynomi r z br z r z sz iter thu produc errorloc polynomi t z also polynomi t z note sinc c t z t z sz mod z follow loword coecient t z t z is iter comput errorloc polynomi t z errorevalu polynomi t z addit iter step ibm need highord coecient t z also use error evalu let t z h z degre e contain highord term sinc x root t z follow t x thu rewritten z z zx next show variat error evalu formula certain architectur advan tage note choic prefer use a reformul sinc updat four polynomi ident discrep calcul use elu block like one describ section iii unfortun discrep r r comput processor pe r thu multiplex need rout june draft appropri latch content control unit elu block comput r addit reformul ibm algorithm describ next elimin multiplex use fact aect valu later discrep rj r j consequ need store r r r thu polynomi initi valu follow polynomi coecient updat set either ir ir r note discrep r alway xed zeroth posit form updat nal comment note form updat ultim produc thu use error evalu csee block ribm algorithm describ follow pseudocod note b valu r quantiti need store updat ribm algorithm initi t begin step ribm step ribm begin draft june els begin next consid architectur implement ribm algorithm b highspe reedsolomon decod architectur ibm architectur describ section iii ribm architectur consist reformul discrep comput rdc block connect elu block b rdc architectur rdc block use processor pe shown fig a rdc architectur shown fig b notic processor pe similar processor pe fig a how ever content upper latch ow through pe content lower latch recircul contrast lower latch content ow through processor pe content upper latch recircul obvious hardwar complex critic path delay processor pe pe ident thu assum tmult dlog t get note delay independ errorcorrect capabl code hardwar requir propos architectur fig pe processor is latch multipli adder multiplex addit control unit fig june draft r r r r r r a r sw sw b fig rdc block diagrama pe processor b rdc architectur b ribm architectur overal ribm architectur shown fig use rdc block fig elu block fig note output elu block feed back rdc block block critic path delay add sinc oper parallel propos ribm architectur achiev critic path delay less half delay add enhanc ibm architectur note previou subsect end tth iter pe s contain coecient t z use error evalu thu clock cycl use determin z h z need ignor control unit hardwar requir architectur draft june r l l l l t elu block control rdcblock fig systol ribm architectur multiplex compar favor multiplex need implement enhanc ibm architectur section iii errorloc errorevalu polynomi comput clock cycl use addit multipli addit multiplex reduc critic path delay furthermor ribm architectur consist two systol array thu regular b ribm architectur show possibl elimin elu block entir implement bm algorithm enhanc rdc block array pe processor lengthen array processor shown fig complet systol architectur singl array comput z z sinc processor elimin elu block reappear addit pe processor ribm architectur hardwar complex critic path delay ribm architectur june draft howev extrem regular structur esthet pleas also oer advantag vlsi circuit layoutsh tt control l r fig homogen systol ribm architectur array pe processor ribm architectur see fig carri polynomi comput array pe processor ribm architectur see fig latter array polynomi coecient shift left clock puls thu ribm architectur suppos initi load pe pe pe fig load zero latch pe load iter proceed polynomi updat processor lefthand end array eectiv r z r z get updat shift leftward clock cycl coecient h z processor next note pe contain z b z iter proceed r z br z shift leftward processor righthand end array r b r store processor pe ri clock cycl processor pe ti contain t b t t thu array carri two separ comput comput interfer one anoth polynomi draft june store processor number r higher hand sinc deg r known upper bound deg r z known lr nondecreas function r maximum valu error occur henc r thu r z br z shift leftward overwrit coecient denot content array ribm architectur polynomi z initi valu z then ribm architectur implement follow pseudocod note t valu r quantiti need store updat ribm algorithm initi begin begin els begin june draft submit ieee tran vlsi system b comparison architectur tabl summar complex variou architectur describ far seen that comparison convent ibm architectur berlekamp version propos ribm ribm systol architectur requir multipli multiplex three architectur requir number latch adder three architectur requir cycl solv key equat terrorcorrect code ribm ribm architectur requir consider gate convent ibm architectur blahut version also requir clock cycl compar clock cycl requir latter furthermor sinc critic path delay ribm ribm architectur less half critic path delay either ibm architectur conclud new architectur signicantli reduc total time requir solv key equat and thu achiev higher throughput modest increas gate count import regular scalabl ribm ribm architectur creat potenti automat gener regular layout via core gener predict delay variou valu m comparison ribm ribm architectur ee architectur complic fact recent implement use fold architectur processor element systol array arithmet unit unit carri need comput via timedivisionmultiplex exampl hypersystol ee architectur element contain one multipli adder sinc iter euclidean algorithm requir multipl processor need sever multiplex rout variou operand arithmet unit addit latch store one addend addend comput multipli etc result architectur describ requir mani latch multiplex also mani clock cycl ribm ribm architectur furthermor critic path delay slightli larger multiplex variou path hand niteeld multipli consist larg number gate possibl mani fewer logic minim techniqu use thu complet comparison gate count two architectur requir specic detail multipli nonetheless rough draft june comparison hardwar complex path delay architectur adder multipli latch mux clock critic cycl path delay ibm ibm euclidean euclidean fold comparison ribm ribm architectur requir three time mani gate hypersystol ee architectur solv key equat onesixth time is cours possibl implement ee algorithm complex processor element describ shao et al here multipl processor comput use separ multipli architectur describ use t processor compar processor need ribm ribm architectur processor multipli multiplex adder result ribm ribm architectur compar favor ee architectur new architectur achiev actual slightli higher throughput much smaller complex one nal point made respect comparison ribm ribm architectur ee architectur control systol array former actual much simpler ee architectur processor also control section use arithmet adder compar two multiplex dlog te bit arithmet data pass processor processor array use gener multiplex control signal processor similarli ee architectur separ control circuit processor delay control circuit account critic path delay ee architectur list tabl i contrast multiplex ribm ribm architectur receiv signal comput architectur pure systol sens processor carri exactli comput cycl multiplex set way june draft processor cellspec control signal preliminari layout result preliminari layout result core gener shown fig ke block errorcorrect reedsolomon code gf process element pe shown fig a upper latch store element r lower latch store element r complet ribm architectur shown fig b pe process element array diagon error locat error evalu polynomi output latch seen array vertic critic path delay ribm architectur report synthesi tool synopsi ns tsmc m v cmo technolog a b fig ribm architectur synthes v m cmo technologya pe process element b ribm architectur next section develop pipelin architectur reduc critic path delay much order magnitud use blockinterleav code draft june v pipelin reedsolomon decod iter origin bm algorithm pipelin use lookahead transform liu et al method appli ribm ribm algorithm howev pipelin requir complex overhead control hardwar hand pipelin interleav also describ decod blockinterleav reedsolomon code simpl ecient techniqu reduc critic path delay decod order magnitud describ result ribm architectur section iv techniqu also appli ribm architectur well decod architectur describ section iii a blockinterleav reedsolomon code a block interleav errorcorrect code use channel error occur burst often interleav symbol codeword transmit consecut burst error thu caus singl error multipl codeword rather multipl error singl codeword latter occurr undesir sinc easili overwhelm errorcorrect capabl code caus decod failur decod error two type interleav block interleav convolut interleav commonli use see eg restrict attent blockinterleav code blockinterleav n k code depth result nm km interleav code whose codeword properti c n mi c n codeword n equival codeword nm km code multichannel data stream channel carri codeword n code a interleav via memori array usual descript see eg encod blockinterleav nm km code involv partit km data symbol d block k consecut symbol encod block codeword n codeword store rowwis n memori array memori read columnwis form blockinterleav codeword notic blockinterleav code june draft submit ieee tran vlsi system word systemat sens paritycheck symbol follow data symbol reedsolomon encod process describ section iia result blockinterleav codeword data symbol transmit channel order enter encod receiv interleav process revers store nm receiv symbol columnwis n memori array memori read rowwis receiv word length n decod decod n code inform symbol appear correct order deinterleav stream decod output pass destin a embed interleav altern form block interleav emb interleav encod therebi transform encod nm km code interleav reedsolomon code mathemat descript encod process gener polynomi interleav code gz gz denot gener polynomi n dene codeword form describ section iia ie dz denot data polynomi km z degre km polynomi z n km dz divid gz obtain remaind p z degre n km transmit codeword z n km dz p z essenc data stream treat multichannel data stream stream channel encod n code output encod codeword blockinterleav reedsolomon code no separ interleav need properti data symbol transmit channel order enter encod astut reader observ alreadi encod nm km code delaysc encod n code delaysc transform architectur replac everi delay latch architectur delay retim architectur account addit delay encod treat input multichannel data stream produc multichannel output data stream is blockinterleav reedsolomon fact data symbol order produc interleav data stream block k symbol depth draft june codeword note also interleav array elimin delaysc encod use time much memori convent encod blockinterleav reedsolomon codeword produc delaysc encod contain data symbol correct order thu delaysc decod use decod receiv word nm symbol output decod also data symbol correct order note separ deinterleav array need receiv howev delaysc decod use time much memori convent decod exampl delaysc pe processor ribm architectur fig result delaysc processor dpe shown fig note top bottom set latch dpe initi syndrom set m ij th syndrom j th codeword latch dpe initi latch dpe initi gf tm clock cycl processor dpe dpe contain interleav errorevalu polynomi processor dpe dpe contain interleav errorloc polynomi md md fig delaysc dpe processor initi condit latch indic oval delaysc ribm architectur obtain replac pe processor fig dpe processor delaysc control unit well remark delaysc decod also use decod blockinterleav reedsolomon codeword produc memori array interleav howev data symbol june draft submit ieee tran vlsi system output decod still interleav k memori array need deinterleav data symbol correct order array smaller n array need deinterleav codeword prior decod convent decod convent decod also use less memori delaysc decod delaysc encod decod elimin separ interleav deinterleav thu natur choic gener decod blockinterleav reedsolomon codeword howev delaysc decod critic path delay origin decod henc cannot achiev higher throughput origin decod hand extra delay use pipelin comput critic path lead signic increas achiev throughput discuss concept next b pipelin delaysc decod critic path delay ribm architectur mostli due niteeld multipli processor delaysc processor dpe shown fig multipli pipelin critic path delay reduc signicantli assum describ pipelin niteeld multipli stage b pipelin multipli architectur pipelin multipli especi feedforward structur trivial case rs decod pipelin done manner initi condit pipelin latch consist syndrom valu gener sc block design niteeld multipli depend choic basi represent here consid standard polynomi basi mbit byte repres galoi eld element pipelin multipli architectur base write product two gf x let pp denot sum rst term sum abov multipli process element shown fig a comput pp i ad either x if draft june simultan mpe multipli x sinc constant multipl requir xor gate comput delay hand delay comput pp i thu critic path delay order magnitud smaller tremend speed gain achiev pipelin multipli architectur use decod blockinterleav reedsolomon code practic consider delay due pipelin latch clock skew jitter prevent fullest realiz speed gain due pipelin nevertheless pipelin multipli structur combin systol architectur provid signic gain exist approach dd pp pp pp pp md md b fig pipelin multipli block diagrama multipli process element mpe b multipli architectur initi condit latch input indic oval pipelin multipli thu consist mpe processor connect shown fig b input pp s initi condit latch input zero therefor initi condit lower latch mpe aect circuit oper product xy appear upper latch mpem clock cycl succeed clock cycl thereaft comput new product notic also rst june draft clock cycl initi content upper latch mpe appear success output mpem properti crucial proper oper propos pipelin decod b pipelin control unit pipelin multipli architectur describ and shown fig use dpe processor fig critic path delay dpe reduc tmult add thu control unit delay comput mcr inconsequenti ribm architectur as well ibm ribm architectur delaysc version these determin largest delay pipelin ribm architectur fortun comput mcr also pipelin say stage done note delay dpe mdelay scale ribm architectur see fig retim output control unit subsequ employ pipelin it note howev latch dpe retim initi d begininng everi decod cycl henc retim latch control unit need initi valu function syndrom d problem syndrom produc sc block begin decod cycl b pipelin processor pipelin multipli unit describ use delaysc dpe processor control unit pipelin describ abov get pipelin ppe processor shown fig and pipelin ribm pribm architectur also describ fig initi valu store latch describ earlier dpe processor note latch store coecient part latch pipelin multipli howev initi valu latch lower multipli fig thu rst clock cycl ow leftmost latch without chang descript obviou pribm architectur base ppe processor fig critic path delay draft june md md mrjmdd mmd fig pipelin ppe processor initi condit latch indic oval pipelin ribm architectur obtain replac pe processor fig ppe processor employ pipelin delaysc control thu pribm architectur clock speed much order magnitud higher achiev unpipelin architectur present section iii iv c decod noninterleav code pribm architectur decod blockinterleav code signicantli faster rate ribm architectur decod noninterleav code fact dierenc larg enough design ask devis decod noninterleav code give seriou thought follow design strategi read success receiv word blockinterleav memori array read blockinterleav receiv word decod pribm architectur decod blockinterleav word read data symbol blockdeinterleav memori array read deinterleav data symbol deinterleav array obvious similar decod design strategi use situat well exampl decod convolut interleav code one rst deinterleav receiv word reinterleav blockinterleav format decod similarli block interleav code larg interleav depth pribm architectur may larg implement singl chip case one deinterleav rst reinterleav suitabl depth fact deinterleav reinterleav strategi use construct june draft univers decod around singl decod chip xed interleav depth vi conclud remark shown applic algorithm transform berlekampmassey algorithm result ribm ribm architectur whose critic path delay less half convent architectur ibm architectur ribm ribm architectur use systol array ident processor element blockinterleav code deinterleav embed decod architectur via delaysc furthermor pipelin multipl delaysc architectur result order magnitud reduct critic path delay fact high speed pribm architectur oper make feasibl use decod noninterleav code simpl stratagem intern interleav receiv word decod result interleav word use pribm architectur deinterleav output futur work direct toward integr circuit implement propos architectur incorpor broadband commun system highspe digit subscrib loop wireless system vii acknowledg author would like thank review construct critic result signic improv manuscript r algebra code theori theori practic errorcontrol code appli code inform theori engin control system digit commun storag tr system digit commun storag appli code inform theori engin ctr kazunori shimizu nozomu togawa takeshi ikenaga satoshi goto reconfigur adapt fec system interleav proceed confer asia south pacif design autom januari shanghai china tong zhang keshab k parhi highspe vlsi implement errorsanderasur correct reedsolomon decod proceed th acm great lake symposium vlsi april new york new york usa y w chang t k truong j h jeng vlsi architectur modifi euclidean algorithm reedsolomon code inform scienc intern journal v n p octob zhiyuan yan dilip v sarwat univers reedsolomon decod base berlekampmassey algorithm proceed th acm great lake symposium vlsi april boston ma usa jung h lee jaesung lee myung h sunwoo design applicationspecif instruct hardwar acceler reedsolomon codec eurasip journal appli signal process v n p januari zhiyuan yan dilip v sarwat new systol architectur invers divis gfm ieee transact comput v n p novemb