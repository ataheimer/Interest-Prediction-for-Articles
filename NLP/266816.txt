t outoford vector architectur a regist renam outoford instruct issu commonli use superscalar processor techniqu also use signific advantag vector processor paper show perform improv avail memori bandwidth use effect use trace driven simul compar convent vector implement base convex c outoford regist renam vector implement number physic regist outoford execut coupl regist renam provid speedup realist memori latenc outoford techniqu also toler main memori latenc cycl perform degrad less mechan use regist renam outoford issu use support precis interrupt gener difficult problem vector machin precis interrupt implement typic less degrad perform new techniqu base regist renam target dynam elimin spill code techniqu shown provid extra speedup rang reduc total memori traffic averag b introduct vector architectur use mani year high perform numer applic area still excel first vector machin supercomput use memorytomemori oper vector machin becam commerci success addit vector regist follow cray number vector machin design sold supercomput high vector bandwidth modest minisupercomput recent work support ministri educ spain contract cirit grant beaiii cepba work support part nsf grant mip valu vector architectur desktop applic recogn particular mani dsp multimedia applic graphic compress encrypt well suit vector implement also research focus new processormemori organ iram would also benefit vector technolog studi recent year howev shown perform achiev vector architectur real program fall short achiev consid avail hardwar resourc function unit hazard conflict vector regist file make vector processor stall long period time result latenc problem similar scalar processor time vector processor stall memori port becom idl memori bandwidth goe unus furthermor latenc toler properti vector lost first load instruct idl memori port expos full memori latenc result suggest need improv memori perform vector architectur unfortun typic hardwar techniqu use scalar processor improv memori usag reduc memori latenc alway use vector architectur exampl data cach studi howev result mix perform gain loss depend work set size fraction nonunit stride memori access data cach put widespread use vector processor except cach scalar data dynam instruct issu prefer solut scalar processor attack memori latenc problem allow memori refer instruct proceed instruct wait memori data is memori refer instruct allow slip ahead execut instruct vector processor gener use dynam instruct issu except one recent design nec sx reason unclear perhap thought inher latenc hide advantag vector suffici or possibl first success vector machin cray issu instruct order addit innov vector instruct issu simpli pursu besid inord vector instruct issu tradit vector machin rel small number vector regist typic limit number vector regist initi result hardwar cost vector regist instruct set origin develop today small number regist gener recogn shortcom regist renam use outoford issu come rescu well regist renam physic regist made avail vector regist conflict reduc anoth featur tradit vector machin support virtual memori least fulli flexibl manner modern scalar processor primari reason difficulti implement precis interrupt page fault difficulti aris high level concurr vector machin again featur implementingdynam instruct issu scalar easili adapt vector regist renam reorder buffer allow rel easi recoveri state inform fault condit occur paper show use outoford issu regist renam techniqu vector pro cessor perform greatli improv dynam instruct schedul allow memori latenc overlap complet use valuabl memori resourc effici process moreov renam introduc architectur enabl straightforward implement precis except turn provid easi way introduc virtual memori without much extra hardwar without incur great perform penalti also present new techniqu aim dynam elimin redund load use techniqu memori traffic significantli reduc perform increas vector architectur implement studi base tradit vector processor numer applic primarili matur compil avail benchmark simul tool feel gener conclus extend vector applic howev renam outoford vector architectur propos model convex c section describ base c architectur implement henceforth refer archi tectur dynam outoford vector architectur refer ooova c refer architectur convex c consist scalar unit independ vector unit scalar unit execut instruct involv scalar regist ister issu maximum one instruct per cycl vector unit consist two comput unit fu fu one memori access unit fetch decoderenam unit reorder buffer releas reg sreg areg vreg maskreg figur outoford renam version refer vector architectur mem fu unit gener purpos arithmet unit capabl execut vector instruct fu unit restrict function unit execut vector instruct except multipl divis squar root function unit fulli pipelin vector unit vector regist hold element bit each eight vector regist connect function unit restrict crossbar pair vector regist group regist bank share two read port one write port link function unit compil respons schedul vector instruct alloc vector regist port conflict aris refer machin implement vector chain function unit function unit store unit chain memori load function unit howev dynam outoford vector architectur ooova outoford renam version refer architectur ooova shown figur deriv refer architectur appli renam techniqu similar found r instruct flow inord fetch decoderenam stage go one four queue present architectur base instruct type renam stage map tabl translat virtual regist physic regist independ map tabl one type regist a s v mask regist map tabl associ list free regist instruct accept decod stage slot reorder buffer also alloc instruct enter exit reorder buffer strict program order instruct defin new logic regist physic regist taken issu rf alu wb areg issu rf sreg issu rf vreg renam fetch issu rf mem rang calcul depend calcul figur outoford renam main instruct pipelin list map tabl entri logic regist updat new physic regist number old map store reorder buffer slot alloc instruct instruct commit old physic regist return free list note reorder buffer hold bit identifi instruct regist name never hold regist valu main pipelin four main pipelin ooova architectur see fig one type instruct decod renam instruct wait four queue shown fig a v queue monitor readi statu instruct held queue slot soon instruct readi sent appropri function unit execut process instruct queue proce two phase first instruct proceed inord stage pipelin compris issuerf stage rang stage depend stage complet three step memori instruct proceed order base depend inform comput operand avail for store rang stage rang address potenti modifi memori instruct com pute rang use follow stage runtim memori disambigu rang defin byte fall base address call rang start address defin call rang end v l vector length regist v vector stride regist note multipli simplifi v l gamma short never bit product v kept nonarchitect regist implicitli updat either vl vs modifi depend stage use rang startrang end address memori instruct compar previou instruct found queue memori instruct free depend proceed issu memori request machin paramet tabl present latenc variou function unit present architectur memori latenc shown tabl vari memori system model follow singl address bu share type memori tran paramet latenc scal vect intfp intfp read xbar vector startup add mul logicshift div sqrt tabl function unit latenc in cycl two architectur ooova ref action scalarvector loadstor physic separ data buss send receiv data tofrom main memori vector load instruct and gather instruct pay initi latenc receiv one datum memori per cycl vector store instruct result observ latenc use valu cycl default memori latenc section present result effect vari valu v regist readwrit port modifi origin c scheme ooova vector regist dedic read port dedic port origin bank scheme regist file kept renam shuffl compil schedul readwrit port and therefor would induc lot port conflict instruct queue set slot reorder buffer hold instruct machin entri btb entri bit satur counter predict outcom branch also deep return stack use predict callreturn sequenc scalar regist file s physic regist each mask regist file physic regist fetch stage decod stage four queue process maximum instruct per cycl commit instruct proce faster rate instruct may commit per cycl commit strategi v regist start aggress implement physic regist releas time vector instruct begin execut consid vector instruct add vvv renam stage v remap to say physic regist ph old map v wa say physic regist ph store reorder buffer slot associ add instruct add instruct begin execut mark associ reorder buffer slot readi com mit slot reach head buffer ph releas due semant vector regist ph releas guarante instruct need ph begun execut least one cycl befor thu first element ph alreadi flow regist file read cross bar even ph immedi reassign new logic regist instruct start writ insn op avg program suit v v vect vl hydrod spec arcd perf flo perf sucor spec bdna perf trfd perf dyfesm perf tabl basic oper count perfect club specfp program column million ing ph instruct read ph least one cycl ahead alway read correct valu type releas allow precis except though section chang releas algorithm allow precis except assess perform benefit outoford issu renam vector architectur taken trace driven approach subset perfect club specfp program use benchmark set program compil convex c machin tool dixi use modifi execut trace execut process dixi modifi execut run convex machin run produc desir set trace accur repres execut program trace fed two simul refer ooova architectur benchmark program interest benefit outof order issu vector instruct select benchmark program highli vectoriz program perfect specfp benchmark chose program achiev least vec toriz tabl present statist select perfect club specfp program column number indic suit program belong next two column present total number instruct issu decod unit broken scalar vector instruct column five present number oper perform vector instruct sixth column percentag vector program ie column five divid sum column three five final column seven present averag vector length use vector instruct the ratio column five four respect hydrod execut cycl dyfesm figur function unit usag refer ar chitectur bar repres total execut time program given latenc valu xaxi repres memori latenc cycl perform result bottleneck refer archi tectur first present analysi execut ten benchmark program run refer architectur simul consid three vector function unit refer architectur fu fu mem machin state repres tupl captur individu state three unit given point time exampl tupl repres state unit work repres state vector unit idl figur present execut time two ten benchmark program see pro gram space limit prevent us provid all two hydrod dyfesm rep resent execut program eight possibl state plot time spent state memori latenc cycl figur see number cycl program proceed peak float point speed state hfu fumem low number cycl state chang rel littl memori latenc increas fraction fulli use cycl decreas memori latenc high impact total execut time program dyfesm shown figur trfd flo not shown rel small vector length effect memori latenc seen note increas cycl spent state h i sum cycl correspond state mem unit idl quit high program four state correspond cycl mem swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm idl memori port figur percentag cycl memori port idl differ memori latenc ori port could potenti use fetch data memori futur vector comput figur present percentag cycl total execut time latenc port idl time rang total execut time benchmark program memori bound run singl port vector machin two function unit therefor unus memori cycl result lack loadstor work done perform ooova section present perform ooova compar refer archi tectur consid overal perform speedup memori port occup effect ad outoford execut renam refer architectur seen figur program plot speedup refer architectur number physic vector regist vari memori latenc set cycl graph show speedup two ooova implement ooova length instruct queue ooova length queue also show maximum ideal speedup theoret achiev ideal along top graph comput ideal speedup program use total number cycl consum heavili use vector unit fu fu mem thu ideal essenti elimin data memori depend program consid perform limit satur resourc across entir execut seen figur ooova significantli increas perform refer ma chine physic regist lowest speedup for tomcatv highest speedup trfd dyfesm resp remain program give speedup number physic regist greater addit speedup gener small largest speedup go physic regist bdna addit improv improv bdna due extrem larg main loop gener sequenc basic block vector instruct physic regist allow better match larg avail ilp basic block hand number physic vector regist major concern observ physic regist still give speedup trfd dyfesm program rang result suggest physic vector regist regist suffici case file regist enough sustain high perform everi case increas depth instruct queue perform improv quit small curv ooova analysi program show two factor combin prevent improv increas number issu queue slot first spill code present larg basic block induc lot memori conflict memori queue second lack scalar regist sometim prevent dynam unrol enough iter vector loop make full usag memori port memori outoford issu featur allow memori access instruct slip ahead comput instruct result compact memori access opera tion presenc fewer wast memori cycl shown figur figur contain number cycl address port idl divid total number execut cycl bar refer machin ref outoford machin ooova shown ooova machin physic vector regist memori latenc cycl ooova fraction idl memori cycl cut half case two benchmark memori port idl less time resourc usag consid resourc usag ooova machin compar refer machin illustr figur notat figur use repres execut state previou subsect ooova machin physic vector regist memori latenc set cycl figur show major improv state h i almost disappear also fullyutil state hfu fumem i rel frequent due benefit outof order execut alreadi seen avail one memori instruct readi launch memori queue allow much higher usag memori port toler memori latenc one way look advantag outoford execut regist renam allow long arcd flo nasa trfdspeedup ideal ooova figur speedup ooova ref architectur differ number vector physic regist swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm idl memori ref ooova figur percentag idl cycl memori port refer architectur ooova archi tectur memori latenc cycl vector regist file hold physic vector regist memori latenc hidden previou subsect show benefit ooova fix memori latenc cycl subsect consid abil ooova machin toler main memori latenc figur show total execut time ten program execut refer machin ooova machin memori latenc cycl result physic vector regist shown figur refer machin sensit memori latenc even though vector machin memori latenc influenc execut time consider hand ooova machin much toler in hydrod dyfesm execut cycl figur breakdown execut cycl ref left bar ooova right bar machin ooova machin physic vector regist architectur memori latenc set cycl creas memori latenc benchmark perform flat entir rang memori la tenci cycl anoth import point even memori latenc cycl ooova machin typic obtain speedup refer machin rang and goe high case dyfesm speedup indic effect look ahead instruct stream good even absenc long latenc memori oper end scale see long memori latenc easili toler use out oford techniqu indic individ cycl x cycl x trfdcycl x dyfesmref ideal figur effect vari main memori latenc three memori model physic vector regist machin ual memori modul memori system slow chang expens sram part much cheaper dram part without significantli degrad total throughput type technolog chang could major impact total cost machin typic domin cost memori subsystem implement precis trap import side effect introduc regist renam vector architectur enabl straightforward implement precis except turn avail precis except allow introduct virtual memori virtual memori implement vector machin use mani current high perform parallel vector processor or use restrict form exampl lock page contain vector data memori vector program execut primari problem implement precis page fault high perform vector machin high number overlap inflight oper machin may sever hundr vector regist renam provid conveni mean save larg amount machin state requir rollback precis state follow page fault except content old logic vector regist kept instruct overwrit logic regist known free except architect state restor need order implement precis trap introduc two chang ooova design first instruct allow commit fulli complet as oppos earli commit scheme use second store allow execut updat memorywhen head reorder buffer is oldest uncommit instruct figur present comparison speedup refer architectur achiev ooova earli commit label earli ooova late commit execut store head reorder buffer label late again simul perform memori latenc cycl make two import observ graph figur first perform degrad due introduct late commit model small eight ten program program hydrod arcd sucor tomcatv bdna degrad less physic regist program flo nasa degrad respect nevertheless perform two program trfd dyfesm hurt rather sever go late commit model a degrad respect behavior explain loadstor depend main loop trfd memori depend last vector store iter first vector load iter address earli commit model store done soon input data readi with chain produc store late commit model store must wait interven instruct produc store commit delay dispatch follow load first iter explain high slowdown similar situat explain degrad dyfesm second late commit model regist arcd flo nasa trfdspeedup ideal late figur speedup ooova refer architectur differ number vector physic regist earli late commit scheme clearli enough perform differ regist much larger earli commit model thu costcomplex point view introduct late commit clear impact implement vector regist dynam load elimin regist renam mani physic regist solv instruct issu bottleneck caus limit number logic regist howev anoth problem caus limit logic regist regist spill origin compil code still contain regist spill caus limit number architect regist function correct spill must execut furthermor besid obviou storeload spill limit regist also caus repeat load memori locat limit regist common vector architec ture spill problem aggrav store reload singl vector regist involv movement mani word data memori illustr import spill code vector ar chitectur tabl show number memori spill oper number word move ten benchmark program benchmark rel load store due spill sever larg amount spill traffic ex ampl memori traffic bdna due spill section propos studi method use regist renam elimin much memori load traffic due spill method propos also signific perform advantag vector load op vector store op total program load spill store spill hydrod arcd nasa sucor bdna tabl vector memori spill oper column million oper load spill data execut nearli zero time elimin spill store howev need maintain strict binari compat is memori imag reflect function correct state relax compat could lead remov spill store yet pursu approach renam dynam load elim inat elimin redund load instruct propos follow techniqu tag associ physic regist a v tag indic memori locat current held regist vector regist tag tupl defin consecut region byte memori vl vs sz vector length vector stride access granular use tag creat v valid bit scalar regist tag tupl vl vs need although problem spill scalar regist somewhat tangenti studi import convex architectur limit number regist time memori oper perform rang address comput thi done second stage memori pipelin oper load tag associ destin physic regist fill appropri address informa tion oper store physic regist store memori tag updat correspond address inform thu time memori oper perform alia regist content memori address use load store physic regist tag indic area memori match regist data keep tag content consist memori store instruct execut tag compar tag alreadi present regist file conflict found is memori rang defin store tag overlap exist tag exist tag must invalid to simplifi conflict check hardwar invalid may done conserv use regist tag vector load oper elimin follow manner vector load enter third stage memori pipelin tag check tag found vector regist file exact match found an exact match requir tag field ident destin regist vector load renam physic regist match point load effect complet time take renam furthermor match restrict live regist also occur physic regist free list long valid bit set regist in free list use elig match load match regist free list regist taken list ad regist map tabl scalar regist elimin load simpler match involv two scalar regist de tect regist valu copi one regist other scalar renam tabl affect note howev scalar store address still need compar vector regist tag vector store need compar scalar tag ensur full consist similar memori tag techniqu scalar regist describ there tag use store memori variabl regist face potenti alias problem approach though complic data automat copi regist regist tag match found there fore compil techniqu requir adapt impli data movement applic tag oper either a alter renam tabl b invalid tag without chang regist valu issu rf alu wb areg issu rf sreg renam fetch issu rf calcul rang depend calcul vreg vrenam rxbar rxbar ex figur modifi instruct pipelin dynam load elimin ooova pipelin modif scheme describ vector load elimin disambigu stage memori pipelin vector regist renam tabl up date renam consider complic vector regist renam two differ pipelin stage at decod disambigu stage therefor pipelin structur modifi renam vector regist one one stage figur show modifi pipelin decod stage scalar regist renam vector regist left untouch then instruct use vector regist pass inord stage memori pipelin arriv disambigu stage renam vector regist done ensur vector instruct see renam tabl modif introduc load elimin scheme avail follow vector instruct moreov ensur store tag compar previou tag order perform dynam load elimina tion section present perform ooova machin enhanc dynam load elimi nation baselin use late commit ooova describ abov without dynam load elimin also studi ooova load elimin scalar data sle ooova load elimin scalar vector slevl figur present speedup sle slevl baselin ooova differ number physic vector regist slevl vector regist figur speedup base ooova program high dyfesm trfd regist regist avail storag space keep vector data doubl allow tag match speedup increas significantli rang program dyfesm trfd speedup remain high appreci improv go regist doubl number vector regist again yield much addit speedup swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesm figur speedup sle ooova machin differ physic vector regist file size swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesmspeedup figur speedup slevl ooova machin differ physic vector regist file size program improv tomcatv trfd seem abl take advantag extra regist tomcatv goe result show data movement elimin captur vector regist remark differ perform behavior dyfesm trfd requir explan done look sle figur sle program low speedup less and yet trfd dyfesm achiev speedup respect for configur vector regist analysi two program show abil bypass scalar data allow program see iter certain loop onc particular abil bypass data load store allow unrol two critic loop wherea without sle unrol possibl traffic reduct import effect dynam load elimin reduc total amount traffic seen memori system import featur swm hydrod arcd flo nasa sucor tomcatv bdna trfd dyfesmtraff reduct sle figur traffic reduct dynam load elimin physic vector regist multiprocess environ less load memori modul usual translat overal system perform improv comput traffic reduct program two dynam load elimin configur consid defin traffic reduct ratio total number request load store sent address bu baselin ooova divid total number request done either sle slevl configur figur present ratio physic vector regist exampl figur show us sle configur dyfesm perform fewer memori request ooova configur seen slevl typic traffic reduct program dyfesm trfd due special behavior alreadi men tion much larger reduct much summari paper consid use outoford execut regist renam vector architectur seen simul tradit inord vector execut model enough fulli use bandwidth singl memori port cover main memori latenc even consid program memori bound shown outoford issu regist renam introduc vector perform increas perform advantag realiz even ad extra physic regist use renam outof order execut use vector processor wide recogn current superscalar microprocessor use physic vector regist aggress commit model shown signific speedup refer machin modest cost vector regist rang speedup increas number vector regist lead signific extra improv ment howev moreov shown larg memori latenc cycl easili toler dynam reorder vector instruct disambigu mechan introduc allow memori unit send continu flow request memori system flow overlap arriv data cover main memori latenc introduct regist renam give power tool implement precis except chang aggress commit model conserv model instruct commit and predecessor known free except recov architectur state point time allow easi introduct virtual memori simul shown implement precis except cost around applic perform though program may much sensit other one problem solv regist renam regist spill addit extra physic regist per se reduc amount spill data introduc new techniqu dynam load elimin use renam mechan reduc amount load spill traffic tag regist memori inform detect certain load redund requir data alreadi physic regist condit load perform simpl renam tabl chang simul shown techniqu improv perform typic factor and high dynam load elimin techniqu benefit physic regist sinc cach data insid vector regist file simul physic vector regist show load elimin yield improv typic rang moreov regist load elimin reduc total traffic memori system factor rang and case final feel result use grow commun processor architectur implement kind multimedia extens graphic coprocessor dsp function incorpor gener purpos microprocessor advantag vector instruct set becom evid order sustain high throughput special purpos devic frame buffer long memori latenc toler type applic gener requir high bandwidth chip memori system avail current microprocessor bandwidth latenc problem outoford vector implement help achiev improv perform r vector microprocessor new kind memori referenc array pointer dixi trace gener system c decoupl vector architectur quantit analysi vector code perform impact vector processor cach parallel process featur nec sx supercomput system cach perform vector supercomput er case intellig dram iram relationship averag real memori behavior cray comput system explain gap theoret peak perform real perform supercomput architectur hnsx supercomput inc architectur vpp parallel supercomput mip r superscalar microprocessor tr creg new kind memori referenc array pointer distribut storag control unit hitachi s multivector supercomput cach perform vector supercomput architectur vpp parallel supercomput relationship averag real memori behavior explain gap theoret peak perform real perform supercomput architectur cray comput system mip r superscalar microprocessor decoupl vector architectur quantit analysi vector code ctr roger espasa mateo valero exploit instruct datalevel parallel ieee micro v n p septemb lui villa roger espasa mateo valero perform studi outoford vector architectur short regist proceed th intern confer supercomput p juli melbourn australia mark hampton krste asanovi implement virtual memori vector processor softwar restart marker proceed th annual intern confer supercomput june juli cairn queensland australia christo kozyraki david patterson overcom limit convent vector processor acm sigarch comput architectur new v n may francisca quintana jesu corbal roger espasa mateo valero ad vector unit superscalar processor proceed th intern confer supercomput p june rhode greec francisca quintana jesu corbal roger espasa mateo valero cost effect architectur vectoriz numer multimedia applic proceed thirteenth annual acm symposium parallel algorithm architectur p juli crete island greec karthikeyan sankaralingam stephen w keckler william r mark doug burger univers mechan dataparallel architectur proceed th annual ieeeacm intern symposium microarchitectur p decemb christoph batten ronni krashinski steve gerd krste asanov cach refillaccess decoupl vector machin proceed th annual ieeeacm intern symposium microarchitectur p decemb portland oregon banit agraw timothi sherwood virtual pipelin network memori proceed th annual ieeeacm intern symposium microarchitectur p decemb roger espasa mateo valero simul studi decoupl vector architectur journal supercomput v n p sept christoforo kozyraki david patterson vector vs superscalar vliw architectur embed multimedia benchmark proceed th annual acmiee intern symposium microarchitectur novemb istanbul turkey roger espasa mateo valero jame e smith vector architectur past present futur proceed th intern confer supercomput p juli melbourn australia jesu corbal roger espasa mateo valero mom matrix simd instruct set architectur multimedia applic proceed acmiee confer supercomput cdrom pe novemb portland oregon unit state