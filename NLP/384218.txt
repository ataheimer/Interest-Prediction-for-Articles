t compil design industri network processor a one import problem code gener embed processor design effici compil asip applic specif architectur paper outlin design c compil industri asip telecom applic target asip network processor special instruct bitlevel access data regist requir packetori commun protocol process practic viewpoint describ main challeng exploit applic specif featur c compil show compil backend design accomod featur mean compil intrins dedic regist alloc compil fulli oper first experiment result indic clevel program asip lead good code qualiti without need timeconsum assembl program b introduct use applic specic instruct set processor asip embed system design becom quit com mon asip locat standard otheshelf programm processor custom asic henc asip repres frequent need compromis high ecienc asic low develop eort associ standard processor core tailor toward certain applic area asip still oer programm henc high exibl debug upgrad industri exampl asip tensilica congur xtensa risc processor congur gepard dsp core austria micro system like case standard processor compil support asip desir compil urgent requir avoid timeconsum errorpron assembl program embed softwar fast timetomarket depend requir embed system met howev due special architectur asip classic compil technolog often insuci fulli exploit processor capabl demand dedic code gener optim techniqu number code gener techniqu intend meet high code qualiti demand embed system alreadi develop includ code gener irregular data path address code optim dsp exploit multimedia instruct set shown experiment highli machinespec techniqu promis approach gener highqual machin code whose qualiti often come close handwritten assembl code natur paid increas compil time mani case partial impress result achiev code optim asip dsp area less emphasi far new import class asip bitseri protocol process call network processor np design np motiv grow need new high bandwidth commun equip network eg internet router ethernet adapt well telecommun eg isdn xdsl correspond commun protocol mostli employ bitstreamori data format bitstream consist packet dierent length ie variabl length header packet typic longer payload pack et typic packet process requir includ decod ing compress encrypt rout major system design problem area requir high bandwidth leav short time frame as low nanosecond process bit packet arriv network node even contemporari highend programm processor hardli keep pace requir realtim perform mention issu comput ecienc eg respect power consumpt sever approach asic design deal ecient bitlevel process shown narrow bitwidth oper detect hardwar runtim processor use knowledg bitwidth oper either reduc power consumpt increas perform furthermor possibl identifi signific number unus bit compil time accord comput signic bit specint benchmark discard therefor ecient use hardwar oper reduc bitwidth applic specic processor might achiev reason save hardwar resourc approach use inform bitwidth operand reduc size datapath function unit recongur processor solut requir highli applic specic hard ware hand design hardwir asic frequent desir due high design eort low exibl special class asip np repres promis solut problem sinc instruct set tailor toward ecient commun protocol process advantag exempli follow sinc memori transmitt receiv normal show xed wordlength eg bit rel expens process may requir side use standard processor g begin commun packet transmit typic align word boundari transmitt store word send buer pack bitstream format requir network protocol transmiss commun channel packet extract receiv side align receiv wordlength may even dierent transmitt wordlength obvious data convers overhead reduc benet bitstreamori protocol contrast np may design capabl directli process bit packet variabl length ie form store receiv buer featur larg reduc data transport overhead np rel new semiconductor market standard chip eg intel ibm sever inhous design see overview also describ np develop eort stmicroelectron paper focu specic machin inneon technolog network processor ansi c compil develop within industri project design c compil inneon np import goal order avoid timeconsum assembl program ensur rel compilerfriendli architectur mean processorcompil codesign also observ approach turn essenti order avoid expens compilerarchitectur mi network stream memori receiv buffer transmitt memori send buffer receiv figur commun via bitstreamori protocol match right begin howev ecient compil design np least challeng dsp sinc dedic bitpacket orient instruct easili gener highlevel languag like c contrast approach taken base retarget flexwar tool suit decid develop nearli full custom compil backend essenti motiv need incorpor c languag extens dedic regist alloc becom clear later anoth approach relat work valenc compil retarget compil allow specic arbitrari bitwidth c vari abl howev direct support np applic purpos paper show complet c compil advanc np architectur impl ment describ requir new code gener techniqu believ similar techniqu also use np architectur grow compil demand may expect futur remaind paper structur follow section inneon np architectur instruct set describ detail section outlin problem associ model bitlevel process c lan guag next two section describ actual compil design coars subdivid frontend section backend section compon experiment result present section final give conclus mention direct futur work target architectur fig show overal architectur target machin inneon np np core show bit risclik basic architectur special extens bitlevel data access principl illustr g np instruct set permit perform alu comput bit packet align proce code np core buffer io figur inneon np architectur alu packet machin wordlength packet packet figur process variabl length bit packet wordlength packet may store bit index subrang regist packet may even span two dierent regist way protocol process align requir variabl packet length instead xed machin wordlength howev packetlevel address possibl within regist within mem ori therefor partial bitstream load memori regist process alu take place g regist file memori alu figur data layout memori regist bit packet align memori regist wordlength order enabl packetlevel address unalign data np instruct set permit specic oset operand length within regist shown gs bit packet address mean correspond regist number oset within regist packet bit width oset plu width larger regist wordlength bit packet span two regist without increas access latenc though especi featur challeng also standard processor intel processor famili support bitori data access howev without correspond arithmet capabl compil design viewpoint width argument result packet must ident one two argument regist also result locat alu oper ation therefor two oset one width paramet per instruct sucient regist number offset within regist cmd regoff regoff width command assembl width operand figur np assembl instruct format regist n regist n offset within registern n machin word size packet width figur packetlevel address within regist bit packet process c although possibl descript bit packetlevel address c languag inconveni sinc express mean rather complex shift mask scheme exampl given g show fragment gsm speech compress algorithm impl mentat commun oper system research group tu berlin here pointer c use travers array unalign bit packet shown g gsm_byte c word xmc figur bit packet process exampl gsm speech compress obvious conveni program style situat becom even wors case multiregist packet code readabl and thu maintain poor furthermor mask constant gener make code highli machinedepend use compilerknown function outlin section np instruct set allow avoid costli shift mask oper mean special instruct packetlevel address c compil bit packet manipul made visibl programm mean compilerknown function ckf compil intrins compil map call ckf regular function call xed instruct instruct sequenc thu ckf consid clevel macro without call overhead ckf approach also use sever c compil dsp eg texa instrument cxx use ckf programm still detail knowledg underli target processor readabl code improv signicantli addit provid suitabl set simul function ckf c code written np longer machinedepend also compil host machin debug purpos illustr use ckf simpl exampl consid case would like add constant bit wide packet store bit regist denot c variabl a standard c express mean complex assign follow standard processor would translat rel larg instruct sequenc contrast np implement entir assign within singl instruct purpos introduc packet access pa ckf shown g ckf directli ect packetlevel instruct illustr gs oper paramet select oper eg add sub shift perform argument v arnam arnam addit requir intraregist oset packet bitwidth pass function pa ckf name oper name offset paint oper int varnam int off int varnam int off int packet width name result first operand name second operand offset packet second packet within first operand figur format compilerknown function pa use function pa exampl express simpli c follow int a b papa_add a b w here pa add select add instruct w specifi bitwidth dene constant c header le scalar variabl b map regist assembl code regist alloc bit packet access loop exempli abov ckf provid eleg way reduc descript eort bit packet process c urgent ckf requir case bit packet ar ray indirectli access within loop avoid unaccept qualiti compilergener code figur array bit packet consid exampl g process array packet bit length bit packet array turn store array bit regist r r consequ bit packet align regist wordlength packet even cross regist boundari suppos want comput sum bit packet within loop standard c would requir code shown g due unalign bit packet regist le pointer elem must increment everi loop iter bit packet cross regist boundari therefor control code requir within loop obvious highli undesir respect code qualiti int a int sum aelem offset xff els sum aelemoffset aelemoffset xff offset offset elem offset figur bit packet array access loop order avoid overhead np instruct set architectur provid mean indirect access unalign bit packet array via bit packet pointer regist compil exploit featur ckf mod i c code ckf sum comput exampl given g array declar attribut regist attribut instruct compil backend assign whole array regist le contrast regular c compil would store array like complex data structur memori concept regist array requir sinc np machin oper use packetlevel address work regist memori variabl pr pr pointer operand ckf init introduc backend pointer bit packet backend use knowledg pointer belong elementarray life time analysi regist alloc exampl pr use travers dierent bit packet array a constantli point sum variabl number physic regist lower number simultan requir regist variabl spill code insert regist alloc use name pointer regist case identifi regist array load regist le given indirect bit packet oper init ckf translat assembl code load constant regist constant name regist oset width bit packet pointer point en code exampl g pointer pr point rst element bit packet array name regist bit packet locat known regist alloc therefor backend work symbol address regist alloc symbol automat replac regist alloc phase paiadd ckf singl indirect addit like c express p q backend creat singl machin oper ckf order keep number ckf low specifi arithmet oper rst paramet ckf instead dedic ckf oper ckf inc denot increment bit packet pointer like increment pointer ansi c pointer point next array element call inc np support bit packet pointer arithmet hard ware requir singl machin instruct independ whether advanc pointer requir cross regist boundari obvious sourc code exampl speci low level program style howev programm still get signic benet use compil first all permit use high level languag construct eg control code loop addit address gener regist alloc perform compil keep code reusabl save lot develop time frontend design like compil np c compil subdivid frontend backend part frontend respons sourc code analysi gener intermedi represent ir machineindepend optimiza regist int a int pr pr int initpr sum paiadd pr pr figur bit packet array access ckf tion backend map machineindepend ir machinespec assembl code see section frontend use lanc compil system develop univers dortmund give brief descript sake complet lanc machineindepend optim c frontend system includ backend interfac retarget dierent pro cessor is howev support automat re target current version lanc v compris follow main compon ansi c frontend c frontend analyz c sourc code gener lowlevel three address code ir case syntax semant error c code error messag similar gnu gcc emit ted ir almost machineindepend bit width c data type memori align speci form congur le librari lanc compris c class librari ir access analysi manipul includ le io control data ow analysi symbol tabl main tenanc modic ir statement addi tion auxiliari class frequent requir compil tool list set stack graph optim tool base ir librari lanc contain set common dragon book machineindepend code optim constant fold ing dead code elimin well jump loop optim depend requir optim level optim tool call separ iter via shell script sinc optim tool oper ir format new optim plug time backend interfac backend interfac transform three address code ir data ow tree dft maximum size dft repres piec comput c code compris argument oper ation storag locat well data depend those gener dft format compat code gener gener tool like iburg oliv featur strongli facilit retarget new processor mainli distinguish lanc c frontend provid gcc lcc execut ir basic ir structur three address code consist assign jump branch label return statement togeth correspond symbol tabl inform identi three address code mainli serv facilit implement ir optim tool sinc ir structur much simpler origin c sourc languag execut achiev dene ir low level assemblylik subset c languag gener c frontend highlevel construct eg loop switch ifthenels statement replac equival branch statement construct addit implicit load store address arithmet array structur access well type cast made explicit ir suif compil system similar c export facil ir gener pure three address code int main static int a b c d regist int regist int regist int figur exampl c sourc code exampl c sourc code taken dspstone fraction correspond ir given gs ir contain auxiliari variabl label insert frontend local identi assign uniqu numer sux seen ir still valid lowlevel c code compil link execut compil host machin signic advantag execut cbase in particular context industri compil project correct import optim valid methodolog sketch g appli check correct frontend part com piler key idea origin c program ir compil nativ c compil host machin equival two execut check mean comparison output test input data dierenc output indic implement error regress test valid process easili autom although approach natur cannot provid correct proof ensur good fault coverag practic use repres suit c program test input case use larg heterogen set c applic includ complex program packag like mp jpeg gsm bdd packag gnu ex bison gzip static int _static_a_ _static_b_ static int _static_c_ _static_d_ int main char tt int tt regist int regist int l return figur partial ir code c code g vhdl parser c compil valid c frontend ir optim well backend interfac lanc latter achiev export gener dft c syntax again help practic point view sinc nonexecut ir format cannot valid without processorspec backend instructionset simula tor frequent slow crosssimul run nat ural valid machinespec backend still requir instructionset simul howev frontend part typic contribut largest part total compil sourc code compil bug may expect xed alreadi phase backend design c compil backend subdivid code select regist alloc modul instruct schedul origin c sourc ir gener ir c sourc execut execut test input data output output comparison figur frontend valid methodolog implement far code selector map data ow tree gener lanc frontend assembl instruct mani compil risc phase innit number virtual regist assum later fold avail amount physic regist regist alloc code select code selector use widespread techniqu tree pattern match dynam program map data ow tree dft assembl code basic idea approach repres target machin instruct set form costattribut tree grammar pars given dft respect grammar result optimum deriv given cost metric henc optim code select obtain runtim complex linear dft size tree pars process visual cover dft minimum set instruct pattern instanc g c b e c b e add mac b c a mac add figur visual dftbase code select a data ow tree b instruct pattern c optim tree cover implement use oliv tool an extens iburg contain spam compil gener code selector c sourc code given instruct set tree grammar respect specifi instruct set oliv conveni sinc tool permit attach action function instruct pattern facilit bookkeep assembl code emiss lanc frontend split c function set basic block contain order list dft dft directli gener format requir oliv pass gener code selector translat assembl code sequenc one anoth phase also call compilerknown function ckf detect directli transform correspond np assembl instruct step rather straightforward sinc ckf simpli identi name howev code selector cooper regist alloc still respons correct regist map sinc ckf call symbol c variabl instead regist name result code select phase symbol assembl code refer virtual regist code pass regist alloc describ follow regist alloc although np show risclik basic architectur classic graph color approach global regist alloc cannot directli use reason need handl regist array explain section see also gs regist array aris indirect address c program unalign bit packet travers within loop consequ virtual regist contain fragment of bit packet array assign contigu window physic regist le order achiev thi regist alloc maintain two set virtual regist one scalar valu one regist array virtual regist index uniqu number regist array get dedic uniqu contigu index rang usual regist alloc start lifetim analysi virtual regist potenti con ict form overlap life rang repres interfer graph node repres virtual regist edg denot lifetim overlap lifetim analysi base defus analysi virtual regist lifetim analysi special attent paid bit packet indirectli address via regist pointer whose valu might known compil time order ensur program correct regist array element potenti point regist pointer p assum live p use live p determin inspect pointer initi call compil known function init see g due alloc constraint impos regist ar ray map virtual regist physic regist base special multilevel graph color algorithm physic regist assign virtual regist rst belong regist array necessari sinc regist array present higher pressur regist alloc scalar regist first node set origin interfer graph belong certain regist array merg super node then interfer graph transform superinterfer graph sig delet edg intern supernod scalar virtual regist node incid edg g next weight assign supernod n equal number intern virtual regist n plu maximum number intern virtual regist ns neighbor sig supernod map physic regist accord descend weight heurist motiv fact supernod lower weight gener easier alloc caus less lifetim con ict furthermor case con ict cheaper spillreload smaller array instead larger one r r r figur construct sig exampl virtual regist set fr rg fr r rg suppos repres two regist array r refer scalar variabl supernod n r intern virtual regist contigu rang regist le assign sinc may multipl window avail certain point time select rang base best strategi order ensur tight pack regist array regist le ie order avoid mani spill approach element regist array access two dierent way rst direct address eg a indirectli use bit packet pointer case insuci physic regist use indirect access spill code gener virtual regist within regist array otherwis particular virtual regist spill regist alloc symbol address bit packet recalcul specifi physic regist within regist le instead name virtual regist size array bit packet restrict size regist array therefor compil need reject code regist alloc done note code would imposs nd equival assembl code even manual case encount larg regist array control ow give multipl denit pointer variabl multipl regist array case possibl access regist array must assum live time therefor regist le larg enough hold simultan regist alloc supernod remain virtual regist origin interfer graph map physic regist tradit graph color insert spill code whenev requir result c compil np describ previou section fulli oper perform gener code measur mean cycletru np instruct set simul set test program mainli includ arithmet oper checksum comput bitstream test program rel small due eort requir rewrit sourc code compil known function ckf may expect qualiti compilergener code larg depend clever use ckf underli regist array concept use ckf without specic knowledg applic perform overhead compil code may sever hundr percent clearli accept intend applic domain due massiv increas regist pre sure mani regist array simultan live natur impli huge amount spill code case even use standard c program without use ckf might well result ecient code hand care use ckf deriv detail applic knowledg gener lead small perform overhead order observ overhead even reduc mean instruct schedul techniqu reduc regist lifetim and therebi spill code well peephol optim far implement also interest consid improv oer ckf compar regular c code tabl show perform six test routin speci c compil np machin code column give perform clock cycl without ckf regist array enabl respect column show perform gain percent without ckf ckf gain prg prg prg tabl experiment perform result use packetlevel address result averag perform gain standard c refer im plement natur mainli attribut np hardwar itself howev systemlevel perspect import prove perform gain also achiev mean compil c program instead handwritten assembl code result evalu believ introduct ckf regist array repres reason compromis program eort code qualiti ckf give programm direct access dedic instruct import optim hot spot c applic program compil still perform otherwis timeconsum task regist alloc noncrit program part high perform bitlevel oper hardli issu product gain oer compil versu assembl program clearli compens potenti loss code qualiti conclus futur work modern embed system frequent design basi programm asip allow high exibil iti ip reus compil support asip softwar develop urgent requir order avoid timeintens assembl program howev special compil backend techniqu develop order make optim use dedic architectur featur asip contribut outlin compil challeng encount network processor new class asip allow ecient protocol process mean packetlevel address describ implement c compil repres industri np main concept compil order make packetlevel address access c languag level use compilerknown function special regist alloc techniqu experiment result indic techniqu work practic processor featur well exploit although detail implement rather machinespec believ main techniqu easili port similar forthcom np improv version np c compil alreadi plan ongo work deal gradual replac pragmat approach compilerknown function sophist code select techniqu capabl directli map complex bit mask oper singl machin instruc tion enabl use special tree grammar model instruct set code selector addit plan includ techniqu similar regist pipelin order reduc registermemori trac multiregist bit packet sever peephol optim develop order close qualiti gap compil code handwritten assembl code acknowledg c compil describ paper develop informatik centrum dortmund icd inneon technolog ag munich whose project fund grate acknowledg requir assembl simul tool provid frank engel tu dresden author would also like thank yue zhang contribut test compil backend r tensilica inc austria mikro system intern asic automat instruct code gener base trelli diagram optim code gener embed memori nonhomogen regist architectur code optim techniqu embed dsp microprocessor con ict model instruct schedul code gener inhous dsp core constraint driven code select fixedpoint dsp optim stack frame access processor restrict address mode storag assign decreas code size uniform optim techniqu minim cost local variabl access dsp processor compil simd within regist code select media processor simd instruct exploit superword level parallel multimedia instruct set perspect market requir dynam exploit narrow width operand improv processor power perform hpca bitvalu infer detect exploit narrow bitwidth comput bitwidth analysi applic silicon compil coprocessor stream multimedia acceler new network processor architectur highspe commun retarget compil embed core processor languag compil optim datapath width embed system engin simpl code optim librari retarget compil embed digit signal processor regist alloc via graph color code optim techniqu embed processor stanford compil group suif retarget c compil design implement improv regist alloc subscript variabl tr compil principl techniqu tool code gener use tree match dynam program improv regist alloc subscript variabl optim stack frame access processor restrict address mode engin simpl effici codegener gener regist alloc via graph color storag assign decreas code size conflict model instruct schedul code gener inhous dsp core code optim techniqu embed dsp microprocessor optim code gener embed memori nonhomogen regist architectur uniform optim techniqu offset assign problem piperench constraint driven code select fixedpoint dsp minim cost local variabl access dspprocessor code select media processor simd instruct bidwidth analysi applic silicon compil exploit superword level parallel multimedia instruct set network processor code optim techniqu embed processor retarget compil embed core processor retarget c compil piperench compil simd within regist bitvalu infer dynam exploit narrow width operand improv processor power perform code optim librari retarget compil embed digit signal processor ctr xiaotong zhuang santosh pand effect thread manag network processor compil analysi acm sigplan notic v n juli xiaotong zhuang santosh pand balanc regist alloc across thread multithread network processor acm sigplan notic v n may jinhwan kim yunheung paek gangryung uh code optim vliwstyl network process unit softwarepractic experi v n p juli jinhwan kim sungjoon jung yunheung paek gangryung uh experi retarget compil commerci network processor proceed intern confer compil architectur synthesi embed system octob grenobl franc sriraman tallam rajiv gupta bitwidth awar global regist alloc acm sigplan notic v n p januari section instruct set extens arm embed applic proceed intern confer compil architectur synthesi embed system octob grenobl franc bengu li rajiv gupta simpl offset assign presenc subword data proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa v krishna nandivada jen palsberg effici spill code sdram proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa chidamb kulkarni matthia gri christian sauer kurt keutzer program challeng network processor deploy proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa