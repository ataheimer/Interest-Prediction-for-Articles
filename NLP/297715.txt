t random cach placement elimin conflict a abstractappl regular pattern memori access experi high level cach conflict miss sharedmemori multiprocessor conflict miss increas significantli data transposit requir parallel techniqu block introduc within singl thread improv local result yet conflict miss tension minim cach conflict transform need efficientparallel lead complex optim problem parallel compil paper show introduct pseudorandom element cach index function effect elimin repetit conflict miss produc cach miss ratio depend sole work set behavior examin impact pseudorandom cach index processor cycl time present practic solut major implement issu type cach conclus support simul superscalar outoford processor execut spec benchmark well cach simul individu loop kernel illustr specif effect present measur instruct commit per cycl ipc compar perform differ cach architectur wholeprogram benchmark spec suit b introduct upward trend processor clock frequenc last ten year extrapol next ten year see clock frequenc increas factor twenti period howev base current per annum reduct dram access time memori latenc expect reduc next ten year potenti tenfold increas distanc main memori seriou implic design futur cachebas memori hierarchi well architectur memori devic themselv block main memori place exactli one set block cach chosen set determin index function convent cach typic extract field bit address use select one block set whilst easi impl ment index function robust princip weak suscept repetit conflict miss exampl c number cach set b block size address map cach set j b j c j b j c collid cach set address k also collid cach integ k except two common case happen firstli access stream address fa collid ik may mgammak conflict miss stream secondli access element two distinct array b collid b j b ik collid condit outlin abov setassoci help allevi conflict effect solut repetit regular conflict one best way control local dens matrix comput larg data structur use tile or algorithm effect reorder iter space increas tempor local how ever previou work shown conflict introduc tile seriou problem practic now meant compil tile loop nest realli ought comput maxim conflictfre tile size given valu b major array dimens n cach capac c often small make worthwhil tile loop perhap valu n known compil time gosh et al present framework analyz cach miss perfectlynest loop affin refer develop gener techniqu determin optimum tile size method determin array pad size avoid conflict method requir solut set linear diophantin equat depend upon suffici inform compil time find solut tabl highlight problem conflict miss refer spec benchmark program compil maximum optim level instrument atom tool data cach similar firstlevel cach alpha microprocessor simul kb capac byte line writethrough write alloc benchmark simul first oper nowritealloc featur tabl refer load oper tabl show miss ratio follow cach or ganiz directmap twoway associ column associ victim cach four victim line twoway skewedassoci scheme twoway skewedassoci cach use unconvent index scheme propos author comparison miss ratio fullyassoci cach shown penultim column miss ratio differ directmap cach fullyassoci cach shown rightmost column tabl i repres directmap conflict miss ratio cmr case hydrod apsi organ exhibit lower miss ratio fullyassoci cach due suboptim lru replac fullyassoci cach particular program effect directmap conflict miss ratio repres dm w ca vc sa fa cmr tomcatv sucor hydrod mgrid applu turbd apsi fpppp wave go gcc compress li ijpeg perl vortex ave ave int averag cach miss ratio directmap dm way setassoci w columnassoci ca victim cach vc way skew associ sa fullyassoci organ conflict miss ratio cmr also shown target reduct miss ratio hope achiev improv index scheme type miss compulsori capac remain unchang use random index scheme expect improv way setassoci cach directmap cach rather low columnassoci cach provid miss ratio similar twoway setassoci cach sinc former lower access time requir two cach probe satisfi hit choic two organ take account implement paramet access time miss penalti victim cach remov mani conflict miss outperform fourway setassoci cach final twoway skew associ cach offer lowest miss ratio previou work shown significantli effect fourway conventionallyindex setassoci cach paper investig use altern index function reduc conflict discuss practic implement issu section ii introduc altern index function section iii evalu conflict avoid properti section iv discuss number implement issu effect novel index function cach access time then section v evalu impact propos index scheme perform dynamicallyschedul processor final section vi draw conclus studi ii altern index function aim paper show altern cach organ elimin repetit conflict miss analog problem find effici hash function larg secondari tertiari cach may possibl use virtual address map adjust locat page cach suggest bershad et al thu avoid conflict dynam howev small firstlevel cach effect achiev use altern cach index function field interleav memori well known bank conflict reduc use bank select function simpl modulopoweroftwo lawri vora propos scheme use primemodulu function harper jump sohi propos skew function use xor function parallel memori system propos frailong et al pseudorandom function propos raghavan hay rau et al scheme yield less uniform distribut request bank vari degre theoret predict implement cost principl scheme could use construct conflictresist cach use index function howev cach architectur two factor critic firstli chosen index function must logic simpl im plement secondli would like abl guarante good behavior regular address pattern even patholog convent index function commerci domain ibm amdahl made use xormap function order index tlb first gener hp precis architectur processor also use similar techniqu use pseudorandom cach index suggest author exampl smith compar pseudorandom placement setassoci place ment conclud random index small advantag case advantag signific paper show certain workload cach organ advantag larg hash process id address bit order index cach evalu multiprogram environ agarw result show scheme could reduc miss ratio perhap wellknown altern cach index scheme class bitwis exclusiveor function propos skew associ cach bitwis xor map comput bit cach index either one bit address xor two bit two map requir differ group bit chosen xore case twoway skewedassoci cach consist two bank size access simultan two differ hash function associ help reduc conflict skew index function help prevent repetit conflict occur polynomi modulu function first appli cach index best describ first consid unsign integ address term binari represent interpret polynomi defin field gf binari represent mbit cach index r similarli defin gf polynomi rx order less effect rx irreduc polynomi order p x x mod p x gener polynomi order lower m polynomi fulfil previou requir call ipoli poli nomial rau show comput rx accomplish vectormatrix product address n theta matrix h singlebit coeffici deriv p x gf product comput network xor gate hmatrix constant gate omit map requir xor gate fanin n practic may reduc number input address bit polynomi map function ignor upper bit a serious degrad qualiti map function ipoli map function studi previous context strideinsensit interleav memori see certain provabl characterist signific valu cach index demonstr skew ipoli cach index scheme show higher degre conflict resist exhibit convent setassoci nonipoli xorbas map function overal skewedassoci cach use ipoli map pure lru replac polici achiev miss ratio within achiev fullyassoci cach given advantag ipoli function bitwis xor function result present paper use ipoli index scheme iii evalu conflict resist perform integ floatingpoint spec program evalu column associ twoway setassoci w twoway skewedassoci organ use ipoli index function case singlelevel cach assum miss ratio configur shown tabl ii given convent index function directmap dm fullyassoci organ display respect lowest highest degre conflictresist possibl cach architectur defin bound within novel index scheme evalu miss ratio shown rightmost two column tabl ii columnassoci cach accesstim characterist similar directmap cach degre pseudoassoci address map one ipoli index mod k col assoc way skew index spl lru w plru lru fa dm sucor hydrod mgrid applu turbd apsi fpppp wave go gcc compress li ijpeg perl vortex ave ave int ave averag ii miss ratio ipoli index spec benchmark two locat cach initi one probe column label spl repres cach swap data two locat increas percentag hit first probe also use realist pseudolru replac polici cach report column label lru swap data column use unrealist pure lru replac polici expect twoway setassoci cach capabl elimin mani random conflict how ever conventionallyindex setassoci cach abl elimin patholog conflict behavior limit associ naiv index function perform twoway setassoci cach improv simpli replac index function whilst retain characterist convent lru replac still use index function impact replac cach organ two program twoway ipoli cach lower miss ratio fullyassoci cach due suboptim lru replac fullyassoci cach common anomali program neglig conflict miss final cach organ shown tabl ii twoway skewedassoci cach propos origin seznec origin form use two bitwis xorindex function version use ipoli index function propos case two distinct ipoli function use construct two distinct cach indic address pure lru difficult implement skewedassoci cach present result cach use realist pseudolru polici label plru cach use unrealist pure lru polici label lru organ produc lowest conflict miss ratio specint specfp strike perform improv domin three program tomcatv swim wave effect exhibit patholog conflict miss ratio convent index scheme studi olukotun et al shown data cach miss ratio tomcatv wast avail ipc way way superscalar processor respect tile often introduc extra cach conflict elimin alway possibl softwar altern index function exhibit conflict avoid properti use avoid induc conflict effect ipoli index tile loop evalu simul cach behavior varieti tile loop kernel present small sampl result illustr gener outcom figur show miss ratio observ two tile matrix multipl kernel origin matric squar dimens respect tile size vari theta theta show effect conflict occur cach directmap a way setassoci a fullyassoci fa skew way ipoli hpsk tile work set divid cach capac measur fraction cach occupi singl tile cach capac kbyte byte line dimens miss ratio initi fall cach tile size increas due increas spatial local point self conflict begin occur conventionallyindex directmap twoway setassoci cach fullyassoci cach suffer selfconflict miss ratio decreas monoton less load behavior skew way ipoli cach track fullyassoci cach close qualit differ ipoli cach convent twoway cach clearli visibl dimens product array multiplicand array posit memori crossconflict occur addit selfconflict henc directmap way set associ cach experi littl spatial local howev ipoli cach abl elimin crossconflict well selfconflict track fullyassoci cach iv implement issu logic gf polynomi modulu oper present section ii defin class hash function comput cach placement address combin subset address bit use xor gate mean that exampl bit cach index may work set capac miss ratio hpsk fig miss ratio versu cach load theta matrix multipli work set capac miss ratio fig miss ratio versu cach load theta matrix multipli comput xor bit origin address choic polynomi determin bit includ set implement function cach bit index would requir eight xor gate fanin whilst appear remark simpl consid placement function firstli function use address bit beyond normal limit impos typic minimum page size restrict sec ondli use pseudorandom placement multilevel memori hierarchi implic mainten inclus explain two issu depth show virtualr twolevel cach hierarchi propos wang et al provid clean solut problem cach memori access convent organ normal comput effect address ad two reg ister regist plu displac ipoli index impli addit circuitri comput index effect address circuitri consist sever xor gate oper parallel therefor total delay delay one gate xor gate number input depend particular polynomi use experi report paper number input never higher xor gate requir ipoli map may increas critic path length within processor pipelin howev delay short sinc bit index comput parallel moreov show later even addit delay induc full cycl penalti cach access time ipoli map provid signific overal perform improv memori address predict also use avoid penalti introduc xor delay lengthen critic path memori address shown highli predict instanc shown address dynam execut memori instruct spec suit predict simpl tabular scheme track last address produc given instruct last stride similar scheme could use give earli predict line like access given load instruct outlin below processor incorpor tabl index instruct address entri store last address predict stride recent execut load in struction fetch stage tabl access program counter decod stage predict address comput xor function perform comput predict cach line done one cycl sinc xor perform parallel comput mostsignific bit effeec tive address instruct subsequ issu memori unit use predict line number access cach parallel actual address line comput predict line turn incor rect cach access repeat actual address otherwis data provid specul access load destin regist number previou paper suggest address predict mean reduc memori latenc execut memori instruct depend instruct specul case missspecul recoveri mechan similar use branch predict scheme use squash missspecul instruct v effect ipoli index ipc order verifi impact polynomi map realist microprocessor architectur develop parametr simul fourway superscalar processor outoford execut tabl iii summar function unit latenc use experi reorder buffer contain entri two separ physic regist file fp in teger physic regist processor lockupfre data cach allow outstand miss differ cach line cach capac kb simul way associ byte line cach writethrough nowrit alloc cach two port twocycl time miss penalti cycl connect bit data bu infinit leveltwo cach data depend memori specul use mechan similar arb multiscalar hp pa branch histori tabl k entri bit satur counter use branch predict function unit latenc repeat rate simpl fp iii function unit instruct latenc memori address predict scheme implement directmap tabl k entri index instruct address reduc cost entri tag although increas interfer ta ble entri contain last effect address recent load instruct index tabl entri togeth last observ stride addit entri contain bit satur counter assign confid predict mostsignific bit counter set would predict consid correct address field updat new refer regardless predict howev stride field updat counter went two consecut mispredict tabl iv show ipc miss ratio six configur ipc averag comput use equallyweight harmon mean baselin configur kb cach convent index address predict np rd column averag ipc configur averag miss ratio ipoli index averag miss ratio fall xor gate critic path ipc rise nx th column convers xor gate critic path one cycl penalti cach access time assum result ipc wx th column how ever memori address predict introduc wp th columnn ipc cach without xor gate critic path nx henc memori address predict scheme offset penalti introduc addit delay xor gate critic path even conserv assumpt whole cycl latenc ad load instruc tion final tabl iv also show perform setassoci cach without ipoli index configur simul instruct skip first theta nd column notic addit ipoli index kb cach yield ipc increas obtain doubl cach size index ipoli index sucor hydrod mgrid applu turbd apsi fpppp wave go compress li ijpeg perl vortex ave ave int ave ave averag iv compar ipc measur simul ipc measur exhibit small absolut differ enc benefit ipoli index perceiv small subset benchmark pro gram program spec exhibit low conflict miss ratio fact spec conflict miss ratio kb way setassoci cach less program except tomcatv swim wave two penultim row tabl iv show independ ipc averag benchmark high conflict miss ratio ave low conflict miss ratio ave y highlight abil polynomi map reduc miss ratio significantli boost perform problem case one see polynomi map provid signific improv ipc three bad program even xor gate critic path memori address predict use memori address predict ipoli index yield ipc improv compar convent cach capac higher convent cach twice capac notic polynomi map scheme predict even better organ without predict xor gate extend critic path due fact memori address predict scheme reduc one cycl effect cach hit time predict correct sinc address comput overlap cach access the comput address use verifi predict correct howev main benefit observ come reduct conflict miss isol differ effect also simul organ memori address predict scheme convent index kb cach wp column compar ipc organ column see benefit memori address predict scheme due sole reduct hit time almost neglig confirm improv observ ipoli index scheme address predict deriv reduct conflict miss averag fifteen program exhibit low level conflict miss show small deterior averag ipc ipoli index use xor gate critic path due slight increas averag hit time rather overal increas miss ratio which averag fall program reduct aggreg miss penalti outweigh slight extens critic path length vi conclus paper discuss problem cach conflict miss survey option reduc elimin conflict describ pseudorandom index scheme base polynomi modulu function shown robust enough virtual elimin repetit cach conflict caus bad stride inher spec benchmark well elimin introduc applic tile loop nest highlight major implement issu aris use novel index scheme exampl ipoli index use address bit convent cach comput cach index also use differ index function level level cach result occasion evict level simpli maintain inclus explain problem solv use twolevel virtualr cach hierarchi final propos memori address predict scheme avoid penalti due small potenti delay critic path introduc pseudorandom index function detail simul outoford superscalar processor demonstr program signific number conflict miss convent kb way skewedassoci cach perceiv ipc improv with address predict without address predict higher ipc improv obtain simpli doubl cach capac iti furthermor program analyz experi signific conflict miss averag see reduct ipc ipoli index appear critic path comput effect ad dress address predict use index logic appear critic path deterior overal averag perform experienc program believ key contribut pseudorandom index result predict cach behavior experi found ipoli index reduc standard deviat miss ratio across spec could benefici realtim system unpredict time caus possibl patholog miss ratio present problem conflict miss elimin miss ratio depend sole compulsori capac miss gener easier predict control conflict avoid could also benefici iterationspac tile use improv data local vii acknowledg work support part european commiss esprit project british council grant spanish ministri educ accion integrada hispanobritanica cycit tic author would like express thank jose gonzalez joan manuel parcerisa help simul softwar anonym refere help comment r the nation technolog roadmap semiconductor comput architectur quantit approach the cach perform optim block algorithm cach miss equat analyt represent cach miss atom system build custom program analysi tool columnassoci cach techniqu reduc miss rate directmap cach improv directmap cach perform addit small fullyassoci cach prefetch buffer a case twoway skew associ cach skewedassoci cach elimi nate cach conflict miss xorbas placement func tion avoid cach conflict miss dynam larg directmap cach the prime memori system array access vector access perform parallel memori logic data skew scheme interleav memori vector processor xorschem flexibl data organ parallel memori on randomli interleav memo rie the cydra stride insensit memori system pseudorandomli interleav memori amdahl corp hardwar design first hp precis architectur comput cach memori analysi cach perform oper system multiprogram the design perform conflictavoid cach the case singlechip multiprocessor organ perform twolevel virtualr cach hierarchi specul execut via address predict data prefetch hardwar support hide cach latenc streamlin data cach access fast address calcul zerocycl load microarchitectur support reduc load latenc memori address predict data specul the perform potenti data depend specul collaps lockupfre instruct fetchprefetch cach organi zation arb mechan dynam reorder memori refer advanc perform featur bit pa tr ctr s bartolini c a prete propos inputsensit analysi profiledriven optim embed applic acm sigarch comput architectur new v n p june k patel e macii l benini m poncino reduc cach miss applicationspecif reconfigur index proceed ieeeacm intern confer computeraid design p novemb han vandierendonck philipp manet jeandidi legat applicationspecif reconfigur xorindex elimin cach conflict miss proceed confer design autom test europ proceed march munich germani han vandierendonck koen de bosscher xorbas hash function ieee transact comput v n p juli mathia spjuth martin karlsson erik hagersten skew cach lowpow perspect proceed nd confer comput frontier may ischia itali wang nelson passo improv cach hit ratio extend referenc cach line journal comput scienc colleg v n p april g e suh l rudolph s devada dynam partit share cach memori journal supercomput v n p april han vandierendonck koen de bosscher highli accur effici evalu randomis set index function journal system architectur euromicro journal v n p may g edward suh sriniva devada larri rudolph analyt cach model applic cach partit proceed th intern confer supercomput p june sorrento itali rui min yime hu improv perform larg physic index cach decoupl memori address cach address ieee transact comput v n p novemb s bartolini c a prete optim instruct cach perform embed system acm transact embed comput system tec v n p novemb