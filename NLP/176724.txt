t complex decis versu search a basic question np whether search reduc polynomi time decis paper indic answer neg complex assumpt that determinist nondeterminist doubleexponenti time unequ languag np search reduc decis construct idea extend natur way interact proof program check similar assumpt author present languag np harder prove membership interact decid membership languag np checkabl b summari summar relationship amongst variou complex class wehav discuss first notat de ne tripl exponenti time class similarlyw let bpeee denot class languag recogn bound error probabilist ntm run time constant c follow inclus known easili deriv known techniqu compip check frip mip coh assumpt nee bpee establish follow np contain follow compnp compip check frip np coh contain follow compnp compip check frip result line see theorem line see theorem discuss end section final assumpt neee bpeee bfestablish follow np coh decis versu searchinnp section present simpl construct languag np searchdoesnot reduc decis assum ee nee later section extend argumenttointeract proof program check let us begin de nition de nition goal section make precis mean search reduc decis np languag l sinc issu discuss length section we brief state formal de nition limit discuss essenti conveni proceed step begin de ning nprelat say mean search reduc decis them use say mean search reduc decis np languag de nition let beapolynomi time comput binari relat let x f g let x f w call member set wit xwe say nprelat exist constant c n x f g case x f gjxjc languag de ned f x f g x gand denotedl note nprelat l np notat w oracl machin wl x denot output w oracl l f g input x f g wenowsay mean search reduc decis nprelat equival formul de nition follow appear bd de nition suppos nprelat w isapolynomi time oracl machin let l l say w wit nder x l case wl x x say search reduc decis exist wit nder note wit nder restrict particular method exampl requir length queri decreas time rather polynomi time comput allow strengthen neg result wenow wish say mean search reduc decis np languag oppos nprelat begin follow terminolog de nition suppos nprelat l f g languag say de ne clearli exist nprelat de ne l howev particular languag l np may mani di erent nprelat de ne lifl npcomplet search reduc decis nprelat howev l npcomplet search might reduc decis other de ning mean search reduc decis l wehavechosen liber ask nprelat de ning l search reduc decis de nition suppos l f g say search reduc decis l exist nprelat de ne l search reduc decis wehav indic section de nition motiv byinteract proof question whether prove membership harder decid it prove membership l easi sens l competit npproof system long search reduc decis nprelat de ning lsow led de nition note context languag suchasf g easi associ search problem hard certainli wish think search harder decis languag appropri search reduc decis languag accord de nition finallyw note exist languag search reduc decis doe cours impli exist nprelat search reduc decis neg result de nition stronger simpli conclud exist nprelat search harder decis whenev understood say wit wit nder rather wit wit nder uniformli logspars languag proof use languag combin logarithm spars properti possibl e cientli identifi logarithm size superset string belowani given length let us proceed formal de nition de nition censu function l n n l f g languag l de nedbi say l logspars l n logn is l n number string l whichhav length n languag logspars contain log n string length n logspars languag use hsi call next de nition formal idea abl e cientli identifi superset languag speci es notion uniform logspars whichw interest de nition say c f g candid selector l c polynomi time decid l c say languag l uniformli logspars logspars candid selector see section interest uniformli logspars languag form class problem reduc search decis particularli hard let us end section state lemma whichw use later lemma gener work hartmani sewelson immerman hsi show logspars languag np pife nee ylogspars weaker uniform logspars candid selector requir easi see uniformli logspars languag np p nonetheless exist assumpt complet provid sketch entir standard proof lemma ee nee uniformli logspars languag np pproof use standard downward separ argument assum ee nee suppos ne l uniformli logspars l np p hsi claim convers well allend al point proof awe theorem cannot prove use techniqu relativ de ne algorithm input x f gn behav follow n rang g output els comput k g n output last n k bit x zero c f x x g candid selector l c n g n logn l uniformli logspars fact l np p follow directli fact l nee ee languag search reduc decis follow main lemma section show reduct searchto decis uniformli logspars languag possibl trivial case languag alreadi p lemma suppos l uniformli logspars languag search reduc decis proof assumpt exist nprelat polynomi time oracl machin w de ne l w wit nder construct polynomi time machin decid lwe begin describ idea inform idea use w subroutin nd wit di culti is cours w make oracl queri l itself access oracl l machin certainli cannot correctli answer queri see nonetheless exploit w suppos moment w guarante make one oracl queri entir comput input x tri possibl answer is branch pair parallel comput rst answer queri second answer case run w w halt clearli x l least one run output wit strategi polynomi time idea extend w make log n queri realityhowev w could make polynomi mani queri strategi e cient point weinvok uniform logspars l whichwehav use far impli realli log n e ectiv queri w make sinc w write queri polynomi length use logspars candid selector l identifi set log n string includ string l w could possibl queri need branch these overal strategi mind let us specifi oper precis sinc nprelat exist constant c n x f g case x f gjxjcwe assum constant input x f g machin w halt djxjd step output string length jxjc regardless oracl queri w answer also assum wlog queri made w distinct let c logspars candid selector lnow input x f gn machin behav follow run w input x time w make oracl queri q machin provid respons follow q c respond els continu tri parallel possibl answer is branch two parallel comput rst let respons q second let respons q continu run w comput manner gener number parallel comput dnd step comput halt yield nc bit output output w examin set output previou step accept least one output w sati es x w reject otherwis complet descript machin m fact work clear complet let us spell out first see accept x x l su ce check least one parallel comput oracl queri correctli is accord l answer step obvious correct de nition candid selector step everyth tri one run certainli end right queri answer next thing check run polynomi time su ce show total number parallel comput for su ce show number branch path log n wenow argu latter first note queri q length dnd run time w branch occur q c wehav assum ws queri distinct number time branch occur size dnd g c dnd logn complet proof put piec togeth obtain result theorem ee nee exist languag np search reduceto decis proof lemma exist uniformli logspars languag l np p lemma search cannot reduc decis l note fact search reduc decis l impli l npcomplet exist non npcomplet languag npp howev establish assum decid properti extend idea previou section interact proof check paus develop technic materiel materiel use prove result later section particular weintroduc notion decid enabl us give uni ed concis treatment rest result paper begin de nition de nition let beaprobabilist polynomi time oracl machin say decid languag l x f g follow true accept probabl probabl da x accept oracl awe note l decid functionrestrict ip cf bk decid wayofcharacter languag frip also view checker ye instanc weaker multiprov interact proof result fr impli l decid multiprov interact proof us motiv de nition gener notion wit nder light proof lemma properti wit nder import proof correct x l long oracl queri answer correctli ie accord l correct x l nomatt oracl queri answer like wit nder correct decid input guarante except high probabl long oracl queri correctli answer hand x l correct guarante high probabilityno matter oracl queri answeredasw see properti su ce us appropri extend lemma lemma error probabilityof de nition alway su cient convenientto also de ne follow de nition let beaprobabilist polynomi time oracl machin say strong decid l x f g follow true accept probabl jxj probabl da x accept jxj oracl astandard errorreduct cours say strong decid exist whenev decid exist complet let us state proposit provid sketch proof proposit l decid strong decid proof let decid lwe de ne machin follow input x machin run input x total n time time independ coin toss oracl queri made answer byway oracl is make oracl queri q make oracl queri q provid answer receiv output majorityvot output trial see strong decid l let xaxma denot sequenc random variabl repres outcom oracl success trial independ msatisfi pr xl case oracl case x l applic standard cherno bound yield desir conclus wesaw section reduc search decis uniformli logspars languag hard show languag also decid unless bpp lemma suppos l uniformli logspars decid l bpp proof proposit l strong decid dwe showhowt construct bpp machin decid l idea much proof lemma decid play role wit nder play proof is input x machin run input x answer oracl queri accord rule use proof lemma accept decid accept least one parallel comput main di erenc respect lemma lie fact way tell whether particular output decid correct lemma one alway check whether output wit nder realli wit instead correct procedur follow fact error probabilityofd small n detail follow let constant alway halt dnd step input length n let c logspars candid selector lwe assum wlog oracl queri made distinct input x f gn machin behav follow run input x time make oracl queri q machin provid respons follow q c respond els continu tri parallel possibl answer is branch two parallel comput rst let respons q second let respons q continu run w comput manner gener number parallel comput dnd step comput halt yield output output examin set output previou step accept least one output sinc answer one parallel comput correspond l machin accept dnd g let adenot set subset q parallel comput correspond run oracl a follow probabl accept aa pr da accept assumpt strong decid lsow bound jaj n claim probabl accept complet proof justifi claim note jaj jqj jqj c dnd log n recal bpee denot class languag accept time cn constant c probabilist machin bound error argument analog use proof lemma show follow lemma nee bpee exist uniformli logspars languag np bppcombin lemma obtain follow theorem whichw use next two section theorem nee bpee exist languag np deciderw remark earlier l decid l frip lemma say nee bpee impliesnp frip later section use theorem show nee bpee impli np checkbi show languag compip checkhav decid cf lemma competitiveinteract proof begin recal notion interact proof de ne competitiveinteract proof present result interact proof interact proof extens np one let us begin recal latter np proof system languag l np de ned polynomi time veri er v we imagin veri er talk prover parti receiv common input x prover goal convinc veri er accept end allow send veri er singl messag length veri er decis whether accept made function common input messag sinc veri er determinist decis polynomi time binari predic evalu common input prover messag case exist determinist prover p convinc veri er accept complet condit case x l prover abl toconvinc veri er accept sound condit usual specifi np proof system pair pv p prover satisfi complet condit clearli l np possess np proof system interact proof whichwer introduc goldwass micali racko gmr natur extens np proof system parti allow probabilist moreov allow interact is exchang messag polynomi number round end exchang v decid whether accept say pv isaninteract proof languag l common input string liti possibl p induc v accept high probabl common input string l prover prevent v reject high probabl let us proceed formal parti interact proof may view probabilist function common input convers far outcom function input x common input c transcript convers far whichw denot x c next messag comput sent parti y assum transcript convers pointmay uniqu pars constitu messag wemay discuss complex parti usual way view comput probabilist ture machin exampl veri er parti comput probabilist polynomi time tm complex measur function length common input whichw usual denot n total numberofmov move consist parti comput send messag well length messag assum bound polynomi n end interact veri er accept reject appli determinist binari predic common input transcript convers suppos prover interact veri er b common input x probabl b accept interact common input x probabl b accept given common input x transcript g g g chosen accord follow experi g g n total number move empti string assum simplic speak rst last probabl random choic parti convers de nition interact proof gmr let pv beapair probabilist function say pv interact proof system languag l v probabilist polynomi time everi x l probabl v accept interact p common input x everi x l everi function pb probabl v accept interact pbon common input x rst condit complet condit second sound condit note strength sound condit quanti cation function pb call cheat dishonest prover even noncomput one note np proof system special kind interact proof system speci callyan np proof system interact proof system pv p v determinist interact restrict singl messag prover veri er probabl complet sound condit rather respect addit interact random howev seem add signi cantli languag recognit power system establish lund fortnow karlo nisan lfkn ip class languag possess interact proof membership contain polynomi time hierarchi shamir sh extend show ip equal pspace wesay function probabilist mean x c parti actual associ distribut string xc random element distribut competitiveinteract proof basic complex theoret question determin e cient prover p interact proof pv languag l certainli would need least abil decid languag himself de ne competitiveinteract proof system one prover allow thi speci callyhemust run probabilist polynomi time given access l oracl see competitiveinteract proof repres natur gener problem decis vs search de nition let p beaprobabilist polynomi time oracl machin v aprobabilist polynomi time machin say pv competit interact proof system languag everi x l probabl v accept interact pl common input x everi x l everi interact tm pb probabl v accept interact pbon common input x rst condit complet condit second sound condit call p competit prover note sound condit remain de nition interact proof particular restrict comput power cheat prover pbin case x lour goal understand di culti provid correct proof unrestrict sound would appear inher properti proof competit np proof system de ned natur way is competit np proof system competitiveinteract proof system parti determinist interact restrict singl messag prover veri er probabl complet sound condit rather respect equival np proof system prover restrict polynomi time plu oracl lwenow note search reduc decis l l competit np proof system prover competit np proof system correspond wit nder sens competitiveinteract proof natur extens problem decis versu search np languag possess competitiveinteract proof section present languag l np search unlik reduc decis word l unlik competit np proof system truth howev prove membership np languag remain hard even interact random allow show probabl np languag even havea competitiveinteract proof system given result section need follow lemma show languag possess competitiveinteract proof also decid or equival compip frip lemma suppos l competit interact proof system decid proof let pv competitiveinteract proof lwe note probabilist polynomi time run p v given oracl a machin d input x sampl space convers pa v input x accept convers obtain accept detail follow let r n denot polynomi bound number coin toss use p v input length n pick uniformli random r n bit string rp r n bit string rv he run p v common input x use rp coin p rv coin v is assum exampl p send rst messag would run p coin rp get ps rst messag would run v coin rv get respons on oracl queri made p process answer byway oracl is make oracl queri q make oracl queri q provid answer receiv p eventu obtain output v v accept otherwis output valu given particular oracl a case da x isa random variabl clearli probabl equal probabl v accept interact pa common input x assumpt pv competitiveinteract proof l follow case x l pr da x oracl case x lcombin lemma theorem yield theorem theorem nee bpee exist languag np competitiveinteract proof note wehav done simpli show interact proof may power competit one languag l theorem np subclass ip possess particularli simpl interact proof show interact proof power competit one would su ce present languag ip necessarili np competitiveinteract proof done weaker assumpt extens argumentw use abov exampl let show eespac bpee exist languag ip whichdoesnotpossess competitiveinteract proof gener construct languag l lie particular complex class c possess competitiveinteract proof su ce assum doubleexponenti counterpart c contain bpee put phrase doubleexponenti counterpart quot it cours alway make sens mani class counterpart mani natur class use paradigm make sens zeroknowledg aspect competit aspect zeroknowledg proof may also worth investig initi suchaninvestig let us tri discuss brie one easili infer known work open question np languag competit zeroknowledg interact proof gener cours probabl sinc theorem probabl even competitiveinteract proof let alon zk one appropri question whether np languag possess competitiveinteract proof also possess competit zeroknowledg interact proof answer depend kind zeroknowledg one consid kind cryptograph assumpt one will make let us rst consid comput zk result goldreich micali wigderson gmw impli npcomplet languag competitivezkinteract proof given exist oneway function gener impli search reduc decis l l competitivezkinteract proof given exist oneway function know whether assumpt exist oneway function su ce show languag possess competitiveinteract proof also possess competitivezkinteract proof wedoknow latter conclus may establish stronger assumpt suchasth exist ideal secur circuit evalu exist oblivi transfer follow result kilian ki refer reader paper detail exactli assumpt statist zk languag known possess competitiveinteract proof also known possess statist zk competitiveinteract proof languag graph isomorph gmw graph nonisomorph gmw quadrat nonresiduos gmr not cours know whether quadraticresiduos competit statist zk interact proof given know whether competitiveinteract proof all program check blum kannan bk introduc notion program checker informallyacheck function f probabilist polynomi time oracl machin receiv oracl program purport comput f checker also receiv input x program entir correct is p f checker suppos accept high probabl howev program disagre f particular input x provid checker checker reject high probabl de nition follow note program mean determinist machin halt input also recal characterist function languag l function l f g f g de ned l x ifx l otherwis de nition bk let c beaprobabilist polynomi time oracl tm c checker f f g f g program p x f g case accept probabl probabl cp x accept we say c checker languag l checker characterist function l l checkabl checker de nition close spirit competit interact proof two import di erenc first unlikeinteract proof check symmetr notion checker languag l must abl determin p correct x x l also x l second program histori independ object cheat prover arenot thu l l competitiveinteract proof l checker wedo know whether everi checkabl languag competitiveinteract proof checker also relat multiprov interact proof bgkw particular result fr impli class languag possess checker contain mip comip mip class languag possess multiprov interact proof membership note mip nexp result bfl blum kannan bk show check frip cofrip follow checkabl languag decid complet howev let us see directli lemma suppos l checker decid proof let c beacheck l let probabilist polynomi time oracl machin which input xwork follow begin queri oracl string x oracl return reject els run c input x use oracl denot answer cs oracl queri accept c accept claim decid lto see need check x f g two condit de nition hold rst condit clear see second true suppos x l suppos rst x case reject probabilitynow suppos x probabl accept c isacheck combin lemma theorem yield theorem theorem nee bpee exist languag np checkablesimilarli eespac bpee exist languag pspace checkablew recal languag l coher membership x l decid probabilist polynomi time bound error machin call examin access l oracl allow queri oracl point di erent xifl coher wesay incoher previou neg result check establish rst exhibit incoher set exploit yao observ incoher set uncheck cf ya bf note stronger result obtain directli moreov techniqu indic even within np class coher set could much larger class checkabl one let us sketchwhi so disjoint union languag b denot bisfx construct wide use complex theori eg bd hh easi see cf bf l l coher languag l also easi see transform l l l preserv manycomplexitycharacterist l exampl membership np compnp compip check frip particular combin observ theorem yield claim separ theorem nee bpee exist languag np coher checkabl toward competit proof quadrat residuos section return unresolv question whether languag quadrat residuos competitiveinteract proof system present special case problem competit proof possibl de nition look promis problem rather problem languag membership di erenc former begin promis input alreadi belong set wehav decid whether fall given subset set problem consid manywork eg esi formal use di erent equival one use work follow problem speci ed pair disjoint set a b intuit input promis b wehav decid whether b correspond promis problem promis oracl guarante correct promis true de nition promis problem isapair disjoint set a b apromis oracl promis problem given queri q return q q b note promis problem are intuit easier languag recognit problem promis oracl correspondingli weaker normal oracl particular promis oracl oracl b respons queri outsid b indetermin competitiveinteract proof promis problem a b interact proof given x b properti competit prover get promis oracl a b formal de nition follow de nition let p beaprobabilist polynomi time oracl machin v aprobabilist polynomi time machin say pv competit interact proof promis problem everi x everi promis oracl a b probabl v accept interact po common input x everi x b everi interact tm pb probabl v accept interact pbon common input x result recal x z quadrat residu squar modn x mod n quadrat nonresidu nonsquar modn otherwis also recal section qr f x n x squar mod n g qnr f x n x nonsquar mod n special case interest n product constantnumb distinct odd prime precis rst de ne product distinct odd prime g product distinct odd prime present competitiveinteract proof x n qr given alreadi qr qnr note qr qnr complement that formallyw talk competitiveinteract proof promis problem qr qnr sens de nition theorem let integ promis problem qr qnr possess competit interact proof relat work kompella adleman ka presentcheck special case quadrat residuos modulu product constantnumb prime ie present checker promis problem qr qnr construct not howev extend competitiveinteract proof correct checker use fact program contrast cheat prover histori independ prove theorem we begin recal basic number theoret fact refer reader an nz numbertheoret background justi cation fact x zn let qn x ifx quadrat residu mod n otherwis suppos ps pp distinct odd prime de ne binari relat zn equival relat equival class x relat name f call residu class product xy mod n two element squar mod n x residu class nonsquar mod n otherwis total number residu class s size denot rs convent last rs class quadrat residu mod n recal exist competitiveinteract proof quadrat nonresiduosityw exploit fact reduc proof x n qr polynomi number proof nonresiduos suchaway prover need use probabilist polynomi time promis oracl qr qnr rst step follow de nition de nition let n beaproduct distinct odd prime let s calavector repres zn follow condit hold yi nonsquaremod n t nonsquaremod n pair indic lead us way reduc residuos test collect nonresiduos test long possess representativevector proposit let n beaproduct distinct odd prime let x z suppos yyt repres zn x n qr xyi mod n nonsquaremod n t proof xyi mod n nonsquar mod n t residu class di er residu class yi t sinc repres happen x squar mod n use thi howev wehav abl get representativevector su ce showhow prover construct representativevector convinc veri er inde repres use probabilist polynomi time promis oracl qr qnr proposit thereisaprobabilist polynomi time oracl machin r input x n qr qnr access promis oracl qr qnr output either repres vector z special symbol probabl latter event proof r pick random yym zn t constant de ned later mthe machin r use promis oracl test whether condit de nition hold yi vector yi pass test rst suchvector output vector fail test r output probabl particular vector pass test tt posit constant su ce choos constant crude calcul show e su ce r run probabilist polynomi time clear proceed describ protocol begin recal follow gmr basic competit protocol prove nonresiduos protocol qnr input x n k pick random cck f g rrk zn set zi xciri mod n send zzk p p p set di zi quadrat residu mod n otherwis k send ddk v accept ci di k proposit protocol qnr follow properti probabl v accept interact p x n qnr pb probabl v accept interact pb k p competit is run probabilist polynomi time given oracl qnr proof rst two item follow basic properti modular residu refer reader gmr proof last item clear wenow proceed competitiveinteract proof qrswe use protocol qnr subprotocol input notat let s run algorithm proposit send output v receiv p reject instead receiv vector yyt z t parti proceed next step subprotocol p use protocol qnr secur paramet k set provetov yi nonsquar mod n t nonsquar mod n pair indic xyi mod n nonsquar mod n t total invoc qnr protocol accept subproof accept correct protocol follow result establish abov detail follow suppos qr proposit impli parti get representativevector proceed subprotocol probabl de nition proposit impli input nonresiduos subproof inde nonsquar mod n thu proposit impli subproof succeed probabl sov accept suppos qnrsifpbsend rst step v reject suppos send vector yyt zn tifi repres de nition either yi squar mod n pair jsuch yiyj mod n squar mod n either case correspond nonresiduos subproof fail probabl v reject suppos repres proposit impli xyi mod n squar mod n correspond nonresiduos subproof fail probabl v reject competit p follow proposit reason extend arbitrari n is cours number residu class could gener exponenti length n polynomi time could even write repres list hand work proof show result extend case s n n polynomi time comput function n whichi bound abovebylglglgn lglgjnjfor simplicitywehav stuck case constant s clearli weak result promis n alreadi product exactli odd prime may hard prove competit one want competitiveinteract proof qr open question quadraticresiduosityw think interest open question whether languag quadrat residuos competitiveinteract proof condit result subject would also interest exampl could one show quadrat residuos competitiveinteract proof factor reduc probabilist polynomi time decid quadrat residuos note rmativ answer last question would impli qr competitiveinteract proof npproof via simpl factor wit reduc assumpt anoth open question whether one reduc assumpt requir result particular one show languag search reduc decis given p np even e ne could cryptograph assumpt exist oneway function use establish exist languag ip competitiveinteract proof set relationship decis search context optim problem approxim algorithm search reduc decis set exampl consid travel salesman problem tsp let g denot weightof optim tour weight graph g suppos constant suppos oracl satisfi g g g graph g polynomi time procedur which oracl access input g output tour g ofweight g perfect completenessaninteract proof pv l said perfect complet probabl accept complet condit know languag l possess interact proof also possess one perfect complet fgmsz languag possess competitiveinteract proof also possess competitiveinteract proof perfect complet one motiv question fact competit proof special case quadrat residuos section possess perfect complet zeroknowledgew discuss open question section acknowledg mani peopl point us error hsi thank eric allend juri hartmani jack lutz osamuwatanab regard thank muli safra lanc fortnow jack lutz help discuss silvio micali suggest term competitiveinteract proof thank ode goldreich mani help comment paper thank satish thate draw attent result la mention section final thank pair anonym refere manyvalu comment paper r lectur note complex problem number theori limit upward separ techniqu languag easier proof improv bound coher checkabl complex decis versu search make zeroknowledg prover e cient theori averag case complex multiprov interact proof system removeintract assumpt design program check work comment function selfreduc np hierarchi complex promis problem applic publickey cryptographi power multiprov interact protocol complet sound interact proof system knowledg complexityofint activ proof complex class without machin spars set npp exptim versu nexptim privat commun decis versu search problem superpolynomi time complexityofparallel search achiev zeroknowledg robustli fast checker cryptographi person commun structur polynomi time reduc algebra method interact proof system anintroduct theori number natur selfreduc set ip pspace privat commun via beigel feigenbaum rel complex check evalu tr ctr salil vadhan transform interact proof preserv prover complex proceed thirtysecond annual acm symposium theori comput p may portland oregon unit state minhhuyen nguyen salil vadhan zero knowledg effici prover proceed thirtyeighth annual acm symposium theori comput may seattl wa usa lime cai david jued exist subexponenti parameter algorithm journal comput system scienc v n p decemb