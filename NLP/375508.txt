t effici detect vacuiti tempor model check a abil gener counterexampl import featur model check tool counterexampl provid inform user case formula check found nonvalid paper turn attent provid similar feedback user case formula found valid valid formula hide real problem model instanc proposit logic formula contain implic suffer anteced failur formula trivial valid precondit implic satisfi call vacuiti extend definit cover kind trivial valid nonvacu valid formula defin interest wit nontrivi exampl valid formula formal notion vacuiti interest wit show detect vacuiti gener interest wit tempor model check final provid practic solut use subset actl formula b introduct abil gener counterexampl import featur model check tool counterexampl provid inform user case formula check found nonvalid paper turn attent provid similar feedback user case formula found valid first glanc goal may seem strang prove formula valid suppos goal model check howev addit inform regard valid formula inde import valid formula may hide real problem model sever year experi practic formal verif hardwar ibm bb shown us first formal verif run new hardwar design typic formula found trivial valid trivial valid alway point real problem either design specif environ formula found nontrivi valid examin nontrivi exampl trace discov problem approxim formula problem trivial valid formula first note beatti bryant bb term anteced failur anteced failur mean formula trivial valid precondit anteced formula satisfi model valid formula trivial must indic user not use formal verif compromis sinc trivial valid formula intent part specif and therefor indic problem design error specif instanc consid follow formula agrequest model request never made ie trivial valid anteced failur intuit easi concept grasp howev fact depend use particular oper disturb would like captur problem equival formula agrequest axack concern tempor logic would also like notion trivial valid formula includ tempor aspect instanc consid follow p never occur thu trivial anteced failur howev would also like notion trivial valid formula cover case that q may occur thu never occur next state p thu addit notion trivial valid formula captur potenti problem illustr follow formula agrequest adata valid uwrit enabl previou exampl formula trivial valid model request never made howev even modelm whichm possibl valid formula trivial agrequest write enabl state requir subformula data valid hold word noth left model checker check model valid formula trivial paper extend formal notion trivial valid case use term vacuiti extend definit call formula suffer vacuiti vacuous valid formula trivial valid usual indic problem model rather specif relat problem formula nonvacu valid express properti intend user word would like provid way discov error formula even formula nonvacu valid confront problem formal notion interest wit trace show nontrivi exampl valid formula examin posit exampl provid confid formal specif accur reflect intent user one weak link practic applic formal verif hardwar design exampl consid formula interest wit formula path p occur state q occur state i r occur state i note simpli negat origin formula provid nontrivi exampl negat formula get obvious sinc formula negat formula formula fals formula true howev formula existenti formula trace show fals counterexampl mechan hbk smv mcm cg gener trace negat singl operand ag oper formula follow also guarante interest wit instanc valid counterexampl formula path state p occur again trivial posit exampl truth origin formula motiv tempor model check howev notion vacuiti interest wit limit tempor logic therefor first defin term gener discuss vacuiti detect gener interest wit tempor model check final show practic solut use subset actl formula tempor model check remaind paper organ follow section defin import tempor logic section formal notion vacuiti show effici detect vacuiti use model checker section formal notion interest wit show gener interest wit use model checker section provid practic solut use subset actl section compar work previou version theori relat work section conclud preliminari logic follow syntax everi atom proposit formula f g formula f f g f formula ef also formula f g formula fug xf also formula addit oper view abbrevi abov follow semant ctl formula defin respect kripk structur k kripk structur quadrupl s r l finit set state set initi state r theta transit relat l valuat function map state set atom proposit true state requir least one transit everi state path kripk structur k infinit sequenc state r true everi i given path denot i path start ith state formal semant ctl follow atom proposit start k say k everi path k k ctl formula normal form oper modifi atom proposit subset ctl path quantifi when formula normal form ctl ce subset ctl tempor oper x must immedi preced path quantifi e actl gl subset ctl path quantifi when formula normal form ltl pnu subset ctl path quantifi intuit notion vacuiti deriv proposit anteced failur propositionalanteced failur mean formula trivial valid precondit satisfi precondit lefthandsid implic anoth way think say righthandsid implic affect valid formula give intuit extens vacuiti oper vacuiti occur one operand affect valid formula use notat denot formula obtain replac subformula definit affect subformula formula affect model formula truth valu differ vacuou model subformula affect definit captur intuit notion vacuiti manner independ particular logic howev use come vacuiti detect infinit number case check remaind section show suffici condit logic finit small number case requir first show enough check subset subformula then defin logic polar enough check replac subformula either true fals vacuiti respect minim set subformula section show vacuiti check examin subset subformula subformula minim respect subformula preorder denot assum subformula uniqu is consid two separ occurr subformula differ subformula lemma affect model affect proof assum affect affect formula truth valu differ sinc get truth valu differ truth valu thu truth valu differ truth valu mean affect valu contradict assumpt ut sequel need follow definit definit vacuiti respect subformula let subformula denot formula vacuou model affect respect set subformula let set subformula formula fj g formula svacuou model exist vacuou definit minim subformula let set subformula defin minim subformula as theorem svacuou iff minsvacu proof svacuou affect sinc finit preorder min use lemma sinc affect affect either mean minsvacu minsvacu min affect therefor svacuou ut follow immedi check vacuiti enough check vacuiti respect minim subformula show logic polar enough check replac subformula either true fals logic polar section defin logic polar first need notat denot model formula valid use follow use notat c denot complement defin mean polar operand defin oper polar final defin logic polar definit polar operand oe nari oper logic say ith operand oe positiveneg polar everi fix two formula say oper polar everi one operand polar posit neg definit logic polar logic polar logic everi oper polar exampl standard boolean logic oper logic polar sinc everi two formula immedi impli operand posit polar singl operand neg polar exampl logic logic polar standard boolean logic addit exclusiveor oper set true get set fals get first case polar second operand neg second posit mean phi polar logic polar proof first note set model ctl formula satisfi subset fk j path structur kg alreadi shown standard boolean oper polar show singl operand path quantifi e posit polar given path k start state doe k impli proceed prove operand u oper posit polar let us fix second operand u oper given integ n st prove k let us fix first operand u given k integ n st prove k final show singl operand oper x posit polar given assumpt k mean k conclud proof ut vacuiti detect logic polar section show logic polar enough check replac subformula either true fals first defin polar subformula present main result section definit polar subformula given formula defin polar subformula recurs posit polar positiveneg polar posit polar ith operand oe positiveneg polar and neg polar otherwis lemma logic polar and witha positiveneg polar proof proof proce induct size formula base case atom posit polar therefor induct step base case otherwis know one two case ith operand oe posit polar case polar therefor accord induct hypothesi sinc ith operand oe posit polar definit ith operand oe neg polar case polar opposit polar therefor induct hypothesi sinc ith operand oe neg polar ut bb defin subset actl set import subformula prove order detect vacuiti respect set enough show j fals minim subformula import subformula see section kv kupferman vardi expand result show ctl formula vacuou iff minim subformula satisfi true iff satisfi fals prove similar result hold logic polar proof practic one kv give sake complet defin semant true fals follow modelg theorem let subformula formula logic polar then everi model follow equival affect posit polar j neg polar otherwis proof affect mean everi specif conclud part proof note everi have two case posit polar use lemma get assumpt contain abov impli everi mean affect assumpt j true argument get everi mean affect neg polar use lemma get assumpt contain abov impli everi mean affect assumpt j fals contain abov impli everi mean affect ut section show enough check vacuiti respect subset subformula section show logic polar enough check replac subformula either true fals combin two result follow corollari corollari logic polar formula set subformula everi model follow equival svacuou min that positiveneg polar otherwis corollari give us abil check vacuiti formula logic polar check rel small number formula size greater precis svacuiti need check check subformula min check new formula x valu x either true fals accord whether valid not polar formula svacuou iff least one formula truth valu sinc ctl logic polar shown result kv use ctl model checker check vacuiti complex ojj delta cm jj cm n complex check formula size n model interest definit vacuiti refin tradit distinct valid nonvalid formula respect model classifi formula either nonvalid vacuous valid nonvacu valid would like make refin method use distinguish class tradit show formula valid mean proof formula nonvalid mean counterexampl defin interest wit mean use show formula nonvacu valid section assum formula question valid model make definit clear use model check problem propositionallog exampl logic standard proposit logic n boolean variabl model nonempti subset set assign n variabl say true assign exampl set assign tautolog preorder counterexampl defin interest wit first formal notion counter exampl requir two thing counterexampl formula exist prove nonvalid formula small second requir natur sinc smaller counterexampl is use user approach defin preorder set model nonvalid smaller model alway prove nonvalid larger one then requir counterexampl model minim respect preorder definit the natur preorder logic given logic l defin natur preorder logic oe l set model oe l iff l natur preorder proposit logic contain proof proposit formula valid assign also valid assign least one assign n variabl defin follow proposit formula true assign equal ff fals ff itself therefor j ut defin counterexampl definit counterexampl logic l model c counterexampl model satisfi follow condit c oe l c j c minim wrt oe l among model satisfi properti follow immedi definit that exist counterexampl return exampl proposit logic show counterexampl expect proposit logic c counterexampl formula model c model one assign proof c counterexampl c j therefor assign ff c ff fals fffg model c j sinc c minim wrt get sinc model we requir model nonempti ut preorder counterexampl tempor logic previous shown case proposit logic definit captur intuit notion counterexampl is sinc motiv paper tempor logic would like examin close properti counterexampl import tempor logic ltl pnu pnueli prove natur preorder ltl accord definit is comput path mg ltl j comput path fg j use argument proof claim show counterexampl alway model one comput path it ctl ctl milner mil prove ctl ctl natur preorder is mean ctl ctl trivial counterexampl model itself inde formula ef p cannot shown fals model less behavior origin sinc might remov state p true note even method specifi larger model counterexampl ctl would still problemat formula ef p agq cannot prove fals use neither larger model smaller one use proof mil shown actl actl natur preorder is logic difficult character counterexampl model alway simul comput path oe actl mean comput path may serv counterexampl instanc counterexampl formula agp path p hold state howev formula model path cannot serv counter exampl formula axpaxp cannot path counterexampl sinc determinist path evalu true counterexampl formula must complex buccafurri eiter gottlob leon address problem detail begl interest wit case nonvalid formula standard model checker provid counterexampl user formula valid use vacuiti check procedur prove nonvacu would like provid interest wit user analog counterexampl prove nonvacu counterexampl prove nonvalid interest wit respect subformula logic l model w interest wit satisfi follow condit w oe l w j vacuou w w minim wrt oe l among model satisfi properti get analog claim claim exist interest wit w iff vacuou proof vacuou w w j again sinc w oe l j mean vacuou set model smaller vacuou nonempti sinc model therefor one minim element set interest wit ut so assumpt valid interest wit prove non vacuiti one subformula would like proof gener nonvacu set subformula and particular set subformula howev singl interest wit alway suffic consid formula model nonvacu singl exampl show nonvacu order show pnonvacu q must set order show qnonvacu p must set sinc j cannot show exampl p q simultan naiv solut would gener one interest wit everi sub formula howev interest wit one subformula may also interest wit differ subformula shown follow proposit proposit assum interest wit w also interest wit proof sinc w interest wit affect w accord affect w mean w interest wit shall use proposit get gener result corollari j svacuou set interest wit everi min also interest wit everi s interest wit gener logic polar section shown logic logic polar check vacuiti much easier gener case result hold interest wit gener lemma logic polar l positiveneg polar follow equival vacuou c proof get c sinc c j x vacuou c get c vacuou c use theorem get c j x ut theorem logic polar l j positiveneg polar follow equival c counterexampl x c interest wit proof follow directli lemma prove two equival omit requir minim ad requir obvious leav equival theorem give us abil easili gener interest wit gener counterexampl formula logic interest wit realli counterexampl one specif formula obtain replac true fals depend polar note formula valid vacuou assum logic polar model checker logic gener counterexampl nonvalid formula enhanc model checker follow properti enhanc modelcheck given formula model set subformula j gener counterexampl j svacuou output subformula min affect j svacuou gener jminsj interest s least one interest wit number formula check formula valid jminsj sinc min gener formula model check valid svacuous valid otherwis model checker return counterexampl interest wit sinc formula gener smaller size get complex enhanc model checker ojminsj delta cm jj cm n complex model check formula size n case svacuou enhanc model checker output minim subformula affect howev user may interest know exactli subformula vacuou achiev goal may need check mani jsj formula practic vacuiti detect interest wit gener motiv work provid indic vacuiti interest wit user model check howev complex result section allow reason time complex determin vacuiti gener interest wit jj time complex model check formula size jj practic term high typic may take hour cpu time verifi would like method determin vacuiti gener interest wit formula expens model check order give effici solut limit subset actl call wactl subset subformula call import subformula respect check vacuiti show complex check vacuiti import subformula wactl exactli complex model check final show exampl section defin witnessactl wactl subset actl turn subset ctl inform wactl formula actl formula binari oper au av least one operand proposit formula divid actl oper propositionaloper tempor oper ax ag af au av call formula proposit oper simpl formula wactl set state formula describ follow definit wactl everi simpl formula state formula f simpl formula state formula ffi binari oper state formula state formula ffi unari tempor oper actl ag af ax ffi state formula definit wactl may seem artifici first glanc howev experi case formula written user wactl formula captur nice linear natur specif import subformula order abl effici check vacuiti gener interest wit w restrict subset subformula vacuiti detect rather drawback show distinguish import nonimport subformula advantag reflect engin use ctl specifi design first defin set import subformula formula respect vacuiti check basic import subformula tempor nonsimpl one definit import subformula let wactl formula defin imp recurs simpl fg nonsimpl f simpl simpl choic made item may seem arbitrari reason f import f operand caus vacuiti af u f caus vacuiti f alway true immedi howev f cannot caus vacuiti f even f alway true forev au oper still requir someth eventu occur av oper f caus vacuiti f alway true forev noth requir f howev f cannot caus vacuiti f alway true immedi case av oper still requir someth f occur time justifi choic tempor subformula binari oper import subformula follow choic simpli reflect engin tend use ctl code specif well tend design hardwar instanc consid follow specif agrequest express requir request accept which happen one cycl appear two cycl later either read busi signal assert write busi signal assert logic equival formula agrequest axreq accept axaxread busi write busi vacuiti formula detect j agrequest would probabl detect problem model otherwis signal call request mean ingless howev vacuiti detect j agaxreq accept axaxread busi write busi quit often useless engin highli like design logic intent so prevent read busi write busi assert spurious assert req accept request previou cycl thu binari oper chosen nonsimpl operand import subformula vacuiti interest wit wactl formula recal impvacu vacuou respect subformula theorem show minimp one subformula it mean impvacu check easi everi wactl size minimp one proof proof proce induct simpl done everi subformula imp subformula therefor mean minim imp use induct hypothesi use argument abov minimp mean second case again use induct hypothesi conclud ut sinc deal actl formula negat appli atom proposit onli way choos import subformula an import subformula never operand get minimp alway posit polar defin formula wit follow accord corollari theorem enough check wit order detect impvacu gener impinterest wit given model checker gener counterexampl actl formula design enhanc model checker wactl see section follow properti given wactl formula model j gener counter exampl output formula pass vacuous j j wit output one interest wit w everi import subformula imp w interest wit detail vacuiti impvacu detect enhanc model checker indic precondit caus vacuiti said befor solv check jimpj formula instead howev specif case actual check log formula one easili prove use proof claim subformula imp linearli order also follow directli lemma vacuou also vacuou combin observ get one minim subformula imp imp vacuou iff mean use binari search imp find implement thi need check log semant refin care reader note definit import subformula detect vacuiti basic case among proposit anteced failur instanc consid follow formula agread request read enabl vacuiti detect and wit gener formula gener formula defin is model fair path thu detect vacuiti case intuit satisfi would like abl detect proposit anteced failur anoth problem shown follow sugar formula agrequest next eventgrantacknowledg formula express requir first grant request must accompani acknowledg actl normal form formula is agrequest agrantv grant acknowledg thu vacuiti detect formula formula defin is agrequest afalsev grant acknowledg simplif formula give agrequest aggrant acknowledg sugar syntact sugar ctl ce formula specif languag use rulebas formal verif tool bb outlin basic featur detect vacuiti case request never follow grant again intuit satisfi next event oper express kind tempor implic thu failur grant occur kind tempor anteced failur would like detect it therefor expand definit import subformula follow simpl oper deriv use oper user simpl implement detail theori comput path infinit therefor everi exampl infinit prac tice howev algorithm cg sometim give finit counterexampl finit counterexampl enough show formula fals everi case one finit counterexampl given cg interest enough purpos except au oper posit exampl au would like see trace occur cg may give us counterexampl afalseu end occur therefor use aaf falseu get infinit counterexampl cg use eg true get infinit exampl exampl show gener interest wit formula use typic sugar formula exampl agrequest next eventdatalast data formula state last data assert fourth data request sinc last data consid nonsimpl becaus second operand next event oper interest wit formula is agrequest next eventdatafals convert formula actl normal form agrequest adatav data axadatav data data axadatav data fals easi see formula valid iff either request never occur request ever follow four data also clear formula found nonvalid counterexampl interest wit formula request follow four data occur examin follow formula express fact requir q occur infinit number time interest wit formula formula ag af fals formula cannot vacuous valid unless fair path inde formula nonvalid nonempti model counterexampl formula comput path q appear infinit mani time becaus formula comparison previou relat work section compar work previou version theori relat work comparison previou work previou version paper bb requir interest wit formula singl path import subformula affect valid requir result practic motiv origin work paper interest wit defin per subformula interest valid demonstr multipl path new definit natur becaus show section allow us guarante interest wit whenev guarante counterexampl thu solv problem rais kv follow grequest consid model two path one path never satisfi request second path alway satisfi grant requir interest wit singl path interest wit formula model despit fact exist counterexampl formula model formula valid comparison relat work work includ bb pp note problem trivial valid shown avoid use handwritten check origin paper bb wa believ first attempt formal notion trivial valid well first attempt detect automat symbol model check philosoph also dealt problem trivial valid relev logic also known relev logic nonstandard logic design prevent paradox materi strict implic occur anteced irrelev consequ formula relev logic deal problem defin new logic approach differ formal notion vacuiti provid method detect leav logic unchang paper use term interest wit mean comput path show one nontrivi exampl valid valid formula first use term interest wit first gener posit exampl valid nonexistenti formula hbk hojati brayton kurshan describ counterexampl gener model check use ctl languag contain use lautomata kur cg clark grumberg mcmillan zhao describ counterexampl wit gener algorithmof smv mcm neither hbk cg produc interest wit valid nonexistenti formula kv kupferman vardi present extens bb wactl ctl result vacuiti present here requir interest wit ctl formula singl path conclus futur work formal notion vacuiti interest wit logic polar shown practic method detect vacuiti gener interest wit wactl formula discuss abov abil detect vacuiti provid interest wit extrem import practic applic model check industri hardwar design although definit vacuiti present simpl eleg still territori left uncov pnueli pnu suggest follow exampl model j agp formula agafp valid intuit tell us user somehow miss point possibl approach solv problem refin definit vacuiti instead check whether subformula replac subformula check whether replac simpler formula term simpler vagu notion immedi exampl p simpler af p agp simpler af p perhap even agp af q simpler apuq possibl improv could done effici vacuiti check instead use model checker black box devis effici model check algorithm specif vacuiti check trivial enhanc would cach intermedi result model checker sinc vacuiti check formula similar r logic relevanceand necess formal verifi microprocessor use simul methodolog rulebas industryori formal verif tool effici detect vacuiti actl formula character finit kripk structur proposit tempor logic on actl formula determinist counterexampl design synthesi synchron skeleton use branch time tempor logic character properti parallel program fixedpoint effici gener counterexampl wit symbol mit press sometim not never revisit branch versu linear time tempor logic model checkingandmodular verif bddbase debug design use languag contain fair ctl vacuiti detect tempor analysi discret event coordin relev logic symbol an algebra definit simul program formal verif commerci serial bu interfac a tempor logic concurr program linear branch structur semant logic reactiv system fair synchron transit system live proof question audienc the computeraid modular framework motiv solut evalu criteria tr myampersandldquosometimesmyampersandrdquo myampersandldquonot nevermyampersandrdquo revisit character finit kripk structur proposit tempor logic model check abstract composit verif formal verifi microprocessor use simul methodolog effici gener counterexampl wit symbol model check rulebas model check symbol model check character correct properti parallel program use fixpoint linear branch structur semant logic reactiv system vacuiti detect tempor model check model check modular verif fair synchron transit system live proof effici detect vacuiti actl formulaa design synthesi synchron skeleton use branchingtim tempor logic analysi discret event coordin bddbase debug design use languag contain fair ctl ctr mat p e heimdahl safeti softwar intens system challeng old new futur softwar engin p may hana chockler orna kupferman mosh y vardi coverag metric tempor logic model check formal method system design v n p may michael w whalen ajitha rajan mat pe heimdahl steven p miller coverag metric requirementsbas test proceed intern symposium softwar test analysi juli portland main usa i pill s semprini r cavada m roveri r bloem a cimatti formal analysi hardwar requir proceed rd annual confer design autom juli san francisco ca usa marsha chechik ari gurfinkel benet devereux albert lai steve easterbrook data structur symbol multivalu modelcheck formal method system design v n p novemb shoham bendavid cindi eisner daniel geist yaron wolfsthal model check ibm formal method system design v n p march