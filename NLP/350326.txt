t integ multipl overflow detect satur a abstracthighspe multipl frequent use generalpurpos applicationspecif comput system system often support integ multipl two nbit integ multipli produc nbit product prevent growth word length processor typic return n least signific bit product flag indic whether overflow occur altern processor satur result overflow posit neg represent number paper present effici method perform unsign two complement integ multipl overflow detect satur method significantli less area delay convent method integ multipl overflow detect satur b introduct multipl multipl essenti arithmet oper gener purpos comput digit signal processor highperform system support parallel multipl hardwar variou highspe parallel multipli propos realiz parallel multipli design divid two class array multipli tree multipli array multipli consist array similar cell gener accumul partial product tree multipli gener partial product parallel use tree counter reduc partial product sum carri vector sum vector use fast carrypropag adder sever method develop reduc partial product regular structur array multipli facilit implement vlsi technolog delay array multipli howev proport operand length hand tree multipli offer delay proport logarithm operand length main drawback tree multipli irregular interconnect structur make difficult implement vlsi thu tree multipli prefer high perform system array multipli prefer system requir less area new implement optim parallel multipli still activ research area detail descript array tree multipli given next chapter overflow avoid grow word length instruct set architectur highlevel languag requir arithmet oper return result length input operand result integ arithmet oper nbit number cannot repres n bit overflow occur need detect integ multipl method overflow detect also depend whether operand sign unsign integ unsign multipl overflow occur result larger largest unsign nbit number sign integ multipl overflow also occur result smaller minimum represent nbit number two complement multipl also differ fraction integ overflow detect sinc overflow occur two complement fraction number gamma multipli gamma easi detect overflow multipli two complement fraction import design issu comput architectur decid overflow occur typic overflow result overflow flag set overflow flag use signal arithmet except satur gener purpos processor overflow handl set except flag recent implement digit signal process multimedia applic satur result overflow posit neg represent number two complement integ gamma neg number posit number unsign integ result larg satur thesi overview previou studi focuss overflow detect two complement addit multioperand addit fraction arithmet oper gener signeddigit arithmet thesi present effici techniqu integ multipl overflow detect satur exist comput detect overflow integ multipl comput nbit product test signific bit see overflow occur method propos thesi calcul n n bit product lead signific reduct area delay chapter present array multipli tree multipli convent method overflow detect chapter introduc new method overflow detect satur unsign integ multipl chapter focus overflow detect satur two complement integ multipl chapter present compon count area delay estim unsign two complement parallel multipli use either convent propos method overflow detect chapter discuss futur work give conclus chapter previou research unsign parallel multipli multipl two nbit unsign number shown figur multipl produc nbit product n least signific bit use result overflow occur actual product use n bit word overflow occur product greater equal n convent method overflow detect nbit result pro duce done simpli logic ore togeth n signific bit n n n n n n n nb b n nb b figur multipl b v one overflow occur denot logic or although calcul n product bit detect overflow lead unnecessari area delay comput provid integ multipl overflow detect use approach system requir satur satur least signific product bit comput set product ngamma overflow occur unsign array multipli gener array multipli slower tree multipli spite speed disadvantag howev array multipli often use due regular layout low area simplifi design block diagram unsign array multipli shown figur diagon figur correspond column multipl matrix figur modifi half adder mha half adder gate modifi full adder mfa full adder gate gate gener partial product full adder half adder add gener partial product sum output connect diagon carri output connect vertic last row adder connect left right gener nmost signific product bit critic path multipli shown dash line sinc almost half latenc due bottom row adder row may replac fast carrypropag adder although decreas overal delay neg impact design regular n n unsign array multipli use n gate n ha convent method overflow detect requir n signific product bit calcul product bit ore togeth produc overflow flag shown figur convent method satur multipl accomplish ore v p p ngamma shown figur mha mha mha mha mha mha mha mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa fa c fa c fa c mfaa c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c mfa mfa ha c fa c fa c fa c figur unsign array multipli convent overflow detect mha mha mha mha mha mha mha mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa fa c fa mfa fa c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c mfa mfa ha c fa c fa c fa c figur unsign array multipli convent satur unsign tree multipli tree multipli three main part partial product gener partial product reduct final carrypropag addit variou reduct scheme develop year two wellknown method multipli tree design propos wallac dadda wallac strategi combin three row partial product bit use counter produc two row dadda strategi lead simpler counter tree requir larger final carrypropag adder hybrid approach two method offer cost speed tradeoff vlsi implement reduct scheme differ number placement counter tree size final carri propag adder tree multipli present thesi use dadda method sinc allow compon count easili determin base n sinc overflow detect method depend reduct strategi similar save expect tree multipli figur show dot diagram unsign array multipli dot diagram often use illustr reduct strategi tree multipli techniqu dot repres partial product bit plain diagon line repres full adder cross diagon line repres half adder two bottom row dot diagram correspond sum carri vector combin use final carrypropag adder produc product dadda multipli requir n gate n figur dadda reduct scheme cpa number stage base n shown tabl exampl dadda multipli requir seven reduct stage worst case delay path equal delay partial product gener plu delay reduct stage plu delay final carrypropag addit convent method overflow detect tree n gamma input gate delay tree gate equival dlog ne input gate shown figur rang n tabl number stage nbit dadda tree multipliersv pp figur tree input gate two complement multipli two complement number b product p valu gammab overflow occur multipl two complement number gener sign partial product shown figur sinc neg weight subtract rather ad make design difficult implement requir adder subtract cell consequ sever techniqu propos handl partial product neg posit weight baughwooley algorithm variat and booth algorithm baughwooley algorithm provid method n x n figur two complement multipl matrix modifi partial product matrix partial product bit posit weight algorithm modifi form often use perform two complement multiplicationb b n b n n n n bna n n figur modifi two complement multipl matrix two complement multipl often realiz use variat baugh wooley algorithm call complement partial product word correct al gorithm implement partial product bit contain both complement one ad column n n gamma equival take two complement two neg term equat multipl matrix implement shown figur two complement array multipli design array multipli use complement partial product word correct algorithm convent overflow detect shown figur design shown figur similar unsign array multipli design figur gate leftmost column replac nand gate last row mfa replac negat modifi full adder nmfa special half adder sha bottom right corner half adder take sum carri bit previou row add cell approxim area delay regular half adder last product bit p ngamma invert add one column n gamma invert p ngamma effect ad one column n gamma carri column ignor figur bottom two row cell consist n xor gate gate dedic overflow detect xor gate identifi whether differ signific product bit p n output xor gate combin determin overflow flag v set logic equat overflow detect flag mha mha mha mha mha mha mfa mfa mfa mfa mfa mfa mha mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa bb c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c fa c fa c fa c nmfa nmfa nmfa nmfa nmfa nmfa nmfa fa c fa c fa c figur two complement array multipl convent overflow detect satur multipl implement ad nbit to multiplex shown figur two complement multipl product over flow satur product determin sign bit b neg overflow occur product satur gamma hand posit overflow occur product satur overflow mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa c mfa c c c c mfa mfa mfa mfa mfa mfa mfa mfa mha mha mha mfa c mha mha mha c andpand c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c c fa c fa c fa c nmfa nmfa nmfa nmfa nmfa fa c fa c fa c mfa mfa nbit mux xand figur convent two complement satur occur satur product n least signific bit satur product two complement tree multipli sever techniqu avail implement two complement multipli tree figur show dot diagram two complement multipli tree use complement partial product algorithm dadda reduct method similar two complement array multipli n gamma partial product bit invert one ad column n n gamma although seem height two column increas ad one effect advers design signific product bit simpli invert sha add one column n figur dot line indic complement partial product bit circl half adder column sha special half adder n n two complement dadda tree multipli fa n gamma bit cpa convent techniqu overflow detect satur two complement tree multipli similar techniqu use two complement array multipli differ tree multipli tend use tree gate rather linear array gate comput overflow flag figur two complement dadda tree multipli chapter overflow detect satur unsign integ multipl gener design approach instead comput n bit product method propos thesi comput n least signific product bit separ overflow detect logic shown figur carri column n also use overflow detect circuit main idea behind propos unsign overflow detect method overflow occur partial product bit column n n gamma overflow detect result operand operand b n n multipli figur block diagram unsign multipl overflow detect carri column n consequ one detect without ad partial product logic equat unsign overflow detect express v overflow flag c th carri column n bit summat correspond logic or bit multipl correspond logic and unsign array multipli overflow detect satur figur show multipl matrix demonstr partial product bit use detect overflow propos method partial product use overflow detect b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b ba b b b b b b b b b b b b b b b b b b b b b b b figur unsign multipl matrix use equat common term logic equat overflow detect use reduc hardwar need detect overflow overflow detect circuit construct use gate shown figur unsign multipl n n multipli three gate dash line replic time three gate combin form overflow detect ovd cell overflow detect use follow iter equat temporari bit initi valu v temporari overflow bit initi valu shown figur ovd cell take input gener output ovd cell contain one gate one input gate one input form unsign multipli propos overflow detect method cell combin unsign array multipli cell use comput p n p ngamma remov shown figur unsign array multipli b aa b c c figur propos overflow detect logic nbit unsign array multipli use propos method overflow detect requir n fa correspond n gate convent method worst case delay path indic dash line figur sinc mfa longer delay ovd cell unsign multipli propos overflow detect logic delay approxim half long unsign multipli convent overflow detect shown figur unsign satur multipl use propos method perform ore overflow bit n least signific product bit shown figur overflow bit produc product n one correspond maximum represent unsign number otherwis product chang requir n gate worst case delay increas one delay mha mha mha mha mha mha mfa mfa mfa mha mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfao v c c c c c c c c c c c c c c c c c c c mfa ovd ovd ovd ovd ovd cccc ovd c figur unsign array multipli propos overflow detect logic mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mfa mha mha mha mha mha mha mha c c c c c c c c c c c c c c c c c c c mfa ovd ovd ovd ovd ovd cccc ovd c figur unsign array multipli propos satur logic unsign tree multipli overflow detect satur unsign tree multipli techniqu use array ovd cell linear delay work well sinc ovd cell would significantli increas multipli worst case delay path instead n partial product bit gener tree gate use determin partial product bit column n ngamma carri column n one method shown multipli figur symbol o denot output input gate although method requir hardwar overflow detect unsign array multipli overflow detect logic logarithm delay longer contribut significantli critic path n n unsign array multipli use method n ha n fa sinc delay gate overflow detect less delay partial product reduct stage worst case delay equal delay partial product gener plu partial product reduct plu n gamma bit carrypropag addit plu one gate delay includ final carri out satur multipl perform method use array multipli overflow bit ore n least signific bit product figur unsign tree multipli propos overflow detect logic chapter overflow satur detect two complement integ multipl gener approach propos method overflow detect two complement multipl detect number consecut bit equal sign bit essenti method count number lead zero operand posit number lead one operand neg exampl three lead one four lead zero method work number lead zero one indic magnitud operand operand lead zero one smaller magnitud therefor less like caus overflow main issu determin mani lead zero lead one need guarante overflow occur overflow occur block diagram show propos approach shown figur analysi two complement multipl three case depend operand sign operand posit operand neg one posit neg overflow region three case discuss follow section case operand posit let za denot number lead zero operand zb denot number lead zero operand b sinc operand posit nbit integ least one n lead zero express rang operand operand b term number lead zero express overflow detect operand operand b multipli n n figur block diagram propos method two complement multipl overflow detect overflow occur case overflow occur base rang p use overflow guarante occur determin number lead zero b guarante overflow rewritten take base logarithm side give equival thu b togeth less n lead zero overflow must occur similarli overflow guarante occur determin number lead zero b guarante overflow occur equat rewritten sinc gamma ngammaz gamma gamma ngammaz b gamma consequ overflow guarante occur take base logarithm side give equival use alway true sinc za zb therefor rewritten thu overflow guarante occur b togeth n lead zero cannot directli determin whether overflow occur examin number lead zero rewrit problem howev solv analyz happen za n result obtain far summar figur overflow overflow undetermin figur overflow region za determin whether overflow occur necessari calcul mani product bit need repres result za n use signific product bit sign bit operand overflow flag set n even maximum product equival n odd maximum product equival thu za alway repres n bit overflow determin simpli examin sign bit p ngamma p otherwis overflow occur case operand neg let denot number lead one operand b denot number lead zero operand b sinc operand neg nbit integ least one n lead one express rang b term lead one express gamma ngammai gamma overflow occur case overflow occur base rang p use overflow guarante occur determin number lead one b guarante overflow occur rewritten sinc valu satisfi also satisfi take base logarithm side give thu neg integ overflow occur operand less lead one use overflow guarante occur take base logarithm side equat give thu overflow guarante occur b togeth lead one cannot directli determin overflow occur seen use give similarli result far shown figur undetermin overflow overflow figur overflow region even maximum result n odd maximum product repres use n bit except occur case sign operand differ let denot number lead one operand zb denot number lead zero operand b neg operand least one n lead zero posit operand b least one n lead one express rang b term lead one zero gamma ngammai gamma overflow occur case p gamma occur p gamma base rang p use equat overflow guarante occur equival zb alway true sinc use overflow guarante occur gamma equival rang cannot determin whether overflow occur sinc figur show graphic result obtain far case overflow overflow undetermin figur overflow region zb even minimum neg number n odd case product repres use n bit therefor overflow occur p far propos method explain mathemat next section implement overflow logic present overflow detect logic allow posit neg operand use hardwar detect lead zero one sign bit xnore remain bit take gate express logic logic design detect n gamma fewer lead zero lead one includ gate gate use comput ba ngammakgamma preliminari overflow flag gener use xi yi bit product correspond logic and bit summat correspond logic or equat implement use n gamma input gate gate v one total number lead zero lead one less n case overflow guarante occur addit logic use detect overflow undetermin region case case when detect case neither b zero n least signific bit zero case when neither b zero detect logic equat realiz input gate invert n gate final overflow flag v gener ore previou flag overflow detect circuit requir n gamma gate four invert overflow detect circuit bit two complement multipli shown figur bb figur logic v bit multipl least signific z figur detect logic bit two complement multipl altern method altern method detect overflow undetermin case is instead gener product bit multipli gener product bit detect undetermin case check p n phi p approach shown figur approach work sinc undetermin case follow situat overflow occur case overflow occur one except gener p case overflow occur three case overflow detect two complement array multipli overflow detect satur propos method overflow detect array multipli requir half much hardwar convent method bit two complement multipli n n multipli operand detect figur block diagram propos altern method two complement multipl overflow detect propos method overflow detect shown figur xa cell contain one input xor gate one input gate xa cell contain one input xor gate one input gate xna contain two input xor gate one input nand gate two complement array multipli propos overflow detect logic input xor gate one input xor gate four invert delay multipli approxim equal delay n gamma plu four input gate plu three input gate actual delay may differ accord variou design decis technolog use overflow detect mfa mfa mfa mfa mfa mfa mfa mfa mfa b b mfa aa mfaa mfa mfa mfa mha mha mha mha mha mha c c c c c c c c c c c c c nand figur overflow detect logic bit two complement multipl two complement satur multipl perform use v flag flag use input nbit to multiplex shown figur neg overflow occur result satur gamma posit overflow occur result satur ad satur logic array multipli overflow detect requir addit invert nbit to multiplexor sinc v alreadi gener overflow detect logic requir addit hardwar delay increas delay to multiplex plu delay invert overflow detect c c c c c mfa c ss mfab mfa mfa mfa mfa mfa mfa mfa mfa mfab mfa mfamfa mha mha mha mha mha c c c c c c c c nand mfa nbit mux figur satur two complement array multipl two complement tree multipli overflow detect satur altern method use tree multipli method n bit product comput v comput approach first method overflow flag gener use logic equat explain section sinc detect circuit independ multipl process n partial product bit need gener consequ gate counter gener reduc partial product bit column n multipl matrix longer need size carrypropag adder reduc n bit sinc least signific product bit use reduct independ strategi use design tree multipli reduct scheme dadda multipli use altern method shown figur diagon line x bottom input xor gate diagon tilda x bottom repres input xnor gate xs use denot carri output requir worst case delay main constraint custom design altern design method consid implement overflow detect logic two complement dadda multipli propos overflow detect n gate one nbit cpa worst case delay multipli also less convent techniqu altern methodth worst case delay equal delay reduct stage plu delay n adder plu one input gate plu one input xor gate plu one input gate two complement satur multipl logic dadda tree multipli similar logic array multipli nbit to multiplex invert ad shown figur except partial product bit p ngamma connect overflow detect logic control signal v to multiplex gener detect logic delay increas delay invert plu delay to multiplex figur dadda dot product scheme propos overflow detect chapter result area delay estim theoret compon count worst case delay given variou multipli tabl tabl tabl u denot unsign sign denot array tree multipli p c denot propos convent tabl tabl give number compon size cpa base operand length n tabl give number type compon worst case delay path propos method reduc number gate fa array multipli reduc number gate fa size cpa tree multipli propos method also reduc delay array tree multipli sinc signific product bit longer calcul multipli number compon type inv nand tabl compon count nbit multipli overflow detect i multipli number compon type xor xnor ha fa cpa tabl compon count nbit multipli overflow detect ii multipli number compon worst case delay path type inv xor ha fa cpa tabl worst case delay nbit multipli overflow detect tabl unsign array multipli overflow detect possibl reduc amount logic requir implement detect circuit even further propos method use straight forward implement logic equat structur present previou chapter synthesi tool use optim design consequ valu shown tabl tabl consid worst case valu optim perform gate level vhdl code variou size array dadda tree multipli gener convent propos method overflow detect vhdl code synthes optim area use lsi logic micron gate array librari leonardo synthesi tool exemplar logic synthesi tool set nomin oper voltag volt temperatur ffi c area estim report equival gate delay estim report nanosecond tabl give area delay estim unsign array multipli compar multipli use convent overflow detect propos multipli less area less delay tabl unsign dadda tree multipli overflow detect convent propos reduct n area delay area delay area delay tabl sign array multipli overflow detect gain mainli due reduct area delay fa use gener n signific product bit tabl give area delay estim unsign dadda tree multipli compar multipli use convent overflow detect method multipli use propos method approxim less area less delay improv due reduc number fa reduc size final carrypropag adder n gamma tabl give area delay estim two complement array multipli compar multipli use convent method multipli use propos method requir less area tabl sign dadda tree multipli overflow detect tabl give area delay estim two complement dadda tree mul tiplier compar multipli use convent method multipli use propos method less area less delay chapter conclus futur research conclus overflow detect satur method present thesi significantli reduc area delay array tree multipli multipli size examin area reduc unsign multipli compar convent method propos method also chang regular multipli structur two complement multipli propos method complet independ multipli intern structur featur provid design increas flexibl sinc add overflow detect logic without effect origin design reduct multipli hardwar also lead reduc power dissip propos method reduc delay array multipli futur research thesi separ present overflow detect satur method unsign two complement parallel multipli import next step develop singl multipli structur perform unsign two complement integ multipl overflow detect satur base input control signal anoth area futur research investig techniqu reduc area overflow detect multipli tree without significantli impact delay research may abl take advantag hybrid structur less delay linear overflow detect structur less area overflow detect tree anoth research area investig reduct power dissip due propos techniqu anticip signific reduct power dissip achiev due reduct multipli hardwar method similar propos method also use arithmet oper need overflow detect multiplyaccumul squar r scheme parellel multipli suggest fast multipli a ns bit array multipli parallel reduc area multipli a reduct scheme optim wallac multipli a two complement parallel array multipl algorithm comment two complement parallel array multipl algorithm synthesi comparis two complement parallel multipli comput architectur quant approach second edi tion parallel satur fraction arithmet unit fixedpoint overflow except detect programm highperform iir filter chip overflow indic two complement arith metic overflow detect multioperand addit zero sign overflow detect scheme gener sign arithmet a sign binari multipl techniqu tr ctr eya elqawasmeh ahm dalalah revisit integ multipl overflow proceed th wsea intern confer softwar engin parallel distribut system p februari salzburg austria eya elqawasmeh ahm dalalah revisit integ multipl overflow proceed th wsea intern confer softwar engin parallel distribut system p februari salzburg austria