t effici regist memori assign nonorthogon architectur via graph color mst algorithm a find optim assign program variabl regist memori prohibit difficult code gener applic specif instructionset processor asip mainli becaus order meet stringent speed power requir embed applic asip commonli employ nonorthogon architectur typic character irregular data path heterogen regist multipl memori bank result exist techniqu mainli develop rel regular orthogon generalpurpos processor gpp obsolet recent emerg asip architectur paper attempt tackl issu exploit convent graph color maximum span tree mst algorithm special constraint ad handl nonorthogon asip architectur result studi indic algorithm find fairli good assign variabl heterogen regist multimemori run extrem faster previou work employ exceedingli expens algorithm address issu b introduct embed system design strive meet cost perform goal demand applic complex processor ever increasingli optim certain applic domain embed system optim need process design space explor find hardwar configur meet design goal final configur processor result design space explor usual instruct set data path highli tune specif embed applic sens collect call applic specif instructionset processor asip asip typic nonorthogon architectr character irregular data path contain heterogen regist multipl memori bank exampl architectur figur show motorola dsp commerci offtheshelf asip specif design digit signal process dsp applic note data path architectur lack larg number central generalpurpos homogen regist in stead multipl small regist file differ file distribut dedic differ set function unit also note employ multimemori bank architectur consist program data memori bank architectur two data memori bank connect two independ data buse convent von neumann architectur singl memori bank type memori architectur support mani embed processor analog devic adsp dsp group pinedspcor motorola dsp nec upd one obviou advantag architectur access two data word one instruct cycl multimemori bank architectur shown effect mani oper commonli found embed applic n real multipli exampl see applic oper ideal rate processor two data memori bank multipli alu shifterlimit shifter address alu address alu memori global data bu memori agu figur motorola dsp data path dual data memori bank x two variabl xi yi fetch simultan ousli but also see ideal speed oper possibl one condit variabl assign differ data memori bank instanc follow dsp assembl code implement n real multipli array x assign respect two memori bank x y move xrx yri mpyr xya xrx yri nend mpyr xya axr yri move xrx move axr unfortun sever exist vendorprovid compil test abl exploit hardwar featur dual data memori bank effici therebi fail gener highli optim code target asip inevit impli user asip handoptim code assembl fulli exploit dual memori bank make program processor quit complex time consum paper describ implement two core techniqu code gener nonorthogon asip regist alloc memori bank assign regist alloc decoupl two phase handl heterogen regist architectur asip follow physic regist classifi set regist class collect regist dedic machin instruct and regist classif algorithm alloc temporari variabl one regist class convent graph color algorithm slightli modifi assign temporari physic regist within regist class previous alloc it memori bank assign whose goal effici assign variabl multimemori bank asip also decoupl two phase follow maximum span tree mst algorithm use find memori bank assign variabl initi bank assign mstbase algorithm improv graph color algorithm also use regist assign algorithm differ previou work assign variabl heterogen regist multimemori bank separ decoupl code gener phase shown abov previou work singl tightlycoupl phase report later paper perform result quit encourag first all found code gener time dramat reduc factor four magnitud order result somewhat alreadi expect decoupl code gener phase greatli simplifi regist bank assign problem overal meanwhil benchmark result also show gener code nearli ident qualiti code gener coupl approach almost everi case section discuss asip architectur target work section present algorithm section present experi addit result recent obtain sinc earlier preliminari studi section conclud discuss target machin model section character nonorthogon architectur asip two properti formal defin regist architectur start section first present follow definit definit given target machin let ng set instruct defin r rmg set regist instruct defin set operand opi g assum c jl set regist appear posit operand jl l k say c jl form regist class instruct definit definit defin j collect distinct regist class instruct j follow fc jl g thi turn defin follow say whole collect regist class machin see differ homogen heterogen regist architectur first consid sparc exampl processor homogen regist typic instruct sparc three operand op code reg regist file appear first operand reg case set regist form singl regist class op code sinc operand reg j regk regist appear form class instruct thu one regist class defin instruct op code hand dsp instruct form multipli first two operand place product third operand dsp restrict reg reg j input regist x x y y regk accumul b case two regist class defin mpya fx x y yg reg reg j fabg regk exampl j op code mpya are re spectiv ygfabgg say typic processor n gener purpos regist like sparc homogen regist architectur mainli usual set singl element consist n regist processor which definit equival mean n regist homogen machin instruct case dsp howev regist dedic differ machin instruct make partial homogen subset machin instruc tion exampl see even one instruct like mpya dsp two differ set homogen reg ister xyn ab list whole collect regist class defin dsp tabl gener say machin complex regist class heterogen regist architectur id regist class physic regist y tabl regist class motorola dsp multipl data memori bank exampl multimemori bank asip use dsp whose data path shown figur alu oper divid data oper address oper data alu oper perform data alu data regist consist four bit input regist x x y two bit accumul b address alu oper perform address gener unit agu calcul memori address necessari indirectli address data operand memori sinc agu oper independ data alu address calcul occur simultan data alu oper shown figur agu divid two ident halv address alu two set bit regist file one set regist file four address regist r r also four address regist r r address output multiplex select sourc xab yab sourc effect address may output address alu index address address regist registerindirect address everi cycl address gener alu use access two word parallel x memori bank consist word bit memori possibl memori refer mode dsp four type x y l xy x memori refer mode operand singl word either x memori bank l memori refer mode operand long word two word x memori referenc one operand address xy memori refer mode two independ use move two word operand memori simultan one word operand x memori word operand memori independ move data cycl call parallel move figur see two data buse xdb ydb connect data path dsp two data memori bank x y respect buse parallel move made memori data regist architectur featur dsp like asip multimemori bank allow singl instruct perform one data alu oper two move oper parallel per cycl certain condit due hardwar constraint case dsp follow parallel move condit met maxim util dual memori bank architectur two word address differ memori bank memori indirect address mode use address regist use address word and address regist involv parallel move must differ set among two regist file agu implement attempt make parallel move condit meet code mani parallel move possibl gener registerallocationandmem section detail code gener phase regist alloc memori bank assign briefli describ section explain step step code gener produc final code use exampl dsp assembl code shown figur code obtain immedi instruct select phase note still sequenti unoptim form initi code given subsequ phase optim dual memori architectur dsp describ section move a r mac r r r move lowr lowv move highr highv move d r move e r move f r mac r r r move lowr loww move highr highw figur exampl uncompact dsp assembl code produc instruct select regist class alloc compil instruct select decoupl regist alloc subsequ phase fact mani convent compil gcc lcc zephyr target gpp also separ two phase separ regist alloc instruct select rel straightforward compil target gpp gpp homogen regist within singl class possibl class regist is instruct select phase instruct need regist assign symbol temporari which later regist alloc phase map avail regist regist class asip howev regist class individu instruct may differ regist may belong mani differ regist class see tabl impli relationship regist instruct tightli coupl select instruct somehow also determin regist class regist assign instruct therefor phasecoupl techniqu cleverli combin close relat phase norm compil gener code asip howev phase coupl may creat mani constraint code gener thu increas compil time tremend case previou work compar approach section reliev problem decoupl approach still handl heterogen regist structur implement simpl scheme enforc relationship bind two separ phase insert anoth phase call regist class alloc them scheme repres regist two notion regist class regist number class regist class alloc phase temporari alloc physic regist set possibl regist that is regist class place operand instruct physic regist select among regist class instruct later phase call regist assign sinc focu paper regist class alloc cannot discuss whole algorithm here refer detail regist class alloc code figur shown below associ temporari ri referenc code regist class alloc regist assign code compact phase result reduc code size also exploit machin instruct perform parallel oper one add plu parallel move figur show result instruct code figur compact see compact code one mac multiplyandadd two move combin singl instruct word two move combin one parallel move instruct use tradit list schedul algorithm code compact move ar br move cr dr mac r r r er fr mac r r r lowrlowv move highrhighv lowrloww move highrhighw figur code sequenc compact code figur memori bank assign regist class alloc code compact variabl result code assign one set memori bank in exampl bank x dsp section present memori bank assign techniqu use two wellknown algorithm use mst algorithm memori bank assign phase use mst al gorithm first step basic phase construct weight undirect graph call simultan refer graph srg graph contain variabl referenc code node edg srg mean variabl v j vk referenc within instruct word compact code figur a show srg code figur weight edg two variabl repres number time variabl referenc within word c e f c e f a srg move xar ybr move xcr ydr mac r r r xer yfr mac r r r lowrxlowv move highrxhighv lowryloww move highryhighw c memori bank assign b assign memori bank figur code result memori bank assign determin srg built code figur accord parallel move condit two variabl referenc instruct word must assign differ memori bank order fetch singl instruct cycl otherwis extra cycl would need access them thu strategi take maxim memori throughput assign pair variabl referenc word differ memori bank whenev po sibl conflict occur two pair variabl variabl one pair appear frequent word shall higher prioriti pair notic frequenc denot weight srg figur b show variabl a c e v assign x memori remain one b d f w memori optim pair variabl connect via edg assign differ memori x y thu avoid extra cycl fetch variabl seen result code figur c case variabl v w still need two cycl move long type variabl doubleword length howev also benefit optim memori assign half variabl move togeth cycl memori bank assign problem face realiti alway simpl one figur illustr realist complex case problem consid figur srg five variabl b maximum span tree a srg figur complex exampl simultan refer graph maximum span tree construct view process assign n memori bank divid srg n disjoint subgraph is node subgraph assign memori bank correspond subgraph compil therefor tri obtain optim memori bank assign given srg find partit graph minimum cost accord definit definit let e connect weight graph v set node e set edg let weight edg e e suppos partit graph g divid g n disjoint subgraph g cost partit p defin find optim partit minimum cost anoth npcomplet problem so develop greedi approxim algorithm ojejjv jlgjv iti shown figur sinc practic jej jv j problem algorithm usual run fast ojv jlgjv algorithm assum virtual exist asip two data memori bank but algorithm easili extend handl case memori bank assign algorithm first identifi maximum span tree mst srg given connect graph g span tree g connect acycl subgraph cover node g mst span tree whose total weight edg less span tree g one interest properti span tree bipartit graph tree actual bipartit so given span tree graph g obtain partit p g g by start arbitrari node say u assign g node even distanc u g odd distanc u base observ algorithm design first identifi span tree srg then comput partit it use heurist choos ordinari span tree maximum span tree rational heurist that build partit mst elimin heavyweight edg mst therebi increas chanc reduc overal cost result partit unfortun construct partit mst guarante optimum solut but accord earlier preliminari work notion mst provid us crucial idea find partit low cost turn necessari find nearoptim memori bank assign instanc algorithm find optim partit srg figur find mst algorithm use prim mst algorithm algorithm global is appli across basic block node follow sequenc repeatedli iter srg node mark algorithm edg prioriti queue q sort order weight edg highest weight remov first one edg highest weight one insert first remov note simultan refer graph gsr necessarili con nect oppos assumpt made abov therefor creat set mst one connect subgraph gsr also note algorithm least one node w z alway mark edg mark node u alway insert q earlier algorithm figur b show span tree obtain algorithm appli srg given figur a see x memori assign even depth memori odd depth tree use graph color algorithm graph color approach tradit use regist alloc mani compil central idea graph color partit variabl separ live rang live rang candid alloc regist rather entir variabl found idea also use improv basic memori bank assign describ section relax namerel constraint variabl assign input simultan refer graph output set vsr whose node color either x algorithm set mst q prioriti queue node v vsr unmark v select unmark node inv sr return everi node vsr mark creat new mst find mst connect subgraph gsr mark u eu set edg incid u sort element eu incres order weight add q remov edg highest prioriti q z unmark w unmark od u mark node connect subgraph gsr visit select unmark node inv sr select node anoth subgraph ani gsr add st i creat new mst od node v vsr uncolor v everi mst st assign variabl s memori bank x next visitor q node vsr xcolor node vsr color select arbitrari node v node xcolor color v color els node ycolor color v xcolor repeat everi node u adjac v u color color u color differ color v append u next visitor q extract one node next visitor q node color od node vsr xcolor node vsr color xcolor node color one uncolor node v vsr color v color m els break color node color one uncolor node v vsr color v xcolor m els break uncolor node v vsr color v altern x color return figur memori bank assign algorithm dual memori memori bank approach build undirect graph call memori bank interfer graph determin live rang conflict could assign memori bank disjoint live rang variabl assign differ memori bank give new name live rang addit flexibl graph color approach sometim result effici alloc variabl memori bank show section two techniqu call name split merg newli implement help memori bank assign benefit graph color approach exampl figur simpl illustr thi henc let us consid anoth exampl figur serv clarifi variou featur techniqu c e f f c move cr dr mac rr r er fr mac rr r ra cr add rr r rd er move ar dr b c e f cost a result code compact b live rang variabl c srg d partit memori move xar ybr move xdr ycr mac rrr xfr yer mac rrr rxa ycr add rrr rxd yer move rxd assign figur code exampl data structur illustr name split merg figur a show exampl code gener code compact figur b depict live rang variabl note variabl multipl live rang figur c d show srg assign variabl memori bank see singl parallel move cannot exploit exampl assign data memori final figur e show result code memori bank assign use mst algorithm memori partit inform figur d figur show name split improv exampl figur name split techniqu tri reduc code size compact memori refer parallel move instruct techniqu base wellknown graph color approach therefor instead present whole algorithm describ techniqu exampl given figur see figur a live rang variabl candid assign memori bank exampl two variabl disjoint live rang split is live rang variabl given differ name figur b c show modifi srg improv assign variabl memori bank figur d demonstr that consid live rang oppos entir variabl bank assign place two live c e f e c a live rang local variabl renam b srg c partit memori move xar ybr move xdr ycr mac rrr xfr yer mac rrr rxa yc r add rrr rxd yer move xar ydr move rxd d result name split figur name split local variabl rang differ memori bank allow us exploit parallel move elimin one move instruct code figur e although name split help us reduc code size may increas data space monitor figur mitig problem merg name name split figur show data space exampl improv use name merg earlier exampl split two name accord live rang a new name assign memori bank note live rang conflict mean turn assign locat memori e c f b c e f a live rang merg b partit memori figur name merg local variabl compil merg nonconflict live rang variabl case variabl a also merg nonconflict live rang differ variabl see figur b two name b merg save one word memori key idea name split merg consid live rang instead entir variabl candid assign memori bank seen exampl compil potenti reduc number execut instruct exploit parallel move number memori word requir shown work appli graph color techniqu assign variabl memori bank greater potenti improv appli techniqu regist assign reason number memori bank typic much smaller number regist therebi algorithm name split merg practic polynomi time complex even though name split merg basic use theoret npcomplet graph color algorithm is asymptot time requir name split merg scale worst case data memori bank yet much faster convent graph color regist allo cation whose time complex onm n typic gpp alreadi empir proven practic regist alloc high complex run polynomi time thank numer heurist prune name split merg demonstr section regist assign memori bank determin variabl code physic regist assign code thi use graph color algorithm special constraint ad handl nonorthogon architectur explain constraint recal alloc regist class temporari earlier regist class alloc phase regist assign temporari assign one physic regist among regist class alloc temporari exampl temporari r figur shall replac one regist among four candid regist class current alloc r shown section addit regist class constraint regist assign also need consid addit constraint certain type instruct instanc regist assign instruct contain parallel move figur must meet follow architectur constraint dual memori bank data memori bank move predefin set regist constraint also due partial heterogen regist architectur asip back exampl figur variabl parallel move r alloc memori x therefor regist elig r confin x x physic regist alreadi assign instruct regist spill occur satisfi constraint regist class memori bank graph color algorithm assign temporari physic regist code figur show result code regist assign appli code shown figur c see figur memori refer code repres symbol term variabl name like b convert real one use address mode provid machin convers done memori offset assign phase come regist assign final phase appli algorithm similar maximum weight path mwp algorithm origin propos leuper marwed move xrx yri move xra yri mac x y xrx yrb figur result code regist assign memori offset assign compar empir studi evalu perform memori bank assign algorithm implement algorithm conduct experi benchmark suit dsp perform measur two metric size time section report perform obtain exper iment compar result work comparison previou work recent code gener asip receiv much attent main stream convent compil research one promin exampl compil studi target asip may araujo malik propos lineartim optim algorithm instruct select regist alloc instruct schedul express tree like previou studi asip algorithm design specif multimemori bank ar chitectur best knowledg earliest studi address problem regist memori bank assign saghir et al howev work differ target asip heterogen regist assum processor larg number central generalpurpos regist token approach also differ raw project mit sinc memori bank assign techniqu neither assum heterogen regist even asip recent problem extens address project call spam conduct research princeton mit fact spam close relat work current avail us therefor work compar algorithm experi set benchmark target processor comparison code size figur list benchmark compil spam compil our benchmark adpcm dspstone suit reason could port spam success machin plat form so number spam figur borrow literatur comparison experiment result convolut complex_multipli iir_biquad_n_sect least_mean_squar matrix_multiply_ adapt_qu adapt_predict_ iadpt_quant scale_factor_ speed_control_ tone_detector_ benchmark size ratio figur ratio code size spam code size figur display size ratio code spam code is spam code size code size normal spam code size figur see size output code compar code overal fact seven benchmark twelv output code smaller spam code result indic memori bank assign algorithm effect simultan refer alloc algorithm case comparison compil time compil demonstr compar perform code size differ compil time signific depict figur accord literatur experi spam conduct sun microsystem ultra enterpris featur eight processor gb ram unfortun could find exactli machin use instead experi sun microsystem ultra enterpris two processor gb ram convolut complex_multipli iir_biquad_n_sect least_mean_squar matrix_multiply_ adapt_qu adapt_predict_ iadpt_quant scale_factor_ speed_control_ tone_detector_ benchmark compil time ratio figur ratio in log scale compil time compil spam compil see figur compil time roughli three four order magnitud faster despit differ machin platform therefor believ larg differ compil time clearli demonstr advantag approach term compil speed compar experi show evid compil time spam may increas substanti larg ap plicat oppos our found long compil time spam compil result fact use coupl approach attempt deal regist memori bank assign singl combin step sever code gener phase coupl simultan consid address issu is approach variabl alloc physic regist time assign memori bank support coupl approach build constraint graph repres multipl constraint optim solut problem sought unfortun multipl constraint graph turn problem typic multivari optimum problem tractabl npcomplet algorithm coupl approach multivari constraint unavoid variou constraint mani heterogen regist multimemori bank involv find optim refer alloc simulta neousli consequ avoid use expens algorithm inevit resort heurist algorithm call simul anneal base mont carlo approach howev even heurist observ literatur compil still take second even moder size program mainli number constraint constraint graph rapidli becom larg complic code size increas see slowdown compil obvious caus intrins complex coupl approach con trast compil time stay short even larger bench mark credit mainli decoupl approach facilit applic variou fast heurist algorithm individu conquer subproblem encount code gener process dual memori bank system specif approach regist alloc decoupl code compact memori bank assign therebi bind physic regist temporari come code compact variabl assign memori bank could initi expect degrad output code qualiti due limit newli introduc consid physic regist bind separ memori bank as signment howev conclud result care decoupl may allevi drawback practic maxim advantag term compil speed often critic factor industri compil comparison execut speed estim impact code size reduct run time gener three version code follow uncompact first version uncompact code shown figur gener immedi instruct select phase compileroptim uncompact code optim dsp use techniqu section produc code like one figur handoptim uncompact code optim hand handoptim code compil use input handoptim one may provid us upper limit perform benchmark dsp execut time compar figur ratio speedup improv produc compil optim handoptim compar speedup produc uncompact code instanc compil optim code complex multipli achiev speedup uncompact code handoptim code achiev addit speedup tantamount total uncompact code figur see averag speedup compileroptim code uncompact code handoptim code compileroptim code result indic compil achiev roughli half speedup could get hand optimiza tion although number may satisfactori result also indic that six benchmark twelv compil achiev greater part perform gain achiev hand optim cours also sever benchmark firdim convolut least mean squar compil much room improv accord anal ysi main caus creat differ executionfirdim convolut complex_multipli iir_biquad_n_sect least_mean_squar matrix_multiply_ adapt_qu adapt_predict_ iadpt_quant scale_factor_ speed_control_ tone_detector_ benchmark ompil figur speedup execut time compil optim handoptim code execut time unoptim code time compilergener code hand optim code incap compil effici handl loop illustr thi consid exampl figur show typic exampl softwar pipelin requir optim loop l mov xax ybi mpi xya xcx ydi add xya mov axe a compil compact code approach l mov xax ybi mpi xya xcx ydi add xya mov axe a compil compact code approach mov xax ybi l mpi xya xcx ydi add xya xax ybi mov axe b handoptim compact code figur compact differ compil code handoptim code notic exampl parallel move variabl b cannot compact instruct word contain add depend mpi them howev place one copi parallel move preambl loop merg move add although optim may reduc total code size elimin one instruct within loop undoubtedli would reduc total execut time notic exampl inform us that sinc execut time spent loop compil cannot match hand optim run time speed without advanc loop opti mizat softwar pipelin base rigor depend analysi current issu remain futur research conclus paper propos decoupl approach support dual memori architectur six code gener phase perform separ also present name split merg addit techniqu compar work spam analyz pro con decoupl approach oppos coupl approach compar analysi experi reveal compil achiev compar result code size yet decoupl structur code gener simplifi data alloc algorithm dual memori bank allow algorithm run reason fast analysi also reveal exploit dual memori bank care assign scalar variabl bank brought speedup run time howev analysi expos sever limit current techniqu well instanc approach limit scalar variabl expect memori bank assign array achiev larg perform enhanc comput perform array number crunch program actual illustr figur even highli handoptim code could make signific perform improv term speed although made visibl differ term size mainli impact scalar variabl perform rel low compar space occupi code anoth limit would perform memori bank assign argument pass via memori function would requir interprocedur analysi sinc caller must know memori access pattern calle pass argument also certain loop optim techniqu like list section need implement improv execut time output code r challeng code gener embed processor code gener fixedpoint dsp compil support scalabl effici memori system regist alloc spill via graph color effici fast alloc onchip dual memori bank portabl optim digit signal processor algorithm address assign dsp code gener retarget compil embed core processor code gener embed processor motorola inc shortest connect network gener exploit dual datamemori bank digit signal processor code optim librari retarget compil embed digit signal processor simultan refer alloc code gener dual data memori bank asip tr exploit dual datamemori bank digit signal processor algorithm address assign dsp code gener code gener fixedpoint dsp simultan refer alloc code gener dual data memori bank asip portabl optim digit signal processor compil support scalabl effici memori system retarget compil embed core processor code gener embed processor regist alloc myampersandamp spill via graph color studi data alloc onchip dual memori bank code optim librari retarget compil embed digit signal processor ctr yihsuan lee cheng chen effect effici code gener algorithm uniform loop nonorthogon dsp architectur journal system softwar v n p march g grwal s coro d banerji a morton compar genet algorithm penalti function repair heurist dsp applic domain proceed th iast intern confer artifici intellig applic p februari innsbruck austria chungi lyuh taewhan kim memori access schedul bind consid energi minim multibank memori system proceed st annual confer design autom june san diego ca usa jeonghun cho yunheung paek david whalley fast memori bank assign fixedpoint digit signal processor acm transact design autom electron system toda v n p januari rajiv a ravindran robert m senger eric d marsman ganesh s dasika matthew r guthau scott a mahlk richard b brown increas number effect regist lowpow processor use window regist file proceed intern confer compil architectur synthesi embed system octob novemb san jose california usa rajiv a ravindran robert m senger eric d marsman ganesh s dasika matthew r guthau scott a mahlk richard b brown partit variabl across regist window reduc spill code lowpow processor ieee transact comput v n p august zhong wang xiaobo sharon hu energyawar variabl partit instruct schedul multibank memori architectur acm transact design autom electron system toda v n p april xiaotong zhuang santosh pand parallel loadstor dualbank memori embed processor acm transact embed comput system tec v n p august yihsuan lee cheng chen effici code gener algorithm nonorthogon dsp architectur journal vlsi signal process system v n p june zhong wang xiaobo sharon hu power awar variabl partit instruct schedul multipl memori bank proceed confer design autom test europ p februari