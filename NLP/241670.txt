t parallel direct execut simul messagepass parallel program a abstracta massiv parallel comput prolifer grow interest find way perform massiv parallel code effici predict problem aris divers context parallel compil parallel perform monitor parallel algorithm develop paper describ one solut one directli execut applic code use discreteev simul model detail presum parallel machin oper system commun network behavior approach comput expens interest parallel specif parallel discreteev simul describ method suitabl parallel direct execut simul messagepass parallel program report perform system laps larg applic parallel simul environ built intel paragon code measur date laps predict perform well typic within rel error depend natur applic code observ low slowdown rel nativ execut code high rel speedup use processor b introduct perform predict andor analysi parallel program current import area research especi parallel comput come domin high perform comput arena writer parallel compil would like abl predict perform aid toward gener effici highli parallel code user perform instrument tune tool interest predict observ parallel perform must deal fact instrument code may perturb measur develop new parallel algorithm interest predict well perform new algorithm scale increas problem size machin architectur gener user may interest perform tune code larg number processor which infrequ avail use fewer readili avail resourc design new commun network interest evalu design realist workload method direct execut simul applic code offer solut problem direct execut simul applic code directli execut obtain inform applic execut behavior refer applic code simul virtual machin trap simul point view applic code run virtual machin thu applic execut tempor call what wallclock time now or is messag type avail now respons depend state virtual machin simul simul time call placement point view simul applic code driver describ activ simul detail direct execut simul parallel program offer potenti accur predict parallel program perform larg possibl asyetunbuilt system approach requir great deal comput good candid parallel execut applic process clear sourc parallel one easili envis system discreteev virtual machin simul resid one processor pool processor host directli execut applic process solut perform poorli though situat either commun path simul becom bottleneck simul execut bottleneck import consid problem parallel virtual machin simul paper consid problem parallel virtual machin simul messagepass parallel program method describ implement tool name laps larg applic parallel simul environ implement intel paragon paragon code piec laps specif paragon synchron algorithm describ paper applic gener messagepass system laps accept input makefil describ build applic applic sourc code laps initi file describ size characterist virtual machin map virtual machin onto physic machin laps automat build load execut direct execut simul applic code laps support applic written c fortran mixtur two describ laps perform four parallel applic two linear system solver one indirect one direct continu time markov chain simul graphic librari driver measur speedup rel simul use one processor slowdown rel nativ execut code observ wide rang perform characterist depend larg part natur code simu late laps proven accur predict perform typic within simul mani virtual processor use actual processor main limit weve encount limit physic memori problem specif paragon issu parallel architectur better support virtual memori sever project use direct execut simul multiprocessor system among find two pertin characterist i type network simul ii whether simul parallel tabl use attribut categor relev exist work laps tool commun simul messagepass network parallel messagepass network parallel maxpar share memori no cach serial cachecoher share memori serial messagepass network serial messagepass network serial cachecoher share memori serial cachecoher share memori parallel tabl direct execut simul tool among current simul own simul cachecoher protocol import concern laps implement intel paragon support virtual share memori coher protocol complic simul problem consider facet laps need deal with howev exist work identifi contextswitch overhead key perform consider one directli affect us much order magnitud improv observ directexecut simul use lightweight thread construct acceler contextswitch for small grain size thread packag avail us support appear independ virtual address space necessari approach abl in context share machin govern lab modifi oper system kernel support ourselv laps process necess unix thread subject oper system mechan schedul subject cost context switch wisconsin wind tunnel wwt knowledg work multiprocessor simul use multiprocessor the cm execut simul hase oper parallel time publish intent hase use commerci avail simul base optimist time warp synchron protocol worthwhil note differ laps wwt first matter purpos laps primari goal support scalabl perform analysi paragon code wwt tool cachecoher protocol research design simul differ type machin host second differ matter lookahead abil conserv parallel simul predict futur behavior cachecoher system processor may interact commun network cach miss may cach affect write time anoth processor lookahead appar poor wwt deal keep thing close synchroni wwt exploit assumpt commun processor requir least b number cycl applic object code alter caus wwt applic process synchron everi b cycl commun defer next barrier assur barrier occur commun affect recipi thi method synchron special case yawn protocol wwt ignor network content assum latenc everi messag fix known contrast paragon processor less tightli coupl cachecoher set memori refer might gener network event messagepass set explicit call messagepass subroutin influenc network behavior fact allow less rigid approach synchron particular mani larg numer program altern long comput phase commun occur communicationintens phase better lookahead possibl laps avoid synchron long period network idl wherea wwt cannot lookahead avail laps come observ that mani applic long portion execut path independ time case applic code execut well advanc actual simul time execut path independ time lookahead still obtain provid lower bound oper system overhead requir send receiv messag final wwt use custom oper system cleverli exploit cm idiosyncrasi recogn miss simul cach laps run pure applic individu element laps propos befor eg parallel direct execut support differ network simul contribut show effect synchron parallel directexecut simul distribut memori program demonstr feasibl approach actual implement test nontrivi code observ sometim excel perform combin featur make laps uniqu among peer section give overview laps system section describ laps transform massiv parallel code direct execut simul section detail synchron strategi section describ experi result respect valid slowdown speedup section present conclus overview parallel program distribut memori machin compris n applic process distribut among n n processor parallel program construct equival present assum assum map static applic process commun messag pass use explicit call system librari routin exampl csend call intel nx librari send messag call applic pass argument defin messag type a userdefin integ messag base address length process id processor id recipi control return applic soon memori area occupi messag avail reus crecv call receiv messag argument messag type base address place messag maximum messag length control return applic process messag receiv irecv asynchron version crecv receiv routin call anticip messag arriv incom messag transfer directli network locat specifi user otherwis messag transfer network commun buffer subsequ receiv call msgdone copi messag user buffer figur a illustr applic process view time run period call system messagepass routin send receiv messag messag transact complet upon return control applic time system spend handl messag invis applic applic process know execut durat eg process measur predict durat gamma c gamma b e gamma assumpt interrupt analog servic time queue network assum durat independ network activ again assum lack interrupt facet deal with durat give us inform exploit parallel simul synchron protocol durat messagepass overhead determin part network state illustr figur b figur b messag sent process process start time a time a control pass oper system processor oper system overhead requir prepar messag transmiss network control return applic process time b messag begin come network processor time f therebi interrupt process middl execut block point oper system processor gain control handl interrupt messag complet receiv oper system control return applic process at time g process final reach code at time explicitli receiv messag in case copi system buffer user space addit overhead incur messag receipt overhead complet time point process begin execut again contrast process reach receiv statement at time c messag process arriv arriv messag move directli user buffer applic process continu execut receiv complet at time d applic process unawar time detail fall simul assign virtual time event time a b c on function execut durat network view b process process execut execut execut send receiv b execut receiv c send executeprocess process executeb send execut receiv execut receiv c execut execut a applic view figur applic network view parallel applic time report applic process evalu messagepass delay assum oper system overhead messagepass interrupt handl model messagepass activ affect execut applic process inde applic simul laps maintain applic process data structur reflect figur b call timelin record observ applic event assign simul time them timelin essenti futureev list applic process simul timestamp futureev modifi simul progress depend simul activ simul conceptu separ applic simul network simul although set futur applic network event essenti singl event list figur give overview laps commun structur applic submit laps recompil laps macro redirect applic messagepass call correspond laps routin set routin known laps interfac interfac code link applic becom resid address space applic call interfac routin typic trigger interact applic process interfac routin instanc applic call send messag trap interfac routin send messageto receiv interfac routin correspond match messag receiv anoth applic process interfac routin also commun appl interfac interfac appl network simul applic simul processor appl interfac appl interfac commun network network simul applic simul processor messag interfac routin applic routin messag network simul messag interfac applic simul figur laps commun structur applic simul notifi activ perform or applic wish perform laps applic simul respons receiv descript applic event applic interfac routin assign simul time event timelin like illustr figur applic simul interact network simul respons simul activ portion virtual commun network applic simul network simul interact form singl process respons simul number applic process typic but alway resid physic processor collect applic network simul cooper synchron parallel discreteev simul interfac applic simul correspond network simul simpl support integr differ network simul perform data paper taken puredelay simul ignor content seen nocontent assumpt deleteri laps abil predict perform applicationlaps interact section briefli describ applic code transform laps simul code laps preprocess invok modifi applic makefil ie input file unix make command refer compil linker replac refer laps script compil script prepend sourc file list macro definit remap everi messagepass routin call correspond laps routin way interact applic code virtual machin environ trap except asynchron trigger messag handler whose use discourag paragon next sourc file compil assembl code instrument code increment at basic block boundari accumul count number instruct execut far instrument code compil linker script caus addit linkag laps interfac code includ routin messagepass call remap instrument code attach laps interfac code becom one osf unix process call applic process repres timelin attend data structur virtual processor vp simul everi call interfac routin tempor sensit insensit insensit call one whose result effect depend state virtual machin point call put anoth way applic execut path depend insensit call may depend result sensit call call tempor insensit includ correspond transmiss receipt messag eg csend crecv isend irecv extend version paragon caus call processor block condit satisfi msgwait gsync global reduct sensit call includ realtim clock dclock asynchron probe exist particular messag iprob iprobex queri statu anticip messag msgdone appreci import distinct compar two code fragment below fragment fragment crecvmsgtyp msgadr msgsize fragment wait messag type msgtype appear process it send messag themselv fragment simpli block wait messag process messag send messag of byte process node fragment poll boolean valu function msgdone determin messag present not routin busywork call paramet chang everi call number time busywork call paramet pass depend respons msgdone none call fragment tempor sensit fragment s call msgdone tempor sensit laps answer msgdone queri come simul base whether simul observ messag interest simul messag arriv in simul simul answer msgdone affirm tell laps interfac messag avail interfac wait correspond applic messag actual arriv from anoth applic process way applic call msgdone routin exactli mani time would simul virtual machin case close linkag simul applic execut fragment need interact simul execut therefor fragment applic code run well advanc simul eventu simul time event correspond fragment runtim laps load simul applic process onto physic machin specifi input file typic physic processor assign one simul process number applic process although arrang separ simul applic process also possibl either case applic process notifi ident singl simul process interact likewis simul process initi ident applic process interact applic process permit execut whenev laps interfac routin call recov number applic instruct execut sinc last call laps routin count inflat input paramet effect clock tick per instruct obtain input file produc estim length time vp would run without interrupt virtual machin last two interact machin mechan determin input paramet describ section next call tempor insensit paramet transform virtual machin coordin physic machin coordin request oper perform case messag send receiv take advantag address space coresid interfac routin applic leav memori address paramet unalt tempor sensit call involv actual execut request interfac either case subject flowcontrol consider interfac routin next send messag assign simul report measur execut burst request oper point interfac routin tempor insensit call complet oper eg block crecv call anticip messag arriv return control call applic process tempor sensit call wait respons simul upon receiv return respons applic paragon librari nx includ rich collect global reduct oper laps map laps routin implement use primit sendrec call instrument routin though part applic account cost global synchron instanc origin applic call redirect laps routin implement barrier standard treefashion virtual machin coordin sinc code remap instrument exactli like applic code cost synchron obtain execut laps version paragon librari function doe laps support almost nx call consist singl program multipl data spmd paradigm principl omiss call asynchron messag handl hrecv messag cancel call messag call involv type mask call rare use comput environ obtain accur time applic oper system overhead send receiv messag need properli account for laps current estim oper system overhead exampl overhead in clock tick execut csend model a b theta l startup cost l messag length b cost per byte estim b obtain measur oper system principl would also possibl instrument oper system instruct count code run instrument code part simul would elimin need use estim path length howev requir access oper system sourc code well author run modifi kernel synchron strictli serial simul execut event monoton nondecreas order event time view parallel simul collect individu discreteev simul run separ processor abil time schedul event differ simul itself desir event processor also execut monoton increas order least comput state though monoton achiev earliest event processor timestamp t processor execut event must either certain simul still schedul event smaller timestamp t must prepar rollback begin recomput time event later schedul rich literatur solut synchron problem good introductori survey found survey stateofth art found conserv synchron protocol prohibit simul execut event possibl earlier event schedul later optimist protocol allow outofsequ event process style strength weak shown perform well applic poorli other regardless method good perform alway depend model tendenc toward rel infrequ schedul event one processor onto anoth conserv method frequent work well slack identifi ahead time comput ie simul abl continu comput distribut lower bound futur time may schedul event processor abil make predict call lookahead model depend optimist method basic work assum slack exist correct error made assumpt prove fals optimist method potenti gener carri overhead necessari recov error optimist method also much difficult implement correctli laps use new conserv synchron protocol whoa windowbas halt appoint tailor characterist simul problem suppos simul time previous chosen global synchron point initi simul simul t cooper establish simul time wt t simul event timestamp t wt within window simul may still synchron other pairwis fashion global synchron occur boundari window everi simul reach time chosen window simul process continu simul termin given lower window edg t valu wt comput ensur messag send event whose timestamp eventu fall t wt exist alreadi applic timelin synchron within window govern dynam comput distribut lower bound futur time one simul may affect anoth interact simul remot send event ie messag send call whose destin vp manag simul sourc lower bound call appoint appoint associ everi remot send event everi timelin initi comput event receiv updat simul progress appoint reflect best known lower bound associ messag reach network hardwar applic simul pass appoint correspond network simul transform appoint network simul messag destin depend network simul appoint network simul may also order network simul comput halt time minimum incom appoint time neither applic network simul ever process event whose timestamp larger simul current halt time simul progress simul either send forewarn messag increas lowerbound network entri time modif occur network appoint time either disappear increas simul halt time must increas least larg wt halt time increas applic network simul free execut event smaller timestamp protocol deadlockif h wt least halt time among simul simul whose appoint defin h must simul clock valu strictli less h must event timestamp strictli less h safe execut elabor whoa two step first discuss appoint comput use updat secondli discuss construct window appoint laps exploit tendenc messagepass code execut path larg insensit time key observ one execut applic process larg onlin trace gener maintain timelin potenti long list futureev whoa build appoint window around list subsect describ two type appoint applic appoint applic simul network simul network appoint network simul consid figur illustr vp timelin situat simul time for simul whole advanc t timelin record execut burst length abc local csend local csend csend remot crecv crecv c figur applic appoint calcul vp timelin d applic event wish comput lower bound network entri time remot messag event applic appoint lower bound instant schedul network simul model network entri construct sum residu time current execut startup block plu execut burst length plu lower bound startup cost interven applic event plu lower bound startup cost event itself applic event process appoint may increas applic appoint made remot send shortli event report applic simul whoa strive keep appoint current simul state evolv appoint chang specif two case first may happen durat applic event startup larger lower bound assum usual aris includ costlik copi messagethat alway suffer henc includ lower bound event execut addit cost includ appoint remot send event affect vp increas amount addit cost appoint may chang presenc block exampl simul crecv figur fail find anticip messag vp becom suspend simul time advanc without messag appear appoint comput suspend vp must increas likewis vp interrupt arriv messag becom suspend messag complet receiv appoint must updat period suspens point vp becom suspend say t find vp minimum outgo appoint time comput differ t period schedul vp appoint updat event everi unit time vp becom unsuspend execut event advanc vp appoint unit updat event remov event list vp releas suspens point updat appoint pass individu simul synchron use network appoint network appoint time simul j messag m promis event report ms arriv subnetwork manag j schedul j time given ms applic appoint simul is network simul construct network appoint ad network latenc time which depend distanc messag travel laps current send network appoint everi time network simul receiv new updat applic appoint thi overkil develop version much reduc commun volum associ appoint laps present use content free network model updat network appoint need howev sophist updat network appoint requir network model captur content transmiss simul messag one network simul anoth remov associ appoint upon receipt target vp taken suspend long take messag complet arriv which depend number packet decompos target network simul note time messag complet receiv data need window comput describ everi network simul maintain singl halt time applic network simul instant halt time time current minimum incom network appoint event timestamp less current halt time may safe exe cute halt time increas appoint chang messag receiv eventu halt time increas past upper edg current window remain event window execut simul engag comput upper edg next window window construct suppos time upper edg window simul engag window construct protocol halt time larger remain event timestamp less t upper edg wt next window comput ensur lower bound timestamp next unknown ie timelin remot send event simul may execut wt thu measur far futur global applic process advanc ahead simul process desir mani event found vp timelin time wt better amort cost comput wt toward end simul first action wait everi one vp timelin mani event appar possibl it alway wait least one event present reason involv paragon manag commun buffer user specifi flowcontrol paramet f involv decis gener rule simul wait event either applic process report block least f applic event exist timelin alreadi applic process report current blockedunblock state everi event report state also report separ chang block unblock three way applic process may becom block first block last call made interfac routin tempor sensit becom unblock must wait simul execut tempor sensit call respond it secondli applic process may block tempor insensit call crecv msgwait wait applic messag receiv anoth applic process time applic process becom runnabl interfac routin notifi simul chang final applic may becom temporarili block purpos messag flowcontrol timelin fill simul enter global vector componentwis min reduct result permit simul comput wt simul offer tupl reduct first element l lower bound last timelin event unsuspend vp second element lower bound last timelin event suspend vp comput assumpt releas suspens immedi third compon r lower bound time suspend vp releas r minimum three valuesth minimum complet time messag midst receiv minimum incom network appoint time simul lower bound minimum time unsuspend vp next send messag vp thi includ local send given global minima l min min r min simul comput b lower bound startup cost send event construct assur remot send event whose timestamp ultim fall t wt resid timelin point window construct properti key whoa ensur appoint everi remot send event window alreadi establish synchron appoint manag need allow us use appoint t wt defin dynam evolv pairwis synchron schedul deadlock effect tempor sensit call window construct deserv remark presenc tempor sensit call timelin indic applic process blockedth call alway last one vp timelin mean valu l r offer simul reduct small differ wt also small extrem case call tempor sensit tend occur simultan between vp net effect serial simul commun event experi section report experi use laps describ set four scientif applic use experiment first address issu valid ie quantifi accuraci laps time predict next quantifi overhead captur applic slowdown defin time take laps execut applic n virtual processor n physic processor divid time take applic run nativ execut n physic processor character simul rel speedup defin time take laps execut applic n virtual processor n physic processor divid time take laps execut applic one physic processor rel speedup repres absolut speedup execut time hypothet optim serial simul divid laps n processor justif belief laps avoid unnecessari overhead run serial essenti overhead laps avoid mainten appoint data structur howev overhead small compar actual execut applic with attend instruct count would done serial simul fact one applic sor high comput commun ratio laps run four vp problem four processor time slower nativ applic four processor see slowdown speedup strongli affect amount lookahead present applic well applic comput commun ratio context applic lookahead refer far advanc time simul applic abl or allow run applic experi four parallel applic repres varieti scientif engin workload although claim made intend comprehens span possibl workload applic aris physic comput fluid dynam perform model comput commun system graphic first applic sor solv poisson boundari valu equat two dimens see chapter partial differenti equat pde two dimens given set valu boundari in case rectangl pde discret result larg spars system k linear equat k number discret grid point equat solv use simultan relax sor oddeven order iter solut an interior grid point i j xi j requir xi n processor arrang squar grid processor assign subgrid size g theta g n comput thu result new north east west south commun pattern number instruct execut new exchang order g size pairwis exchang order g byte thu vari g adjust comput commun ratio applic call ratio veri low applic result highli regular commun pattern messag pass call synchron csend crecv thu applic execut path time independ therebi good applic lookahead second applic bp domain decomposit solver finit differ finit element discret twodimension ellipt partial differenti equat type problem aris frequent comput fluid dynam algorithm bramblepasciak substructur type consist conjug gradient method precondit approxim invers matrix oper obtain discret pde conjug gradient method appli spars matrix highli paralleliz requir iter nearest neighbor commun format matrixvector product global reduct oper format inner product domain pde partit nonoverlap subdomain subdomain separ wire basket consist edg vertic valu specifi edg vertic independ problem may solv subdomain interior done final iter algorithm object earlier iter arriv suffici accur valu unknown wirebasket itself process requir independ solut edg iter well small global solut problem defin vertic onli specif test case poisson equat unit squar dirichlet boundari condit specif advantag taken exist fast poisson solver subdomain interior code use synchron call csend cprobe crecv global reduct thu exhibit good applic lookahead code run number processor power two level comput commun ratio obtain vari size g theta g subdomain assign processor high ratio low ratio code written combin c fortran provid us david key ion stoica icas old dominion univers third applic apuc continu time markov chain discret event simul use parallel algorithm describ specif system simul queue network model larg distribut comput system describ applic highli irregular commun pattern involv anytoani pairwis messag applic also use synchron messag pass call csend irecv msgwait well global reduct paramet set set i high comput commun ratio achiev set low comput commun ratio achiev set fourth applic pgl parallel graphic librari written support visual scientif data sampl driver program librari processor gener number randomli space color triangl certain size processor rotat shade vertic triangl display scan line distribut interleav fashion processor endpoint scan line triangl call span sent processor respons scan line scan line pixel color interpol endpoint span zbuffer algorithm use hidden surfac remov process repeat f frame code use anytoani pairwis commun highli asynchron frequent use irecv tempor sensit msgdone call simul littl applic lookahead code consist approxim line c written provid us thoma crockett icas high lowcomput commun ratio achiev assign triangl per processor respect howev applic harder adjust comput commun ratio design high low use mainli distinguish two differ workload valid section describ process valid laps time predict describ result valid experi order laps make reason predic tion must know overhead system messag pass call eg csend interconnect network transit time well time applic spend messag pass call obtain estim system overhead measur system use test program written specif determin overhead overhead call depend messag length eg csend model l messag length b constant estim regress measur data interconnect network transit time similarli measur found that except long messag softwar overhead send receiv messag far greater hardwar transit time thu predict use simpl network simul model link content expect and are accur obtain applic time messag pass call proceed follow first ran applic nativ ie without laps small number node typic theta certain data size per node eg g sor number triangl per node pgl unix time command give us estim amount user time u consum applic next ran applic with data size laps report total number user instruct thi comput convers factor averag time per user instruct convers factor incorpor averag case sens instruct mix cach hit ratio etc applic convers factor use subsequ run applic laps time predict exampl j applic instruct execut two messag pass call laps comput time call j theta c given applic data size per processor use convers factor c measur small number node predict time larg number node exampl sor fix valu g number instruct instruct mix data access pattern execut messag pass call approxim theta grid processor theta grid processor thu fix g expect convers factor approxim independ number processor howev differ valu g convers factor may differ separ convers factor comput g or comput commun ratio applic case applic execut path time depend sever iter comput convers factor may requir result present two iter use applic run nativ laps varieti number node time compar tabl present percentag differ laps predict execut time actual nativ execut time seen tabl maximum error observ larger predict error alway occur short run initi effect may present exampl pglhigh error node gamma gener frame error report tabl frame run span rang applic effici exampl laps estim sor processor spend time execut user instruct as oppos execut system instruct wait messag spend time execut user instruct result show laps provid accur time estim rang scientif engin applic slowdown next investig amount overhead involv run laps sever type overhead first overhead involv count applic instruct second overhead actual time simul in parallel third oper system overhead aris manag multipl process per node spmd applic run nativ one process per node overhead captur singl measur call slowdown defin time take laps execut applic n node divid time take execut applic nativ n node measur indic instruct count overhead gener rang overhead obtain direct comparison time nativ execut applic applic augment instruct count time simul harder separ simul overhead oper system overhead shall attempt here howev measur present indic osf paragon process manag overhead increas superlinearli number process per node increas note that parallel simul overhead asid laps must send least twice mani messag nativ execut applic messag sent applic result applic applic messag well applic simul messag although may process node consid overal slowdown laps begin demonstr effect applic lookahead simul speed laps attempt run applic well advanc simul provid applic abl so explain earlier result larger window usersuppli flowcontrol paramet f determin maximum number messag pass event applic permit run advanc simul run laps applic good lookahead ie one synchron send receiv studi effect lookahead control manner vari paramet f tabl present result experi apuc run processor one vpprocessor tabl report slowdown function f well averag number applic event execut per window per vp a an applic event defin call laps interfac low comput commun ratio slowdown decreas f increas time increas high ratio slowdown decreas increas f increas demonstr slowdown strongli depend upon applic lookahead tabl also illustr effect flowcontrol algorithm use laps low ratio f increas past slowdown increas contribut factor behavior follow remot send event associ appoint time simul time advanc appoint may updat result addit commun thu larg number event timelin appoint overhead increas increas f increas maximum allow number event timelin also tend increas a averag number applic event per window howev alway increas slowdown larg f see apucshigh case level f increas the reason level entir clear number factor interact complex manner factor includ oper system process schedul algorithm comput commun ratio applic simul window construct algorithm etc next consid slowdown set four applic describ earlier compar laps nativ applic time code run processor laps run two process per node one applic process one simul process f set moder valu obtain good lookahead whenev applic permit result experi report tabl observ first slowdown increas number processor increas effect use global window cost comput new window increas logarithm number processor increas importantli observ averag size window decreas number vp increas occur simpli wt comput function minimum valu taken vp increas number vp increas likelihood low valu submit reduct observ next that given applic number processor slowdown typic increas applic comput commun ratio decreas high ratio time spent execut applic code thu simul overhead less import slowdown sor bp apuc quit modest between consider low end slowdown report executiondriven simul recal code good applic lookahead sinc make much use tempor sensit messag pass call howev pgl slowdown significantli higher describ earlier applic littl lookahead sinc execut mani msgdone call continu forc synchron applic simul process laps deal type tempor question block applic process simul advanc simul time time msgdone question ask sever limit size window construct window algorithm therebi slow simul speed thu pgl applic process frequent block applic event per simul window one simul process per node window construct algorithm becom expens rel amount simul work done window factor counteract to extent place multipl applic process per node simul multipl vp per node separ applic process node simul node exampl consid pglhigh slowdown node configur laps run node node applic process differ set node simul slowdown decreas similar reduct slowdown obtain pgllow next measur rel speedup run laps paragon use n virtual processor n physic processor n n ran applic varieti combin n n applic oper system physic memori constraint typic limit level multiprogram vpsprocessor case bpshigh vpsnode could handl effect limit size n especi laps run one processor first consid case simul small number vp small number node specif simul vp node for bp number node must power case simul vp node tabl show rel speedup experi rel speedup defin laps time one node divid laps time n node applic good lookahead sor bp apuc speedup increas monoton applic rel speedup node rel effici node rel speedup rang rel effici pgl maximum rel speedup obtain increas node next consid simul vp node tabl show rel speedup experi rel speedup defin laps time node vp per node divid laps time n node for bpshigh maximum number vp per node speedup state rel laps time node vp per node again speedup higher applic good lookahead laps run time faster node node sor bp apuc maximum pgl speedup also abl run vp case sorveri low node sinc access node actual slowdown could comput howev laps ran time slower time laps predict would take applic run processor rememb laps processor vp henc least time much work hypothet larger system applic compcomm number processor low bp low bp high apuc low apuc high pgl low pgl high tabl laps valid percentag error predict execut time compcomm maximum slowdown avg applic applic event per lookahead tabl laps slowdown apuc function applic lookahead laps execut time divid nativ execut time use processor applic compcomm number processor low sor high bp low bp high apuc low apuc high pgl low pgl high tabl laps slowdown laps execut time divid nativ execut time use number processor applic compcomm number processor low bp low bp high apuc low apuc high pgl low pgl high tabl laps speedup vp problem on vp problem bp applic compcomm number vp low sor high bp low apuc low apuc high pgl low pgl high tabl rel speedup vp problem time rel processor virtual processor per processor for bp high time rel processor virtual processor per processor conclus paper describ tool laps support parallel direct execut simul parallel messag pass applic describ synchron protocol whoa suitabl directexecut simul gener messagepass system provid perform data laps implement intel paragon multicomput synchron protocol conserv exploit observ messagepass code frequent exhibit long period execut path insensit tempor consider use laps time predict applic run larg number processor made execut applic smaller number processor simultan run time simul larger machin laps time predict valid four scientif engin applic typic predict within actual execut time often within simul speed shown depend sever factor comput commun ratio applic amount applic lookahead applic good lookahead slowdown modest good simul speedup obtain applic without good lookahead name whose execut path depend answer tempor sensit question slowdown quit high howev number possibl increas lookahead potenti increas simul speed applic consid first applic call clock routin current approach laps block applic simul time advanc point clock call made report simul time howev mani applic clock valu use well set eg time interv applic would possibl continu run applic beyond clock call accept simul clock return asyn chronous block applic unreturn clock valu actual get use and simul time yet advanc call time transpar support mechan would costli sinc would involv check certain storag locat chang valu name clock valu store howev simpl set routin design read subsequ use clock valu would insert applic place clock call howev pose problem context autom instrument system would like desir frequent clock call second type tempor sensit call handl queri statu messag exampl probe ask is messag certain type now laps current block applic simul time advanc time probe call made answer probe howev approach conserv certain case suppos applic probe as yet potenti unknown time say suppos simul advanc time time probe probe messag alreadi present time and messag cant cancel guarante time simul could inform applic therebi unblock applic requir somewhat elabor data structur applicationsimul flowcontrol current laps sinc eg messag type may reus simul must keep track messag destin probe howev experi pgl code indic optim which realli sophist form lookahead well worth pursu order acceler simul number worthwhil extens laps pursu first laps current run paragon provid paragon time estim port laps work conjunct softwar packag nxlib provid paragon messagepass librari network workstat nxlib provid workstat paragon function port augment function time second model paragon oper system hardwar current fairli crude exampl current network model pure delay network implement packetbypacket parallel simul paragon mesh interconnect network process integr laps model paragon oper system also simpl includ model paragon intern algorithm eg model way paragon manag commun buffer plan investig incorpor featur model especi lookahead calcul need chang result more complex model addit plan investig port laps run model newli emerg mpi messag pass interfac standard parallel platform besid paragon acknowledg grate jeff earickson intel supercomput gener assist help us better understand intel paragon system r construct precondition ellipt problem substructur impact synchron granular parallel system effici simul parallel comput system rice parallel process testb parallel render algorithm mimd architectur multiprocessor simul trace use tango distribut memori laps parallel simul messagepass program simon simul multicomput network parallel discret event simul effici instruct level simul comput hierarch architectur design simul environ paragon user guid comparison domain decomposit techniqu ellipt partial differenti equat parallel implement paragon parallel program environ sun workstat dynamictracedriven simul evalu parallel messag pass interfac forum parallel simul markovian queue network use adapt uniform effici aggregaton multipl lp distribut memori parallel simul parallel simul today parallel discreteev simul fcf stochast queue network cost conserv synchron parallel discreteev simul numer recip c art scientif comput wisconsin wind tun nel virtual prototyp parallel comput distribut simul discret event system tr ctr phillip m dicken workstationbas parallel directexecut simul acm sigsim simul digest v n p juli david nicol analysi composit synchron proceed sixteenth workshop parallel distribut simul may washington dc kalyan s perumalla richard m fujimoto prashant j thakar santosh pand homa karimabadi yuri omelchenko jonathan driscol perform predict largescal parallel discret event model physic system proceed th confer winter simul decemb orlando florida xuhui li jiannong cao yanxiang he direct execut approach simul mobil agent algorithm journal supercomput v n p august ruom jin gagan agraw perform predict random write reduct case studi model share memori program acm sigmetr perform evalu review v n june david m nicol jason liu composit synchron parallel discreteev simul ieee transact parallel distribut system v n p may thom mclean richard fujimoto repeat realtim distribut simul execut proceed fourteenth workshop parallel distribut simul p may bologna itali vikram s adv rajiv bagrodia ewa deelman thoma phan rizo sakellari compilersupport simul highli scalabl parallel applic proceed acmiee confer supercomput cdrom pe novemb portland oregon unit state sundeep prakash rajiv l bagrodia mpisim use parallel simul evalu mpi program proceed th confer winter simul p decemb washington dc unit state thoma phan rajiv bagrodia optimist simul parallel messagepass applic proceed fifteenth workshop parallel distribut simul p may lake arrowhead california unit state ruom jin gagan agraw methodolog detail perform model reduct comput smp machin perform evalu v n p may rajiv bagrodia ewa deeljman steven doci thoma phan perform predict larg parallel applic use parallel simul acm sigplan notic v n p aug rajiv bagrodia ewa deelman thoma phan parallel simul largescal parallel applic intern journal high perform comput applic v n p februari ewa deelman rajiv bagrodia rizo sakellari vikram adv improv lookahead parallel discret event simul largescal applic use compil analysi proceed fifteenth workshop parallel distribut simul p may lake arrowhead california unit state sundeep prakash ewa deelman rajiv bagrodia asynchron parallel simul parallel program ieee transact softwar engin v n p may vikram s adv rajiv bagrodia ewa deelman rizo sakellari compileroptim simul largescal applic high perform architectur journal parallel distribut comput v n p march jason liu yougu yuan david m nicol robert s gray calvin c newport david kotz luiz felip perron empir valid wireless model simul ad hoc rout protocol simul v n p april rajiv l bagrodia parallel languag discreteev simul model ieee comput scienc engin v n p april