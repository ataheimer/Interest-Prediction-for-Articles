t applic petri net reduct ada task deadlock analysi a abstracta part continu research use petri net support autom analysi ada task behavior investig applic petri net reduct deadlock analysi although reachabl analysi import method detect deadlock gener ineffici even intract net reduct aid analysi reduc size net preserv relev properti introduc number reduct rule show appli ada net automat gener petri net model ada task defin reduct process method use descript detect deadlock state obtain reduc net inform reduct tool experiment result appli reduct process discuss b introduct one major difficulti face develop concurr distribut softwar analysi concurr base fault like deadlock techniqu analysi gener limit applic due high complex interest analysi problem exampl reif smolka prove undecid npcomplet result reachabl problem variou model commun process rauchl toueg provid pspacehard result deadlock detect bound commun channel model commun finit state machin regard concurr analysi model base ada task taylor prove npcomplet result relat classic static deadlock detect problem work support part offic naval research onr grant number nj nation scienc foundat nsf grant number ccr ccr earlier version paper publish proceed th intern confer distribut comput system despit difficulti concurr analysi problem number techniqu propos especi static analysi ada task previous defin petri net framework type analysi develop toolkit support approach architectur toolkit call total shown fig fet frontend translat subsystem translat ada sourc ada task languag atl design descript petri net format ie set appropri label place node transit node arc refer result petri net origin ada net net suitabl analysi program compos static set task bid backend inform display subsystem defin receiv user queri present task analysi result base analysi ada net bid use differ support tool carri desir analysi exampl deadlock detect use method describ would invok tool calcul net invari approach subject paper bid first invok net reduct tool use reachabl graph gener tool unlik pure static analysi method ignor variabl approach model boolean variabl increas accuraci analysi gener implic use static analysi discuss elsewher petri netbas tool aim ada analysi propos includ one develop softwar product consortium spc primari concern work perform model taylor concurr histori method one earliest ada task analysi method discuss definit concurr graph similar classic reachabl graph petri net goal taylor paper propos systemat method gener program concurr histori gener analysi concern method improv analysi effect specif type analysi like deadlock concern here yet taylor work also simplifi model focus synchron concurr issu long clark introduc task interact graph tig represent creat concurr graph smaller creat taylor method provid experiment base comparison tigbas result reductionbas result section goal tig work similar our although feel method advantag base model theoret matur and continu wide activ studi support mani avail tool also approach distinguish methodolog first deriv semant rich model independ specif analysi issu manipul model algorithm design specif analysi issu concern recent dwyer et al present compact petri net represent concurr program base tig model standard deadlock preserv petri net reduct techniqu cannot appli net form deadlock preserv reduct applic net suggest analysi method shown particular promis handl reason larg exampl includ use binari decis diagram bdd repres symbol state space use special petri net concept stubborn set petri net transit partial order petri net transit net symmetri bddmethod success appli hardwar system analysi yet clear directli suitabl method concurr softwar analysi method mention well defin petri net exploit particular type concurr defin ada task model work explor use method ada net paper consid analysi classic case global deadlock detect ie task block context petri net approach straightforward way detect deadlock would gener ada net reachabl graph search reachabl graph state successor state easi implement toolkit system comput expens sinc complex gener reachabl graph safe net exponenti number node previous studi use petri net structur invari aid deadlock detect ada task keep research techniqu ie seek exploit adapt exist gener petri net theori paper consid reduc comput deadlock analysi use anoth petri net techniqu net reduct model reduct method experiment result indic techniqu quit power significantli extend rang problem size handl found reduct method compar favor autom task analysi method especi also root explicit reachabl analysi addit found model reduct method facilit use state reduct method combin model reduct follow state reduct allow problem task analyz experiment result problem fare well comparison result report constrain express tool pal tool which base use process algebra composit analysi autom method know shown abl analyz ada program task earli work reduct graph model express concurr report gostelow et al reduct base narrow set substitut arbitrari graph model comprehens set petri net specif reduct rule later present berthelot work adapt berthelot rule specif model domain ada task cast rule techniqu tool specif softwar analysi problem deadlock analysi background petri net ada net net reduct paper assum reader basic understand petri net gener knowledg ada task section provid background three area terminolog notat petri net theori present terminolog properti ada net introduc idea petri net reduct explain definit gener petri net tupl pnp t f w p finit set place node finit set transit node f set arc flow defin f pt tp w weight function defin w initi mark state defin pin n stand set posit integ set nonneg integ petri net restrict w f ie arc weight alway equal one call ordinari petri net definit petri net pn x y xyf xy yxf xy pt x place transit x input transit place set x x output transit place set x definit petri net pn mark state map pin mark state graphic repres assign token shown small black dot place notat mp denot number token place p mark m definit given mark petri net pn transit tt p t mp wpt said enabl note ordinari net transit enabl p t mp definit petri net pn transit enabl mark fire result new mark p wtq note ordinari net fire transit result new mark m p t definit petri net pn mark said reachabl mark exist sequenc mark ji result fire enabl transit mark ji i k sequenc transit fire lead mark mark call transit fire sequenc definit petri net pn set reachabl mark denot rpnm mark reachabl definit petri net pn said safe number token everi place exceed one reachabl mark ie mrpnm pp mp definit petri net pn deadlock exist reachabl mark transit enabl petri net deriv ada task program translat scheme call origin ada net origin ada net model number commun finit state machin commun base ada notion rendezv state machin repres local control flow task intertask commun repres extra node connect differ state machin control flow construct ifels case loop model structur state machin control flow construct impact choic task construct like entri call accept statement translat algorithm produc origin ada net use set petri net templat correspond ada statement detail translat given simpli describ key featur ada net german upcom discuss reduct origin ada net place automat label translat program welldefin role model program behavior place label prefix keyword indic type place label also contain statement number exampl templat entri call statement shown fig a accept statement accept bodi shown fig b accept statement without accept bodi model compact way seen exampl fig gener rendezv repres net structur shown fig c model directli synchron entri place accept place follow reason model creat automat translat sourc code chose entri call construct model make entri call separ accept construct model accept call made conveni translat algorithm also provid model distinguish task made call yet accept task readi make call explain bit upcom exampl definit ada net call place label prefix string begin wait accept entry_ex select beginplac waitplac acceptplac entryexplac selectplac respect method construct origin ada net follow characterist origin ada net ordinari safe petri net origin ada net linear number node respect statement correspond ada program place contain token initi mark repres begin task control flow beginplac defin abov decis statement ifels case statement local control flow repres branch net structur ie place multipl output arc everi branch net structur least one branch choic contain net structur commun statement the translat algorithm ignor decis statement involv intertask commun give reader feel label convent use ada net sens net reduct use exampl program call ga station program statement number part program itself use refer exampl the ga station program task bodi custom task bodi pump task bodi oper loop loop loop select pumpstart accept start accept prepay pumpfinish accept finish pumpactiv end loop end finish end custom accept charg origin ada net structur correspond task program shown standard petri net graphic form fig purpos later refer token distribut shown figur indic deadlock mark rather initi mark ada net give follow interpret place label appear ada net shown fig note place label ack_entry_operator_ abbrevi aeo figur ack_entry_operator_ entri call at line made to yet accept by oper task entri call line execut call task wait acknowledg oper task the call may may accept yet rendezv progress the entri execut entri call line accept statement line origin ada net intend serv base model gener task analysi as discuss deadlock analysi observ origin ada net contain atom step transit strictli necessari model task semant for exampl end_loop transit aid translat process part effect reduct discuss paper remov extra step hand also net structur for exampl place unnecessari deadlock analysi may support form analysi exampl waitplac mark indic task made entri call wait respons distribut environ may correspond state request messag transmit state remot task perform servic state acknowledg messag sent call task so determin maximum number entri call wait simultan search state contain maximum number mark wait place petri net research develop variou reduct techniqu gener petri net analysi petri net reduct aim transform given petri net pn anoth petri net pn pn easier analyz algorithm typic mean pn smaller reachabl graph pn illustr thi show fig net produc appli net reduct rule net fig import observ reduc net explicitli model task interact defin sourc program as ada net fig instanc sourc program specifi entri call accept statement yet reduc net contain transit but definit reduct rule introduc true reduc net preserv deadlock characterist origin ada net definit net deriv origin ada net number reduct step use reduct rule present paper call reduc ada net reduc ada net call fulli reduc ada net reduct rule appli it ada net either origin ada net reduc ada net fulli reduc ada net fulli reduc ada net uniqu depend interplay reduct oper appli gener reduct rule practic use ada net select transit fusion reduct rule applic gener petri net interest fact rule preserv deadlock properti net ie deadlock state preserv new deadlock state introduc furthermor rule preserv safe net rigor proof found use rule propos high comput complex ie comput expens check applic rule section also introduc simpl rule allow remov place transit case exist parallel redund node next section deriv reduct rule special case rule use ada net note whenev reduct rule call remov node a place transit impli incid arc node also remov rule postfus transit nonempti subset g t set transit petri net postfus anoth subset h iff exist place p follow four condit satisfi a fg fp input f p pf p output f b hh ph p h p output input h c tthg p pt p disconnect transit except belong h g oper rule fuse hh fg produc transit h h p delet p transit thg condit a b impli hg fig show postfus transit h h f f reduc net consid fire everi new transit fire sequenc h f fire onc number fire transit reduc net origin net rule prefus transit subset g t set transit petri net may prefus transit ht iff exist place pp follow condit satisfi a h p p h p sole output h p input h b fg p f pf transit g p input none p output c t gh p pt p disconnect transit d q h q h share input place transit oper rule fuse h fg substitut f f hp delet h p fig show transit h fuse f f properti preserv prefus rule postfus proof appli rule place p reduc number transit net one number place one third reduct rule special case rule explicitli specifi easier appli commonli occur fig illustr oper rule rule serialfus transit singleinputoutput place p token uniqu output place uniqu input place p pp fuse rule parallel redund node two node two transit two place without token x y ident input ident output possibl empti pair parallel node either one node remov is xy xy either x but both remov obviou rule preserv deadlock safe properti net special case reduct ada net intuit place petri net consid redund remov alter possibl transit fire sequenc net throughout paper remov redund place p mean p ps incid arc remov benefit identifi place remov gener facilit reduct involv transit fusion clearli safe deadlock properti preserv remov redund place unfortun gener effici algorithm identifi place redund berthelot gave formal structurebas character redund place gener petri net base exist place subset call iset meet certain condit interest appli concept ada net seek effici rule special case instanc berthelot character begin introduc gener character specif case redund place safe ordinari petri net first want establish fact ada net alway safe ordinari net recal origin ada net safe ordinari net construct note earlier reduct rule introduc section preserv safe establish berthelot rule alway keep ordinari net ordinari net safe start with difficult see rule keep ordinari net ordinari final new rule introduc section remov node cannot chang ordinari net one ordinari prove everi node remov new rule redund sens remov alter possibl transit fire sequenc so safe properti net preserv therefor conclud ada net alway safe ordinari net import sinc want appeal gener character redund place safe ordinari net prove special case instanc redund place ada net theorem case place redund safe ordinari net safe ordinari petri net pn place p redund follow condit satisfi t exist b t bp mrpnm mb mp ie whenev b mark p also mark proof sinc output transit p p cannot impact fire transit except t one necessari condit enabl b mark condit establish whenev b mark p also mark so remov p impact fire reachabl mark mean place p redund theorem help defin narrow class redund place comparison gener character given berthelot comput expens use theorem identifi redund place due behavior condit impli condit but appeal theorem defin special case instanc redund place ada net rememb origin ada net place automat label translat program welldefin role term model program behavior so semant net must correspond semant ada program net sound model assum case paper exploit sens semant identifi case condit theorem must true thu case simpl effici reduct rule sinc goal use rule defin reduct process explain select order depend rule rule redund waitplac origin ada net structur correspond entri call statement waitplac redund remov hold net obtain appli rule one time origin ada net proof fig a show origin ada net structur model entri call ack_entri place repres call made yet accept ack_accept place repres acknowledg call entri indic rendezv termin wait_ack place repres caller wait termin acknowledg appeal theorem see condit theorem true place p b repres place wait_ack ack_accept respect ada semant rendezv termin must previous initi caller origin ada net structur fig a easili seen rendezv initi caller wait_ack place becom mark remain mark ack_accept place becom mark therefor condit theorem also true waitplac redund sinc remov waitplac associ entri call statement alter ada net structur entri call statement appli reduct one time ie waitplac import rule case rule provid opportun reduct appli illustr thi let us consid exampl correspond ada net shown fig a exampl end t appli rule remov immedi wait_ack_t_ wait_ack_t_ then appli rule result net fig b reduct process deadlock detect alway appli rule first mean remov waitplac first step reduct process rule redund entryexplac origin ada net structur correspond accept statement correspond entryexplac redund remov accept statement one caller hold net obtain appli rule one time origin ada net proof fig b show origin net structur model accept statement end_accept place repres accept task reach end accept bodi readi termin rendezv initi call entry_ex_j_i place repres particular rendezv progress rendezv associ particular entri call statement particular accept statement j appeal theorem see condit theorem true place p b repres place entry_ex_j_i end_accept respect ada semant task reach end accept statement must correspond rendezv progress case accept statement one possibl caller one correspond entryex place as shown case fig b contrast multipl caller case shown exampl fig a thu whenev end_accept place mark place mark so condit theorem true entryexplac redund sinc remov entryex place alter net structur associ accept statement recal structur fig remov place affect applic rule structur so appli reduct one time clear remov waitplac affect valid appli rule correspond entryex place so reduct process alway appli rule possibl applic rule could well chosen defin reduct process start applic rule follow rule import differ introduc second theorem gener theorem appeal theorem prove two special case rule applic ada net theorem case place redund safe ordinari net safe ordinari petri net pn place p redund follow condit satisfi r everi transit ok p k r place q ok p q ok t ok k r mp ie q ok place mark state p also mark state fig contain exampl net structur correspond structur defin theorem for case r time one ignor label node defin theorem proof condit safe properti net impli reachabl state one q ok place mark one place could mark one associ enabl transit could fire result mark q ok place still mark place p mark would contradict condit infer reachabl mark p impact fire one transit call t necessari condit enabl correspond q ok mark sinc condit establish whenev q ok mark p also mark remov p impact fire reachabl mark mean place p redund present two rule appeal theorem identifi specif case redund place occur ada net next two rule appli time reduct process sinc rule depend ada net issu help identifi candid place by label check applic rule improv effici reduct process exampl rule direct attent acceptplac particular ada net indic task call two consecut entri anoth task net structur enforc call task control flow simplifi remov one acceptplac call task rule redund acceptplac ada net let p acceptplac pt ik p t ok p exist anoth acceptplac q q p p q correspond two accept statement task t place p remov follow condit also satisfi transit ik p k r exist correspond transit ok p ik p q ik ok p q ok pair place q ik q ok correspond statement task k kt pair transit t ik ok defin condit ik alway fire first ik cannot fire twice without fire ok ok cannot fire twice without fire ik fig illustr net structur correspond rule case r proof without loss gener refer fig illustr net structur correspond rule case r seen easili condit rule establish structur condit theorem behavior condit specifi condit theorem shown true follow ik enabl for mark m mp otherwis p may contain multipl token net would safe previous establish ada net safe net thu transit ok for enabl mark m whenev transit ik fire p becom mark but case ok fire transit ik fire otherwis net safe condit ensur transit ok fire thu token place p remov transit ok fire note transit ok cannot enabl unless place q ok mark therefor mrpnm mq ok k r mp condit theorem hold exampl fig the ga station exampl use illustr simpl case redund acceptplac defin rule use notat rule let accept_ correspond place p let accept_ correspond place q check figur seen q p r exampl task defin rule task contain two accept statement question pump task as seen sourc code given section now consid condit transit correspond transit correspond task custom correspond task check condit see correspond q ack_entry_pump_ correspond q ada net model task custom easi confirm everi iter transit fire fire impli execut statement must preced execut statement so condit true thu rule accept_ redund place implement rule need automat check condit rule condit difficult check sinc correspond place ada net statement ada program well defin base type place label use discuss earlier assum condit true main difficulti check condit without loss gener consid check condit one call task ie r let us denot statement correspond place q ik statement correspond place q ok s condit belong task call task k mention section ada net contain subnet commun finit state machin repres local control flow task subnet consist place correspond statement particular task input output transit place arc associ place transit node condit check confirm follow two properti a subnet correspond task k direct path start beginplac task k place q ok go place correspond statement s b loop subnet correspond task k contain place q ok loop must also contain place correspond statement s confirm properti temporarili remov everi place correspond statement s perform two search search path start begin place task k place q ok search loop start q ok lead back q ok search fail condit satisfi otherwis condit satisfi rule redund acceptbodi place safe ordinari petri net pn place p redund follow condit satisfi pp r transit ik p k r exist uniqu place q ok p q ok t ik q ok everi transit ok p k r ok p q ok pm q ok k r ada net structur repres acceptbodi model singl place p multipl caller good candid instanc redund condit hold place p remov proof rule special case theorem q ok t ik clearli structur condit theorem true establish condit theorem follow i sinc q ok t ik ik p q ok get mark p ii sinc p t token p remov transit ok k r fire iii mark mq ok mp transit ik k r fire otherwis p one token safe properti hold thu one q ok place mark reachabl mark iv ii iii token p remov ok fire remov token p q ok simultan therefor mrpnm mq ok k r mp condit theorem hold let us return fig b rule allow us remov place end_accept_ serial fusion lead reduc ada net fig final rule simpl rule appli mark place remov place transit restrict condit rule redund beginplac safe ordinari net exist place bp b b t t b b remov dt d set ada net beginplac initi mark input transit so use candid place b proof mark everi output place remov equival fire onc sinc tb b mark initi fire initi sinc b fire transit fire sequenc so case remov node b reassign token defin chang safe deadlock properti net note possibl rule reduc net isol mark place would repres deadlock state differ reduct rule appli net rule appli last sinc rule rule assum place unmark rule induc mark mark could lost reduct allow rule appli reduct process method deadlock identif appli reduct rule discuss previou section defin reduct process deadlock detect identif ada net process start origin ada net appli rule particular order preserv sound reduct process respect rule follow rule order consist mention section order defin follow repeatedli appli rule appli sequenc rule rule repetit appli order none four rule appli final rule appli deadlock identif requir abl interpret program state correspond detect deadlock mark reduc ada net difficulti aris reduct process remov place whose label help defin semant program state correspond reachabl mark fortun provid method easili construct origin ada net deadlock mark reduc net deadlock mark method base applic petri net state equat initi mark net incid matrix net v fire count vector fire count vector mvector m number transit net element number time correspond transit fire given v equat return mark net reach transit repres v fire concern obtain v term origin ada net reduct applic transit fusion rule rule remov transit gener new transit transit fuse label concaten newli gener transit the fusion transit label concaten kind label concaten immedi give us fire count fuse transit ignor fire order everi transit label origin ada net appear label reduc ada net rule appli label easi gener fire count vector x search deadlock reachabl graph howev rule appli transit label lost saw section remov transit rule mean transit fire thu gener anoth mvector y remov fuse transit contain remov rule substitut vector x forv equat obtain full descript deadlock mark origin ada net is incid matrix origin ada net net initi mark exampl next section illustr method record state sequenc or transit sequenc lead deadlock state either reachabl graph construct state net sequenc defin respect reduc ada net provid interpret state sequenc term program execut sequenc appli basic method defin for interpret deadlock state would appli interpret intermedi state sinc necessari transit inform initi state well defin method still sound exampl deadlock detect identif explain reduc net fig with initi mark beginplac mark one token fig use new net detect identifi deadlock first rule remov waitplac rule remov entryexplac entry_ex__ entry_ex__ entry_ex__ rule remov accept place accept_ first appli rule rule mani group transit place accept_ remov rule becom parallel place place ack_entry_pump_ reduc ada net shown fig final appli rule fulli reduc ada net shown fig mark correspond deadlock state reachabl graph reduc ada net fig shown fig compos state chain deadlock state correspond mark token place ack_entry_customer_ comparison note reachabl graph origin ada net state token alloc fig show deadlock mark origin net repres follow string wait_ack_pump_ entry_ex__ wait_ack_operator_ entry_ex__ ack_entry_customer_ deadlock mark easi interpret correspond program state circular deadlock task custom rendezv task pump entri finish statement task pump rendezv task oper entri charg statement task oper issu entri call customerchang statement number mark waitplac give number task wait state use method outlin section also identifi deadlock fulli reduc ada net path initi state deadlock state reachabl graph fig identifi fire transit ttttttt thu follow fire count vector respect transit posit vector correspond follow order transit tt tt tt for reason unimport paper origin ada net transit label t applic rule remov fuse transit contain ttt tt tt compar fig fig yield anoth vector defin reduct process everi place p appli equat defin section obtain mark vector repres state string net reduct tool experiment evalu implement prototyp reduct tool compat current research toolkit use construct evalu ada net mention section toolkit autom construct ada net support variou form netbas analysi includ now reductionbas analysi ada net repres textual productionrul form compat format petri net input pnut system set petri net tool allow descript net well reachabl graph gener analysi simul textual represent net transit specifi product rule lefthandsid give transit label enclos colon follow name input place righthandsid give name output place net reduct tool nrt implement c run suno unix major input nrt ada net produc fet tool output nrt reduc version input ada net textual format nrt execut follow command nrt r n r option call output report everi reduct rule attempt appli n option call output list intermedi net produc reduct process final option specifi id number as use earlier section paper reduct rule attempt order consider rule automat attempt last exampl mean first rule consid ie repetit appli reduct possibl rule rule consid rule consid final rule consid typic use nrt provid id option case rule appli order defin reduct process discuss earlier section evalu net reduct method perform number experi varieti ada task program experi provid quantit measur effect use net reduct method and associ tool deadlock analysi experi in particular dine philosoph exampl measur compar exist data differ task analysi approach toolset comparison intend show benefit use reduc concurr model perform deadlock analysi sinc reduc ada net intend support deadlock analysi meaning interpret compar data broader sens discuss two type experi use nrt tool first experi evalu idea net reduct use differ version two benchmark task program ga station program dine philosoph program experi net reduct follow full reachabl graph gener mention befor give opportun see comparison effect reduct method deadlock analysi comparison anoth reachabilityori autom ada task analysi techniqu second experi evalu effect use net reduct method conjunct exist state space reduct method ie method reduc state space state space sourc version use develop and provid us g avrunin experiment work constrain express analysi method gener contrast reduct method perform reduct net model prior state space gener type experi observ signific benefit net reduct method net reduct exampl ada net result reduct state space size compar origin net state space fulli reduc net state space analysi reduc ada net accur report exist nonexist deadlock exampl consid but recal reduct gain due remov atom step transit strictli necessari model task semant discuss amount state space reduct achiev term origin vs reduc net signific measur relat result state space size for comparison reduc net task model reli reachabl analysi analysi time experi run use reductionbas analysi tool sun sparcstat mb memori fulli reduc net give number uniqu state number arc reachabl graph which indic number state gener time reduc net plu gener state space second measur usersystem time unix experi time reduct step small fraction time gener state space alway less one second lack space prevent us list sourc code exampl studi avail author net reduct full reachabl graph gener ga station exampl ga station program simul autom ga station system consist oper pump custom consid onepump twopump version system programvers deadlock case use unrol version differ custom call differ entri oper task oper task use boolean variabl keep track custom prepay ga control automat model ada net current programtonet translat yet handl gener use counter variabl reachabl graph gener tool intellig enough consid transit sequenc correspond boolean variabl evalu atom action thu state correspond interleav evalu step store they cannot correspond deadlock state issu discuss detail deadlock case creat oper improperli handl flag variabl indic pump busi result custom finish pump pay oper still think pump busi allow custom get access pump experi report introduc deadlock slightli differ way tabl show sampl data base vari number custom number pump potenti deadlock no custom pump task deadlock fulli reduc ada net reachabl graph state arc time tabl experi ga station program dine philosoph exampl wellknown dine philosoph problem experi differ version becom standard exampl number differ concurr analysi research project exampl especi relev paper sinc allow quantit comparison approach anoth statespac orient analysi techniqu modifi optim version task interact concurr graph ticg method assum reader familiar dine philosoph problem program simul n philosoph consist n ada task one philosoph one fork four version program discuss version classic dine philosoph problem without deadlock avoid tabl show comparison state space size fulli reduc ada net model publish data modifi ticg model note fulli reduc ada net problem number state p p number philosoph task modifi ticg model number state p rememb ticg model gener model term preserv task properti beyond deadlock potenti version philosoph pick lowernumb fork first similar situat report state space version approxim equal size version version dine room butlertask ad restrict number room occup less n check valu count variabl thu deadlock happen howev deadlock superflu report version pure static analysi count variabl model although static analysi case reveal fals deadlock numer result respect state size still compar reduc ada net model modifi ticg model sinc model ignor count variabl tabl show comparison state space size version provid check reduct method manual ad node automat gener origin net model simul control enforc butler count variabl exampl counter could take valu would add place ada net model uniqu valu counter expect experi net show superflu deadlock suppress modifi model state space size reduc net obtain modifi net model shown rightmost column tabl reachabl state no phil task fulli reduc ada net state arc time modifi ticg state arc time differ state approx avail avail avail tabl dine philosoph problem version reachabl state no phil task fulli reduc ada net ignor variabl state arc time modifi ticg ignor variabl state arc time differ fulli reduc ada net simul count state arc time avail tabl dine philosoph problem butler version young et al provid anoth program version version dine room butlertask simul count variabl unrol selectivewait statement idea simul variabl valu level nest selectivewait statement therebi avoid spuriou deadlock state space analysi surpris analysi tool report deadlock state version number philosoph two investig realiz program error could inde deadlock sinc method unrol butler select wait provid may allow n philosoph occupi room simultan program correct butlertask given analysi tool properli detect deadlock correct version program tabl summar result use ticg data report correct unrol butler task expect number fulli reduc net state use unrol butler number net state given tabl net model simul butler count variabl comparison show signific advantag state space size reduc net comparison ticg model indic philosophi use specif model specif problem use strategi analysi inher complex problem see benefit use problemspecif reduc model comparison unreduc ada net model independ develop concurr analysi model number reachabl state no phil task fulli reduc ada net unrol butler state arc time modifi ticg state arc time differ avail avail avail tabl dine philosoph problem unrol butler version waveform gener exampl see reduct process work real world exampl obtain exampl ada program develop solv real problem design purpos test particular concurr analysi method exampl perform hand modif ada sourc order get proper net model program primarili due presenc ada specif construct like packag translat design handl waveform gener program line ada simul electr equip gener variou waveform one program use experiment studi variou state space reduct method includ net reduct indic two version program creat two version number state arc reachabl graph correspond origin ada net state arc state arc fulli reduc ada net correspond number state arc reduc state arc state arc state space gener time case second note number state arc quot origin ada net slightli smaller full state space number given due fact consid particular type origin net reduct relat selectivewait structur part net gener process part net reduct process use deadlock detect as done cours either way reduct process provid signific benefit reduc size state space net reduct state space reduct second seri experi look effect use net reduct method support recent propos reduc state space gener method particular consid three reduc state space gener method stubborn set petri net transit partial order petri net transit net symmetri basi experi gener origin ada net set ada program appli reduc state space gener method ada net appli net reduct origin ada net appli reduc state space gener method thi time reduc net exampl consid includ first experi version ga station program version dine philosoph program well version readerswrit program exampl tradit dine philosoph problem n philosoph combin net reduct stubborn set gener state combin net reduct symmetri gener n state observ case ie program reduc state space gener method signific benefit use net reduct method prior appli reduc state space gener effect reduct step increas util state gener method appli deadlock analysi ada task full detail experi use reduct reduc state space gener method found note reduct method use bit less power method describ paper particular rule defin paper gener rule use experi report whi exampl state space number report dine philosoph problem better ie smaller paper comparison number report use net reduct reduc state space gener appear power combin deadlock analysi ada task make follow observ base comparison experi experi report two fulli autom analysi tool also avoid full state space gener constrain express toolset pal tool approach shown capabl handl dine philosoph problem philosoph task dine philosoph problem without butler task combin net reduct follow reduc state space gener also capabl handl problem philosoph fact state befor one combin provid state space size grow linearli number philosoph knowledg work report favor outcom analysi problem work valmari tienari use semant model call chaosfre failuresdiverg cffd model approach composit way similar pal system use combin composit analysi induct valmari tienari abl analyz dine philosoph system gener constant number state although work import techniqu effect exampl yet clear result cite requir manual step recogn use induct also unclear whether type induct step lead constant state space size dine philosoph exampl easili autom gener usag contrast analysi work use net reduct state space reduct fulli autom compar analysi time constrain express pal tool which compar method find analysi effect effect two tool depend state space reduct method use follow net reduct time singl method establish definit superior term autom deadlock analysi continu develop compar studi clearli necessari conclus commonli accept major impedi static analysi concurr program complex associ produc variou form state space represent present method deal matter optim model base two key ingredi focus deadlock specif analysi issu adapt exist modelreduct techniqu petri net reduct result part ongo research use petri net support autom analysi ada task motiv belief much gain base ada task analysi research model theoret matur and also continu wide activ studi alreadi support mani avail tool combin petri net theori knowledg ada task semant deriv domain specif thu effici reduct rule petri net model ada task gener errorpron construct model optim manual program analysi critic model produc reflect program true behavior behavior programm or model desir think true program question furthermor model optim benefit understand analysi issu german program compil techniqu support autom build correct model combin model build model optim add anoth dimens difficulti consid issu analyz may vari wide appli twophas methodolog fulli autom model optim first deriv semant rich model independ specif analysi issu manipul model algorithm design specif analysi issu concern observ reduc ada net model promis aid deadlock analysi concurr ada program especi use combin reduc state space gener method acknowledg thank mr m goto help develop net reduct tool u buy help suggest mani aspect paper also thank m young provid us copi refer final thank refere valuabl comment greatli improv paper term technic content present r the complex reachabl distribut commun process exposur deadlock commun process hard detect complex analyz synchron structur concurr program a generalpurpos algorithm analyz concurr program task interact graph concurr analysi a petri net framework autom static analysi ada task behavior describ analyz distribut softwar system design autom analysi concurr system constrain express toolset detect ada static deadlock use petri net invari design implement petri netbas toolkit ada task analysi tql task queri languag concurr program analysi tool analyz dynam properti system softwar design starvat critic race analysi ada composit reachabl analysi use process algebra control state explos reachabl analysi ident task counter variabl integ programmingbas approach verif a compact petri net represent concurr program gener bdd symbol model check cc symbol model check state beyond a stubborn attack state space explos use partial order effici verif deadlock freedom safeti properti reachabl analysi petri net use symmetri applic experiment evalu state space reduct method deadlock analysi ada petri net theori model system proper termin flowof control program involv concurr process check properti net use transform petri net properti analysi applic unit state depart defens debug ada task program theori applic net reduct ada deadlock analysi interact statespac analysi concurr system integr concurr analysi softwar develop environ a concurr analysi tool suit rational design preliminari experi use state space reduct method deadlock analysi ada task an improv failur equival finitest system reduct algorithm tr ctr changjun jiang huaiq wang shaoyi liao behavior rel petri net journal comput scienc technolog v n p novemb ravi k gedela sol m shatz haip xu formal model synchron method concurr object ada acm sigada ada letter vxix n p sept georg s avrunin ugo a buy jame c corbett laura k dillon jack c wileden experi improv constrain express toolset proceed symposium test analysi verif p octob victoria british columbia canada nick savoiu sandeep shukla rajesh gupta mtp petri netbas framework analysi transform systemc design proceed workshop softwar compil embed system p septemb octob dalla texa laur petrucci lar michael kristensen jonathan billington zahid h qureshi toward formal specif analysi avion mission system proceed confer applic theori petri net formal method softwar engin defenc system p june adelaid australia y t juan jeffrey j p tsai tadao murata yi zhou reduct method realtim system use delay time petri net ieee transact softwar engin v n p may haip xu sol m shatz framework modelbas design agentori softwar ieee transact softwar engin v n p januari y t juan jeffrey j p tsai tadao murata composit verif concurr system use petrinetbas condens rule acm transact program languag system topla v n p sept jeffrey j p tsai alan liu eric juan avinash sahay knowledgebas softwar architectur acquisit specif verif ieee transact knowledg data engin v n p januari