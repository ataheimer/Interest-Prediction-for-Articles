t effici boolean manipul obdd extend fbdd a obdd stateoftheart data structur boolean function manipul basic task boolean manipul equival test satisfi test tautolog test singl boolean synthesi step perform effici term fix order obdd bottleneck obddappl size repres boolean function sinc total comput mere remain tractabl long obddrepresent remain reason size sinc well known obdd restrict fbdd free bdd ie bdd test path input variabl onc fbddrepresent often much sometim even exponenti more concis obddrepresent propos work gener fbddbase data structur show fbdd fix type provid similar obdd fix variabl order canon represent boolean function basic task boolean manipul perform term fix type fbdd similarli effici term fix order obdd order demonstr power fbddconcept show verif circuit design hidden weight bit function propos bryant carri effici term fbdd is princip reason imposs term obdd b introduct need data structur boolean function becom obviou one applic mind circuit design optim verif test etc let us consid eg basic problem logic verif mean hardwar descript languag circuit describ high level abstract allow design specifi behavior circuit realiz it order valid specif order verifi design circuit respect specif formal method develop lead problem descript term boolean function verif problem solv analyz manipul function let us consid exampl problem determin whether combin circuit c correctli implement given specif s test whether function realiz c s respect one possibl eg eve ffk mwb is first construct represent fc f usual term primari input and second perform equival test function term represent henc effici algorithm solv verif task consider requir ffl effici algorithm deriv represent involv boolean function eg circuit descript well ffl effici algorithm solv equival test similar test satisfi tautolog term represent past great varieti represent boolean function truth tabl disjunct dnf conjunct normal form cnf reedmullerexpans variou type formula boolean circuit branch program inv tigat howev demand support mention basic task boolean manipul becam obviou comput applic realli start work complex boolean function order come full understand fundament tradeoff succinct represent effici solv basic task observ complex measur length represent input function henc work eg truthtabl one much time comput howev represent requir case space ressourc exponenti number primari input side work eg formula one often obtain succinct and consequ space effici represent solv eg equival test becom conphard unfortun systemat inspect differ succinct represent scheme eg gma shown allmost support effici solut boolean manipul basic task wors perform basic task often requir solut nphard problem except seem bddbase boolean function represent eg ake bri mei gma provid socal obdd stateoftheart data structur boolean function allow canon represent and henc effici solut equival test similar test satisfi tautolog test allow effici perform binari boolean synthesi step and henc effici procedur deriv obddrepresent boolean function given circuit descript due nice properti obdd success use mani applic as exampl sequenti circuit verif eg mb bcm fil test eg bec kb logic optim kar survey see bri unfortun obddrepresent succinct and henc spaceeffici aris question whether sophist bdd represent are first succinct spaceeffici obdd and second allow effici solut basic task boolean manipul similarli obdd do number obddextens propos aim overcom mention disadvantag obdd eg adg jph bjaaf howev obtain increas spaceeffici represent paid mention approach conpcomplet equival test gma natur candid obddextens allow effici equival test at least probabilist bcw bdd read input variabl cours comput onc socal fbdd sinc obdd special structur bdd readonceonli properti fbdd inde gener obddconcept bddbase data structur boolean function bddbase data structur boolean function use follow represent scheme binari decis diagram bdd set x boolean variabl direct acycl graph one sourc two sink label nonsink node v label boolean variabl lv x n two outgo edg one label comput path input start sourc inner node label x outgo edg label chosen bdd p repres boolean function comput path input lead sink label fa f sometim denot f p bdd call path variabl test onc order binari decis diagram obdd fbdd properti path variabl test fix order exampl fbdd obdd given figur gener draw bdd way that edg label assum left edg label right edg gammapsi r gammapsi r au deltaff au deltaff gammapsi r gammapsi au deltaff au phi x a b figur exampl fbdd a obdd b function fx remark properti the logarithm of bddsize correspond ture machin space name branch program bdd represent extens studi complex theori eg weg mei theoret interest fbddrepresent known complex theori readonceonli branch program aris similar correspond eras ture machin space well known boolean function f ib n x n repres term bdd term fbdd or variabl order term obdd optim bddrepresent are comparison twolevelrepresen tation dnf cnf multilevelrepresent boolean formula succinct spaceeffici eg mei howev succinct make often difficult sometim even infeas perform basic task boolean manipul exampl conpcomplet problem test whether two bdd repres boolean function ch situat chang dramat one work restrict type bdd then sometim possibl perform effici basic task boolean manipul although restrict properti maintain cours comput bryant bri first observ obdd properti detail obdd possess follow outstand properti fact bri respect fix variabl order represent boolean function mean reduc obdd canon ie uniqu determin let p p two obdd variabl order binari boolean synthesi step perform time osizep due properti obdd defin fix variabl order well suit use data structur boolean function bri inde nowaday obdd stateoftheart data structur boolean function util variou packag applic cad eg brb howev disadvantag obdd data structur often low space effici obdd represent although wide class practic import boolean function possess least respect wellsuit variabl order spaceeffici ie polynomi size obddrepresent mani import function without succinct represent exampl exist boolean function integ multipl hidden weight bit function hwb indirect storag access function isa repres obdd polynomi size fh bri bhr variabl order comput advantag fbdd although mani boolean function eg symmetr function optim fbddrepresent obdd mani import function restrict fbdd obdd caus exponenti increas size go discuss boolean function properti that variabl order obddsiz exponenti fbddsize first idea construct exampl boolean function small ie polynomi fbddsize larg ie exponenti size obddsiz consid boolean function form f f polynomi size obdd variabl order exponenti size obdd respect replac singl multiplex variabl x larger figur take function f polynomi size obdd good variabl order common get larg class boolean function small fbddsize larg obddsiz figur due similar idea fortun hopcroft schmidt construct fh fbdd p size smaller n obdd least ngammalog n verif method circuit realiz fh present jbaf second interest exampl indirect storag access function isa isa defin variabl follow let let variabl isa partit m group p output isa x j otherwis breitbart hunt iii rosenkrantz proven obdd comput isa size least nlogngamma bhr hand shown isa comput fbdd even decis tree size n logn gammapsi x lgammak x lgammak x memori regist figur indirect storag access function isa final go discuss detail hidden weight bit function hwb discuss bryant bri let wtx number one input assign although obddrepresent hwb exponenti size bri comput polynomi even quadrat size fbdd explain use construct due bryant bryb base comput appropri chosen restrict hwb x ij repres one easili verifi main idea explain figur simultan comput h n g n restrict level merg togeth sinc level k fix n node level furthermor sourc tosinkpath variabl test henc fbdd size hwb r gammapsi r gammapsi r gammapsi r gammapsi r phi g n g n figur construct fbdd phwb comput hidden weight bit function hwb seen import function small size fbdd whose obddsiz are respect variabl order exponenti let us mention comput advantag fbdd boolean function repr sentat due bcw assign fbdd signatur allow test function equival fbdd probabilist polynomi time properti appli obdd basi effici hash techniqu use extens effici work obddpackag packag brace bryant rudel brb signatur boolean function found mani applic ybaf kri kb sinc signatur comput fbdd similarli obdd hash techniqu use work fbdd too remark onli similar properti known compact boolean function represent fbdd type order extend effici manipul obdd fbdd show possibl perform singl boolean synthesi step term fbdd similar effici ie polynomi time case obdd precis let boolean oper ib then denot problem construct fbdd p function f given fbddrepresent p p f f sometim suppress oper write easili sy n fbdd sy nobdd denot similar problem obdd unfortun investig complex sy n fbdd shown perform boolean synthesi step term fbdd nphard gma reason intract sy n fbdd caus differ way input fbdd test variabl inde consid obdd instead fbdd effect observ perform boolean synthesi step sy nobdd obdd differ variabl order nphard gma howev restrict problem obdd variabl order sy n obdd problem becom effici solvabl time goal section introduc formal notion type fbdd gener linear variabl order obdd allow canonci repres boolean function term fbdd respect given complet type ffl effici perform singl boolean synthesi step fbdd fbddtype defin similarli fbdd except possess mere one sink label symbol t p fbdd tpp deriv easili p identifi sink p r gammapsi j omega omega omega omega ae omega omega omega omega ae au omega omega omega omega omega ae au r r gammapsi gammapsi omega omega omega omega omega ae au omega omega omega omega ae au figur fbdd p type tpp two syntact reduct rule usual appli bdd fbdd obdd type order reduc size without function chang import observ reduct chang substanti way bdd fbdd obdd test input variabl reason use reduct gener notion variabl order fbdd merg rule two nontermin node u v label v elimin one two node redirect incom edg node figur illustr applic merg rule type tpp figur observ that input assign sequenc variabl test remain invari wrt applic merg rule moreov one consid bdd algebra structur applic merg rule defin congruenc relat set node bdd reason sometim speak merg rule algebra reduct delet rule nontermin node v elimin v redirect incom edg v figur illustr applic delet rule node delet rule appli call simpl reduc opposit merg rule delet rule decreas inform contain type r r gammapsi omega omega omega omega omega ae au omega omega omega omega omega ae au z z z z z z z z z z z z ae ae ae ae ae ae ae ae ae ae ae ae ae ae r gammapsi x figur applic merg rule tpp figur z z z z z z z z z z z z z z ae ae ae ae ae ae ae ae ae ae ae ae ae ae r gammapsi x z z z z z z z z z z z z ae ae ae ae ae ae ae ae ae ae ae ae ae ae theta theta theta theta theta theta theta theta theta thetafl figur applic delet rule type figur reduc fbdd type fbdd p call reduc neither merg rule delet rule appli p fbdd p said algebra reduc merg rule appli p z z z z z z z z z z z z z z ae ae ae ae ae ae ae ae ae ae ae ae ae ae r gammapsi red tpp figur algebra reduc type type tpp figur proposit uniqu reduct reduc fbdd obtain fbdd p appli merg delet rule uniqu determin comput linear time similarli algebra reduc fbdd algebra reduc type obtain appli merg rule uniqu determin comput linear time proof fbdd p denot reduc fbdd redp algebra reduc fbdd red p similar type denot red algebra reduc type red first prove red p red uniqu determin two node u said algebra congruent u v u v u v if u v inner node obvious defin equival relat interpret leftsonrel v rightsonrel v unari oper set node label lv unari predic set fx mean simpl axiom p consid algebra check easili fact congruenc relat factor relat produc red p red respect true sinc fbdd type root algebra congruent node isomorph henc two merg sequenc maxim length merg concruent node singl node lead result red p red algebra idea behind proof uniqu red p red appli directli redp sinc fundament differ merg delet rule term univers algebra differ explain fact relat defin merg rule congruenc relat relat defin follow mean merg delet rule mere equival relat two node u v fbdd p said equival u v u v algebra congruent u v one successor node p exist node observ neither delet rule merg rule affect equival two node p howev clear applic merg delet rule merg togeth two differ equival node easi see order prove uniqu redp suffic prove p transform fbdd whose equival node merg togeth proof done easili induct differ sizep number equival class p differ zero ie exist two differ equival node p noth merg togeth p reduc differ posit alway find two equival node merg togeth mean delet rule merg rule next step use induct hypothesi complex construct redp red p red reduct bdd alreadi discuss aker ake effici algorithm construct redp develop bryant bri way obddpackag eg brb use separ reduct procedur howev reduct perform averag mean linear mani arithmet oper final algorithm bryant improv sw run determinist linear time replac sort procedur linear time bucket sort techniqu order identifi fbdd test variabl similar way suffic compar type defin notion subtyp analog notion linear subord let type type call subtyp construct appli merg delet rule r r gammapsi gammapsi omega omega omega omega omega ae au omega omega omega omega ae au z z z z z z z z z z z z ae ae ae ae ae ae ae ae ae ae ae ae theta theta theta theta theta theta theta theta figur type subtyp easi see that respect set type constitut partial order set complet type fbdd type complet if sourcetosink path variabl x n test let complet type fbdd p type exist type red red due definit type fbdd alway assum algebra reduc sometim write fbdd indic fbdd complet type obvious singl fbdd belong sever type variabl order provid simpli structur complet type socal obddtyp for exampl see figur howev section shown import function obddtyp optim give interest exampl type fbdd deduc type fbdd phwb hidden weight bit function hwb describ section sinc variabl test sourc sink path hwb complet type figur show hwb give type h n hwb g n figur exampl obddtyp proposit effici typecheck fbdd let p fbdd p let complet type check effici whether p type proof sinc appli algorithm present section produc alway fbdd consist given type practic applic need check whether fbdd belong predefin type henc suffic scetch test whether exist type two fbdd type gmb particular answer question whether p type node v fbdd type character set v variabl test vtosink path v comput straightforward travers algorithm time linear output say two node u v consist if lu lv case lu v well now run algorithm synthesi the appli procedur describ section take p p input check whether sourc everi recurs call synthesi consist let us remark case procedur synthesi need input type work binari boolean oper sinc result fbdd interest induct easili prove that check pair node consist exist common r gammapsi r gammapsi r r r r gammapsi gammapsi gammapsi gammapsi r gammapsi r r gammapsi au deltaff deltaff au au deltaff gammapsi au theta theta deltaff au bn deltaff theta theta r au bn deltaff theta theta gammapsi au bn deltaff theta theta r r au bn deltaff theta theta gammapsi gammapsi z z z z z z z z z z z z z z z ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae r au deltaff figur type fbdd hidden weight bit function given section given mean type h n hwb g n hwb root sourc label x effici solut basic task boolean manipul term fbdd canon fbdd represent readi prove that respect given complet type reduc fbdd similarli reduc obdd provid canonci represent boolean function order start follow easi observ input variabl x exist bdd consist exactli one nontermin node label x sink sink let us call bdd it actual obdd standard represent x proposit let complet type x n let x x n standard represent x type proof sinc complet type node label x form cut mean delet rule elimin predecessor node label x iter applic merg rule get type singl node label x predecessor sink t final use delet rule success construct standard represent x theorem canon fbdd represent let complet type x n let f ib n is isomorph exactli one reduc fbdd type repres f proof exactli one complet binari decis tree f red t red let p fbdd f type easi see tpp tpt sinc p repres boolean function p construct appli merg delet rule consequ proposit get redp easi consequ theorem proposit obtain effici algorithm solv equival problem equ fbdd corollari equ fbdd equival two fbdd p p type decid linear time osizep let us mention best result solv equ fbdd probabilist polynomi time algorithm bcw effici perform boolean synthesi step follow show effici appli procedur obdd variabl order bri extend fbdd type meantim similar result could obtain sw theorem effici boolean synthesi fbdd let binari boolean oper let p p two fbdd complet type fbdd p type repres boolean function construct time osiz prove theorem remark mani case binari boolean synthesi step fbdd perform quadrat instead cubic time true instanc consid fbdd bound width type least one input fbdd larg enough ie variabl appear sourc tosink path elimin factor size obtain time bound osizep sizep quadrat upper bound osizep sizep obtain also requir result fbdd type gmb howev sinc also small size fbdd standard represent ie fbdd size certain type result synthesi size osiz hope elimin factor size gener upper bound proof start brief sketch synthesi algorithm algorithm sy n fbdd input binari boolean oper ib complet type two fbdd p p type output fbdd p type repres begin comput p redq returnp end give short recurs descript procedur synthesi p gener appli procedur propos bri let top denot top variabl the label sourc j topff type root ffsuccessor ff f g sourc similar notat use case fbdd termin case reach one two input fbdd p p repres constant recurs stop output fbdd deriv modifi sink fbdd instanc p sink fisink p replac g begin p p sink termin case return result construct p straightforward els construct p topp returnp ib mean classic shannon expans appli form recurs step synthesi easili verifi let us remark p p type type j xff sinc modif sink fbdd chang type get result fbdd p type improv run time use global tabl size size theta sizep theta us consid call synthesi p p q sinc restrict qj xff properti either x topq x appear q sourc correspond node p p respect synthesi support tabl v contain pointer result correspond synthesi call or nil synthesi call node save much comput bound run time size let us remark import properti straightforward synthesi algorithm procedur synthesi gener result fbdd p reduc moreov variabl appear sourcetosink path p next call synthesi appli p p new input p new fbdd type need anymor type the inform alway encod repeat applic synthesi get quadrat upper bound new run time exampl let us mention fbdd phwb hidden weight bit function describ section encod inform type hwb section henc work phwb need type hwb for applic refer section final remark algorithm present proof theorem optim program techniqu use eg obddpackag develop brace rudel bryant brb appli also case fbdd instanc help appropri hash tabl forc synthesi produc reduc fbdd henc reduct algorithm need fbdd versu obdd let us start comparis fbdd data structur obdd data structur gener remark sinc data structur provid canon repr sentat sinc binari boolean synthesi step perform case quadrat time at least larg input interest case practic sinc fbdd provid sometim even exponenti concis represent obdd applic base properti make sens use fbdd instead obdd howev sinc obdd especi easili structur fbdd sinc great varieti reason heurist eg fs brkm design effici obdd seem meaning strategi work obdd long fit comput obdd becam larg one work effici sophist structur fbdd start demonstr power fbddconcept show verif circuit design hidden weight bit function hwb given bri effici carri term fbdd let us present idea perform effici variabl quantif term fbdd fbdd variabl quantif first insight besid perform twovalu logic synthesi applic obdd base possibl effici perform variabl quantif eg cmb bri x x n f ib n variabl quantif defin ident start obdd f oper perform deriv obdd restrict f j x f j x carri accord boolean synthesi step howev term fbdd situat difficult start fbdd p f similarli case obdd one easili construct fbdd p p restrict f j x f j x f delet p node v label x and obtain p replac successor node v or obtain p successor node v get troubl sinc gener p p fbddtype effici algorithm perform necessari boolean synthesi step p p known gmb nevertheless mani import situat which also term fbdd effici quantif possibl follow describ two paradigmat situat first let us consid fbdd p type let node label variabl x simpl reduc ie reduc mean delet rule guarante fbdd restrict construct p type henc quantif perform effici similar case obdd order illustr import observ let us discuss interest applic verif switchlevel circuit fmk model method transistor switch follow switch transistor on sourc drain valu henc circuit shown figur model switch use proposit logic intern signal c e figur transitorlevel circuit sinc observ outsid circuit consid existenti quantifi variabl get relationship extern signal a b c e intern signal must elimin logic descript circuit eg express term fbdd oper effici implement quantif intern signal effici perform sinc begin extern signal known follow heurist design wellsuit fbddtype guarante quantif intern signal done effici separ creat ffl appropri fbddtype e complet respect variabl correspond extern signal ffl appropri order variabl correspond intern signal obvious defin obddtyp complet respect intern variabl then start e complet fbddtype design includ occas demand piecewis e result get type quantifi restrict compos intern variabl without problem without go detail mention mere techniqu gener success appli approach base verifi modular circuit second gener situat variabl quanitif perform effici term fbdd follow assum set x n variabl partit block x consid type segment ie consist segment r k segment r start exactli one node test variabl x r see figur exampl p fbdd segment type easi see restrict simultan variabl block provid fbdd type henc due theorem variabl block simultan quantifi effici although cours restrict singl variabl block emerg fbdd that gener type let us mention mani applic quantifi singl variabl block variabl exampl consid fbdd p type cite figur restrict x k respect obtain two inconsist fbdd whose type incompar true sinc input assig x variabl x k ist test x k p j x k variabl x k ist test x k figur show type j x k p j x k type j x k deltaff gammapsi au r ae ae ae ae ae ae ae ae omega omega omega omega omega omega omega ae ae ae ae ae z z z z x x k x k x k x k x k figur segment segment type deltaff gammapsi au r ae ae ae ae bbn theta theta theta theta theta z z z z z z z z x k x k x k x k x k deltaff gammapsi au r ae ae ae ae bn theta theta theta theta theta theta thetafl j z z z z z z z z x k x k x k x k x k figur segment restrict j x k j x k type cite figur power fbdd circuit verif hidden weight bit function follow review result describ detail gmb show verif circuit design propos bryant bri hidden weight bit function hwb carri effici polynomi space use fbdd demonstr power fbddconcept sinc bri shown work obdd exponenti space need recal section hidden weight bit function hwb mathemat specifi mean recurs equat from descript fbdd phwb hwb deriv easili see section type hwb drawn section circuit design c hwb given bri lead nearli optim vlsi implement area theta time complex on ffl ffl main idea design illustr figur ahwbx figur circuit design c hidden weight bit function hwb w weight from figur becom obviou c look like n simplic assum case log order verifi c term fbdd type hwb construct reduc fbdd pc type hwb function fc comput c test equival in fact equal sinc fbddrepresent fix type canon phwb construct pc introduc motiv logic structur c satisfi equat fbdd p cite figur exactli mirror main design idea c obvious omega omega omega ae j bbbn omega omega omega ae theta theta j jj omega omega omega ae j omega omega omega ae omega omega omega ae j omega omega omega ae j omega omega omega ae j omega omega omega ae j figur output function circuit hwb term fbdd primari input new intern variabl let us consid type cite figur easi see p fbdd type start elimin intern variabl order go prove fbdd aris elimin process small size let us mention that exampl section quantifi restrict compos intern variabl let f denot boolean function comput p elimin order describ f fbdd consid shannon decomposit f illustr tree cite figur figur definit type omega omega omega ae j bbbnomega omega omega ae theta theta j jj omega omega omega ae jomega omega omega ae omega omega omega ae j omega omega omega ae j figur visual cofactor shannon expans f wt function f k describ easili follow way partit set input variabl x denot constant group mgammai variabl wt x choos appropri group k offset need determin output variabl k depend w extract c fbdd pc output follow start construct fbdd type wmgamma elimin wmgamma p mean compos oper second step mean compos oper elimin manner wmgamma last step elimin get fbdd pc type hwb circuit c detail begin p construct success fbdd function assumpt use singl synthesi step program techniqu hash tabl hashbas cash etc present brb usual practic implement expect space complex extract pc equal size maxim reduc fbdd deriv one mention function sinc c comput hwb sinc pc reduc fbdd type hwb equal phwb and henc quadrat size space complex verif least quadrat fbddsize function f w order estim fbddsize function f process suffici design small fbdd type f k use tree figur size result factor n larger size hwbfbdd f k let us mention use properti hwb exclud last two level the sink predecessor node hwb label function g ij h ij sourc label h n claim number one test path h n h ij g ij equal respect henc consid hwb count schema proof claim follow easili induct successor successor h ij g igammaj respect induct hypothesi hold h ij g igammaj true h ij g ij too easi consequ mention count properti hwb symmetr boolean function includ function w realiz mean fbdd type hwb quadrat size go design hwbfbdd f k without loss gener let us take the respect uniqu determin complet decis tree f type hwb consid restrict f comput level l number one test path sourc node level l label x two valu w number one u v u v correspond restrict x w div mgammaigamma valu sourcet sourcetov path altogeth node level l label x comput four differ restrict henc number restrict level l n and henc size hwbfbdd f n analog obtain upper bound f k k fbdd f size n remark size reduc similar hwbfbdd f k merg togeth altogeth shown c verifi term fbdd type hwb low degre polynomi space time sinc princip reason imposs term obdd exampl make power fbddconcept evid conclus paper extend feasibl manipul term obdd fbdd detail shown ffl fbdd provid much sometim even exponenti more effici represent boolean function obdd section reduc fbdd fix type provid canon represent theo rem ffl basic task boolean manipul perform boolean synthesi step test equival satisfi tautolog perform similar effici term fbdd term obdd theorem corollari instead give experiment evid prove formal problem size n benchmark circuit hidden weight bit function propos bri verifi term cubic size fbdd section shown bryant verif term obdd case need exponenti space complex spellt difficult term fbdd term obdd oper base restrict eg variabl quantif composit howev character section situat frequent occur practic applic oper perform effic term fbdd too open interest problem develop heurist creation good type cours extens problem determin good variabl order obdd applic sinc much greater freedom defin type defin order problem seem trickeri howev know obdd use work fbdd exampl use strategi work fbdd work obdd as extrem easi struct fbdd long obdd consider fit comput obdd becam larg one tri to work effici sophist fbdd r binari decis diagram boolean satisfi equival check use gener binari decis diagram synthesi testabl binari decis diagram equival free boolean graph decid probabilist polynomi time effici implement bdd packag complex vlsi implement graph represent boolean function applic integ multipli cation symbol boolean manipul order binari decis diagram symbol model check state beyond sequenti circuit verif use symbol model check effici verif multipli differ function use ibdd heurist comput variabl order effici manipul order binari decis diagram verifi tempor properti sequenti machin without build state diagram verifik digital system complex equival contain free singl program scheme evalu improv boolean comparison method base binari decis diagram method symbol verif sunchron circuit automat semiautomat verif switchlevel circuit tempor logic binari decis diagram find optim variabl order binari decis diagram comput intract analysi manipul boolean function term decis graph effici analysi manipul obdd extend readonceonli branch program frontier feasibl probabilist feasibl boolean manipul branch program combin logic verif fbdd function partit verif relat problem extend bdd use ifthenels dag multilevel logic minim plato tool comput exact signal probabl modifi branch program comput power branch program effici data structur computeraid circuit design logic verif use binari decis diagram logic synthesi environ ment graph driven bdd new data structur boolean function complex boolean function tr graphbas algorithm boolean function manipul modifi branch program comput power find optim variabl order binari decis diagram use ifthenels dag multilevel logic minim complex vlsi implement graph represent boolean function applic integ multipl effici implement bdd packag sequenti circuit verif use symbol model check share binari decis diagram attribut edg effici boolean function manipul heurist comput variabl order effici manipul order binari decis diagram symbol boolean manipul order binarydecis diagram boolean satisfi equival check use gener binari decis diagram complex equival contain free singl variabl program scheme synthesi testabl frontier feasibl probabilist feasibl boolean manipul branch program analysi manipul boolean function term decis graph verifi tempor properti sequenti machin without build state diagram gatedelayfault testabl properti multiplexorbas network ctr j jain k mohanram d moundano i wegen y lu analysi composit complex obtain smaller canon graph proceed th confer design autom p june lo angel california unit state chunghe kim luciano lavagno alberto sangiovannivincentelli free mddbase softwar optim techniqu embed system proceed confer design autom test europ p march pari franc siel ingo wegen comparison free bdd transform bdd formal method system design v n p novemb olaf schrer ingo wegen theori zerosuppress bdd number knight tour formal method system design v n p nov wolfgang gnther rolf drechsler effici manipul algorithm linearli transform bdd proceed ieeeacm intern confer computeraid design p novemb san jose california unit state r drechsler a sarabi m theobald b becker m a perkowski effici represent manipul switch function base order kroneck function decis diagram proceed st annual confer design autom p june san diego california unit state siel complex minim learn obdd fbdd discret appli mathemat v n p octob wolfgang gnther rolf drechsler minim free bdd integr vlsi journal v n p novemb wolfgang gnther rolf drechsler effici minim manipul linearli transform binari decis diagram ieee transact comput v n p septemb jayram s thathachar separ readktim branch program hierarchi proceed thirtieth annual acm symposium theori comput p may dalla texa unit state christoph meinel anna slobodov unifi theoret background bddbase data structur formal method system design v n p oct beat bollig simpl function requir exponenti size nondeterminist graphdriven readonc branch program inform process letter v n p may bogdan j falkowski chiphong chang forward invers transform haar spectra order binari decis diagram boolean function ieee transact comput v n p novemb jawahar jain william adam masahiro fujita sampl scheme comput obdd variabl order proceed ieeeacm intern confer computeraid design p novemb san jose california unit state henrik reif andersen henrik hulgaard boolean express diagram inform comput v n p decemb amit narayan jawahar jain m fujita a sangiovannivincentelli partit robddsa compact canon effici manipul represent boolean function proceed ieeeacm intern confer computeraid design p novemb san jose california unit state randal e bryant binari decis diagram beyond enabl technolog formal verif proceed ieeeacm intern confer computeraid design p novemb san jose california unit state amit narayan adrian j isl jawahar jain robert k brayton alberto l sangiovannivincentelli reachabl analysi use partitionedrobdd proceed ieeeacm intern confer computeraid design p novemb san jose california unit state adnan darwich compil determinist decompos negat normal form eighteenth nation confer artifici intellig p juli august edmonton alberta canada stephen ponzio lower bound integ multipl readonc branch program proceed twentyseventh annual acm symposium theori comput p may june la vega nevada unit state beat bollig stephan waack philipp woelfel pariti graphdriven readonc branch program exponenti lower bound integ multipl theoret comput scienc v n p octob ingo wegen bdd design analysi complex applic discret appli mathemat v n p march adnan darwich decompos negat normal form journal acm jacm v n p juli rina dechter robert mateescu andor search space graphic model artifici intellig v n p februari