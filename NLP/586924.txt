t polynomi time approxim scheme gener multiprocessor job schedul a recent consider interest multiprocessor job schedul problem job process parallel one sever altern subset processor paper polynomi time approxim scheme present problem number processor system fix constant result best possibl strong nphard problem signific improv past result best previou result approxim algorithm ratio epsilon processor system base goemanss algorithm restrict version problem b introduct one assumpt made classic schedul theori job alway execut one processor time advanc parallel algorithm assumpt may longer valid job system exampl semiconductor circuit design workforc plan design project process group peopl project contain n job job work one set altern altern consist one person group work simultan particular job process time job depend subgroup peopl assign handl job note person may belong sever differ subgroup question schedul job project finish earli possibl applic includ i berth alloc problem larg vessel may occupi sever berth load unload ii diagnos microprocessor system job must perform parallel processor order detect fault iii manufactur job may need machin tool peopl simultan iv schedul sequenc meet meet requir certain group peopl schedul literatur kind problem call multiprocessor job schedul problem among other two type multiprocessor job schedul problem extens studi first type pm jfixjc max problem subset processor process time parallel process job fix second type gener version pm jsetjc max problem job may number altern process mode process mode specifi subset processor job process time particular processor subset object problem construct schedul minimum makespan mprocessor system given list job job suppos nonpreempt approxim multiprocessor job schedul problem studi problem gener version classic job schedul prob depart comput scienc texa am univers colleg station email chencstamuedu support part nation scienc foundat grant ccr depart comput scienc bucknel univers lewisburg pennsylvania email amirandaegbucknelledu j chen a miranda lem processor system thu nphard hoogeveen et al show p jfixjc max problem thu also p jsetjc max problem nphard strong sens thu fulli polynomi time approxim scheme blazewicz et al develop polynomi time approxim algorithm ratio problem p jfixjc max improv later dellolmo et al gave polynomi time approxim algorithm ratio problem algorithm base studi special type schedul call normal schedul goeman improv algorithm give polynomi time approxim algorithm ratio recent amoura et al develop polynomi time approxim scheme problem pm jfixjc max everi fix integ m approxim algorithm pm jsetjc max problem success pm jfixjc max problem bianco et al present polynomi time approxim algorithm pm jsetjc max problem whose approxim ratio bound m chen lee improv algorithm give polynomi time approxim algorithm pm jsetjc max problem approxim show problem p jsetjc max approxim polynomi time ratio ffl present paper unknown whether polynomi time approxim algorithm ratio c problem pm jsetjc max c constant independ number processor system paper present polynomi time approxim scheme problem pm jsetjc max algorithm combin techniqu develop amoura et al split job larg job small job techniqu develop bellolmo et al goeman normal schedul plu standard dynam program scale techniqu precis base classif larg job small job introduc concept m fflcanon schedul regard gener normal schedul show job list m fflcanon schedul whose makespan close optim makespan show m fflcanon schedul approxim combin two step give us polynomi time approxim scheme pm jsetjc max problem result best possibl follow sens problem pm jsetjc max nphard strong sens unlik algorithm improv fulli polynomi time approxim scheme more over polynomi time approxim scheme cannot extend gener problem p jsetjc max number processor system given paramet input shown constant problem p jsetjc max polynomi time approxim algorithm whose approxim ratio bound n ffi paper organ follow section give necessari background preliminari problem section introduc m fflcanon schedul studi properti section present polynomi time approxim scheme problem pm jsetjc max section conclud remark research direct preliminari pm jsetjc max problem schedul problem minim makespan set job may sever altern process mode formal instanc j problem pm jsetjc max list job job j associ list altern process mode process mode or simpli mode ij specifi subset processor mprocessor system ij integ indic parallel process time job j processor case ambigu also say processor set q ij mode job j job j min valu min call minimum parallel process time job j given list job schedul gammaj j mprocessor system consist two part determin process mode job j j determin start execut time job assign mode moment processor system use mayb parallel process one job assum system start time makespan schedul gammaj latest finish time job j schedul gammaj let optj denot minimum makespan schedul j pm jsetjc max problem given instanc j construct schedul makespan optj j let pm set processor mprocessor system collect k g k nonempti subset pm kpartit pm collect subset pm partit pm kpartit integ k total number bm differ partit set pm call mth bell number use formula comtet looser simpler upper bound bm bm m easili prove induct anoth combinatori fact need analysi schedul algorithm cutindex nonincreas sequenc integ lemma let nonincreas sequenc integ let fix integ ffl arbitrari real number with respect ffl integ subset j mbm integ q q j proof simplifi express let b decompos sum j chen a miranda sinc bmfflc subsum j larger first subsum k fflm sinc sum first b k integ q q bound fflm fflm sequenc nonincreas conclud subset j mbm integ q q j must complet proof nonincreas sequenc integ denot j mffl smallest index satisfi condit lemma index j mffl call cutindex sequenc m fflcanon schedul section first assum mode assign job instanc j decid discuss schedul job j mode assign processor set pm assumpt job list j actual instanc pm jfixjc max problem recal pm jfixjc max problem problem pm jsetjc max restrict everi job instanc one process mode instanc pm jfixjc max problem job j requir fix set q processor parallel execut process time loss gener assum process time sequenc nonincreas fix number processor system arbitrarili given real number ffl let j mffl cutindex sequenc defin lemma is integ bound bmfflc subset j mffl mbm integ q q j mffl split job set j two subset job jl call larg job job js call small job let gammaj schedul job set j consid nondecreas sequenc integ h start finish time j mffl larg job gammaj small job block gammaj consist subset p pm processor time interv subset processor exactli execut larg job time interv call height processor set p call type small job block therefor subset p processor associ small job block processor either idl use execut small job time interv note small job block height small job block time interv latest finish time larg job call last small job block note last small job block type pm let small job block associ processor set p time interv small job block time moment time interv character uniqu collect q pairwis disjoint subset processor set p time processor subset q use parallel execut small job thu subset subset idl processor time collect q call type time moment layer small job block time moment j type type layer equal type time moment layer height layer let l l two layer small job block type q respect say layer l cover layer l fr g particular l l two consecut layer small job block layer l start right layer l finish l cover l layer l actual continu layer l small job finish definit floor oe small job block sequenc fl consecut layer h layer l start right layer small job interlac layer layer l small job interlac layer l h finish layer l h exampl floor given figur a note small job block may nonempti floor all shown figur b remark import properti floor small job block suppos layer l start time layer l h finish time properti definit small job cross floor boundari therefor floor oe regard singl job use processor set p start time finish time height floor oe defin equal sum height layer l secondli sinc floor small job block processor subset p small job cross start finish time floor floor small job block rearrang order still fit small job block without exceed height small job block final properti definit ensur matter small job floor rearrang simpl greedi algorithm suffici refit small job floor without exceed floor height greedi algorithm base idea wellknown graham schedul algorithm classic job schedul problem definit let j instanc problem pm jfixjc max let permut job j list schedul algorithm base order schedul job j mode q j follow order earliest time processor subset q becom avail lemma let j oe set small job floor oe list schedul algorithm base order job j oe alway reconstruct floor oe proof suppos first layer l floor oe type accord properti definit everi job j oe must mode q i definit layer cover layer l j therefor floor oe processor subset q becom idl final complet time j chen a miranda b c small job block a small job block c floor fig a floor fl l lg b small job block floor sinc subset q pairwis disjoint job mode q j oe execut processor subset q order without chang complet time q therefor regardless order job j oe long list schedul algorithm start job earliest possibl time thu subset becom idl final complet time complet time subset chang therefor list schedul algorithm construct floor exactli layer l definit let q partit processor subset p say assign type q floor type layer l subcollect fq g note possibl assign two differ type floor long type floor subcollect assign floor type exampl let partit processor subset p first layer l floor oe type q assign either type floor oe definit small job block tower constitut sequenc floor assign type floor two floor tower type note sinc floor type partit processor subset p tower contain bm floor bm mth bell number number differ partit set element discuss concentr schedul special form follow sens definit let j instanc problem pm jfixjc max divid larg job set jl small job set js given equat fix fix constant ffl schedul gammaj j m fflcanon everi small job block gammaj tower remark note m fflcanon schedul small job cross boundari tower therefor tower height associ processor set q simpli regard job mode q t first show m fflcanon schedul gammaj j construct list schedul algorithm larg job tower gammaj given proper order lemma let gammaj m fflcanon schedul job set j let sequenc larg job tower gammaj order term start time gammaj list schedul algorithm base order regard tower singl job construct schedul j makespan larger gammaj proof let prefix order sequenc j j either larg job tower let gammaj schedul j obtain gammaj remov larg job tower j let gamma j schedul list schedul algorithm job j suffic prove i complet time processor gamma j larger complet time processor gammaj prove induct i case suppos mode job or tower requir processor subset q i parallel process time i let earliest time schedul gammaj processor subset q avail let earliest time schedul gamma j processor subset avail list schedul algorithm start j i time thu schedul gamma j i complet time processor subset hand schedul gammaj i job j i cannot start earlier sinc accord definit order sequenc j i cannot start job j start therefor schedul gammaj i complet time processor q i least smaller sinc induct hypothesi assum final processor subset q i complet time gamma j i equal gamma j induct larger gammaj equal complet time processor gammaj i thu order larg job tower decid easi construct schedul wors given m fflcanon schedul follow prove instanc j problem pm jfixjc max m fflcanon schedul whose makespan close optim makespan theorem let j instanc problem pm jfixjc max ffl m fflcanon schedul gammaj j makespan gammaj bound proof optim schedul makespan optj j construct m fflcanon schedul j base optim schedul j chen a miranda let jl js set larg job set small job j respect accord definit equat consid small job block schedul assum small job block associ processor set p r processor r m time interv list partit processor set p divid layer small job block group correspond partit p follow layer type put group correspond partit j subcollect j note layer type may subcollect one partit p case put layer arbitrarili one one group ensur layer belong one group partit j p construct floor frame oe j whose type j height equal sum height layer belong group correspond partit j note far actual assign small job floor frame oe yet moreov sinc layer belong exactli one group easi see sum height floor frame oe equal sum height layer small job block equal height small job block construct floor frame last small job block gamma j slightli differ group layer processor idl thu sum height floor frame last small job block equal latest finish time larg job schedul construct floor frame small job block schedul small job js floor frame use follow greedi method small job j requir parallel process processor subset q assign j arbitrari floor frame oe small job block long floor frame oe satisfi follow condit type floor frame oe contain subset q ad job j oe exceed height floor frame oe if one floor frame satisfi condit arbitrarili pick one them note assign job floor frame mode job contain type floor frame therefor assign never leav gap two job floor frame assign small job js floor frame stop none small job left js assign floor frame accord rule floor frame becom floor small job block gamma j let set floor frame sinc height result floor larger height correspond floor frame sum height floor result floor frame larger height small job block therefor put floor small job block in arbitrari order make tower small job block gamma j give m fflcanon schedul job set jl j set small job assign floor frame procedur makespan schedul bound optj thing left still need schedul small job assign floor frame let j set small job assign floor frame procedur want demonstr mani job set j definit number small job block schedul gamma j j mffl j mffl sinc small job block associ processor number floor frame construct small job block bound bm therefor total number floor frame construct schedul bound bm j mffl moreov floor type collect processor subset set j contain mbm j mffl small job must subset q processor number small job mode q j larger number construct floor frame whose type contain subset q set floor frame whose type contain subset q assign rule assign job mode q j floor frame would exceed height correspond floor frame sinc small job mode q j sum process time small job mode q js larger hand construct floor frame small job block sum height floor frame whose type contain q smaller sum height layer whose type contain q summar small job block conclud sum smaller sum process time small job mode q js sinc small job mode q must contain consecut layer whose type contain q deriv contradict contradict show mbm j mffl small job set j assign small job j floor frame last small job block schedul gamma jl j small job j mode q j arbitrarili assign j floor frame whose type contain q last small job block even assign exce height floor frame note last small job block associ whole processor set pm mode q must floor frame last small job block whose type contain processor subset q procedur stop small job j assign floor frame last small job block easi see result schedul m fflcanon schedul origin job set j moreov sinc makespan schedul bound optj makespan m fflcanon schedul gamma j bound tj parallel process time small job j sinc small job set j lemma easi see optj therefor makespan m ffl canon schedul gamma j bound complet proof theorem close section introduc one definit definit let oe floor type pairwis disjoint subset processor processor set pm subset plu height l call room floor oe whose type q j chen a miranda approxim scheme come back origin problem pm jsetjc max recal instanc j problem pm jsetjc max set job job j given list altern process mode pair q specifi parallel process time ij job j subset q ij processor mprocessor system order describ polynomi time approxim scheme problem let us first discuss problem difficult classic job schedul problem classic job schedul problem job execut one processor system therefor order execut job processor crucial run time processor simpli equal sum process time job assign processor therefor decis job assign processor order uniqu determin makespan result schedul make possibl use dynam program approach extend schedul subset job larger subset situat gener multiprocessor job schedul problem pm jsetjc max hand complic particular makespan schedul depend assign process mode job also order job execut therefor techniqu extend schedul subset job classic job schedul problem directli applic here theorem show m fflcanon schedul whose makespan close optim makespan therefor construct schedul whose makespan larger makespan good m fflcanon schedul give good approxim optim schedul nice properti m fflcanon schedul within tower order floor affect height tower within floor order small job affect height floor see remark remark previou section therefor factor affect height tower floor assign job tower floor make becom possibl least small job appli techniqu classic job schedul problem current problem describ follow first suppos somehow divid job set j larg job set jl small job set js let us start m fflcanon schedul gammaj set j schedul gammaj give nondecreas sequenc f integ start finish time j mffl larg job jl let correspond tower g tower j consist subset p j processor suppos subset p j processor associ tower j known larg job tower schedul gammaj order sequenc term start time howev assum assign small job room schedul gammaj unknown show inform recov tower j associ processor set p number floor tower j q r number processor set p let oe j floor possibl differ type tower j floor oe jq let fl jq jq room floor oe jq r jq m therefor configur small job m fflcanon schedul gammaj algorithm schedulesmal input set js small job order larg job tower gammaj output schedul job set j ns mode q ij small job j true job j mode q ij addabl room fl jqr call list schedul algorithm base order construct schedul j room fl jqr run time jqr jqr return schedul construct step minimum makespan fig schedul small job floor specifi j mffl jqr specifi run time room fl jqr for index fj q rg correspond room fl jqr exist simpli set suppos upper bound run time room deriv use boolean array j mffl dimens describ configur subset small job schedul z number small job j schedul first small job floor gammaj run time room fl jqr jqr recal run time room depend assign small job room independ order small job execut room initi array element array suppos configur schedul first small job given say ith small job j mode q addabl room fl jqr configur room fl jqr type q ad job j room exceed upper bound run time room fl jqr readi present dynam program algorithm schedul small job room m fflcanon schedul gammaj algorithm given figur note algorithm schedulesmal may return m fflcanon schedul job set j fact guarante height tower construct algorithm exceed height correspond tower j chen a miranda origin m fflcanon schedul gammaj howev show schedul construct algorithm schedulesmal makespan bound makespan origin m fflcanon schedul gammaj lemma i ns array element way assign mode first small job arrang room room fl jqr run time jqr fj q rg proof prove lemma induct i case easili verifi suppos way w assign mode first small job arrang room room fl jqr run time jqr rg suppos w assign ith small job j process time ij room remov job j w obtain way assign mode first arrang room room fl jqr run time jqr fj q rg room fl j q r run time j q r induct hypothesi ith execut loop step algorithm schedulesmal mode small job j chosen q ij process time ij algorithm assign direct lemma prove similarli omit here lemma give us directli follow corollari corollari sequenc larg job tower order term start time m fflcanon schedul gammaj algorithm schedulesmal construct schedul job set j whose makespan bound makespan m fflcanon schedul gammaj proof note m fflcanon schedul gammaj give way assign arrang small job js room accord lemma correspond array element array must valu true array element step algorithm construct tower exactli type height correspond tower m fflcanon schedul gammaj thi may give exactli assign small job room howev run time correspond room must exactli same sinc sequenc given order sort start time larg job tower m fflcanon schedul gammaj lemma call step list schedul algorithm base order configur construct schedul whose makespan larger makespan m fflcanon schedul gammaj final sinc step algorithm return schedul minimum makespan construct step conclud algorithm return schedul whose makespan larger makespan gammaj analyz algorithm schedulesmal lemma let upper bound use algorithm schedulesmal run time room run time algorithm schedul small bound on mffl mffl proof number ns small job js bound total number n job j small job may differ mode also indic befor number room bound run time room bound fix i cannot mffl final check mffl compon valu jqr decid job j addabl room fl jqr conclus run time step algorithm schedulesmal bound on also attach mode assign room assign job j element true inform given configur true correspond schedul small job room construct easili backtrack dynam program procedur makespan comput time mffl therefor step algorithm take time conclus run time algorithm schedulesmal bound on mffl mffl discuss upper bound run time room deriv given instanc problem pm jsetjc max posit real number ffl job j specifi list altern process mode j recal g sum obvious upper bound makespan m fflcanon schedul j t makespan straightforward schedul assign job j mode correspond min start job j previou job j finish there fore m fflcanon schedul makespan better simpli return straightforward schedul particular valu upper bound run time room moreov sinc job set j take least amount work the work taken job equal parallel process time multipli number processor involv process system processor valu also provid lower bound optim makespan optj order appli algorithm schedulesmal need first decid set j split larg job set jl small job set js mode larg job type tower order larg job tower list schedul algorithm appli accord lemma number larg job form j k bmfflc definit number tower j mffl ffl fix number larg job number tower bound constant therefor use brute forc method exhaust tri possibl case achiev polynomi time approxim scheme problem pm jsetjc max combin standard scale techniqu concept m fflcanon schedul follow j chen a miranda algorithm approxschem input instanc j problem pm jsetjcmax output schedul j let j job set obtain scale job set j k bmfflc subset j l j job j mode assign job j possibl sequenc j order j job j l j call schedulesmal small job set j order construct schedul job set j use upper bound run time room schedul construct step minimum makespan replac job j correspond job j obtain schedul gamma j job set j return job schedul gamma j fig approxim scheme instanc pm jsetjc max problem j let construct anoth instanc n g problem j is job j ident j except process time ij replac bt ij kc say job set j obtain job set j scale process time k appli algorithm discuss instanc j construct schedul j schedul j induc formal algorithm present figur explain step convert schedul gamma j job set j schedul job set j first multipli process time start time job j schedul gamma j k but keep process mode is job j mode q ij process time bt ij kc start time gamma j replac job j mode q ij process time k let start time k equival proport expand schedul k expans schedul gamma j follow order term finish time correct process time increas process time job j k increas process time may caus mani job schedul delay start time unit particular increas may caus makespan schedul increas unit correct process time job j obtain schedul gamma j job set j lemma fix ffi run time algorithm approxschem problem pm jsetjc max bound on mffl j mffl proof sinc integ k bound bmfflc number j larg job j bound j therefor way choos larg job set j l sinc job may altern mode assign total number mode assign larg set j l bound tower associ subset processor set pm processor thu tower may associ differ subset pm therefor number differ sequenc j mffl tower bound final number permut j larg job j tower j summar togeth conclud number time algorithm schedulesmal call bound by obmfflc algorithm schedulesmal appli job set j upper bound run time room accord lemma call algorithm schedulesmal take time combin equat note ffi thu ffl fix constant conclud run time algorithm approxschem bound on mffl j mffl readi present main theorem theorem algorithm approxschem polynomi time approxim scheme problem pm jsetjc max proof prove lemma algorithm approxschem run polynomi time ffi fix constant therefor need show makespan schedul gamma j construct algorithm approx scheme instanc j problem pm jsetjc max time optim makespan optj instanc j let let gammaj optim schedul makespan optj schedul gammaj mode assign job fix thu particular mode assign make us abl split job set j larg job set jl small job set js accord job process time accord theorem m ffl canon schedul instanc j mode assign makespan gamma j bound consid room fl jqr m fflcanon schedul gamma j suppos small job assign room fl jqr schedul gamma j process time job j p gammaj thu must therefor mode assign with process time replac room assign correspond schedul gamma j set j room run time exceed thu lemma step algorithm approxschem loop stage larg job set mode assign tower type order larg job tower match schedul gamma j array element j chen a miranda correspond room configur schedul must valu true thu schedul gamma base configur construct makespan calcul note schedul gamma may exactli schedul must exactli makespan sinc step algorithm approxschem pick schedul gamma j smallest makespan schedul j construct step conclud makespan schedul gamma j larger makespan schedul gamma larger makespan schedul describ paragraph lemma obtain correspond schedul job set j first expand schedul gamma j k ie multipli job process time start time gamma j k let result schedul gamma j similarli expand schedul gamma j k obtain schedul gamma j makespan schedul gamma j larger makespan schedul gamma j sinc obtain proport expand schedul respect factor k moreov makespan gamma j larger makespan m ffl canon schedul two schedul use larg job set mode assign small job set mode assign room assign order larg job tower differ process time ij job j gamma j replac possibl smaller process time k correspond job j consequ conclud makespan schedul gamma j larger makespan m fflcanon schedul gamma j bound final obtain schedul gamma j job set j make correct process time job schedul gamma j precis replac process time k process time job j job set j correct process time job j may make makespan schedul increas therefor correct process time job j makespan final result schedul gamma j job set j construct algorithm approxschem bound makespan use fact optj m complet proof theorem conclus remark paper develop polynomi time approxim scheme pm jsetjc max problem fix constant m result achiev combin recent techniqu develop area multiprocessor job schedul plu classic dynam program scale techniqu note result signific improv previou result problem previou approxim algorithm problem pm jsetjc max approxim ratio bound constant independ number processor system result also confirm conjectur made amoura et al follow make remark work problem multiprocessor job schedul problem seem intrins difficult prob lem exampl number processor system given variabl input problem becom highli nonapproxim constant ffi polynomi time approxim algorithm problem approxim ratio smaller n observ plu difficulti develop good approxim algorithm problem peopl suspect whether pm jsetjc max problem fix maxnp hard present paper complet elimin possibl current form polynomi time approxim scheme may practic use yet even small integ reason small constant ffl time complex algorithm bound polynomi high degre hand algorithm show normal schedul ing whose makespan close optim one good normal schedul construct systemat interest investig tradeoff degre kind normal time complex approxim algorithm particular interest develop practic polynomi time algorithm system small number processor p jsetjc max note current known practic approxim algorithm p jsetjc max problem whose approxim ratio smaller a ratio approxim algorithm problem follow chen lee recent work gener pm jsetjc max problem moreov far approxim algorithm pm jsetjc max problem involv techniqu dynam program gener result algorithm high complex techniqu may avoid dynam program acknowledg author would like thank friesen frank ruskey help discuss r schedul independ multiprocessor task proof verif hard approxim problem schedul multiprocessor task dynam configur dedic processor schedul multiprocessor task three dedic processor schedul multiprocessor task three dedic processor inform process letter pp schedul multiprocessor task minim schedul length schedul multiprocessor task survey gener multiprocessor task schedul effici effect normal schedul three dedic processor simultan resourc schedul minim weight flow time complex schedul parallel task system comput intract guid theori npcomplet approxim algorithm schedul three dedic machin bound certain multiprocess anomali concret mathemat approxim algorithm schedul complex schedul multiprocessor task prespecifi processor alloc fast approxim algorithm knapsack sum subset problem approxim algorithm diagnost test schedul multicomput system schedul multiprocessor task without prespecifi processor allo cation current trend determinist schedul approxim algorithm multiprocessor task schedul tr ctr c w duin e van slui complex adjac resourc schedul journal schedul v n p februari klau jansen lorant porkolab polynomi time approxim scheme gener multiprocessor job shop schedul journal algorithm v n p novemb jianer chen xiuzhen huang iyad a kanj ge xia polynomi time approxim scheme parameter complex discret appli mathemat v n p januari