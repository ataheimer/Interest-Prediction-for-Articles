t comparison static analysi evolutionari test verif time constraint a paper contrast two method verifi time constraint realtim applic method static analysi predict worstcas bestcas execut time task code analyz execut path simul processor characterist without ever execut program requir program input evolutionari test iter test procedur approxim extrem execut time within sever gener execut test object dynam measur execut time input guid yield gradual tighter predict extrem execut time examin approach number real world exampl result show static analysi evolutionari test complementari method togeth provid upper lower bound worstcas bestcas execut time b introduct realtim system correct system function depend logic correct well tempor correct accordingli verif tempor behavior import activ develop realtim system tempor behavior gener examin perform schedul analysi ensur task execut finish within specifi deadlin model schedul analysi commonli base assumpt worstcas execut time wcet known specif model assum wcet must exceed task deadlin bestcas execut time bcet may also use predict system util ensur minimum sampl interv met techniqu static analysi sa use cours system design order assess execut time plan task precondit schedul analysi static time analysi constitut analyt method determin bound wcet bcet applic sa simul time behavior cycl level hardwar concept cach pipelin given processor approach discuss paper use method static cach simul follow path analysi within time analyz time estim calcul without knowledg input without execut actual applic dynam test one import analyt method assur qualiti realtim system serv verif well valid sy tem investig exist test method show mostli concentr test logic correct lack support test tempor system behavior reason develop new approach test tempor behavior realtim system evolutionari test et et search automat test data produc extrem execut time order check time constraint specifi system vio late search perform mean evolutionari comput although sa et usual appli differ phase system develop procedur aim estim shortest longest execut time sy tem make comparison two method interest approach compar paper help sever exampl chapter offer gener overview relat work sa well test third chapter describ tool employ sa afterward chapter introduc et approach use determin minimum maximum run time differ system chapter summar obtain result discuss chapter seen combin sa et make reliabl definit extrem run time possibl import statement summar chapter also includ short outlook futur work relat work section present overview publish work time analysi realtim system follow discuss previou work test method realtim system time analysi realtim system bound wcet program difficult task due undecid halt problem static wcet analysi subject constraint use program languag construct underli oper system instanc upper bound number loop iter known indirect call use memori alloc dynam often recurs function also allow although exist outlin treat bound recurs similar bound loop recent research area predict wcet program made number advanc convent method static analysi extend unoptim program simpl cisc processor optim program pipelin risc processor uncach architectur instruct cach data cach today mainli three fundament model static time analysi exist first sourcelevel orient time schema propag time tree handl pipelin risc processor firstlevel split cach second constraintbas method model architectur aspect includ cach via integ linear program third approach use dataflow analysi model cach behavior separ pipelin simula tion handl later time analyz via path analysi first second approach use integr analysi cach approach use separ analysi allow us deal multilevel memori hierarchi unifi cach anoth approach use dataflow analysi model cach origin use categor approach differ dataflow model recent approach gener handl number dataflow solut differ complex accuraci presenc cach nonpreempt schedul initi assum prevent undeterminist behavior due absenc unpredict context switch point context switch occur arbitrari point eg preemptiv system cach invalid may occur result unexpect cach miss execut task resum later on hardwar softwar approach propos counter problem find littl use practic due loss cach perform cach partit recent attempt made incorpor cach ratemonoton analysi responsetim analysi allow wcet predict nonpreempt system use analysi preemptiv schedul system approach seem promis sinc inform gather static time analysi util within extend framework schedul analysi test realtim system analyt qualiti assur play import role ensur reliabl correct realtim system sinc number shortcom still exist within develop life cycl practic dynam test import analyt method assur qualiti realtim system method examin runtim behavior base execut applic environ embed system test typic consum overal develop effort budget one complex timeconsum activ within develop realtim system comparison convent softwar system examin addit requir like timeli simul taneiti predict make test costli technic characterist like develop hosttarget environ ment strong connect system environ frequent use parallel distribut faulttoler mechan complic test aim test find exist error system creat confid system correct behavior execut test object select input test realtim system logic system behavior well tempor behavior system need examin thoroughli investig exist test method show number proven test method avail examin logic correct system lack support test tempor behavior sy tem work deal test tempor behavior realtim system braberman et al publish approach base model system design particular formal defin sasdrt notat translat highlevel time petri net formal model symbol represent tempor behavior form time reachabl tree path root tree leav repres poten sourc file compil inform control flow cach simul configur idcach interfac user analyz time user time request time predict virtual address inform address calcul addr info rel data decl depend machin inform categor idcach figur framework time predict tial test case tree alreadi becom extens small program number test case must restrict accord differ criteria result practic trial test approach report mandrioli et al develop interact tool enabl gener test case realtim system formal specif written trio languag trio extend classic tempor logic deal explicitli time measur present howev applic tool restrict small system whose properti specifi simpl trio formula clark lee well dasarathi describ techniqu verifi time constraint use time process algebra finitest machin approach demand use formal specif techniqu sinc use formal method yet gener adopt industri practic due great expenditur connect lack matur exist tool test approach mention spread far industri particularli sinc suitabl approach mani case remain restrict small system accordingli special method avail moment suit test tempor behavior realtim system reason tester usual go back convent test procedur develop origin examin logic correct eg systemat blackbox whitebox orient test method sinc tempor behavior complex system hard comprehend therefor examin insuffici tradit test method exist test procedur must supplement new method concentr determin whether system violat specifi time constraint therefor examin applic evolutionari test et test tempor behavior realtim system static analysi sa framework wcet predict use set tool depict figur optim compil modifi emit controlflow inform data informa tion call structur function addit regular target code gener now research compil vpccvpo perform task current integr gnatgcc environ static cach simul use controlflow inform call structur conjunct cach configur produc instruct data categor describ cach behavior instruct data refer current use separ analyz instruct data cach sinc data refer requir separ preprocess via address calcul current work also includ singl analyz unifi cach handl secondari cach time analyz use categor controlflow inform perform path analysi program predict bcet wcet portion program entir program depend user request experi describ section chose architectur without cach reason also explain section thu portion toolset shade grey figur use experi next describ interact variou tool entir framework framework retarget chang cach configur port machin descript how ever largest retarget overhead constitut port compil thu current effort integr gnatgcc framework greatli improv portabl static cach simul static cach simul provid mean predict cach behavior instruct data refer programtask see static cach simul figur address instruct refer obtain controlflow inform emit compil address data refer calcul address calcul see figur locat data declar global data obtain offset rel address local data translat virtual address take context process account instruct data refer cach behavior di categori st refer consecut ref alwayshit hit hit alwaysmiss miss miss firsthit miss hit firstmiss hit miss tabl categor cach refer tinguish categori describ tabl categori cach behavior first refer consecut refer distinguish consecut refer strictli due loop sinc distinguish function invoc call site data cach addit categori call calcul denot total number data cach miss refer within loop memori refer program may consist number loop possibl nest distribut sever function loop level instruct receiv distinct categor time analyz deriv tight bound execut time inspect categor loop level sinc instruct categor determin interprocedur analysi entir program call graph program analyz method static cach analysi trace origin call within call graph distinguish function instanc sinc instruct categor function specifi function instanc time analyz interpret differ cach behavior depend call sequenc yield tighter wcet predict static cach simul determin categori instruct base novel view cach memori use variat iter interprocedur dataflow analysi dfa follow inform result dfa ffl abstract cach state describ program line map certain cach block may potenti cach within control flow ffl linear cach state contain analog inform hypothet absenc loop ffl postdomin set describ program line certain still reach within control flow dataflow inform also reduc respect certain subset particular check inform avail within certain loop level formal framework analysi instruct data cach describ dataflow inform provid mean deriv categori exampl setassoci instruct cach multipl level associ follow categori deriv loop level instruct worstcas cach behavior alwayshit on spatial local within program line the instruct cach absenc loop there conflict instruct cach state all conflict fit remain associ level firsthit the instruct firsthit inner loop it potenti cach even without loop even loop prehead alway execut loop conflict fit remain associ level conflict within loop fit remain associ level loop header even disregard loop firstmiss instruct firstmiss inner loop potenti cach conflict fit remain associ level conflict within loop do alwaysmiss conserv assumpt predict worstcas execut time none condit appli loop header entri block loop least one predecessor block outsid loop call pre header least one predecessor block insid loop time analysi time analyz see figur calcul bcet wcet construct time tree travers path within loop level propag time inform bottomup within tree travers time analyz simul hardwar characterist eg pipelin instruct categor interpret time analyz take cach configur account instead instruct categoriza tion introduc abov use interpret cach behavior approach split cach analysi via static cach simul time analysi make cach aspect complet transpar time analyz sole base instruct categor time analyz deriv wcet propag time predict bottomup within time tree time tree repres call structur loop structur entir program seen context static cach simul function distinguish call path function instanc allow tighter predict wcet due enhanc inform call context function instanc regard loop level with one iter repres node time tree regular loop within program repres child node surround function instanc outermost loop child node anoth loop nest in time analyz determin bcet wcet bottomup travers tree node possibl path sequenc basic block within current loop level analyz describ detail wcet child node encount along path wcet alreadi calcul simpli ad wcet current path sometim small adjust adjust necessari transit firstmiss firstmiss alway miss firsthit loop level loop n iter fixpoint algorithm use determin cumul wcet loop along sequenc possibl differ path pattern longest path establish remain iter calcul close formula practic loop one longest path thu first iter need adjust wcet child loop along path second iter repres fixpoint time remain iter scope wcet analysi limit one loop level time make time analysi effici compar exhaust analysi permut path within program see detail descript time analyz analog descript bcet evolutionari test et evolutionari test new test approach combin test evolutionari comput first experi applic et examin tempor behavior realtim system achiev promis result ten experi perform et alway achiev better result compar random test respect effect well effici extrem execut time found mean evolutionari comput less equal test effort random test see detail brief introduct evolutionari compu tation evolutionari algorithm repres class adapt search techniqu procedur base process natur genet darwin theori evolut character iter procedur work parallel number potenti solut popul indi vidual everi individu permiss solut valu variabl optim problem code evolutionari algorithm particularli suit problem involv larg number variabl complex input do main even nonlinear poorli understood search space evolutionari algorithm use success robust evolutionari search optim process base three fundament principl select recom binat mutat concept evolutionari algorithm evolv success gener increasingli better combin paramet significantli effect overal perform design start select good individu evolutionari algorithm achiev optimum solut random exchang inform increasingli fit sampl recombin introduct probabl independ random chang mutat adapt evolutionari algorithm achiev select reinsert procedur sinc base fit fitnessvalu numer valu express perform individu regard current op timum notion fit essenti applic evolutionari algorithm degre success use may depend critic definit fit function chang neither rapidli slowli design paramet figur give overview typic procedur evolutionari optim reinsert evalu mutat recombin select optim criteria met initi evalu figur process evolutionari com putat first popul guess solut problem initi usual random individu popul evalu calcul fit result obtain rang poor good remaind algorithm iter optimum achiev anoth stop condit fulfil pair individu select popul combin way produc new guess analog way biolog reproduct select combin algorithm numer vari survey found recombin offspr undergo mutat mutat occasion random chang valu alter featur unpredict consequ mutat like random walk search space use maintain divers popul keep popul prematur converg one local solu tion besid mutat creat genet materi may present current popul afterward new individu evalu fit replac individu origin popul lower fit valu reinsert therebi new popul individu develop consist individu previou gener newli produc individu stop condit remain unfulfil process describ repeat appli evolutionari comput test tempor system behavior major object test find error describ section realtim system test logic correct standard test techniqu fact correct realtim system depend logic result comput also provid result right time add extra dimens verif valid system name tempor correct must check tempor behavior realtim system defect comput input situat exist violat specifi time constraint normal violat mean output produc earli comput take long task tester therefor find input situat shortest longest execut time check produc tempor error search shortest longest execut time regard optim problem evolutionari comput seem appropri solut evolutionari comput enabl total autom search extrem execut time use evolutionari optim determin shortest longest execut time individu popul repres test datum test object execut experi initi popul gener ran dom test data obtain systemat test principl could also use initi popul thu evolutionari approach benefit tester knowledg system test everi test datum execut time measur execut time determin fit test datum one search wcet test data long execut time obtain high fit valu convers search bcet individu short execut time obtain high fit val ue member popul select regard fit subject combin mutat gener new test data mean select decid test data chosen reproduct order retain divers popul avoid rapid converg local optima fittest individu select also individu low fit valu obtain chanc recombin experi stochast univers sampl use select strategi recombin test data discret recombin appli simpl exchang variabl valu individu see figur probabl mutat individu variabl set invers proport number variabl dimens one individu ha smaller mutat probabl singl variabl mutat rate use success multitud experi check gener test data input domain test object then individu produc also evalu execut test object them afterward new individu unit previou gener form new popul accord reinsert procedur laid down experi appli reinsert strategi gener gap next gener therefor contain offspr parent sinc popula tion individu replac offspr process repeat itself start select given stop condit reach eg certain number gener reach execut time found outsid parent offspr figur discret recombin four randomli defin crossov point specifi time constraint case tempor error detect time found meet time constraint specifi system test confid tempor correct system substanti experi evolutionari test stop predefin number gener specifi accord complex test object respect number input paramet line code loc verifi time constraint sa vs et use sa et five experi determin bcet wcet differ system except last two exampl describ section program test come typic realtim system use practic test program chosen sinc three cover differ area within industri applic daimler benz compani remain two program serv refer relat work use exampl generalpurpos algorithm within realtim appli cation test program also cover wide rang realtim applic within graphic transport defens numer analysi standard algorithm cours result depend hardwaresoftwar platform gener directli transfer one anoth sinc processor speed compil use directli affect tempor behavior experi describ follow carri sparcstat ipx run solari mhz execut time processor cycl deriv sa et chose sparc ipx platform sinc architectur cach current stage devel opment time analyz sa support either instruct cach categor data cach categor work extens support categor time et execut time measur use perform measur tool quan tifi avail ration quantifi perform cyclelevel time though object code instrument thu overhead oper system rule out execut time report repeat run ident paramet howev quantifi take effect cach account thu need uncach architectur perform experi sa approach util pipelin simul time analyz experi instruct execut simul fivestag pipelin throughput one instruct per cycl case commonli found risc architectur load store instruct caus stall two cycl access memori float point instruct result stall vari durat specifi best case worst case oper time analyz calcul conserv estim number cycl requir execut base path analysi worst case estim guarante greater equal actual wcet convers estim less equal actual bcet librari evolutionari algorithm appli et matlabbas toolbox develop daimlerbenz laboratori hartmut pohlheim provid multitud differ evolutionari oper se lection recombin mutat reinsert experi evolutionari algorithm appli twice first find longest execut time shortest fit set equal either execut time measur processor cycl longest path reciproc shortest path popul size vari experi accord complex test object pair test data chosen random combin use differ oper like discret recombin doubl crossov depend represent individu mutat probabl set invers proport length individu mean decid optimum path found et usual allow continu gener stop test object first exampl simpl comput graphic function c check whether line cover given rectangl side parallel axe coordin system function two input paramet line given coordin line end point rectangl describ use posit upper left corner width height amount eight atom input variabl altogeth function loc contain total statement program branch second applic come field railroad control technolog concern safetycrit applic detect discrep separ channel redund system loc differ input paramet binari variabl variabl rang variabl rang third applic concern come field defens electron applic extract characterist imag pictur matrix analyz regard bright signaltonois ratio brightest point background establish defens electron program loc integ input paramet first two input paramet repres posit pixel window lie within rang respect remain program graphic railroad defens matrix sort method best worst best worst best worst best worst best worst sa actual na na na na na na tabl execut time cycl test program paramet defin array pixel repres graphic input locat around specifi posit integ describ pixel color lie rang fourth sampl program multipli two integ matric size store result third matrix integ paramet rang permiss element matric matrix oper typic embed imag process applic fifth test program perform sort array integ number use bubblesort algorithm arbitrari integ valu sort sort oper common countless applic within beyond area realtim system experi test object mention shortest best longest worst execut time determin result experi summar tabl best case worst case first row depict result static analysi last row show measur evolutionari test middl row show actual shortest longest execut time multipl matric bubblesort algorithm easili determin appli systemat test notic actual execut time could determin certainti absenc cach due hardwar complex exampl actual realtim system complex regard function extrem execut time cannot definit determin systemat test applic use practic normal case comput graphic exampl sa calcul lower bound processor cycl shortest execut time upper bound cycl longest execut time et discov shortest time cy cle longest time cycl within genera tion popul size set gener addit gener test data set produc longer shorter execut time thu shortest execut time determin vari longest railroad technolog exampl popul size et increas complex input interfac test object pa ramet start first gener continu improv th gener could observ et suggest et would find even extrem execut time number gener in creas shortest execut time found et far cycl nearli cycl comput sa longest execut time determin cy cle vari one calcul sa cycl therefor worstcas execut time exampl alreadi defin accur gener guarante maximum execut time task lie cycl cycl defens electron program input param ter therefor popul size experi also set exampl evolutionari algorithm use gener pictur surround given posit number gener increas larg rang variabl larg number input paramet longest execut time increas steadili new gener asymptot toward current maximum cycl run termin gener fastest execut time found gener compar result achiev sa signific differ could observ estim extrem execut time calcul sa cycl cycl closer analysi possibl caus deviat lead possibl certain instruct assum take differ time pipelin execut instruct question multipli divid account multipl cycl execut stage current tri isol effect quantifi tool allow proper comparison sa next exampl tabl multipl matric due function simplic minimum maximum run time easili determin systemat test repres special input situat longest execut time cycl result element matric set largest permiss valu shortest run time cycl result matric fulli initi et appli multipl matric singl individu made paramet result search space far largest exampl present here gener individu paramet valu gener nevertheless number gener exampl increas search longest execut time maximum cycl found evolutionari algorithm found execut time lie good absolut maximum longest execut time determin help sa cycl exce absolut maximum shortest execut time determin evolutionari algorithm cycl mean deviat compar actual shortest run time deviat sa nearli similar execut time cycl lie actual valu last exampl bubblesort algorithm determin extrem run time easi help systemat test longest execut time bubblesort result list sort revers amount cycl shortest run time result cours sort list lead execut time cycl longest execut time found et cycl come close actual maximum deviat less upper bound cycl longest execut time determin sa exce actual one overestim caus defici algorithm interpol execut time loop particular two loop nest loop counter inner loop whose initi valu depend counter outer loop current time analyz estim number iter inner loop conserv maximum number iter outer loop work method handl loop depend correctli estim number iter nest loop case inner loop n iter coars estim cycl half estim valu calcul take actual loop overhead account ie valu would around actual valu discuss refer adjust valu shortest execut time bubblesort algorithm insuffici evalu evolutionari optim cycl although shorter run time continu found gener result far absolut minimum reason current work focus detail analysi bubblesort exampl improv et result also main focu bound wcet sinc provid mean verifi deadlin cannot miss import properti realtim system shortest execut time determin sa cycl differ absolut minimum discuss measur last section show method static analysi et bound actual execut time sa alway estim extrem execut time way actual run time possibl system never exceed them et provid actual occur execut time worst case estim sa provid upper bound measur et give lower bound actual time convers sa estim provid lower bound bestcas time et measur constitut upper bound half experi actual execut time bound within sigma better respect rang execut time determin sa result directli applic schedul analysi provid high confid rang actual wcet case variat two approach sigma may still yield use result schedul analysi regard sigma threshold use result sens larger deviat two method may accur enough guarante enough processor util even though may safe multipl matric defens exampl larger variat detect indic approach need investig improv precis overhead estim extrem execut time differ approach et requir execut test program mani gener larg number input data ie overhead depend actual execut time test object addit delay caus time sa requir test overhead order second test program sinc one simul suffic predict extrem execut time ie overhead independ actual execut time instead overhead depend complex combin call graph controlflow graph entir program roughli increas quadrat program size sa automat yield time estim entir applic also estim arbitrari subroutin portion control flow obtain correspond data et test object isol prerequisit perform sa knowledg cyclelevel behavior target processor suppli configur file et approach work wide rang time method one hand hardwar timer calcul wallclock time may use without knowledg actual hardwar method highli portabl subject interfer hardwar softwar compon eg cach oper system hand cyclelevel time inform exclud instrument instruct may calcul part program execut seen experi portabl method constrain portabl instrument tool summari et approach cannot provid safe time guarante measur actual run system et univers applic arbitrari architectur requir knowledg input specif sa approach yield conserv estim safe approxim actual execut time requir knowledg loop frequenc inform cyclelevel behavior actual hardwar new hardwar featur implement simul limit portabl sa hardwar detail known et approach appli hardwar avail yet specif hardwar suppli sa approach yield result regard two method complementari ap proach whenev deadlin guarante sa use yield safe estim wcet et may use addit bound extrem execut time precis furthermor et may suffic miss deadlin toler sporad wcet schedul analysi also deriv sa hard realtim environ soft realtim environ may choos sa et even mean sa et gener everi realtim system test logic well tempor correct ness independ method use system de sign recommend appli et valid tempor correct system confid applic increas sinc et check time violat mani input configur conclus futur work work introduc two method verifi time constraint actual realtim applic name method static analysi method evolutionari test method implement evalu number test program respect predict worstcas bestcas execut time result show method complimentari sens bound actual extrem execut time opposit end investig program actual execut time best worst case could guarante fairli high precis within sigma mean result method rel possibl execut time determin static analysi less precis result obtain experi indic improv approach necessari ensur gener applic current work static analysi includ extens handl loop depend integr gnatgcc compil current work evolutionari test focus develop robust algorithm reduc probabl get caught local optima furthermor suitabl stop criteria termin test defin program code avail degre coverag achiev evolutionari test observ program path execut could interest aspect decid stop test promis criteria seem branch path coverag strong correl program control flow execut statement result execut time coverag reach also use assess test qualiti compar evolutionari test systemat function test anoth area want intensifi research futur order estim thoroughli effici differ test approach examin realtim system tempor behavior comparison evolutionari test portabl requir extens experiment mani program execut static analysi lower overhead simul process requir detail inform hardwar characterist extens simul model new architectur featur recommend worstcas execut time schedul analysi deriv static analysi hard realtim environ soft realtim environ may choos static analysi evolutionari test furthermor suggest evolutionari test use increas confid tempor correct actual run system r bound worstcas instruct cach perform reduc bia ineffici select algorithm portabl global optim linker test time behavior realtim softwar ad instruct cach effect schedul analysi preemptiv realtim system test realtim constraint process algebra set time constraint realtim system construct express test larg appli compil techiniqu cach behavior predict integr time analysi pipelin instruct cach effici worst case time analysi data cach analysi cacherel preemption delay fixedprior preemptiv schedul cach model realtim softwar beyond direct map instruct cach function test case gener realtim system static cach simul applic time predict multilevel cach art softwar test predict program execut time analyz static dynam program path genet evolutionari algorithm toolbox use matlab document calcul maximum execut time realtim program free softwar foundat automat gener softwar test data use genet algorithm test realtim system use genet algorithm tr ctr sibin mohan worstcas execut time analysi secur polici deepli embed realtim system acm sigb review v n p januari mark harman joachim wegen get result searchbas approach softwar engin proceed th intern confer softwar engin p may kiran seth aravindh anantaraman frank mueller eric rotenberg fast frequencyawar static time analysi acm transact embed comput system tec v n p februari kaustubh patil kiran seth frank mueller composit static instruct cach simul acm sigplan notic v n juli john regehr random test interruptdriven softwar proceed th acm intern confer embed softwar septemb jersey citi nj usa ajay dudani frank mueller yifan zhu energyconserv feedback edf schedul embed system realtim constraint acm sigplan notic v n juli aravindh anantaraman kiran seth kaustubh patil eric rotenberg frank mueller virtual simpl architectur visa exceed complex limit safe realtim system acm sigarch comput architectur new v n may yifan zhu frank mueller feedback edf schedul realtim task exploit dynam voltag scale realtim system v n p decemb andr baresel david binkley mark harman bogdan korel evolutionari test presenc loopassign flag testabl transform approach acm sigsoft softwar engin note v n juli denni brylow jen palsberg deadlin analysi interruptdriven softwar ieee transact softwar engin v n p octob