t bound model check use satisfi solv a phrase model check refer algorithm explor state space transit system determin obey specif intend behavior algorithm perform exhaust verif highli automat manner and thu attract much interest industri model check program commerci market howev model check held back state explos problem problem number state system grow exponenti number system compon much research devot amelior problemin tutori first give brief overview histori model check date focu recent techniqu combin model check satisfi solv techniqu known bound model check fast explor state space type problem seem offer larg perform improv previou approach review experi bound model check public domain industri design propos methodolog appli techniqu industri invari check summar pro con new technolog discuss futur research effort extend capabl b figur must caus initi state visit infinit often particular reason counter work way use exampl illustr fair constraint impos bound model check given fair constraint counterexampl live properti afba would need includ transit state path loop befor addit constraint a b hold somewher loop chang gener boolean formula follow backloop tss state requir equival either s s add term requir ab hold loop exampl possibl loop the case s would replac a ci defin ai bi counterexampl would satisfi fair constraint case result proposit formula would unsatisfi convers cnf satisfi test proposit formula known npcomplet problem known decis procedur exponenti worst case howev may use differ heurist guid search and therefor exhibit differ averag complex practic precis character hard certain proposit problem difficult like depend specif decis procedur use mani proposit decis procedur assum input problem cnf conjunct normal form usual goal reduc size cnf version formula although may alway reduc complex search experi been howev reduc size cnf reduc time satisfi test well cnf repres set claus claus set liter liter either posit neg proposit variabl word formula conjunct claus claus disjunct liter exampl a _b _c d _e repres ffabcgfdegg cnf also refer claus form given boolean formula f one may replac boolean oper f _ appli distribut rule de morgan law convert f cnf size convert formula exponenti respect size f worst case occur f disjunct normal form avoid exponenti explos use structur preserv claus form transform procedur booltocnf f vf f case cach f v return clausevf return claus f vf f hg return clausevf fig algorithm gener conjunct normal form f g h boolean formula v vh vg boolean variabl repres boolean oper figur outlin procedur statement underlin repres differ case consid assign symbol denot equal given boolean formula f boolto return set claus c satisfi origin formula f satisfi note c logic equival origin formula but rather preserv satisfi procedur travers syntact structur f introduc new variabl subexpress gener claus relat new variabl figur use symbol g h denot subexpress boolean formula f use vf vg vh denot new variabl introduc f g h c c denot set claus subexpress q cach call cachedq return variabl vq introduc q procedur claus translat boolean formula claus form replac boolean connect implic equal etc combin and negat oper subsequ convert deriv formula conjunct normal form brute forc manner appli distribut rule de morgan law exampl u v boolean variabl claus call u return ffuvgfuvgg note claus never call booltocnf liter so practic cost convers quit accept v vh vg boolean variabl boolean oper v vh vg logic equival claus form clausevf vh vg claus contain liter intern repres boolean formula f direct acycl graph dag ie common subterm f share procedur booltocnf preserv share subterm subterm f one set claus gener boolean formula f booltocnf ftrue gener claus set c ojfj variabl ojfj claus jfj size dag f figur assum f involv binari oper howev unari oper negat handl similarli also extend procedur handl oper multipl operand particular treat conjunct disjunct nari oper exampl let us assum vf repres formula vni ti claus form then ffvf tgfvf tgfvf tngfvf ttngg treat binari oper need introduc n new variabl subterm vni ti optim comparison two regist r occur subformula viri convert claus form without introduc new variabl experiment result carnegiemellon univers model checker implement call bmc base bound model check input languag subset smv languag take circuit descript properti proven user suppli time bound k gener type proposit formula describ section support dimac format cnf formula input format prover tool base stalmarck method experi use prover tool well two public domain sat solver sato grasp use dimac format first discuss experi circuit avail public domain known difficult bddbase approach first investig sequenti multipli shift add multipli specifi sequenti multipli finish output output certain combin multipli c circuit isca benchmark set input word appli multipli c multipli x bit multipli allow output bit togeth overflow bit check properti output bit individu result shown tabl bddbase model checker use manual chosen variabl order bit regist interleav dynam reorder applic tri chang reorder fli fail find consider better order reason amount time proof multipli finish finit number step involv verif simpl live properti check instantli bdd base method bound model check asynchron circuit distribut mutual exclus describ consist n cell n user want exclus access share resourc prove live properti request use resourc eventu acknowledg live properti true asynchron gate delay execut indefinit assumpt model fair constraint fair constraint explain section cell exactli gate therefor model n bit sec mb sec mb sato sec mb prover sec mb sum tabl x bit sequenti shift add multipli overflow flag output bit n number cell sinc bound maxim length counterexampl verif circuit could verifi live properti complet rather show counterexampl particular length k illustr perform bound model check chose result found tabl repeat experi buggi design simpli remov sever fair constraint prover sato gener counterexampl a step loop nearli instantli see tabl cell sec mb sec mb sato sec mb prover sec mb sato sec mb prover sec mb tabl live one user dme cell sec mb sec mb sato sec mb prover sec mb segment tabl counterexampl live buggi dme experi industri design section discuss seri experi industri design check whether certain predic invari design first explain optim bound model check use experi bound cone influenc cone influenc reduct well known techniqu reduc size model proposit formula specif depend state variabl structur basic idea cone influenc coi reduct construct depend graph state variabl specif build depend graph state variabl repres node node edg eman node repres state variabl upon combin depend set state variabl depend graph call coi variabl specif paper call classic coi differenti bound version variabl classic coi influenc valid specif therefor remov model idea extend call bound cone influenc formal definit bound coi given give here intuit explan intuit that bound time interv need consid everi state variabl classic coi time point exampl check ef p p proposit formula time bound k would need consid state variabl upon p combin depend initi valu consist p hold ef p would evalu true without need consid addit state variabl classic coi let us conveni call set state variabl upon p combin depend initi support could prove ef p true want check would need consid set state variabl upon initi support depend may includ alreadi initi support set feedback present underli circuit clearli set union initi support set plu second support set state variabl upon truth valu ef p depend time again alway subset state variabl entir classic coi restrict expand formula section variabl bound coi particular k get smaller cnf formula gener expand entir classic coi main idea behind bound cone influenc cone influenc reduct seem discov util number peopl independ note seen special case kurshan local reduct powerpc circuit experi ran experi subcircuit powerpc microprocessor design motorola somerset design center austin texa processor design somerset design insert assert regist transfer level rtl simul model boolean express import safeti properti ie properti hold time point assert ever fals simul immedi error flag experi check use bmc two public domain sat checker sato grasp assert chosen differ processor design block turn ag p properti p origin assert these we check whether p tautolog check whether p otherwis invari check whether ag p held variou time bound k gate level netlist design block translat smv file latch repres state variabl individu next state initi state assign latter assign valu knew latch would design poweronreset sequenc primari input design block model unconstrain state variabl ie neither next state initi state assign combin tautolog check elimin initi statement ran bmc bound check inner proposit formula p ag p specif condit specif could hold p true assign state variabl support invari check entail check whether proposit formula hold initi state preserv transit relat latter mean successor state satisfi formula also satisfi it condit met call predic induct invari ran bmc input file initi assign intact design block p ag p specif time bound determin whether formula p held singl valid initi state design ran bmc mode which design block ag p specif initi assign remov input file and instead initi state predic ad indic initi state state satisfi p note realli believ initi state actual satisfi p techniqu simpli way get bmc tool check successor state satisfi p one time step time bound k set ag p specif check specif held show p preserv transit relat sinc ag p could hold circumst successor everi state satisfi p also satisfi p note ag p hold condit could possibl due exclus behavior unreach state instanc unreach state s exist satisfi p successor s not check would fail therefor possibl bad behavior unreach state techniqu show p invari cannot show not howev found type induct invari check inexpens bound model check and therefor valuabl fact made cornerston methodolog recommend section experi use grasp sato satisfi solver give result howev indic solver came rather show best result two actual interest justif thi experi time need satisfi solv often second usual minut howev problem instanc particular sat tool labor far longer timeout limit reach quit often found one sat solv tool need abort problem instanc anoth tool handl quickli and addit solver often switch role later problem instanc former slow solver suddenli becom fast former fast one slow sinc memori cost satisfi solv usual slight make sens give particular sat problem parallel sever solver version solver differ command line argument simpli take first result come in so method run multipl solver did job someth recommend smv input file given recent version smv model checker the smvversion refer earlier compar bdd base model check smv run check ag p specifi cation separ run smv use command line option enabl earli detect microprocessor gener design specifi reset sequenc powerpc design result valu latch known design appropri initi state model check reachabl analysi fals ag p properti mode verifi need comput fixpoint counterexampl exist made comparison bmc appropri also enabl dynam variabl order run smv experi run wall clock time limit satisfi solver given minut wall clock time maximum complet run smv given hour run bmc itself never time task translat design descript specif usual done quit quickli satisfi solv smv run done rs model workstat megabyt local memori environ model model interfac subcircuit ran experi rest microprocessor extern comput system processor would eventu place commonli refer environ model one would ideal like environ model subcircuit experi on sinc close system rather depend correct function upon input constraint ie certain input combin sequenc occur rest system must guarante howev type invari check did one would alway assur true posit sinc safeti properti hold total unconstrain environ hold real environ thi proven like industri design team would first check safeti properti unconstrain environ sinc care environ model time consum would decid individu basi properti fail invest environ model accur model check order separ fals failur real one hope digit simul find real violat exist importantli model checker counterexampl could provid hint simul complet design subcircuit may need run instanc counterexampl may indic certain instruct need execut certain except occur etc properti pass invari test need digit simul thu conserv cpu resourc exampl run neg prove upon inspect design fals neg experi still yield howev use inform capac speed bound model check further section describ methodolog reduc elimin fals neg experiment result mention check safeti properti distribut across design block singl powerpc micro processor control circuit littl datapath element size follow circuit latch pi gate bbc ccc cdc dlc circuit spec latch pi dlc tabl classic coi primari input tabl report size circuit classic coi reduct appli ag p specif given arbitrari numer label circuit relat specif differ design block eg specif dlc way relat specif sdc mani properti involv much cone circuitri design block seen larg number specif cone influenc number latch pi howev reduc circuit ident one specif anoth though share much circuitri tabl give result tautolog induct invari check p ag p specifica tion run done bound coi enabl column tautolog check preserv transit relat preserv initi state last two condit must hold boolean formula induct invari ay leftmost part column indic condit hold n not record time memori usag may appear it separ slash record time second memori usag megabyt otherwis appear insignific time memori seen tautolog invari check remark inexpens extrem import find quit costli bdd base method heart verif methodolog propos section surpris small number assert combin tautolog expect design would tri insur safeti properti held reli combin oppos sequenti circuitri howev real environ may fact constrain input design block combin combin tautolog see section discuss thi state abov mani exampl exhibit fals neg low time bound exampl found induct invari satisfi solv went quickli high valu k counterexampl exist low valu k properti invari difficult sat run neither counterexampl proof correct found tabl show four exampl type bbc spec sdc spec result again obtain use bound coi also ran exampl use classic coi observ improv bound coi bring rel classic coi wear higher k valu specif valu near intuit due fact that extend time eventu comput valuat state variabl classic cone influenc howev sinc expect bound model check effect find short counterexampl bound coi help augment system strength tabl long k highest k valu satisfi solv accomplish var claus list number liter claus cnf file highest k level time column give cpu time second run highest k valu regard memori usag usual exceed ten megabyt roughli storag need cnf formula itself tabl list circuit specif either shown induct invari counterexampl found column hold indic find induct invari n exist counterexampl counterexampl next column fail k give valu k counterexampl found sinc counterexampl found k valu list time memori usag extrem slight case satisfi solv took less second memori usag never exceed megabyt lastli result bddbase model check smv given properti separ complet one verif other time one hour wall clock time smv run somerset comput network allow unimped access cpu run on still circumst smv abl complet verif sdc specif classic coi specif gave small circuit latch pi smv found specif fals initi state approxim minut even thi howev contrast bmc need second translat specif cnf satisfi solver need less second check it comparison bdd base model check use reflect experi powerpc microprocessor circuit show not first experi interpret evid bdd base model checker cannot handl circuit size given approxim techniqu instanc certain portion circuit delet approxim simpler boolean function still yield true posit invari check could employ verif may gone circumst howev experi run give measur size limit bdd base sat base model check input constraint prove easi reach state violat purport invari note empir mani user bdd base tool much harder build bdd incorrect design correct design theoret explan so may well circuit spec tautolog tran reln init state dlc n n tabl tautolog invari check result circuit spec long k var claus time tabl size measur difficult exampl circuit spec hold fail k dlc dlc n dlc n tabl invari counterexampl smv anoth bdd base model checker could success complet mani properti check version design accur input constraint howev way credit bound model check seem abl handl problem instanc difficult bdd anoth observ design larg number error random digit simul find counterexampl quickli mani commerci formal verif tool first run random digit simul design see properti violat detect easili experi feel like thi too would found quick counterexampl howev show bound model check least power method buggi designsyet bound model check addit capabl conduct exhaust search within certain limit limit big question bound model check whether can will find long coun terexampl clearli advantag bdd base model check bdd built manipul infinit comput path ie loop state graph examin but often mention bdd cannot built manipul case even bound model check cannot run mani time step give exhaust verif time step certainli worth run experi produc inform would answer question expect length counterexampl did verif attempt yield neither counterexampl proof correct simpli time out mean properti check design buggi depth check four bbc spec sdc spec bmc abl go time step respect see tabl thu expect current technolog might limit time step larg design cours could let sat tool run longer undoubtedli would extend number but goal experi tri see one could expect run larg number design verifi much time could spent individu verif felt would replic condit would occur indu tri still even end limit end explor within time step initi state explor done quickli exhaust certain aid find design error industri and cours hope extend limit research lastli result invari check speak themselv believ perform would improv given accur input constraint logic reason believ otherwis yet hard improv exist perform sinc nearli everi invari check complet second verif methodolog experiment result lead us propos autom methodolog check safeti properti industri design follow assum design divid separ block norm hierarch vlsi design methodolog follow annot design block boolean formula requir hold time point call block inner assert annot design block boolean formula describ constraint block input call block input constraint use procedur outlin section check block inner assert input constraint use bound model check satisfi solv methodolog could extend includ monitor satisfact sequenti constraint manner describ input constraint consid context bdd base model check incorpor constraint let us consid proposit input constraint valuat circuit input must alway consist discuss kripk structur section use model digit hardwar system defin unrol transit relat kripk structur formula section incorpor input constraint unrol transit relat shown below assum input constraint given proposit formula c state variabl repres input below speak check invari input constraint mean use formula place formula unrol transit relat safeti properti check procedur step check whether block inner assert p invari input constraint c are check whether p combin tautolog unconstrain k use formula is exit check whether p induct invari unconstrain k use formula is exit check whether p combin tautolog presenc input constraint use formula is go step check whether p induct invari presenc input constraint use formula is go step check bound length counterexampl exist ag p presenc input constraint use formula one found need examin c sinc counterexampl would exist without input constraint counterexampl found go step input constraint may need reformul procedur repeat step check input constraint c pertin design block explain below input constrain one design block a will gener output anoth design block b check as input constraint turn inner assert b check procedur one must take precaut circular reason thi circular reason detect automat howev not therefor barrier methodolog eas carri tautolog invari check indic entir feasibl search counterexampl step may becom costli high k valu howev arbitrarili limit expect design team would set limit formal verif would complement use simul remaind avail resourc conclus summar advantag bound model check follow bound model check entail slight memori cpu usag especi user will push time bound k limit encourag result larger valu k well techniqu extrem fast invari check counterexampl wit minim length make easi understand techniqu lend well autom sinc need littl byhand intervent disadvantag bound model check that present implement limit type properti check clear evid techniqu consist find long counterexampl wit discuss follow current stage develop bound model check alon replac tradit symbol model check techniqu base bdd entir howev combin tradit techniqu bound model check abl handl verif task consist particularli larger design bdd explod bound model check often still abl find design error experi violat certain environ assumpt sinc bound model check rather recent techniqu lot direct futur research use domain knowledg guid search sat procedur new techniqu approach complet especi safeti properti check may possibl combin bound model check reduct techniqu impli theorem mention section lastli combin bound model check partial bdd approach reader may also refer present success heurist choos decis variabl sat procedur context bound model check industri design earli result combin bdd bound model check report see also relat approach effort continu direct expect techniqu success industri arena present constitut thi feel prompt increas interest research area good impel us faster toward valuabl solut r automat verif finiest concurr system use tempor logic specifc verif futur bux cach coher protocol model check abstract model check abstract model check verifi tempor properti sequenti machin without build state diagram comput procedur quantif theori build decis procedur modal logic proposit decis procedur case studi modal model check modular verif intermedi design languag analysi second dimac implement challeng design constraint symbol model check push envelop plan test gener use boolean satisfi design selftim circuit distribut mutual exclus symbol model check approach state explos problem comput theori implement sequenti hardwar equival structurepreserv claus form translat specif verif concurr system cesar analyz powerpc microprocessor silicon failur use model check effici bdd algorithm fsm synthesi verif tune sat checker bound modelcheck search algorithm satisfi problem combin switch circuit algorithm solv boolean satisfi combin circuit combin test gener use satisfi combin decis diagram sat procedur effici symbol model check decis procedur proposit logic sato effici proposit prover tr automat verif finitest concurr system use tempor logic specif graphbas algorithm boolean function manipul structurepreserv claus form translat repres circuit effici symbol model check model check abstract symbol model check model check modular verif model check abstract computeraid verif coordin process intermedi design languag analysi algorithm solv boolean satisfi combin circuit symbol model check use sat procedur instead bdd comput procedur quantif theori symbol model check symbol model check without bdd symbol reachabl analysi base satsolv industri success verif tool base stmyampersandaringlmarck method design constraint symbol model check verifiy safeti properti power pc microprocessor use symbol model check without bdd combin decis diagram sat procedur effici symbol model check tune sat checker bound model check introduct comput theori implement sequenti hardwar equival verifi tempor properti sequenti machin without build state diagram analyz powerpctm microprocessor silicon failur use model check design synthesi synchron skeleton use branchingtim tempor logic verif futurebu cach coher protocol build decis procedur modal logic proposit decis procedur case studi modal k sato ctr wojciech penczek alessio lomuscio verifi epistem properti multiag system via bound model check fundamenta informatica v n p may m kacprzak a lomuscio w penczek bound unbound model check tempor epistem logic fundamenta informatica v n p april alex aiken suhab bugrara isil dillig thoma dillig brian hackett peter hawkin overview saturn project proceed th acm sigplansigsoft workshop program analysi softwar tool engin p june san diego california usa stephani kemper andr platzer satbas abstract refin realtim system electron note theoret comput scienc entc p june wojciech penczek alessio lomuscio verifi epistem properti multiag system via bound model check fundamenta informatica v n p april liang zhang mukul r prasad michael s hsiao thoma sidl dynam abstract use satbas bmc proceed nd annual confer design autom june san diego california usa w penczek a lomuscio verifi epistem properti multiag system via bound model check proceed second intern joint confer autonom agent multiag system juli melbourn australia liang zhang m r prasad m s hsiao increment deduct induct reason satbas bound model check proceed ieeeacm intern confer computeraid design p novemb clark barrett leonardo moura aaron stump design result nd annual satisfi modulo theori competit smtcomp formal method system design v n p decemb indradeep ghosh mukul r prasad techniqu estim difficulti formal verif problem proceed th intern symposium qualiti electron design p march matti jrvisalo tommi junttila ilkka niemel unrestrict vs restrict cut tableau method boolean circuit annal mathemat artifici intellig v n p august dionisio de niz peter h feiler aspect industri standard aadl proceed th intern workshop aspectori model p march vancouv canada boena wona actl properti bound model check fundamenta informatica v n p januari panagioti manolio sudarshan k srinivasan daron vroon automat memori reduct rtl model verif proceed ieeeacm intern confer computeraid design novemb san jose california nadia creignou herv daud john franco sharp threshold renameablehorn qhorn properti discret appli mathemat v n p decemb harald rue leonardo de moura simul verif i simul verif and back proceed th confer winter simul drive innov decemb new orlean louisiana k subramani john argentieri chain program differ constraint nordic journal comput v n p decemb carsten sinz visual sat instanc run dpll algorithm journal autom reason v n p august schafer heik wehrheim challeng build advanc mechatron system futur softwar engin p may miroslav n velev randal e bryant effect use boolean satisfi procedur formal verif superscalar vliw microprocessor journal symbol comput v n p februari alur thao dang franjo ivani predic abstract reachabl analysi hybrid system acm transact embed comput system tec v n p februari tobia schuel klau schneider bound model check infinit state system formal method system design v n p februari henri kautz bart selman state sat discret appli mathemat v n p june luca bordeaux youssef hamadi lintao zhang proposit satisfi constraint program compar survey acm comput survey csur v n pe